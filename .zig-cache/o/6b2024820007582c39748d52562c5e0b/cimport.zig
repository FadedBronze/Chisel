pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8) = @import("std").mem.zeroes(c_longlong),
    __clang_max_align_nonce2: c_longdouble align(16) = @import("std").mem.zeroes(c_longdouble),
};
pub const __u_char = u8;
pub const __u_short = c_ushort;
pub const __u_int = c_uint;
pub const __u_long = c_ulong;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_long;
pub const __uint64_t = c_ulong;
pub const __int_least8_t = __int8_t;
pub const __uint_least8_t = __uint8_t;
pub const __int_least16_t = __int16_t;
pub const __uint_least16_t = __uint16_t;
pub const __int_least32_t = __int32_t;
pub const __uint_least32_t = __uint32_t;
pub const __int_least64_t = __int64_t;
pub const __uint_least64_t = __uint64_t;
pub const __quad_t = c_long;
pub const __u_quad_t = c_ulong;
pub const __intmax_t = c_long;
pub const __uintmax_t = c_ulong;
pub const __dev_t = c_ulong;
pub const __uid_t = c_uint;
pub const __gid_t = c_uint;
pub const __ino_t = c_ulong;
pub const __ino64_t = c_ulong;
pub const __mode_t = c_uint;
pub const __nlink_t = c_ulong;
pub const __off_t = c_long;
pub const __off64_t = c_long;
pub const __pid_t = c_int;
pub const __fsid_t = extern struct {
    __val: [2]c_int = @import("std").mem.zeroes([2]c_int),
};
pub const __clock_t = c_long;
pub const __rlim_t = c_ulong;
pub const __rlim64_t = c_ulong;
pub const __id_t = c_uint;
pub const __time_t = c_long;
pub const __useconds_t = c_uint;
pub const __suseconds_t = c_long;
pub const __suseconds64_t = c_long;
pub const __daddr_t = c_int;
pub const __key_t = c_int;
pub const __clockid_t = c_int;
pub const __timer_t = ?*anyopaque;
pub const __blksize_t = c_long;
pub const __blkcnt_t = c_long;
pub const __blkcnt64_t = c_long;
pub const __fsblkcnt_t = c_ulong;
pub const __fsblkcnt64_t = c_ulong;
pub const __fsfilcnt_t = c_ulong;
pub const __fsfilcnt64_t = c_ulong;
pub const __fsword_t = c_long;
pub const __ssize_t = c_long;
pub const __syscall_slong_t = c_long;
pub const __syscall_ulong_t = c_ulong;
pub const __loff_t = __off64_t;
pub const __caddr_t = [*c]u8;
pub const __intptr_t = c_long;
pub const __socklen_t = c_uint;
pub const __sig_atomic_t = c_int;
pub const int_least8_t = __int_least8_t;
pub const int_least16_t = __int_least16_t;
pub const int_least32_t = __int_least32_t;
pub const int_least64_t = __int_least64_t;
pub const uint_least8_t = __uint_least8_t;
pub const uint_least16_t = __uint_least16_t;
pub const uint_least32_t = __uint_least32_t;
pub const uint_least64_t = __uint_least64_t;
pub const int_fast8_t = i8;
pub const int_fast16_t = c_long;
pub const int_fast32_t = c_long;
pub const int_fast64_t = c_long;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = c_ulong;
pub const uint_fast32_t = c_ulong;
pub const uint_fast64_t = c_ulong;
pub const intmax_t = __intmax_t;
pub const uintmax_t = __uintmax_t;
pub const GLenum = c_uint;
pub const GLbitfield = c_uint;
pub const GLuint = c_uint;
pub const GLint = c_int;
pub const GLsizei = c_int;
pub const GLboolean = u8;
pub const GLbyte = i8;
pub const GLshort = c_short;
pub const GLubyte = u8;
pub const GLushort = c_ushort;
pub const GLulong = c_ulong;
pub const GLfloat = f32;
pub const GLclampf = f32;
pub const GLdouble = f64;
pub const GLclampd = f64;
pub const GLvoid = anyopaque;
pub const GLint64EXT = i64;
pub const GLuint64EXT = u64;
pub const GLint64 = GLint64EXT;
pub const GLuint64 = GLuint64EXT;
pub const struct___GLsync = opaque {};
pub const GLsync = ?*struct___GLsync;
pub const GLchar = u8;
pub const GLeglImageOES = ?*anyopaque;
pub extern fn glAccum(op: GLenum, value: GLfloat) void;
pub extern fn glAlphaFunc(func: GLenum, ref: GLclampf) void;
pub extern fn glAreTexturesResident(n: GLsizei, textures: [*c]const GLuint, residences: [*c]GLboolean) GLboolean;
pub extern fn glArrayElement(i: GLint) void;
pub extern fn glBegin(mode: GLenum) void;
pub extern fn glBindTexture(target: GLenum, texture: GLuint) void;
pub extern fn glBitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: [*c]const GLubyte) void;
pub extern fn glBlendFunc(sfactor: GLenum, dfactor: GLenum) void;
pub extern fn glCallList(list: GLuint) void;
pub extern fn glCallLists(n: GLsizei, @"type": GLenum, lists: ?*const anyopaque) void;
pub extern fn glClear(mask: GLbitfield) void;
pub extern fn glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern fn glClearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) void;
pub extern fn glClearDepth(depth: GLclampd) void;
pub extern fn glClearIndex(c: GLfloat) void;
pub extern fn glClearStencil(s: GLint) void;
pub extern fn glClipPlane(plane: GLenum, equation: [*c]const GLdouble) void;
pub extern fn glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) void;
pub extern fn glColor3bv(v: [*c]const GLbyte) void;
pub extern fn glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) void;
pub extern fn glColor3dv(v: [*c]const GLdouble) void;
pub extern fn glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) void;
pub extern fn glColor3fv(v: [*c]const GLfloat) void;
pub extern fn glColor3i(red: GLint, green: GLint, blue: GLint) void;
pub extern fn glColor3iv(v: [*c]const GLint) void;
pub extern fn glColor3s(red: GLshort, green: GLshort, blue: GLshort) void;
pub extern fn glColor3sv(v: [*c]const GLshort) void;
pub extern fn glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) void;
pub extern fn glColor3ubv(v: [*c]const GLubyte) void;
pub extern fn glColor3ui(red: GLuint, green: GLuint, blue: GLuint) void;
pub extern fn glColor3uiv(v: [*c]const GLuint) void;
pub extern fn glColor3us(red: GLushort, green: GLushort, blue: GLushort) void;
pub extern fn glColor3usv(v: [*c]const GLushort) void;
pub extern fn glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) void;
pub extern fn glColor4bv(v: [*c]const GLbyte) void;
pub extern fn glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) void;
pub extern fn glColor4dv(v: [*c]const GLdouble) void;
pub extern fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern fn glColor4fv(v: [*c]const GLfloat) void;
pub extern fn glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) void;
pub extern fn glColor4iv(v: [*c]const GLint) void;
pub extern fn glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) void;
pub extern fn glColor4sv(v: [*c]const GLshort) void;
pub extern fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) void;
pub extern fn glColor4ubv(v: [*c]const GLubyte) void;
pub extern fn glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) void;
pub extern fn glColor4uiv(v: [*c]const GLuint) void;
pub extern fn glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) void;
pub extern fn glColor4usv(v: [*c]const GLushort) void;
pub extern fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) void;
pub extern fn glColorMaterial(face: GLenum, mode: GLenum) void;
pub extern fn glColorPointer(size: GLint, @"type": GLenum, stride: GLsizei, pointer: ?*const anyopaque) void;
pub extern fn glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, @"type": GLenum) void;
pub extern fn glCopyTexImage1D(target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) void;
pub extern fn glCopyTexImage2D(target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) void;
pub extern fn glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glCullFace(mode: GLenum) void;
pub extern fn glDeleteLists(list: GLuint, range: GLsizei) void;
pub extern fn glDeleteTextures(n: GLsizei, textures: [*c]const GLuint) void;
pub extern fn glDepthFunc(func: GLenum) void;
pub extern fn glDepthMask(flag: GLboolean) void;
pub extern fn glDepthRange(zNear: GLclampd, zFar: GLclampd) void;
pub extern fn glDisable(cap: GLenum) void;
pub extern fn glDisableClientState(array: GLenum) void;
pub extern fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) void;
pub extern fn glDrawBuffer(mode: GLenum) void;
pub extern fn glDrawElements(mode: GLenum, count: GLsizei, @"type": GLenum, indices: ?*const anyopaque) void;
pub extern fn glDrawPixels(width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*const anyopaque) void;
pub extern fn glEdgeFlag(flag: GLboolean) void;
pub extern fn glEdgeFlagPointer(stride: GLsizei, pointer: ?*const anyopaque) void;
pub extern fn glEdgeFlagv(flag: [*c]const GLboolean) void;
pub extern fn glEnable(cap: GLenum) void;
pub extern fn glEnableClientState(array: GLenum) void;
pub extern fn glEnd() void;
pub extern fn glEndList() void;
pub extern fn glEvalCoord1d(u: GLdouble) void;
pub extern fn glEvalCoord1dv(u: [*c]const GLdouble) void;
pub extern fn glEvalCoord1f(u: GLfloat) void;
pub extern fn glEvalCoord1fv(u: [*c]const GLfloat) void;
pub extern fn glEvalCoord2d(u: GLdouble, v: GLdouble) void;
pub extern fn glEvalCoord2dv(u: [*c]const GLdouble) void;
pub extern fn glEvalCoord2f(u: GLfloat, v: GLfloat) void;
pub extern fn glEvalCoord2fv(u: [*c]const GLfloat) void;
pub extern fn glEvalMesh1(mode: GLenum, @"i1": GLint, @"i2": GLint) void;
pub extern fn glEvalMesh2(mode: GLenum, @"i1": GLint, @"i2": GLint, j1: GLint, j2: GLint) void;
pub extern fn glEvalPoint1(i: GLint) void;
pub extern fn glEvalPoint2(i: GLint, j: GLint) void;
pub extern fn glFeedbackBuffer(size: GLsizei, @"type": GLenum, buffer: [*c]GLfloat) void;
pub extern fn glFinish() void;
pub extern fn glFlush() void;
pub extern fn glFogf(pname: GLenum, param: GLfloat) void;
pub extern fn glFogfv(pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glFogi(pname: GLenum, param: GLint) void;
pub extern fn glFogiv(pname: GLenum, params: [*c]const GLint) void;
pub extern fn glFrontFace(mode: GLenum) void;
pub extern fn glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) void;
pub extern fn glGenLists(range: GLsizei) GLuint;
pub extern fn glGenTextures(n: GLsizei, textures: [*c]GLuint) void;
pub extern fn glGetBooleanv(pname: GLenum, params: [*c]GLboolean) void;
pub extern fn glGetClipPlane(plane: GLenum, equation: [*c]GLdouble) void;
pub extern fn glGetDoublev(pname: GLenum, params: [*c]GLdouble) void;
pub extern fn glGetError() GLenum;
pub extern fn glGetFloatv(pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetIntegerv(pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetLightfv(light: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetLightiv(light: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetMapdv(target: GLenum, query: GLenum, v: [*c]GLdouble) void;
pub extern fn glGetMapfv(target: GLenum, query: GLenum, v: [*c]GLfloat) void;
pub extern fn glGetMapiv(target: GLenum, query: GLenum, v: [*c]GLint) void;
pub extern fn glGetMaterialfv(face: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetMaterialiv(face: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetPixelMapfv(map: GLenum, values: [*c]GLfloat) void;
pub extern fn glGetPixelMapuiv(map: GLenum, values: [*c]GLuint) void;
pub extern fn glGetPixelMapusv(map: GLenum, values: [*c]GLushort) void;
pub extern fn glGetPointerv(pname: GLenum, params: [*c]?*anyopaque) void;
pub extern fn glGetPolygonStipple(mask: [*c]GLubyte) void;
pub extern fn glGetString(name: GLenum) [*c]const GLubyte;
pub extern fn glGetTexEnvfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexEnviv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetTexGendv(coord: GLenum, pname: GLenum, params: [*c]GLdouble) void;
pub extern fn glGetTexGenfv(coord: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexGeniv(coord: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetTexImage(target: GLenum, level: GLint, format: GLenum, @"type": GLenum, pixels: ?*anyopaque) void;
pub extern fn glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glHint(target: GLenum, mode: GLenum) void;
pub extern fn glIndexMask(mask: GLuint) void;
pub extern fn glIndexPointer(@"type": GLenum, stride: GLsizei, pointer: ?*const anyopaque) void;
pub extern fn glIndexd(c: GLdouble) void;
pub extern fn glIndexdv(c: [*c]const GLdouble) void;
pub extern fn glIndexf(c: GLfloat) void;
pub extern fn glIndexfv(c: [*c]const GLfloat) void;
pub extern fn glIndexi(c: GLint) void;
pub extern fn glIndexiv(c: [*c]const GLint) void;
pub extern fn glIndexs(c: GLshort) void;
pub extern fn glIndexsv(c: [*c]const GLshort) void;
pub extern fn glIndexub(c: GLubyte) void;
pub extern fn glIndexubv(c: [*c]const GLubyte) void;
pub extern fn glInitNames() void;
pub extern fn glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: ?*const anyopaque) void;
pub extern fn glIsEnabled(cap: GLenum) GLboolean;
pub extern fn glIsList(list: GLuint) GLboolean;
pub extern fn glIsTexture(texture: GLuint) GLboolean;
pub extern fn glLightModelf(pname: GLenum, param: GLfloat) void;
pub extern fn glLightModelfv(pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glLightModeli(pname: GLenum, param: GLint) void;
pub extern fn glLightModeliv(pname: GLenum, params: [*c]const GLint) void;
pub extern fn glLightf(light: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glLightfv(light: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glLighti(light: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glLightiv(light: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glLineStipple(factor: GLint, pattern: GLushort) void;
pub extern fn glLineWidth(width: GLfloat) void;
pub extern fn glListBase(base: GLuint) void;
pub extern fn glLoadIdentity() void;
pub extern fn glLoadMatrixd(m: [*c]const GLdouble) void;
pub extern fn glLoadMatrixf(m: [*c]const GLfloat) void;
pub extern fn glLoadName(name: GLuint) void;
pub extern fn glLogicOp(opcode: GLenum) void;
pub extern fn glMap1d(target: GLenum, @"u1": GLdouble, @"u2": GLdouble, stride: GLint, order: GLint, points: [*c]const GLdouble) void;
pub extern fn glMap1f(target: GLenum, @"u1": GLfloat, @"u2": GLfloat, stride: GLint, order: GLint, points: [*c]const GLfloat) void;
pub extern fn glMap2d(target: GLenum, @"u1": GLdouble, @"u2": GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: [*c]const GLdouble) void;
pub extern fn glMap2f(target: GLenum, @"u1": GLfloat, @"u2": GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: [*c]const GLfloat) void;
pub extern fn glMapGrid1d(un: GLint, @"u1": GLdouble, @"u2": GLdouble) void;
pub extern fn glMapGrid1f(un: GLint, @"u1": GLfloat, @"u2": GLfloat) void;
pub extern fn glMapGrid2d(un: GLint, @"u1": GLdouble, @"u2": GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) void;
pub extern fn glMapGrid2f(un: GLint, @"u1": GLfloat, @"u2": GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) void;
pub extern fn glMaterialf(face: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glMaterialfv(face: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glMateriali(face: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glMaterialiv(face: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glMatrixMode(mode: GLenum) void;
pub extern fn glMultMatrixd(m: [*c]const GLdouble) void;
pub extern fn glMultMatrixf(m: [*c]const GLfloat) void;
pub extern fn glNewList(list: GLuint, mode: GLenum) void;
pub extern fn glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) void;
pub extern fn glNormal3bv(v: [*c]const GLbyte) void;
pub extern fn glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) void;
pub extern fn glNormal3dv(v: [*c]const GLdouble) void;
pub extern fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) void;
pub extern fn glNormal3fv(v: [*c]const GLfloat) void;
pub extern fn glNormal3i(nx: GLint, ny: GLint, nz: GLint) void;
pub extern fn glNormal3iv(v: [*c]const GLint) void;
pub extern fn glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort) void;
pub extern fn glNormal3sv(v: [*c]const GLshort) void;
pub extern fn glNormalPointer(@"type": GLenum, stride: GLsizei, pointer: ?*const anyopaque) void;
pub extern fn glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) void;
pub extern fn glPassThrough(token: GLfloat) void;
pub extern fn glPixelMapfv(map: GLenum, mapsize: GLsizei, values: [*c]const GLfloat) void;
pub extern fn glPixelMapuiv(map: GLenum, mapsize: GLsizei, values: [*c]const GLuint) void;
pub extern fn glPixelMapusv(map: GLenum, mapsize: GLsizei, values: [*c]const GLushort) void;
pub extern fn glPixelStoref(pname: GLenum, param: GLfloat) void;
pub extern fn glPixelStorei(pname: GLenum, param: GLint) void;
pub extern fn glPixelTransferf(pname: GLenum, param: GLfloat) void;
pub extern fn glPixelTransferi(pname: GLenum, param: GLint) void;
pub extern fn glPixelZoom(xfactor: GLfloat, yfactor: GLfloat) void;
pub extern fn glPointSize(size: GLfloat) void;
pub extern fn glPolygonMode(face: GLenum, mode: GLenum) void;
pub extern fn glPolygonOffset(factor: GLfloat, units: GLfloat) void;
pub extern fn glPolygonStipple(mask: [*c]const GLubyte) void;
pub extern fn glPopAttrib() void;
pub extern fn glPopClientAttrib() void;
pub extern fn glPopMatrix() void;
pub extern fn glPopName() void;
pub extern fn glPrioritizeTextures(n: GLsizei, textures: [*c]const GLuint, priorities: [*c]const GLclampf) void;
pub extern fn glPushAttrib(mask: GLbitfield) void;
pub extern fn glPushClientAttrib(mask: GLbitfield) void;
pub extern fn glPushMatrix() void;
pub extern fn glPushName(name: GLuint) void;
pub extern fn glRasterPos2d(x: GLdouble, y: GLdouble) void;
pub extern fn glRasterPos2dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos2f(x: GLfloat, y: GLfloat) void;
pub extern fn glRasterPos2fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos2i(x: GLint, y: GLint) void;
pub extern fn glRasterPos2iv(v: [*c]const GLint) void;
pub extern fn glRasterPos2s(x: GLshort, y: GLshort) void;
pub extern fn glRasterPos2sv(v: [*c]const GLshort) void;
pub extern fn glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glRasterPos3dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glRasterPos3fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos3i(x: GLint, y: GLint, z: GLint) void;
pub extern fn glRasterPos3iv(v: [*c]const GLint) void;
pub extern fn glRasterPos3s(x: GLshort, y: GLshort, z: GLshort) void;
pub extern fn glRasterPos3sv(v: [*c]const GLshort) void;
pub extern fn glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
pub extern fn glRasterPos4dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern fn glRasterPos4fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
pub extern fn glRasterPos4iv(v: [*c]const GLint) void;
pub extern fn glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
pub extern fn glRasterPos4sv(v: [*c]const GLshort) void;
pub extern fn glReadBuffer(mode: GLenum) void;
pub extern fn glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*anyopaque) void;
pub extern fn glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) void;
pub extern fn glRectdv(v1: [*c]const GLdouble, v2: [*c]const GLdouble) void;
pub extern fn glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) void;
pub extern fn glRectfv(v1: [*c]const GLfloat, v2: [*c]const GLfloat) void;
pub extern fn glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) void;
pub extern fn glRectiv(v1: [*c]const GLint, v2: [*c]const GLint) void;
pub extern fn glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) void;
pub extern fn glRectsv(v1: [*c]const GLshort, v2: [*c]const GLshort) void;
pub extern fn glRenderMode(mode: GLenum) GLint;
pub extern fn glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glScaled(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glSelectBuffer(size: GLsizei, buffer: [*c]GLuint) void;
pub extern fn glShadeModel(mode: GLenum) void;
pub extern fn glStencilFunc(func: GLenum, ref: GLint, mask: GLuint) void;
pub extern fn glStencilMask(mask: GLuint) void;
pub extern fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) void;
pub extern fn glTexCoord1d(s: GLdouble) void;
pub extern fn glTexCoord1dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord1f(s: GLfloat) void;
pub extern fn glTexCoord1fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord1i(s: GLint) void;
pub extern fn glTexCoord1iv(v: [*c]const GLint) void;
pub extern fn glTexCoord1s(s: GLshort) void;
pub extern fn glTexCoord1sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord2d(s: GLdouble, t: GLdouble) void;
pub extern fn glTexCoord2dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord2f(s: GLfloat, t: GLfloat) void;
pub extern fn glTexCoord2fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord2i(s: GLint, t: GLint) void;
pub extern fn glTexCoord2iv(v: [*c]const GLint) void;
pub extern fn glTexCoord2s(s: GLshort, t: GLshort) void;
pub extern fn glTexCoord2sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) void;
pub extern fn glTexCoord3dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) void;
pub extern fn glTexCoord3fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord3i(s: GLint, t: GLint, r: GLint) void;
pub extern fn glTexCoord3iv(v: [*c]const GLint) void;
pub extern fn glTexCoord3s(s: GLshort, t: GLshort, r: GLshort) void;
pub extern fn glTexCoord3sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
pub extern fn glTexCoord4dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
pub extern fn glTexCoord4fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) void;
pub extern fn glTexCoord4iv(v: [*c]const GLint) void;
pub extern fn glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
pub extern fn glTexCoord4sv(v: [*c]const GLshort) void;
pub extern fn glTexCoordPointer(size: GLint, @"type": GLenum, stride: GLsizei, pointer: ?*const anyopaque) void;
pub extern fn glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexEnvfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexEnvi(target: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexEnviv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glTexGend(coord: GLenum, pname: GLenum, param: GLdouble) void;
pub extern fn glTexGendv(coord: GLenum, pname: GLenum, params: [*c]const GLdouble) void;
pub extern fn glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexGenfv(coord: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexGeni(coord: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexGeniv(coord: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glTexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, @"type": GLenum, pixels: ?*const anyopaque) void;
pub extern fn glTexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, @"type": GLenum, pixels: ?*const anyopaque) void;
pub extern fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*const anyopaque) void;
pub extern fn glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*const anyopaque) void;
pub extern fn glTranslated(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glVertex2d(x: GLdouble, y: GLdouble) void;
pub extern fn glVertex2dv(v: [*c]const GLdouble) void;
pub extern fn glVertex2f(x: GLfloat, y: GLfloat) void;
pub extern fn glVertex2fv(v: [*c]const GLfloat) void;
pub extern fn glVertex2i(x: GLint, y: GLint) void;
pub extern fn glVertex2iv(v: [*c]const GLint) void;
pub extern fn glVertex2s(x: GLshort, y: GLshort) void;
pub extern fn glVertex2sv(v: [*c]const GLshort) void;
pub extern fn glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glVertex3dv(v: [*c]const GLdouble) void;
pub extern fn glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glVertex3fv(v: [*c]const GLfloat) void;
pub extern fn glVertex3i(x: GLint, y: GLint, z: GLint) void;
pub extern fn glVertex3iv(v: [*c]const GLint) void;
pub extern fn glVertex3s(x: GLshort, y: GLshort, z: GLshort) void;
pub extern fn glVertex3sv(v: [*c]const GLshort) void;
pub extern fn glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
pub extern fn glVertex4dv(v: [*c]const GLdouble) void;
pub extern fn glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern fn glVertex4fv(v: [*c]const GLfloat) void;
pub extern fn glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
pub extern fn glVertex4iv(v: [*c]const GLint) void;
pub extern fn glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
pub extern fn glVertex4sv(v: [*c]const GLshort) void;
pub extern fn glVertexPointer(size: GLint, @"type": GLenum, stride: GLsizei, pointer: ?*const anyopaque) void;
pub extern fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub const struct_GLUnurbs = opaque {};
pub const GLUnurbs = struct_GLUnurbs;
pub const struct_GLUquadric = opaque {};
pub const GLUquadric = struct_GLUquadric;
pub const struct_GLUtesselator = opaque {};
pub const GLUtesselator = struct_GLUtesselator;
pub const GLUnurbsObj = GLUnurbs;
pub const GLUquadricObj = GLUquadric;
pub const GLUtesselatorObj = GLUtesselator;
pub const GLUtriangulatorObj = GLUtesselator;
pub const _GLUfuncptr = ?*const fn () callconv(.c) void;
pub extern fn gluBeginCurve(nurb: ?*GLUnurbs) void;
pub extern fn gluBeginPolygon(tess: ?*GLUtesselator) void;
pub extern fn gluBeginSurface(nurb: ?*GLUnurbs) void;
pub extern fn gluBeginTrim(nurb: ?*GLUnurbs) void;
pub extern fn gluBuild1DMipmapLevels(target: GLenum, internalFormat: GLint, width: GLsizei, format: GLenum, @"type": GLenum, level: GLint, base: GLint, max: GLint, data: ?*const anyopaque) GLint;
pub extern fn gluBuild1DMipmaps(target: GLenum, internalFormat: GLint, width: GLsizei, format: GLenum, @"type": GLenum, data: ?*const anyopaque) GLint;
pub extern fn gluBuild2DMipmapLevels(target: GLenum, internalFormat: GLint, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, level: GLint, base: GLint, max: GLint, data: ?*const anyopaque) GLint;
pub extern fn gluBuild2DMipmaps(target: GLenum, internalFormat: GLint, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, data: ?*const anyopaque) GLint;
pub extern fn gluBuild3DMipmapLevels(target: GLenum, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, @"type": GLenum, level: GLint, base: GLint, max: GLint, data: ?*const anyopaque) GLint;
pub extern fn gluBuild3DMipmaps(target: GLenum, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, @"type": GLenum, data: ?*const anyopaque) GLint;
pub extern fn gluCheckExtension(extName: [*c]const GLubyte, extString: [*c]const GLubyte) GLboolean;
pub extern fn gluCylinder(quad: ?*GLUquadric, base: GLdouble, top: GLdouble, height: GLdouble, slices: GLint, stacks: GLint) void;
pub extern fn gluDeleteNurbsRenderer(nurb: ?*GLUnurbs) void;
pub extern fn gluDeleteQuadric(quad: ?*GLUquadric) void;
pub extern fn gluDeleteTess(tess: ?*GLUtesselator) void;
pub extern fn gluDisk(quad: ?*GLUquadric, inner: GLdouble, outer: GLdouble, slices: GLint, loops: GLint) void;
pub extern fn gluEndCurve(nurb: ?*GLUnurbs) void;
pub extern fn gluEndPolygon(tess: ?*GLUtesselator) void;
pub extern fn gluEndSurface(nurb: ?*GLUnurbs) void;
pub extern fn gluEndTrim(nurb: ?*GLUnurbs) void;
pub extern fn gluErrorString(@"error": GLenum) [*c]const GLubyte;
pub extern fn gluGetNurbsProperty(nurb: ?*GLUnurbs, property: GLenum, data: [*c]GLfloat) void;
pub extern fn gluGetString(name: GLenum) [*c]const GLubyte;
pub extern fn gluGetTessProperty(tess: ?*GLUtesselator, which: GLenum, data: [*c]GLdouble) void;
pub extern fn gluLoadSamplingMatrices(nurb: ?*GLUnurbs, model: [*c]const GLfloat, perspective: [*c]const GLfloat, view: [*c]const GLint) void;
pub extern fn gluLookAt(eyeX: GLdouble, eyeY: GLdouble, eyeZ: GLdouble, centerX: GLdouble, centerY: GLdouble, centerZ: GLdouble, upX: GLdouble, upY: GLdouble, upZ: GLdouble) void;
pub extern fn gluNewNurbsRenderer() ?*GLUnurbs;
pub extern fn gluNewQuadric() ?*GLUquadric;
pub extern fn gluNewTess() ?*GLUtesselator;
pub extern fn gluNextContour(tess: ?*GLUtesselator, @"type": GLenum) void;
pub extern fn gluNurbsCallback(nurb: ?*GLUnurbs, which: GLenum, CallBackFunc: _GLUfuncptr) void;
pub extern fn gluNurbsCallbackData(nurb: ?*GLUnurbs, userData: ?*GLvoid) void;
pub extern fn gluNurbsCallbackDataEXT(nurb: ?*GLUnurbs, userData: ?*GLvoid) void;
pub extern fn gluNurbsCurve(nurb: ?*GLUnurbs, knotCount: GLint, knots: [*c]GLfloat, stride: GLint, control: [*c]GLfloat, order: GLint, @"type": GLenum) void;
pub extern fn gluNurbsProperty(nurb: ?*GLUnurbs, property: GLenum, value: GLfloat) void;
pub extern fn gluNurbsSurface(nurb: ?*GLUnurbs, sKnotCount: GLint, sKnots: [*c]GLfloat, tKnotCount: GLint, tKnots: [*c]GLfloat, sStride: GLint, tStride: GLint, control: [*c]GLfloat, sOrder: GLint, tOrder: GLint, @"type": GLenum) void;
pub extern fn gluOrtho2D(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble) void;
pub extern fn gluPartialDisk(quad: ?*GLUquadric, inner: GLdouble, outer: GLdouble, slices: GLint, loops: GLint, start: GLdouble, sweep: GLdouble) void;
pub extern fn gluPerspective(fovy: GLdouble, aspect: GLdouble, zNear: GLdouble, zFar: GLdouble) void;
pub extern fn gluPickMatrix(x: GLdouble, y: GLdouble, delX: GLdouble, delY: GLdouble, viewport: [*c]GLint) void;
pub extern fn gluProject(objX: GLdouble, objY: GLdouble, objZ: GLdouble, model: [*c]const GLdouble, proj: [*c]const GLdouble, view: [*c]const GLint, winX: [*c]GLdouble, winY: [*c]GLdouble, winZ: [*c]GLdouble) GLint;
pub extern fn gluPwlCurve(nurb: ?*GLUnurbs, count: GLint, data: [*c]GLfloat, stride: GLint, @"type": GLenum) void;
pub extern fn gluQuadricCallback(quad: ?*GLUquadric, which: GLenum, CallBackFunc: _GLUfuncptr) void;
pub extern fn gluQuadricDrawStyle(quad: ?*GLUquadric, draw: GLenum) void;
pub extern fn gluQuadricNormals(quad: ?*GLUquadric, normal: GLenum) void;
pub extern fn gluQuadricOrientation(quad: ?*GLUquadric, orientation: GLenum) void;
pub extern fn gluQuadricTexture(quad: ?*GLUquadric, texture: GLboolean) void;
pub extern fn gluScaleImage(format: GLenum, wIn: GLsizei, hIn: GLsizei, typeIn: GLenum, dataIn: ?*const anyopaque, wOut: GLsizei, hOut: GLsizei, typeOut: GLenum, dataOut: ?*GLvoid) GLint;
pub extern fn gluSphere(quad: ?*GLUquadric, radius: GLdouble, slices: GLint, stacks: GLint) void;
pub extern fn gluTessBeginContour(tess: ?*GLUtesselator) void;
pub extern fn gluTessBeginPolygon(tess: ?*GLUtesselator, data: ?*GLvoid) void;
pub extern fn gluTessCallback(tess: ?*GLUtesselator, which: GLenum, CallBackFunc: _GLUfuncptr) void;
pub extern fn gluTessEndContour(tess: ?*GLUtesselator) void;
pub extern fn gluTessEndPolygon(tess: ?*GLUtesselator) void;
pub extern fn gluTessNormal(tess: ?*GLUtesselator, valueX: GLdouble, valueY: GLdouble, valueZ: GLdouble) void;
pub extern fn gluTessProperty(tess: ?*GLUtesselator, which: GLenum, data: GLdouble) void;
pub extern fn gluTessVertex(tess: ?*GLUtesselator, location: [*c]GLdouble, data: ?*GLvoid) void;
pub extern fn gluUnProject(winX: GLdouble, winY: GLdouble, winZ: GLdouble, model: [*c]const GLdouble, proj: [*c]const GLdouble, view: [*c]const GLint, objX: [*c]GLdouble, objY: [*c]GLdouble, objZ: [*c]GLdouble) GLint;
pub extern fn gluUnProject4(winX: GLdouble, winY: GLdouble, winZ: GLdouble, clipW: GLdouble, model: [*c]const GLdouble, proj: [*c]const GLdouble, view: [*c]const GLint, nearVal: GLdouble, farVal: GLdouble, objX: [*c]GLdouble, objY: [*c]GLdouble, objZ: [*c]GLdouble, objW: [*c]GLdouble) GLint;
pub const PFNGLCOPYTEXSUBIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLDRAWRANGEELEMENTSPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXSUBIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLACTIVETEXTUREPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLCLIENTACTIVETEXTUREPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEPROC = ?*const fn (GLenum, GLint, ?*anyopaque) callconv(.c) void;
pub const PFNGLLOADTRANSPOSEMATRIXDPROC = ?*const fn ([*c]const GLdouble) callconv(.c) void;
pub const PFNGLLOADTRANSPOSEMATRIXFPROC = ?*const fn ([*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTTRANSPOSEMATRIXDPROC = ?*const fn ([*c]const GLdouble) callconv(.c) void;
pub const PFNGLMULTTRANSPOSEMATRIXFPROC = ?*const fn ([*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1DPROC = ?*const fn (GLenum, GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1DVPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1FPROC = ?*const fn (GLenum, GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1FVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1IPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1IVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1SPROC = ?*const fn (GLenum, GLshort) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1SVPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2DPROC = ?*const fn (GLenum, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2DVPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2FPROC = ?*const fn (GLenum, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2FVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2IPROC = ?*const fn (GLenum, GLint, GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2IVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2SPROC = ?*const fn (GLenum, GLshort, GLshort) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2SVPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3DPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3DVPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3FPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3FVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3IPROC = ?*const fn (GLenum, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3IVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3SPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3SVPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4DPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4DVPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4FPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4FVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4IPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4IVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4SPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4SVPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.c) void;
pub const PFNGLSAMPLECOVERAGEPROC = ?*const fn (GLclampf, GLboolean) callconv(.c) void;
pub const PFNGLBLENDCOLORPROC = ?*const fn (GLclampf, GLclampf, GLclampf, GLclampf) callconv(.c) void;
pub const PFNGLBLENDEQUATIONPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCSEPARATEPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLFOGCOORDPOINTERPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLFOGCOORDDPROC = ?*const fn (GLdouble) callconv(.c) void;
pub const PFNGLFOGCOORDDVPROC = ?*const fn ([*c]const GLdouble) callconv(.c) void;
pub const PFNGLFOGCOORDFPROC = ?*const fn (GLfloat) callconv(.c) void;
pub const PFNGLFOGCOORDFVPROC = ?*const fn ([*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTIDRAWARRAYSPROC = ?*const fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLMULTIDRAWELEMENTSPROC = ?*const fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei) callconv(.c) void;
pub const PFNGLPOINTPARAMETERFPROC = ?*const fn (GLenum, GLfloat) callconv(.c) void;
pub const PFNGLPOINTPARAMETERFVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPOINTPARAMETERIPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLPOINTPARAMETERIVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3BPROC = ?*const fn (GLbyte, GLbyte, GLbyte) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3BVPROC = ?*const fn ([*c]const GLbyte) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3DPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3DVPROC = ?*const fn ([*c]const GLdouble) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3FPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3FVPROC = ?*const fn ([*c]const GLfloat) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3IPROC = ?*const fn (GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3IVPROC = ?*const fn ([*c]const GLint) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3SPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3SVPROC = ?*const fn ([*c]const GLshort) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3UBPROC = ?*const fn (GLubyte, GLubyte, GLubyte) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3UBVPROC = ?*const fn ([*c]const GLubyte) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3UIPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3UIVPROC = ?*const fn ([*c]const GLuint) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3USPROC = ?*const fn (GLushort, GLushort, GLushort) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3USVPROC = ?*const fn ([*c]const GLushort) callconv(.c) void;
pub const PFNGLSECONDARYCOLORPOINTERPROC = ?*const fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLWINDOWPOS2DPROC = ?*const fn (GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLWINDOWPOS2DVPROC = ?*const fn ([*c]const GLdouble) callconv(.c) void;
pub const PFNGLWINDOWPOS2FPROC = ?*const fn (GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLWINDOWPOS2FVPROC = ?*const fn ([*c]const GLfloat) callconv(.c) void;
pub const PFNGLWINDOWPOS2IPROC = ?*const fn (GLint, GLint) callconv(.c) void;
pub const PFNGLWINDOWPOS2IVPROC = ?*const fn ([*c]const GLint) callconv(.c) void;
pub const PFNGLWINDOWPOS2SPROC = ?*const fn (GLshort, GLshort) callconv(.c) void;
pub const PFNGLWINDOWPOS2SVPROC = ?*const fn ([*c]const GLshort) callconv(.c) void;
pub const PFNGLWINDOWPOS3DPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLWINDOWPOS3DVPROC = ?*const fn ([*c]const GLdouble) callconv(.c) void;
pub const PFNGLWINDOWPOS3FPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLWINDOWPOS3FVPROC = ?*const fn ([*c]const GLfloat) callconv(.c) void;
pub const PFNGLWINDOWPOS3IPROC = ?*const fn (GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLWINDOWPOS3IVPROC = ?*const fn ([*c]const GLint) callconv(.c) void;
pub const PFNGLWINDOWPOS3SPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLWINDOWPOS3SVPROC = ?*const fn ([*c]const GLshort) callconv(.c) void;
pub const GLintptr = ptrdiff_t;
pub const GLsizeiptr = ptrdiff_t;
pub const PFNGLBEGINQUERYPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLBINDBUFFERPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLBUFFERDATAPROC = ?*const fn (GLenum, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.c) void;
pub const PFNGLBUFFERSUBDATAPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.c) void;
pub const PFNGLDELETEBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLDELETEQUERIESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLENDQUERYPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLGENBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGENQUERIESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETBUFFERPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETBUFFERPOINTERVPROC = ?*const fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLGETBUFFERSUBDATAPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETQUERYIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISBUFFERPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLISQUERYPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLMAPBUFFERPROC = ?*const fn (GLenum, GLenum) callconv(.c) ?*anyopaque;
pub const PFNGLUNMAPBUFFERPROC = ?*const fn (GLenum) callconv(.c) GLboolean;
pub const PFNGLATTACHSHADERPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLBINDATTRIBLOCATIONPROC = ?*const fn (GLuint, GLuint, [*c]const GLchar) callconv(.c) void;
pub const PFNGLBLENDEQUATIONSEPARATEPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLCOMPILESHADERPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLCREATEPROGRAMPROC = ?*const fn () callconv(.c) GLuint;
pub const PFNGLCREATESHADERPROC = ?*const fn (GLenum) callconv(.c) GLuint;
pub const PFNGLDELETEPROGRAMPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDELETESHADERPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDETACHSHADERPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDRAWBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.c) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGETACTIVEATTRIBPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETACTIVEUNIFORMPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETATTACHEDSHADERSPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETATTRIBLOCATIONPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.c) GLint;
pub const PFNGLGETPROGRAMINFOLOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETPROGRAMIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETSHADERINFOLOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETSHADERSOURCEPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETSHADERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETUNIFORMLOCATIONPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.c) GLint;
pub const PFNGLGETUNIFORMFVPROC = ?*const fn (GLuint, GLint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETUNIFORMIVPROC = ?*const fn (GLuint, GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBDVPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBFVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISPROGRAMPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLISSHADERPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLLINKPROGRAMPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLSHADERSOURCEPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.c) void;
pub const PFNGLSTENCILFUNCSEPARATEPROC = ?*const fn (GLenum, GLenum, GLint, GLuint) callconv(.c) void;
pub const PFNGLSTENCILMASKSEPARATEPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLSTENCILOPSEPARATEPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLUNIFORM1FPROC = ?*const fn (GLint, GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM1FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM1IPROC = ?*const fn (GLint, GLint) callconv(.c) void;
pub const PFNGLUNIFORM1IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLUNIFORM2FPROC = ?*const fn (GLint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM2FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM2IPROC = ?*const fn (GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLUNIFORM2IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLUNIFORM3FPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM3FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM3IPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLUNIFORM3IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLUNIFORM4FPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM4FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM4IPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLUNIFORM4IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX2FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX3FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX4FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUSEPROGRAMPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLVALIDATEPROGRAMPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1DPROC = ?*const fn (GLuint, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1FPROC = ?*const fn (GLuint, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1SPROC = ?*const fn (GLuint, GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2DPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2FPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2SPROC = ?*const fn (GLuint, GLshort, GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3FPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3SPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4NBVPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4NIVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4NSVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4NUBPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4NUBVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4NUIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4NUSVPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4BVPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4FPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4SPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4UBVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4USVPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.c) void;
pub const PFNGLVERTEXATTRIBPOINTERPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX2X3FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX2X4FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX3X2FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX3X4FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX4X2FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX4X3FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLBEGINCONDITIONALRENDERPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLBINDFRAGDATALOCATIONPROC = ?*const fn (GLuint, GLuint, [*c]const GLchar) callconv(.c) void;
pub const PFNGLCLAMPCOLORPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLCLEARBUFFERFIPROC = ?*const fn (GLenum, GLint, GLfloat, GLint) callconv(.c) void;
pub const PFNGLCLEARBUFFERFVPROC = ?*const fn (GLenum, GLint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCLEARBUFFERIVPROC = ?*const fn (GLenum, GLint, [*c]const GLint) callconv(.c) void;
pub const PFNGLCLEARBUFFERUIVPROC = ?*const fn (GLenum, GLint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLCOLORMASKIPROC = ?*const fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.c) void;
pub const PFNGLDISABLEIPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLENABLEIPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLENDCONDITIONALRENDERPROC = ?*const fn () callconv(.c) void;
pub const PFNGLENDTRANSFORMFEEDBACKPROC = ?*const fn () callconv(.c) void;
pub const PFNGLGETBOOLEANI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLboolean) callconv(.c) void;
pub const PFNGLGETFRAGDATALOCATIONPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.c) GLint;
pub const PFNGLGETSTRINGIPROC = ?*const fn (GLenum, GLuint) callconv(.c) [*c]const GLubyte;
pub const PFNGLGETTEXPARAMETERIIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETTEXPARAMETERIUIVPROC = ?*const fn (GLenum, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETUNIFORMUIVPROC = ?*const fn (GLuint, GLint, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBIIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBIUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLISENABLEDIPROC = ?*const fn (GLenum, GLuint) callconv(.c) GLboolean;
pub const PFNGLTEXPARAMETERIIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLTEXPARAMETERIUIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.c) void;
pub const PFNGLUNIFORM1UIPROC = ?*const fn (GLint, GLuint) callconv(.c) void;
pub const PFNGLUNIFORM1UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLUNIFORM2UIPROC = ?*const fn (GLint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLUNIFORM2UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLUNIFORM3UIPROC = ?*const fn (GLint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLUNIFORM3UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLUNIFORM4UIPROC = ?*const fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLUNIFORM4UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI1IPROC = ?*const fn (GLuint, GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI1IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI1UIPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI1UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI2IPROC = ?*const fn (GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI2IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI2UIPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI2UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI3IPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI3IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI3UIPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI3UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4BVPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4IPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4UBVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4UIPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4USVPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.c) void;
pub const PFNGLVERTEXATTRIBIPOINTERPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLDRAWARRAYSINSTANCEDPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.c) void;
pub const PFNGLPRIMITIVERESTARTINDEXPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLTEXBUFFERPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTUREPROC = ?*const fn (GLenum, GLenum, GLuint, GLint) callconv(.c) void;
pub const PFNGLGETBUFFERPARAMETERI64VPROC = ?*const fn (GLenum, GLenum, [*c]GLint64) callconv(.c) void;
pub const PFNGLGETINTEGER64I_VPROC = ?*const fn (GLenum, GLuint, [*c]GLint64) callconv(.c) void;
pub const PFNGLVERTEXATTRIBDIVISORPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLBLENDEQUATIONSEPARATEIPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDEQUATIONIPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCSEPARATEIPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCIPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLMINSAMPLESHADINGPROC = ?*const fn (GLclampf) callconv(.c) void;
pub const PFNGLGETGRAPHICSRESETSTATUSPROC = ?*const fn () callconv(.c) GLenum;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEPROC = ?*const fn (GLenum, GLint, GLsizei, ?*GLvoid) callconv(.c) void;
pub const PFNGLGETNTEXIMAGEPROC = ?*const fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*GLvoid) callconv(.c) void;
pub const PFNGLGETNUNIFORMDVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.c) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC = ?*const fn (GLenum, ?*const GLvoid, GLintptr, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC = ?*const fn (GLenum, GLenum, ?*const GLvoid, GLintptr, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLSPECIALIZESHADERPROC = ?*const fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLTBUFFERMASK3DFXPROC = ?*const fn (GLuint) callconv(.c) void;
pub const GLDEBUGPROCAMD = ?*const fn (GLuint, GLenum, GLenum, GLsizei, [*c]const GLchar, ?*anyopaque) callconv(.c) void;
pub const PFNGLDEBUGMESSAGECALLBACKAMDPROC = ?*const fn (GLDEBUGPROCAMD, ?*anyopaque) callconv(.c) void;
pub const PFNGLDEBUGMESSAGEENABLEAMDPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.c) void;
pub const PFNGLDEBUGMESSAGEINSERTAMDPROC = ?*const fn (GLenum, GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLGETDEBUGMESSAGELOGAMDPROC = ?*const fn (GLuint, GLsizei, [*c]GLenum, [*c]GLuint, [*c]GLuint, [*c]GLsizei, [*c]GLchar) callconv(.c) GLuint;
pub const PFNGLBLENDEQUATIONINDEXEDAMDPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCINDEXEDAMDPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?*const fn (GLenum, GLuint, GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC = ?*const fn (GLenum, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC = ?*const fn (GLuint, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIBPARAMETERIAMDPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.c) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLDELETENAMESAMDPROC = ?*const fn (GLenum, GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGENNAMESAMDPROC = ?*const fn (GLenum, GLuint, [*c]GLuint) callconv(.c) void;
pub const PFNGLISNAMEAMDPROC = ?*const fn (GLenum, GLuint) callconv(.c) GLboolean;
pub const PFNGLQUERYOBJECTPARAMETERUIAMDPROC = ?*const fn (GLenum, GLuint, GLenum, GLuint) callconv(.c) void;
pub const PFNGLBEGINPERFMONITORAMDPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDELETEPERFMONITORSAMDPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLENDPERFMONITORAMDPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGENPERFMONITORSAMDPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = ?*const fn (GLuint, GLenum, GLsizei, [*c]GLuint, [*c]GLint) callconv(.c) void;
pub const PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = ?*const fn (GLuint, GLuint, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETPERFMONITORCOUNTERSAMDPROC = ?*const fn (GLuint, [*c]GLint, [*c]GLint, GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETPERFMONITORGROUPSAMDPROC = ?*const fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = ?*const fn (GLuint, GLboolean, GLuint, GLint, [*c]GLuint) callconv(.c) void;
pub const PFNGLSETMULTISAMPLEFVAMDPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLTEXSTORAGESPARSEAMDPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.c) void;
pub const PFNGLTEXTURESTORAGESPARSEAMDPROC = ?*const fn (GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.c) void;
pub const PFNGLSTENCILOPVALUEAMDPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLTESSELLATIONFACTORAMDPROC = ?*const fn (GLfloat) callconv(.c) void;
pub const PFNGLTESSELLATIONMODEAMDPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLBLITFRAMEBUFFERANGLEPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.c) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLDRAWARRAYSINSTANCEDANGLEPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDANGLEPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.c) void;
pub const PFNGLVERTEXATTRIBDIVISORANGLEPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLBEGINQUERYANGLEPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDELETEQUERIESANGLEPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLENDQUERYANGLEPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLGENQUERIESANGLEPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTI64VANGLEPROC = ?*const fn (GLuint, GLenum, [*c]GLint64) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTIVANGLEPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTUI64VANGLEPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTUIVANGLEPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETQUERYIVANGLEPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISQUERYANGLEPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLQUERYCOUNTERANGLEPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLCOPYTEXTURELEVELSAPPLEPROC = ?*const fn (GLuint, GLuint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLDRAWELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, GLint, GLsizei) callconv(.c) void;
pub const PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, GLuint, GLuint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLELEMENTPOINTERAPPLEPROC = ?*const fn (GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, GLuint, GLuint, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLDELETEFENCESAPPLEPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLFINISHFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLFINISHOBJECTAPPLEPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLGENFENCESAPPLEPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLISFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLSETFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLTESTFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLTESTOBJECTAPPLEPROC = ?*const fn (GLenum, GLuint) callconv(.c) GLboolean;
pub const PFNGLBUFFERPARAMETERIAPPLEPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC = ?*const fn () callconv(.c) void;
pub const PFNGLGETOBJECTPARAMETERIVAPPLEPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLOBJECTPURGEABLEAPPLEPROC = ?*const fn (GLenum, GLuint, GLenum) callconv(.c) GLenum;
pub const PFNGLOBJECTUNPURGEABLEAPPLEPROC = ?*const fn (GLenum, GLuint, GLenum) callconv(.c) GLenum;
pub const PFNGLCLIENTWAITSYNCAPPLEPROC = ?*const fn (GLsync, GLbitfield, GLuint64) callconv(.c) GLenum;
pub const PFNGLDELETESYNCAPPLEPROC = ?*const fn (GLsync) callconv(.c) void;
pub const PFNGLFENCESYNCAPPLEPROC = ?*const fn (GLenum, GLbitfield) callconv(.c) GLsync;
pub const PFNGLGETINTEGER64VAPPLEPROC = ?*const fn (GLenum, [*c]GLint64) callconv(.c) void;
pub const PFNGLGETSYNCIVAPPLEPROC = ?*const fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.c) void;
pub const PFNGLISSYNCAPPLEPROC = ?*const fn (GLsync) callconv(.c) GLboolean;
pub const PFNGLWAITSYNCAPPLEPROC = ?*const fn (GLsync, GLbitfield, GLuint64) callconv(.c) void;
pub const PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC = ?*const fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLTEXTURERANGEAPPLEPROC = ?*const fn (GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLBINDVERTEXARRAYAPPLEPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDELETEVERTEXARRAYSAPPLEPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGENVERTEXARRAYSAPPLEPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLISVERTEXARRAYAPPLEPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC = ?*const fn (GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLVERTEXARRAYPARAMETERIAPPLEPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLVERTEXARRAYRANGEAPPLEPROC = ?*const fn (GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLDISABLEVERTEXATTRIBAPPLEPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLENABLEVERTEXATTRIBAPPLEPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLISVERTEXATTRIBENABLEDAPPLEPROC = ?*const fn (GLuint, GLenum) callconv(.c) GLboolean;
pub const PFNGLMAPVERTEXATTRIB1DAPPLEPROC = ?*const fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMAPVERTEXATTRIB1FAPPLEPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMAPVERTEXATTRIB2DAPPLEPROC = ?*const fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMAPVERTEXATTRIB2FAPPLEPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.c) void;
pub const GLfixed = c_int;
pub const PFNGLCLEARDEPTHFPROC = ?*const fn (GLclampf) callconv(.c) void;
pub const PFNGLDEPTHRANGEFPROC = ?*const fn (GLclampf, GLclampf) callconv(.c) void;
pub const PFNGLGETSHADERPRECISIONFORMATPROC = ?*const fn (GLenum, GLenum, [*c]GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLRELEASESHADERCOMPILERPROC = ?*const fn () callconv(.c) void;
pub const PFNGLSHADERBINARYPROC = ?*const fn (GLsizei, [*c]const GLuint, GLenum, ?*const anyopaque, GLsizei) callconv(.c) void;
pub const PFNGLMEMORYBARRIERBYREGIONPROC = ?*const fn (GLbitfield) callconv(.c) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXARBPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLuint) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint, GLuint) callconv(.c) void;
pub const PFNGLGETIMAGEHANDLEARBPROC = ?*const fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.c) GLuint64;
pub const PFNGLGETTEXTUREHANDLEARBPROC = ?*const fn (GLuint) callconv(.c) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLEARBPROC = ?*const fn (GLuint, GLuint) callconv(.c) GLuint64;
pub const PFNGLGETVERTEXATTRIBLUI64VARBPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.c) void;
pub const PFNGLISIMAGEHANDLERESIDENTARBPROC = ?*const fn (GLuint64) callconv(.c) GLboolean;
pub const PFNGLISTEXTUREHANDLERESIDENTARBPROC = ?*const fn (GLuint64) callconv(.c) GLboolean;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC = ?*const fn (GLuint64) callconv(.c) void;
pub const PFNGLMAKEIMAGEHANDLERESIDENTARBPROC = ?*const fn (GLuint64, GLenum) callconv(.c) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC = ?*const fn (GLuint64) callconv(.c) void;
pub const PFNGLMAKETEXTUREHANDLERESIDENTARBPROC = ?*const fn (GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLUNIFORMHANDLEUI64ARBPROC = ?*const fn (GLint, GLuint64) callconv(.c) void;
pub const PFNGLUNIFORMHANDLEUI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL1UI64ARBPROC = ?*const fn (GLuint, GLuint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL1UI64VARBPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.c) void;
pub const PFNGLGETFRAGDATAINDEXPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.c) GLint;
pub const PFNGLBUFFERSTORAGEPROC = ?*const fn (GLenum, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.c) void;
pub const struct__cl_context = opaque {};
pub const cl_context = ?*struct__cl_context;
pub const struct__cl_event = opaque {};
pub const cl_event = ?*struct__cl_event;
pub const PFNGLCREATESYNCFROMCLEVENTARBPROC = ?*const fn (cl_context, cl_event, GLbitfield) callconv(.c) GLsync;
pub const PFNGLCLEARBUFFERDATAPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCLEARBUFFERSUBDATAPROC = ?*const fn (GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCLEARNAMEDBUFFERDATAEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCLEARTEXIMAGEPROC = ?*const fn (GLuint, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCLEARTEXSUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCLIPCONTROLPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLCLAMPCOLORARBPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLDISPATCHCOMPUTEPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLDISPATCHCOMPUTEINDIRECTPROC = ?*const fn (GLintptr) callconv(.c) void;
pub const PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLCOPYBUFFERSUBDATAPROC = ?*const fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLCOPYIMAGESUBDATAPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const GLDEBUGPROCARB = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const anyopaque) callconv(.c) void;
pub const PFNGLDEBUGMESSAGECALLBACKARBPROC = ?*const fn (GLDEBUGPROCARB, ?*const anyopaque) callconv(.c) void;
pub const PFNGLDEBUGMESSAGECONTROLARBPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.c) void;
pub const PFNGLDEBUGMESSAGEINSERTARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLGETDEBUGMESSAGELOGARBPROC = ?*const fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.c) GLuint;
pub const PFNGLBINDTEXTUREUNITPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLBLITNAMEDFRAMEBUFFERPROC = ?*const fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.c) void;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = ?*const fn (GLuint, GLenum) callconv(.c) GLenum;
pub const PFNGLCLEARNAMEDBUFFERDATAPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = ?*const fn (GLuint, GLenum, GLint, GLfloat, GLint) callconv(.c) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = ?*const fn (GLuint, GLenum, GLint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = ?*const fn (GLuint, GLenum, GLint, [*c]const GLint) callconv(.c) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = ?*const fn (GLuint, GLenum, GLint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOPYNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLCREATEBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLCREATEFRAMEBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLCREATEPROGRAMPIPELINESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLCREATEQUERIESPROC = ?*const fn (GLenum, GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLCREATERENDERBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLCREATESAMPLERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLCREATETEXTURESPROC = ?*const fn (GLenum, GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLCREATETRANSFORMFEEDBACKSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLCREATEVERTEXARRAYSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLGENERATETEXTUREMIPMAPPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = ?*const fn (GLuint, GLint, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = ?*const fn (GLuint, GLenum, [*c]GLint64) callconv(.c) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETQUERYBUFFEROBJECTI64VPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.c) void;
pub const PFNGLGETQUERYBUFFEROBJECTIVPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.c) void;
pub const PFNGLGETQUERYBUFFEROBJECTUI64VPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.c) void;
pub const PFNGLGETQUERYBUFFEROBJECTUIVPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.c) void;
pub const PFNGLGETTEXTUREIMAGEPROC = ?*const fn (GLuint, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVPROC = ?*const fn (GLuint, GLint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVPROC = ?*const fn (GLuint, GLint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETTEXTUREPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETTEXTUREPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETTEXTUREPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETTRANSFORMFEEDBACKI64_VPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLint64) callconv(.c) void;
pub const PFNGLGETTRANSFORMFEEDBACKI_VPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.c) void;
pub const PFNGLGETTRANSFORMFEEDBACKIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVERTEXARRAYINDEXED64IVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.c) void;
pub const PFNGLGETVERTEXARRAYINDEXEDIVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVERTEXARRAYIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum) callconv(.c) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLMAPNAMEDBUFFERPROC = ?*const fn (GLuint, GLenum) callconv(.c) ?*anyopaque;
pub const PFNGLMAPNAMEDBUFFERRANGEPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.c) ?*anyopaque;
pub const PFNGLNAMEDBUFFERDATAPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.c) void;
pub const PFNGLNAMEDBUFFERSTORAGEPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.c) void;
pub const PFNGLNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = ?*const fn (GLuint, GLenum, GLuint, GLint) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLTEXTUREBUFFERPROC = ?*const fn (GLuint, GLenum, GLuint) callconv(.c) void;
pub const PFNGLTEXTUREBUFFERRANGEPROC = ?*const fn (GLuint, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLTEXTUREPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLTEXTUREPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLTEXTUREPARAMETERFPROC = ?*const fn (GLuint, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLTEXTUREPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLTEXTUREPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.c) void;
pub const PFNGLTEXTUREPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLTEXTURESTORAGE1DPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei) callconv(.c) void;
pub const PFNGLTEXTURESTORAGE2DPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXTURESTORAGE3DPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXTURESUBIMAGE1DPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXTURESUBIMAGE2DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXTURESUBIMAGE3DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = ?*const fn (GLuint, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLUNMAPNAMEDBUFFERPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLVERTEXARRAYATTRIBBINDINGPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXARRAYATTRIBFORMATPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.c) void;
pub const PFNGLVERTEXARRAYATTRIBIFORMATPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.c) void;
pub const PFNGLVERTEXARRAYATTRIBLFORMATPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.c) void;
pub const PFNGLVERTEXARRAYBINDINGDIVISORPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXARRAYELEMENTBUFFERPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERPROC = ?*const fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.c) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERSPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.c) void;
pub const PFNGLDRAWBUFFERSARBPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.c) void;
pub const PFNGLBLENDEQUATIONSEPARATEIARBPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDEQUATIONIARBPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCSEPARATEIARBPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCIARBPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLDRAWELEMENTSBASEVERTEXPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint) callconv(.c) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = ?*const fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLDRAWARRAYSINDIRECTPROC = ?*const fn (GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINDIRECTPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLFRAMEBUFFERPARAMETERIPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.c) void;
pub const PFNGLBINDFRAMEBUFFERPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLBINDRENDERBUFFERPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLBLITFRAMEBUFFERPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.c) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSPROC = ?*const fn (GLenum) callconv(.c) GLenum;
pub const PFNGLDELETEFRAMEBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLDELETERENDERBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFERPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE1DPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLGENFRAMEBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGENRENDERBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGENERATEMIPMAPPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISFRAMEBUFFERPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLISRENDERBUFFERPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLRENDERBUFFERSTORAGEPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTUREARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLPROGRAMPARAMETERIARBPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.c) void;
pub const PFNGLGETPROGRAMBINARYPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLPROGRAMBINARYPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLsizei) callconv(.c) void;
pub const PFNGLPROGRAMPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.c) void;
pub const PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETTEXTURESUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLSPECIALIZESHADERARBPROC = ?*const fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGETUNIFORMDVPROC = ?*const fn (GLuint, GLint, [*c]GLdouble) callconv(.c) void;
pub const PFNGLUNIFORM1DPROC = ?*const fn (GLint, GLdouble) callconv(.c) void;
pub const PFNGLUNIFORM1DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLUNIFORM2DPROC = ?*const fn (GLint, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLUNIFORM2DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLUNIFORM3DPROC = ?*const fn (GLint, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLUNIFORM3DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLUNIFORM4DPROC = ?*const fn (GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLUNIFORM4DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX2DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX2X3DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX2X4DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX3DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX3X2DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX3X4DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX4DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX4X2DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX4X3DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLGETUNIFORMI64VARBPROC = ?*const fn (GLuint, GLint, [*c]GLint64) callconv(.c) void;
pub const PFNGLGETUNIFORMUI64VARBPROC = ?*const fn (GLuint, GLint, [*c]GLuint64) callconv(.c) void;
pub const PFNGLGETNUNIFORMI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint64) callconv(.c) void;
pub const PFNGLGETNUNIFORMUI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1I64ARBPROC = ?*const fn (GLuint, GLint, GLint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2I64ARBPROC = ?*const fn (GLuint, GLint, GLint64, GLint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64, GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3I64ARBPROC = ?*const fn (GLuint, GLint, GLint64, GLint64, GLint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64, GLuint64, GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4I64ARBPROC = ?*const fn (GLuint, GLint, GLint64, GLint64, GLint64, GLint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLUNIFORM1I64ARBPROC = ?*const fn (GLint, GLint64) callconv(.c) void;
pub const PFNGLUNIFORM1I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.c) void;
pub const PFNGLUNIFORM1UI64ARBPROC = ?*const fn (GLint, GLuint64) callconv(.c) void;
pub const PFNGLUNIFORM1UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLUNIFORM2I64ARBPROC = ?*const fn (GLint, GLint64, GLint64) callconv(.c) void;
pub const PFNGLUNIFORM2I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.c) void;
pub const PFNGLUNIFORM2UI64ARBPROC = ?*const fn (GLint, GLuint64, GLuint64) callconv(.c) void;
pub const PFNGLUNIFORM2UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLUNIFORM3I64ARBPROC = ?*const fn (GLint, GLint64, GLint64, GLint64) callconv(.c) void;
pub const PFNGLUNIFORM3I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.c) void;
pub const PFNGLUNIFORM3UI64ARBPROC = ?*const fn (GLint, GLuint64, GLuint64, GLuint64) callconv(.c) void;
pub const PFNGLUNIFORM3UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLUNIFORM4I64ARBPROC = ?*const fn (GLint, GLint64, GLint64, GLint64, GLint64) callconv(.c) void;
pub const PFNGLUNIFORM4I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.c) void;
pub const PFNGLUNIFORM4UI64ARBPROC = ?*const fn (GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.c) void;
pub const PFNGLUNIFORM4UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLCOLORSUBTABLEPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOLORTABLEPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOLORTABLEPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCOLORTABLEPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLCONVOLUTIONFILTER1DPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCONVOLUTIONFILTER2DPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCONVOLUTIONPARAMETERFPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLCONVOLUTIONPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCONVOLUTIONPARAMETERIPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLCONVOLUTIONPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLCOPYCOLORSUBTABLEPROC = ?*const fn (GLenum, GLsizei, GLint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLCOPYCOLORTABLEPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLCOPYCONVOLUTIONFILTER1DPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLCOPYCONVOLUTIONFILTER2DPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLGETCOLORTABLEPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETCONVOLUTIONFILTERPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETCONVOLUTIONPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETCONVOLUTIONPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETHISTOGRAMPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETHISTOGRAMPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETHISTOGRAMPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETMINMAXPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETMINMAXPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETMINMAXPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETSEPARABLEFILTERPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.c) void;
pub const PFNGLHISTOGRAMPROC = ?*const fn (GLenum, GLsizei, GLenum, GLboolean) callconv(.c) void;
pub const PFNGLMINMAXPROC = ?*const fn (GLenum, GLenum, GLboolean) callconv(.c) void;
pub const PFNGLRESETHISTOGRAMPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLRESETMINMAXPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLSEPARABLEFILTER2DPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque, ?*const anyopaque) callconv(.c) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC = ?*const fn (GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLDRAWARRAYSINSTANCEDARBPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDARBPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.c) void;
pub const PFNGLVERTEXATTRIBDIVISORARBPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLGETINTERNALFORMATIVPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint) callconv(.c) void;
pub const PFNGLGETINTERNALFORMATI64VPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint64) callconv(.c) void;
pub const PFNGLINVALIDATEBUFFERDATAPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLINVALIDATEBUFFERSUBDATAPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLINVALIDATEFRAMEBUFFERPROC = ?*const fn (GLenum, GLsizei, [*c]const GLenum) callconv(.c) void;
pub const PFNGLINVALIDATESUBFRAMEBUFFERPROC = ?*const fn (GLenum, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLINVALIDATETEXIMAGEPROC = ?*const fn (GLuint, GLint) callconv(.c) void;
pub const PFNGLINVALIDATETEXSUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLMAPBUFFERRANGEPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.c) ?*anyopaque;
pub const PFNGLCURRENTPALETTEMATRIXARBPROC = ?*const fn (GLint) callconv(.c) void;
pub const PFNGLMATRIXINDEXPOINTERARBPROC = ?*const fn (GLint, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLMATRIXINDEXUBVARBPROC = ?*const fn (GLint, [*c]GLubyte) callconv(.c) void;
pub const PFNGLMATRIXINDEXUIVARBPROC = ?*const fn (GLint, [*c]GLuint) callconv(.c) void;
pub const PFNGLMATRIXINDEXUSVARBPROC = ?*const fn (GLint, [*c]GLushort) callconv(.c) void;
pub const PFNGLBINDBUFFERSBASEPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLBINDBUFFERSRANGEPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizeiptr) callconv(.c) void;
pub const PFNGLBINDIMAGETEXTURESPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLBINDSAMPLERSPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLBINDTEXTURESPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLBINDVERTEXBUFFERSPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.c) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLSAMPLECOVERAGEARBPROC = ?*const fn (GLclampf, GLboolean) callconv(.c) void;
pub const PFNGLACTIVETEXTUREARBPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLCLIENTACTIVETEXTUREARBPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1DARBPROC = ?*const fn (GLenum, GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1FARBPROC = ?*const fn (GLenum, GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1IARBPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1SARBPROC = ?*const fn (GLenum, GLshort) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2DARBPROC = ?*const fn (GLenum, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2FARBPROC = ?*const fn (GLenum, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2IARBPROC = ?*const fn (GLenum, GLint, GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2SARBPROC = ?*const fn (GLenum, GLshort, GLshort) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3DARBPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3FARBPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3IARBPROC = ?*const fn (GLenum, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3SARBPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4DARBPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4FARBPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4IARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4SARBPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.c) void;
pub const PFNGLBEGINQUERYARBPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDELETEQUERIESARBPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLENDQUERYARBPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLGENQUERIESARBPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTIVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTUIVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETQUERYIVARBPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISQUERYARBPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLMAXSHADERCOMPILERTHREADSARBPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLPOINTPARAMETERFARBPROC = ?*const fn (GLenum, GLfloat) callconv(.c) void;
pub const PFNGLPOINTPARAMETERFVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPOLYGONOFFSETCLAMPPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLGETPROGRAMINTERFACEIVPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETPROGRAMRESOURCEINDEXPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.c) GLuint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.c) GLint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.c) GLint;
pub const PFNGLGETPROGRAMRESOURCENAMEPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETPROGRAMRESOURCEIVPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.c) void;
pub const PFNGLPROVOKINGVERTEXPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLGETGRAPHICSRESETSTATUSARBPROC = ?*const fn () callconv(.c) GLenum;
pub const PFNGLGETNCOLORTABLEARBPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC = ?*const fn (GLenum, GLint, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETNCONVOLUTIONFILTERARBPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETNHISTOGRAMARBPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETNMAPDVARBPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]GLdouble) callconv(.c) void;
pub const PFNGLGETNMAPFVARBPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETNMAPIVARBPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]GLint) callconv(.c) void;
pub const PFNGLGETNMINMAXARBPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETNPIXELMAPFVARBPROC = ?*const fn (GLenum, GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETNPIXELMAPUIVARBPROC = ?*const fn (GLenum, GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETNPIXELMAPUSVARBPROC = ?*const fn (GLenum, GLsizei, [*c]GLushort) callconv(.c) void;
pub const PFNGLGETNPOLYGONSTIPPLEARBPROC = ?*const fn (GLsizei, [*c]GLubyte) callconv(.c) void;
pub const PFNGLGETNSEPARABLEFILTERARBPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque, GLsizei, ?*anyopaque, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETNTEXIMAGEARBPROC = ?*const fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETNUNIFORMDVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.c) void;
pub const PFNGLGETNUNIFORMFVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETNUNIFORMIVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.c) void;
pub const PFNGLGETNUNIFORMUIVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLREADNPIXELSARBPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMINSAMPLESHADINGARBPROC = ?*const fn (GLclampf) callconv(.c) void;
pub const PFNGLBINDSAMPLERPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLDELETESAMPLERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGENSAMPLERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETSAMPLERPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETSAMPLERPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETSAMPLERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISSAMPLERPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLSAMPLERPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLSAMPLERPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLSAMPLERPARAMETERFPROC = ?*const fn (GLuint, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLSAMPLERPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLSAMPLERPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.c) void;
pub const PFNGLSAMPLERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLACTIVESHADERPROGRAMPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLBINDPROGRAMPIPELINEPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLCREATESHADERPROGRAMVPROC = ?*const fn (GLenum, GLsizei, [*c]const [*c]const GLchar) callconv(.c) GLuint;
pub const PFNGLDELETEPROGRAMPIPELINESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGENPROGRAMPIPELINESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETPROGRAMPIPELINEINFOLOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETPROGRAMPIPELINEIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISPROGRAMPIPELINEPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLPROGRAMUNIFORM1DPROC = ?*const fn (GLuint, GLint, GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1FPROC = ?*const fn (GLuint, GLint, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1IPROC = ?*const fn (GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1UIPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2DPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2FPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2IPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2UIPROC = ?*const fn (GLuint, GLint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3DPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3FPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3IPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3UIPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4DPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4FPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4IPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4UIPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUSEPROGRAMSTAGESPROC = ?*const fn (GLuint, GLbitfield, GLuint) callconv(.c) void;
pub const PFNGLVALIDATEPROGRAMPIPELINEPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLBINDIMAGETEXTUREPROC = ?*const fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLMEMORYBARRIERPROC = ?*const fn (GLbitfield) callconv(.c) void;
pub const GLcharARB = u8;
pub const GLhandleARB = c_uint;
pub const PFNGLATTACHOBJECTARBPROC = ?*const fn (GLhandleARB, GLhandleARB) callconv(.c) void;
pub const PFNGLCOMPILESHADERARBPROC = ?*const fn (GLhandleARB) callconv(.c) void;
pub const PFNGLCREATEPROGRAMOBJECTARBPROC = ?*const fn () callconv(.c) GLhandleARB;
pub const PFNGLCREATESHADEROBJECTARBPROC = ?*const fn (GLenum) callconv(.c) GLhandleARB;
pub const PFNGLDELETEOBJECTARBPROC = ?*const fn (GLhandleARB) callconv(.c) void;
pub const PFNGLDETACHOBJECTARBPROC = ?*const fn (GLhandleARB, GLhandleARB) callconv(.c) void;
pub const PFNGLGETACTIVEUNIFORMARBPROC = ?*const fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.c) void;
pub const PFNGLGETATTACHEDOBJECTSARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLhandleARB) callconv(.c) void;
pub const PFNGLGETHANDLEARBPROC = ?*const fn (GLenum) callconv(.c) GLhandleARB;
pub const PFNGLGETINFOLOGARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.c) void;
pub const PFNGLGETOBJECTPARAMETERFVARBPROC = ?*const fn (GLhandleARB, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETOBJECTPARAMETERIVARBPROC = ?*const fn (GLhandleARB, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETSHADERSOURCEARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.c) void;
pub const PFNGLGETUNIFORMLOCATIONARBPROC = ?*const fn (GLhandleARB, [*c]const GLcharARB) callconv(.c) GLint;
pub const PFNGLGETUNIFORMFVARBPROC = ?*const fn (GLhandleARB, GLint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETUNIFORMIVARBPROC = ?*const fn (GLhandleARB, GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLLINKPROGRAMARBPROC = ?*const fn (GLhandleARB) callconv(.c) void;
pub const PFNGLSHADERSOURCEARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c][*c]const GLcharARB, [*c]const GLint) callconv(.c) void;
pub const PFNGLUNIFORM1FARBPROC = ?*const fn (GLint, GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM1FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM1IARBPROC = ?*const fn (GLint, GLint) callconv(.c) void;
pub const PFNGLUNIFORM1IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLUNIFORM2FARBPROC = ?*const fn (GLint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM2FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM2IARBPROC = ?*const fn (GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLUNIFORM2IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLUNIFORM3FARBPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM3FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM3IARBPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLUNIFORM3IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLUNIFORM4FARBPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM4FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM4IARBPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLUNIFORM4IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX2FVARBPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX3FVARBPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX4FVARBPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUSEPROGRAMOBJECTARBPROC = ?*const fn (GLhandleARB) callconv(.c) void;
pub const PFNGLVALIDATEPROGRAMARBPROC = ?*const fn (GLhandleARB) callconv(.c) void;
pub const PFNGLSHADERSTORAGEBLOCKBINDINGPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLGETACTIVESUBROUTINENAMEPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETPROGRAMSTAGEIVPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETSUBROUTINEINDEXPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.c) GLuint;
pub const PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.c) GLint;
pub const PFNGLGETUNIFORMSUBROUTINEUIVPROC = ?*const fn (GLenum, GLint, [*c]GLuint) callconv(.c) void;
pub const PFNGLUNIFORMSUBROUTINESUIVPROC = ?*const fn (GLenum, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLCOMPILESHADERINCLUDEARBPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.c) void;
pub const PFNGLDELETENAMEDSTRINGARBPROC = ?*const fn (GLint, [*c]const GLchar) callconv(.c) void;
pub const PFNGLGETNAMEDSTRINGARBPROC = ?*const fn (GLint, [*c]const GLchar, GLsizei, [*c]GLint, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETNAMEDSTRINGIVARBPROC = ?*const fn (GLint, [*c]const GLchar, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISNAMEDSTRINGARBPROC = ?*const fn (GLint, [*c]const GLchar) callconv(.c) GLboolean;
pub const PFNGLNAMEDSTRINGARBPROC = ?*const fn (GLenum, GLint, [*c]const GLchar, GLint, [*c]const GLchar) callconv(.c) void;
pub const PFNGLBUFFERPAGECOMMITMENTARBPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLboolean) callconv(.c) void;
pub const PFNGLTEXPAGECOMMITMENTARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLCLIENTWAITSYNCPROC = ?*const fn (GLsync, GLbitfield, GLuint64) callconv(.c) GLenum;
pub const PFNGLDELETESYNCPROC = ?*const fn (GLsync) callconv(.c) void;
pub const PFNGLFENCESYNCPROC = ?*const fn (GLenum, GLbitfield) callconv(.c) GLsync;
pub const PFNGLGETINTEGER64VPROC = ?*const fn (GLenum, [*c]GLint64) callconv(.c) void;
pub const PFNGLGETSYNCIVPROC = ?*const fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.c) void;
pub const PFNGLISSYNCPROC = ?*const fn (GLsync) callconv(.c) GLboolean;
pub const PFNGLWAITSYNCPROC = ?*const fn (GLsync, GLbitfield, GLuint64) callconv(.c) void;
pub const PFNGLPATCHPARAMETERFVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPATCHPARAMETERIPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLTEXTUREBARRIERPROC = ?*const fn () callconv(.c) void;
pub const PFNGLTEXBUFFERARBPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLTEXBUFFERRANGEPROC = ?*const fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLTEXTUREBUFFERRANGEEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DARBPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DARBPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DARBPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEARBPROC = ?*const fn (GLenum, GLint, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETMULTISAMPLEFVPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLSAMPLEMASKIPROC = ?*const fn (GLuint, GLbitfield) callconv(.c) void;
pub const PFNGLTEXIMAGE2DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXSTORAGE1DPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.c) void;
pub const PFNGLTEXSTORAGE2DPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLTEXSTORAGE3DPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLTEXSTORAGE2DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXSTORAGE3DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXTUREVIEWPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTI64VPROC = ?*const fn (GLuint, GLenum, [*c]GLint64) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTUI64VPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64) callconv(.c) void;
pub const PFNGLQUERYCOUNTERPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLBINDTRANSFORMFEEDBACKPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLGENTRANSFORMFEEDBACKSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLISTRANSFORMFEEDBACKPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLPAUSETRANSFORMFEEDBACKPROC = ?*const fn () callconv(.c) void;
pub const PFNGLRESUMETRANSFORMFEEDBACKPROC = ?*const fn () callconv(.c) void;
pub const PFNGLBEGINQUERYINDEXEDPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.c) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.c) void;
pub const PFNGLENDQUERYINDEXEDPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLGETQUERYINDEXEDIVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC = ?*const fn (GLenum, GLuint, GLsizei) callconv(.c) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei) callconv(.c) void;
pub const PFNGLLOADTRANSPOSEMATRIXDARBPROC = ?*const fn ([*c]GLdouble) callconv(.c) void;
pub const PFNGLLOADTRANSPOSEMATRIXFARBPROC = ?*const fn ([*c]GLfloat) callconv(.c) void;
pub const PFNGLMULTTRANSPOSEMATRIXDARBPROC = ?*const fn ([*c]GLdouble) callconv(.c) void;
pub const PFNGLMULTTRANSPOSEMATRIXFARBPROC = ?*const fn ([*c]GLfloat) callconv(.c) void;
pub const PFNGLBINDBUFFERBASEPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.c) void;
pub const PFNGLBINDBUFFERRANGEPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETACTIVEUNIFORMBLOCKIVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETACTIVEUNIFORMNAMEPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETACTIVEUNIFORMSIVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETINTEGERI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLint) callconv(.c) void;
pub const PFNGLGETUNIFORMBLOCKINDEXPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.c) GLuint;
pub const PFNGLGETUNIFORMINDICESPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]GLuint) callconv(.c) void;
pub const PFNGLUNIFORMBLOCKBINDINGPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLBINDVERTEXARRAYPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDELETEVERTEXARRAYSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGENVERTEXARRAYSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLISVERTEXARRAYPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLGETVERTEXATTRIBLDVPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL1DPROC = ?*const fn (GLuint, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL1DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL2DPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL2DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL3DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL3DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL4DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL4DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBLPOINTERPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLBINDVERTEXBUFFERPROC = ?*const fn (GLuint, GLuint, GLintptr, GLsizei) callconv(.c) void;
pub const PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.c) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.c) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.c) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.c) void;
pub const PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBBINDINGPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBFORMATPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBIFORMATPROC = ?*const fn (GLuint, GLint, GLenum, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBLFORMATPROC = ?*const fn (GLuint, GLint, GLenum, GLuint) callconv(.c) void;
pub const PFNGLVERTEXBINDINGDIVISORPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXBLENDARBPROC = ?*const fn (GLint) callconv(.c) void;
pub const PFNGLWEIGHTPOINTERARBPROC = ?*const fn (GLint, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLWEIGHTBVARBPROC = ?*const fn (GLint, [*c]GLbyte) callconv(.c) void;
pub const PFNGLWEIGHTDVARBPROC = ?*const fn (GLint, [*c]GLdouble) callconv(.c) void;
pub const PFNGLWEIGHTFVARBPROC = ?*const fn (GLint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLWEIGHTIVARBPROC = ?*const fn (GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLWEIGHTSVARBPROC = ?*const fn (GLint, [*c]GLshort) callconv(.c) void;
pub const PFNGLWEIGHTUBVARBPROC = ?*const fn (GLint, [*c]GLubyte) callconv(.c) void;
pub const PFNGLWEIGHTUIVARBPROC = ?*const fn (GLint, [*c]GLuint) callconv(.c) void;
pub const PFNGLWEIGHTUSVARBPROC = ?*const fn (GLint, [*c]GLushort) callconv(.c) void;
pub const GLintptrARB = ptrdiff_t;
pub const GLsizeiptrARB = ptrdiff_t;
pub const PFNGLBINDBUFFERARBPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLBUFFERDATAARBPROC = ?*const fn (GLenum, GLsizeiptrARB, ?*const anyopaque, GLenum) callconv(.c) void;
pub const PFNGLBUFFERSUBDATAARBPROC = ?*const fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*const anyopaque) callconv(.c) void;
pub const PFNGLDELETEBUFFERSARBPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGENBUFFERSARBPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETBUFFERPARAMETERIVARBPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETBUFFERPOINTERVARBPROC = ?*const fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLGETBUFFERSUBDATAARBPROC = ?*const fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*anyopaque) callconv(.c) void;
pub const PFNGLISBUFFERARBPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLMAPBUFFERARBPROC = ?*const fn (GLenum, GLenum) callconv(.c) ?*anyopaque;
pub const PFNGLUNMAPBUFFERARBPROC = ?*const fn (GLenum) callconv(.c) GLboolean;
pub const PFNGLBINDPROGRAMARBPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDELETEPROGRAMSARBPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYARBPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYARBPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGENPROGRAMSARBPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETPROGRAMENVPARAMETERDVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.c) void;
pub const PFNGLGETPROGRAMENVPARAMETERFVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.c) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPROGRAMSTRINGARBPROC = ?*const fn (GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETPROGRAMIVARBPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVARBPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBDVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBFVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBIVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISPROGRAMARBPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLPROGRAMENVPARAMETER4DARBPROC = ?*const fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMENVPARAMETER4DVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMENVPARAMETER4FARBPROC = ?*const fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMENVPARAMETER4FVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DARBPROC = ?*const fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FARBPROC = ?*const fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMSTRINGARBPROC = ?*const fn (GLenum, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1DARBPROC = ?*const fn (GLuint, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1FARBPROC = ?*const fn (GLuint, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1SARBPROC = ?*const fn (GLuint, GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2DARBPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2FARBPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2SARBPROC = ?*const fn (GLuint, GLshort, GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3DARBPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3FARBPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3SARBPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4NBVARBPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4NIVARBPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4NSVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4NUBARBPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4NUBVARBPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4NUIVARBPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4NUSVARBPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4BVARBPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4DARBPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4FARBPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4IVARBPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4SARBPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4UBVARBPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4UIVARBPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4USVARBPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.c) void;
pub const PFNGLVERTEXATTRIBPOINTERARBPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLBINDATTRIBLOCATIONARBPROC = ?*const fn (GLhandleARB, GLuint, [*c]const GLcharARB) callconv(.c) void;
pub const PFNGLGETACTIVEATTRIBARBPROC = ?*const fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.c) void;
pub const PFNGLGETATTRIBLOCATIONARBPROC = ?*const fn (GLhandleARB, [*c]const GLcharARB) callconv(.c) GLint;
pub const PFNGLCOLORP3UIPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLCOLORP3UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLCOLORP4UIPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLCOLORP4UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLMULTITEXCOORDP1UIPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLMULTITEXCOORDP1UIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLMULTITEXCOORDP2UIPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLMULTITEXCOORDP2UIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLMULTITEXCOORDP3UIPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLMULTITEXCOORDP3UIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLMULTITEXCOORDP4UIPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLMULTITEXCOORDP4UIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLNORMALP3UIPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLNORMALP3UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLSECONDARYCOLORP3UIPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLSECONDARYCOLORP3UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLTEXCOORDP1UIPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLTEXCOORDP1UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLTEXCOORDP2UIPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLTEXCOORDP2UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLTEXCOORDP3UIPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLTEXCOORDP3UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLTEXCOORDP4UIPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLTEXCOORDP4UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBP1UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBP1UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBP2UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBP2UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBP3UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBP3UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBP4UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBP4UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXP2UIPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLVERTEXP2UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXP3UIPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLVERTEXP3UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXP4UIPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLVERTEXP4UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLDEPTHRANGEARRAYVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLclampd) callconv(.c) void;
pub const PFNGLDEPTHRANGEINDEXEDPROC = ?*const fn (GLuint, GLclampd, GLclampd) callconv(.c) void;
pub const PFNGLGETDOUBLEI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.c) void;
pub const PFNGLGETFLOATI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLSCISSORARRAYVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLSCISSORINDEXEDPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLSCISSORINDEXEDVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLVIEWPORTARRAYVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVIEWPORTINDEXEDFPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVIEWPORTINDEXEDFVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLWINDOWPOS2DARBPROC = ?*const fn (GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLWINDOWPOS2DVARBPROC = ?*const fn ([*c]const GLdouble) callconv(.c) void;
pub const PFNGLWINDOWPOS2FARBPROC = ?*const fn (GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLWINDOWPOS2FVARBPROC = ?*const fn ([*c]const GLfloat) callconv(.c) void;
pub const PFNGLWINDOWPOS2IARBPROC = ?*const fn (GLint, GLint) callconv(.c) void;
pub const PFNGLWINDOWPOS2IVARBPROC = ?*const fn ([*c]const GLint) callconv(.c) void;
pub const PFNGLWINDOWPOS2SARBPROC = ?*const fn (GLshort, GLshort) callconv(.c) void;
pub const PFNGLWINDOWPOS2SVARBPROC = ?*const fn ([*c]const GLshort) callconv(.c) void;
pub const PFNGLWINDOWPOS3DARBPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLWINDOWPOS3DVARBPROC = ?*const fn ([*c]const GLdouble) callconv(.c) void;
pub const PFNGLWINDOWPOS3FARBPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLWINDOWPOS3FVARBPROC = ?*const fn ([*c]const GLfloat) callconv(.c) void;
pub const PFNGLWINDOWPOS3IARBPROC = ?*const fn (GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLWINDOWPOS3IVARBPROC = ?*const fn ([*c]const GLint) callconv(.c) void;
pub const PFNGLWINDOWPOS3SARBPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLWINDOWPOS3SVARBPROC = ?*const fn ([*c]const GLshort) callconv(.c) void;
pub const PFNGLDRAWBUFFERSATIPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.c) void;
pub const PFNGLDRAWELEMENTARRAYATIPROC = ?*const fn (GLenum, GLsizei) callconv(.c) void;
pub const PFNGLDRAWRANGEELEMENTARRAYATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei) callconv(.c) void;
pub const PFNGLELEMENTPOINTERATIPROC = ?*const fn (GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLGETTEXBUMPPARAMETERFVATIPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETTEXBUMPPARAMETERIVATIPROC = ?*const fn (GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLTEXBUMPPARAMETERFVATIPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLTEXBUMPPARAMETERIVATIPROC = ?*const fn (GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLALPHAFRAGMENTOP1ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLALPHAFRAGMENTOP2ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLALPHAFRAGMENTOP3ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLBEGINFRAGMENTSHADERATIPROC = ?*const fn () callconv(.c) void;
pub const PFNGLBINDFRAGMENTSHADERATIPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLCOLORFRAGMENTOP1ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLCOLORFRAGMENTOP2ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLCOLORFRAGMENTOP3ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLDELETEFRAGMENTSHADERATIPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLENDFRAGMENTSHADERATIPROC = ?*const fn () callconv(.c) void;
pub const PFNGLGENFRAGMENTSHADERSATIPROC = ?*const fn (GLuint) callconv(.c) GLuint;
pub const PFNGLPASSTEXCOORDATIPROC = ?*const fn (GLuint, GLuint, GLenum) callconv(.c) void;
pub const PFNGLSAMPLEMAPATIPROC = ?*const fn (GLuint, GLuint, GLenum) callconv(.c) void;
pub const PFNGLSETFRAGMENTSHADERCONSTANTATIPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMAPOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.c) ?*anyopaque;
pub const PFNGLUNMAPOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLPNTRIANGLESFATIPROC = ?*const fn (GLenum, GLfloat) callconv(.c) void;
pub const PFNGLPNTRIANGLESIATIPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLSTENCILFUNCSEPARATEATIPROC = ?*const fn (GLenum, GLenum, GLint, GLuint) callconv(.c) void;
pub const PFNGLSTENCILOPSEPARATEATIPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLARRAYOBJECTATIPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLuint, GLuint) callconv(.c) void;
pub const PFNGLFREEOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGETARRAYOBJECTFVATIPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETARRAYOBJECTIVATIPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETOBJECTBUFFERFVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETOBJECTBUFFERIVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVARIANTARRAYOBJECTFVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETVARIANTARRAYOBJECTIVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLNEWOBJECTBUFFERATIPROC = ?*const fn (GLsizei, ?*const anyopaque, GLenum) callconv(.c) GLuint;
pub const PFNGLUPDATEOBJECTBUFFERATIPROC = ?*const fn (GLuint, GLuint, GLsizei, ?*const anyopaque, GLenum) callconv(.c) void;
pub const PFNGLVARIANTARRAYOBJECTATIPROC = ?*const fn (GLuint, GLenum, GLsizei, GLuint, GLuint) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBARRAYOBJECTATIPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint) callconv(.c) void;
pub const PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLNORMALSTREAM3BATIPROC = ?*const fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.c) void;
pub const PFNGLNORMALSTREAM3BVATIPROC = ?*const fn (GLenum, [*c]const GLbyte) callconv(.c) void;
pub const PFNGLNORMALSTREAM3DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLNORMALSTREAM3DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLNORMALSTREAM3FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLNORMALSTREAM3FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLNORMALSTREAM3IATIPROC = ?*const fn (GLenum, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLNORMALSTREAM3IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLNORMALSTREAM3SATIPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLNORMALSTREAM3SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXBLENDENVFATIPROC = ?*const fn (GLenum, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXBLENDENVIATIPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLVERTEXSTREAM1DATIPROC = ?*const fn (GLenum, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXSTREAM1DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXSTREAM1FATIPROC = ?*const fn (GLenum, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXSTREAM1FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXSTREAM1IATIPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLVERTEXSTREAM1IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXSTREAM1SATIPROC = ?*const fn (GLenum, GLshort) callconv(.c) void;
pub const PFNGLVERTEXSTREAM1SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXSTREAM2DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXSTREAM2DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXSTREAM2FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXSTREAM2FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXSTREAM2IATIPROC = ?*const fn (GLenum, GLint, GLint) callconv(.c) void;
pub const PFNGLVERTEXSTREAM2IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXSTREAM2SATIPROC = ?*const fn (GLenum, GLshort, GLshort) callconv(.c) void;
pub const PFNGLVERTEXSTREAM2SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXSTREAM3DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXSTREAM3DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXSTREAM3FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXSTREAM3FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXSTREAM3IATIPROC = ?*const fn (GLenum, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLVERTEXSTREAM3IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXSTREAM3SATIPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLVERTEXSTREAM3SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXSTREAM4DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXSTREAM4DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXSTREAM4FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXSTREAM4FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXSTREAM4IATIPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLVERTEXSTREAM4IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXSTREAM4SATIPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLVERTEXSTREAM4SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.c) void;
pub const PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC = ?*const fn (GLenum, GLeglImageOES, [*c]const GLint) callconv(.c) void;
pub const PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC = ?*const fn (GLuint, GLeglImageOES, [*c]const GLint) callconv(.c) void;
pub const PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLuint) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint, GLuint) callconv(.c) void;
pub const PFNGLGETUNIFORMBUFFERSIZEEXTPROC = ?*const fn (GLuint, GLint) callconv(.c) GLint;
pub const PFNGLGETUNIFORMOFFSETEXTPROC = ?*const fn (GLuint, GLint) callconv(.c) GLintptr;
pub const PFNGLUNIFORMBUFFEREXTPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.c) void;
pub const PFNGLBLENDCOLOREXTPROC = ?*const fn (GLclampf, GLclampf, GLclampf, GLclampf) callconv(.c) void;
pub const PFNGLBLENDEQUATIONSEPARATEEXTPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.c) void;
pub const PFNGLGETFRAGDATAINDEXEXTPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.c) GLint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.c) GLint;
pub const PFNGLBLENDFUNCSEPARATEEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDEQUATIONEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLBUFFERSTORAGEEXTPROC = ?*const fn (GLenum, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.c) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.c) void;
pub const PFNGLCLEARTEXIMAGEEXTPROC = ?*const fn (GLuint, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCLEARTEXSUBIMAGEEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCLIPCONTROLEXTPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLCOLORSUBTABLEEXTPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOPYCOLORSUBTABLEEXTPROC = ?*const fn (GLenum, GLsizei, GLint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLLOCKARRAYSEXTPROC = ?*const fn (GLint, GLsizei) callconv(.c) void;
pub const PFNGLUNLOCKARRAYSEXTPROC = ?*const fn () callconv(.c) void;
pub const PFNGLCONVOLUTIONFILTER1DEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCONVOLUTIONFILTER2DEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCONVOLUTIONPARAMETERFEXTPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLCONVOLUTIONPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCONVOLUTIONPARAMETERIEXTPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLCONVOLUTIONPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLGETCONVOLUTIONFILTEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETSEPARABLEFILTEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.c) void;
pub const PFNGLSEPARABLEFILTER2DEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque, ?*const anyopaque) callconv(.c) void;
pub const PFNGLBINORMALPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLTANGENTPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLCOPYIMAGESUBDATAEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLCOPYTEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.c) void;
pub const PFNGLCOPYTEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.c) void;
pub const PFNGLCOPYTEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLCOPYTEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLCOPYTEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLCULLPARAMETERDVEXTPROC = ?*const fn (GLenum, [*c]GLdouble) callconv(.c) void;
pub const PFNGLCULLPARAMETERFVEXTPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETOBJECTLABELEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLLABELOBJECTEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLINSERTEVENTMARKEREXTPROC = ?*const fn (GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLPOPGROUPMARKEREXTPROC = ?*const fn () callconv(.c) void;
pub const PFNGLPUSHGROUPMARKEREXTPROC = ?*const fn (GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLDEPTHBOUNDSEXTPROC = ?*const fn (GLclampd, GLclampd) callconv(.c) void;
pub const PFNGLBINDMULTITEXTUREEXTPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC = ?*const fn (GLuint, GLenum) callconv(.c) GLenum;
pub const PFNGLCLIENTATTRIBDEFAULTEXTPROC = ?*const fn (GLbitfield) callconv(.c) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOPYMULTITEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.c) void;
pub const PFNGLCOPYMULTITEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.c) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLCOPYTEXTUREIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.c) void;
pub const PFNGLCOPYTEXTUREIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.c) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDISABLECLIENTSTATEIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLDISABLEVERTEXARRAYEXTPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLENABLECLIENTSTATEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLENABLECLIENTSTATEIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBEXTPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLENABLEVERTEXARRAYEXTPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum) callconv(.c) void;
pub const PFNGLFRAMEBUFFERREADBUFFEREXTPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLGENERATEMULTITEXMIPMAPEXTPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLGENERATETEXTUREMIPMAPEXTPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC = ?*const fn (GLenum, GLenum, GLint, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC = ?*const fn (GLuint, GLenum, GLint, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETDOUBLEINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.c) void;
pub const PFNGLGETDOUBLEI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.c) void;
pub const PFNGLGETFLOATINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETFLOATI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETMULTITEXENVFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETMULTITEXENVIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETMULTITEXGENDVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLdouble) callconv(.c) void;
pub const PFNGLGETMULTITEXGENFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETMULTITEXGENIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETMULTITEXIMAGEEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETMULTITEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETMULTITEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETMULTITEXPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETMULTITEXPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.c) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLdouble) callconv(.c) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETNAMEDPROGRAMSTRINGEXTPROC = ?*const fn (GLuint, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETNAMEDPROGRAMIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETPOINTERINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLGETPOINTERI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLGETTEXTUREIMAGEEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETTEXTUREPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETTEXTUREPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETTEXTUREPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVERTEXARRAYINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLGETVERTEXARRAYPOINTERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLMAPNAMEDBUFFEREXTPROC = ?*const fn (GLuint, GLenum) callconv(.c) ?*anyopaque;
pub const PFNGLMAPNAMEDBUFFERRANGEEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.c) ?*anyopaque;
pub const PFNGLMATRIXFRUSTUMEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLMATRIXLOADIDENTITYEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLMATRIXLOADTRANSPOSEDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMATRIXLOADTRANSPOSEFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXLOADDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMATRIXLOADFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXMULTTRANSPOSEDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMATRIXMULTTRANSPOSEFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXMULTDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMATRIXMULTFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXORTHOEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLMATRIXPOPEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLMATRIXPUSHEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLMATRIXROTATEDEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLMATRIXROTATEFEXTPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLMATRIXSCALEDEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLMATRIXSCALEFEXTPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLMATRIXTRANSLATEDEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLMATRIXTRANSLATEFEXTPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLMULTITEXCOORDPOINTEREXTPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLMULTITEXENVFEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXENVFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXENVIEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLMULTITEXENVIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLMULTITEXGENDEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXGENDVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMULTITEXGENFEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXGENFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXGENIEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLMULTITEXGENIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLMULTITEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLMULTITEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLMULTITEXIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLMULTITEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLMULTITEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLMULTITEXPARAMETERFEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTITEXPARAMETERIEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLMULTITEXPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLMULTITEXRENDERBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLMULTITEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLMULTITEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLMULTITEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLNAMEDBUFFERDATAEXTPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.c) void;
pub const PFNGLNAMEDBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.c) void;
pub const PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLenum) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLNAMEDPROGRAMSTRINGEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1FEXTPROC = ?*const fn (GLuint, GLint, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1IEXTPROC = ?*const fn (GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1UIEXTPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2FEXTPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2UIEXTPROC = ?*const fn (GLuint, GLint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3FEXTPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3UIEXTPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4FEXTPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4UIEXTPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC = ?*const fn (GLbitfield) callconv(.c) void;
pub const PFNGLTEXTUREBUFFEREXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLTEXTUREIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXTUREIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXTUREIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXTUREPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLTEXTUREPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLTEXTUREPARAMETERFEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLTEXTUREPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLTEXTUREPARAMETERIEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLTEXTUREPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLTEXTURERENDERBUFFEREXTPROC = ?*const fn (GLuint, GLenum, GLuint) callconv(.c) void;
pub const PFNGLTEXTURESUBIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXTURESUBIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXTURESUBIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLUNMAPNAMEDBUFFEREXTPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLVERTEXARRAYCOLOROFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.c) void;
pub const PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLsizei, GLintptr) callconv(.c) void;
pub const PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.c) void;
pub const PFNGLVERTEXARRAYINDEXOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.c) void;
pub const PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr) callconv(.c) void;
pub const PFNGLVERTEXARRAYNORMALOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.c) void;
pub const PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.c) void;
pub const PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.c) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.c) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr) callconv(.c) void;
pub const PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.c) void;
pub const PFNGLDISCARDFRAMEBUFFEREXTPROC = ?*const fn (GLenum, GLsizei, [*c]const GLenum) callconv(.c) void;
pub const PFNGLBEGINQUERYEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDELETEQUERIESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLENDQUERYEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLGENQUERIESEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETINTEGER64VEXTPROC = ?*const fn (GLenum, [*c]GLint64) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTUIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETQUERYIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISQUERYEXTPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLQUERYCOUNTEREXTPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLDRAWBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.c) void;
pub const PFNGLCOLORMASKINDEXEDEXTPROC = ?*const fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.c) void;
pub const PFNGLDISABLEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLENABLEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLGETBOOLEANINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLboolean) callconv(.c) void;
pub const PFNGLGETINTEGERINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLint) callconv(.c) void;
pub const PFNGLISENABLEDINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) GLboolean;
pub const PFNGLBLENDEQUATIONSEPARATEIEXTPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDEQUATIONIEXTPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCSEPARATEIEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCIEXTPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLCOLORMASKIEXTPROC = ?*const fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.c) void;
pub const PFNGLDISABLEIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLENABLEIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLISENABLEDIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) GLboolean;
pub const PFNGLDRAWELEMENTSBASEVERTEXEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint) callconv(.c) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC = ?*const fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLDRAWARRAYSINSTANCEDEXTPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.c) void;
pub const PFNGLDRAWRANGEELEMENTSEXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDEXTPROC = ?*const fn (GLenum, GLuint, GLsizei) callconv(.c) void;
pub const GLeglClientBufferEXT = ?*anyopaque;
pub const PFNGLBUFFERSTORAGEEXTERNALEXTPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.c) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.c) void;
pub const PFNGLFOGCOORDPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLFOGCOORDDEXTPROC = ?*const fn (GLdouble) callconv(.c) void;
pub const PFNGLFOGCOORDDVEXTPROC = ?*const fn ([*c]const GLdouble) callconv(.c) void;
pub const PFNGLFOGCOORDFEXTPROC = ?*const fn (GLfloat) callconv(.c) void;
pub const PFNGLFOGCOORDFVEXTPROC = ?*const fn ([*c]const GLfloat) callconv(.c) void;
pub const PFNGLFRAGMENTCOLORMATERIALEXTPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTMODELFEXTPROC = ?*const fn (GLenum, GLfloat) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTMODELFVEXTPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTMODELIEXTPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTMODELIVEXTPROC = ?*const fn (GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTFEXTPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTIEXTPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLFRAGMENTMATERIALFEXTPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLFRAGMENTMATERIALFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLFRAGMENTMATERIALIEXTPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLFRAGMENTMATERIALIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLGETFRAGMENTLIGHTFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETFRAGMENTLIGHTIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETFRAGMENTMATERIALFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLGETFRAGMENTMATERIALIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLLIGHTENVIEXTPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLBLITFRAMEBUFFEREXTPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.c) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLBINDFRAMEBUFFEREXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLBINDRENDERBUFFEREXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC = ?*const fn (GLenum) callconv(.c) GLenum;
pub const PFNGLDELETEFRAMEBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLDELETERENDERBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE1DEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLGENFRAMEBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGENRENDERBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGENERATEMIPMAPEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISFRAMEBUFFEREXTPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLISRENDERBUFFEREXTPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLRENDERBUFFERSTORAGEEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTUREEXTPROC = ?*const fn (GLenum, GLenum, GLuint, GLint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.c) void;
pub const PFNGLPROGRAMPARAMETERIEXTPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.c) void;
pub const PFNGLPROGRAMENVPARAMETERS4FVEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLBINDFRAGDATALOCATIONEXTPROC = ?*const fn (GLuint, GLuint, [*c]const GLchar) callconv(.c) void;
pub const PFNGLGETFRAGDATALOCATIONEXTPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.c) GLint;
pub const PFNGLGETUNIFORMUIVEXTPROC = ?*const fn (GLuint, GLint, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBIIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBIUIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLUNIFORM1UIEXTPROC = ?*const fn (GLint, GLuint) callconv(.c) void;
pub const PFNGLUNIFORM1UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLUNIFORM2UIEXTPROC = ?*const fn (GLint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLUNIFORM2UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLUNIFORM3UIEXTPROC = ?*const fn (GLint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLUNIFORM3UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLUNIFORM4UIEXTPROC = ?*const fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLUNIFORM4UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI1IEXTPROC = ?*const fn (GLuint, GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI1IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI1UIEXTPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI1UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI2IEXTPROC = ?*const fn (GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI2IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI2UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI2UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI3IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI3IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI3UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI3UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4BVEXTPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4SVEXTPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4UBVEXTPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBI4USVEXTPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.c) void;
pub const PFNGLVERTEXATTRIBIPOINTEREXTPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLGETHISTOGRAMEXTPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETHISTOGRAMPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETHISTOGRAMPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETMINMAXEXTPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETMINMAXPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETMINMAXPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLHISTOGRAMEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLboolean) callconv(.c) void;
pub const PFNGLMINMAXEXTPROC = ?*const fn (GLenum, GLenum, GLboolean) callconv(.c) void;
pub const PFNGLRESETHISTOGRAMEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLRESETMINMAXEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLINDEXFUNCEXTPROC = ?*const fn (GLenum, GLfloat) callconv(.c) void;
pub const PFNGLINDEXMATERIALEXTPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLVERTEXATTRIBDIVISOREXTPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLAPPLYTEXTUREEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLTEXTURELIGHTEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLTEXTUREMATERIALEXTPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLMAPBUFFERRANGEEXTPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.c) ?*anyopaque;
pub const PFNGLBUFFERSTORAGEMEMEXTPROC = ?*const fn (GLenum, GLsizeiptr, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLCREATEMEMORYOBJECTSEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLDELETEMEMORYOBJECTSEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETUNSIGNEDBYTEI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLubyte) callconv(.c) void;
pub const PFNGLGETUNSIGNEDBYTEVEXTPROC = ?*const fn (GLenum, [*c]GLubyte) callconv(.c) void;
pub const PFNGLISMEMORYOBJECTEXTPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLMEMORYOBJECTPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC = ?*const fn (GLuint, GLsizeiptr, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXSTORAGEMEM1DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXSTORAGEMEM2DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXSTORAGEMEM3DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXTURESTORAGEMEM1DEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXTURESTORAGEMEM2DEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXTURESTORAGEMEM3DEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLIMPORTMEMORYFDEXTPROC = ?*const fn (GLuint, GLuint64, GLenum, GLint) callconv(.c) void;
pub const PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC = ?*const fn (GLuint, GLuint64, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLIMPORTMEMORYWIN32NAMEEXTPROC = ?*const fn (GLuint, GLuint64, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLMULTIDRAWARRAYSEXTPROC = ?*const fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLMULTIDRAWELEMENTSEXTPROC = ?*const fn (GLenum, [*c]GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei) callconv(.c) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLSAMPLEMASKEXTPROC = ?*const fn (GLclampf, GLboolean) callconv(.c) void;
pub const PFNGLSAMPLEPATTERNEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLDRAWBUFFERSINDEXEDEXTPROC = ?*const fn (GLint, [*c]const GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLGETINTEGERI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLint) callconv(.c) void;
pub const PFNGLREADBUFFERINDEXEDEXTPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLCOLORTABLEEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLGETCOLORTABLEEXTPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFEXTPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIEXTPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLPOINTPARAMETERFEXTPROC = ?*const fn (GLenum, GLfloat) callconv(.c) void;
pub const PFNGLPOINTPARAMETERFVEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPOLYGONOFFSETEXTPROC = ?*const fn (GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPOLYGONOFFSETCLAMPEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPROVOKINGVERTEXEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLCOVERAGEMODULATIONNVPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLCOVERAGEMODULATIONTABLENVPROC = ?*const fn (GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLGETCOVERAGEMODULATIONTABLENVPROC = ?*const fn (GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLRASTERSAMPLESEXTPROC = ?*const fn (GLuint, GLboolean) callconv(.c) void;
pub const PFNGLGETNUNIFORMFVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETNUNIFORMIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.c) void;
pub const PFNGLREADNPIXELSEXTPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLBEGINSCENEEXTPROC = ?*const fn () callconv(.c) void;
pub const PFNGLENDSCENEEXTPROC = ?*const fn () callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3BEXTPROC = ?*const fn (GLbyte, GLbyte, GLbyte) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3BVEXTPROC = ?*const fn ([*c]const GLbyte) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3DEXTPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3DVEXTPROC = ?*const fn ([*c]const GLdouble) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3FEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3FVEXTPROC = ?*const fn ([*c]const GLfloat) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3IEXTPROC = ?*const fn (GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3IVEXTPROC = ?*const fn ([*c]const GLint) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3SEXTPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3SVEXTPROC = ?*const fn ([*c]const GLshort) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3UBEXTPROC = ?*const fn (GLubyte, GLubyte, GLubyte) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3UBVEXTPROC = ?*const fn ([*c]const GLubyte) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3UIVEXTPROC = ?*const fn ([*c]const GLuint) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3USEXTPROC = ?*const fn (GLushort, GLushort, GLushort) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3USVEXTPROC = ?*const fn ([*c]const GLushort) callconv(.c) void;
pub const PFNGLSECONDARYCOLORPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLDELETESEMAPHORESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGENSEMAPHORESEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64) callconv(.c) void;
pub const PFNGLISSEMAPHOREEXTPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLSEMAPHOREPARAMETERUI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLSIGNALSEMAPHOREEXTPROC = ?*const fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.c) void;
pub const PFNGLWAITSEMAPHOREEXTPROC = ?*const fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.c) void;
pub const PFNGLIMPORTSEMAPHOREFDEXTPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.c) void;
pub const PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC = ?*const fn (GLuint, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLACTIVEPROGRAMEXTPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLCREATESHADERPROGRAMEXTPROC = ?*const fn (GLenum, [*c]const GLchar) callconv(.c) GLuint;
pub const PFNGLUSESHADERPROGRAMEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = ?*const fn () callconv(.c) void;
pub const PFNGLBINDIMAGETEXTUREEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint) callconv(.c) void;
pub const PFNGLMEMORYBARRIEREXTPROC = ?*const fn (GLbitfield) callconv(.c) void;
pub const PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC = ?*const fn (GLsizei, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC = ?*const fn (GLuint, GLsizei) callconv(.c) void;
pub const PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC = ?*const fn (GLuint) callconv(.c) GLsizei;
pub const PFNGLTEXPAGECOMMITMENTEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXTUREPAGECOMMITMENTEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLACTIVESTENCILFACEEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLTEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLPATCHPARAMETERIEXTPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLTEXIMAGE3DEXTPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLGETSAMPLERPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLSAMPLERPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLSAMPLERPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLTEXBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLCLEARCOLORIIEXTPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLCLEARCOLORIUIEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLGETTEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETTEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLTEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLTEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLARETEXTURESRESIDENTEXTPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.c) GLboolean;
pub const PFNGLBINDTEXTUREEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDELETETEXTURESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGENTEXTURESEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLISTEXTUREEXTPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLPRIORITIZETEXTURESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLclampf) callconv(.c) void;
pub const PFNGLTEXTURENORMALEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLTEXSTORAGE1DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.c) void;
pub const PFNGLTEXSTORAGE2DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLTEXSTORAGE3DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLTEXTURESTORAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei) callconv(.c) void;
pub const PFNGLTEXTURESTORAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLTEXTURESTORAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLTEXTUREVIEWEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTUI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.c) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLBINDBUFFERBASEEXTPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.c) void;
pub const PFNGLBINDBUFFEROFFSETEXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr) callconv(.c) void;
pub const PFNGLBINDBUFFERRANGEEXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLENDTRANSFORMFEEDBACKEXTPROC = ?*const fn () callconv(.c) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.c) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.c) void;
pub const PFNGLARRAYELEMENTEXTPROC = ?*const fn (GLint) callconv(.c) void;
pub const PFNGLCOLORPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLDRAWARRAYSEXTPROC = ?*const fn (GLenum, GLint, GLsizei) callconv(.c) void;
pub const PFNGLEDGEFLAGPOINTEREXTPROC = ?*const fn (GLsizei, GLsizei, [*c]const GLboolean) callconv(.c) void;
pub const PFNGLINDEXPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLNORMALPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXCOORDPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLVERTEXPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLBINDARRAYSETEXTPROC = ?*const fn (?*const anyopaque) callconv(.c) void;
pub const PFNGLCREATEARRAYSETEXTPROC = ?*const fn () callconv(.c) ?*const anyopaque;
pub const PFNGLDELETEARRAYSETSEXTPROC = ?*const fn (GLsizei, [*c]?*const anyopaque) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBLDVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.c) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL1DEXTPROC = ?*const fn (GLuint, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL1DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL2DEXTPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL2DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL3DEXTPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL3DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL4DEXTPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL4DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBLPOINTEREXTPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLBEGINVERTEXSHADEREXTPROC = ?*const fn () callconv(.c) void;
pub const PFNGLBINDLIGHTPARAMETEREXTPROC = ?*const fn (GLenum, GLenum) callconv(.c) GLuint;
pub const PFNGLBINDMATERIALPARAMETEREXTPROC = ?*const fn (GLenum, GLenum) callconv(.c) GLuint;
pub const PFNGLBINDPARAMETEREXTPROC = ?*const fn (GLenum) callconv(.c) GLuint;
pub const PFNGLBINDTEXGENPARAMETEREXTPROC = ?*const fn (GLenum, GLenum, GLenum) callconv(.c) GLuint;
pub const PFNGLBINDTEXTUREUNITPARAMETEREXTPROC = ?*const fn (GLenum, GLenum) callconv(.c) GLuint;
pub const PFNGLBINDVERTEXSHADEREXTPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDELETEVERTEXSHADEREXTPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLENABLEVARIANTCLIENTSTATEEXTPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLENDVERTEXSHADEREXTPROC = ?*const fn () callconv(.c) void;
pub const PFNGLEXTRACTCOMPONENTEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLGENSYMBOLSEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.c) GLuint;
pub const PFNGLGENVERTEXSHADERSEXTPROC = ?*const fn (GLuint) callconv(.c) GLuint;
pub const PFNGLGETINVARIANTBOOLEANVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLboolean) callconv(.c) void;
pub const PFNGLGETINVARIANTFLOATVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETINVARIANTINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLboolean) callconv(.c) void;
pub const PFNGLGETLOCALCONSTANTFLOATVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETLOCALCONSTANTINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVARIANTBOOLEANVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLboolean) callconv(.c) void;
pub const PFNGLGETVARIANTFLOATVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETVARIANTINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVARIANTPOINTERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLINSERTCOMPONENTEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLISVARIANTENABLEDEXTPROC = ?*const fn (GLuint, GLenum) callconv(.c) GLboolean;
pub const PFNGLSETINVARIANTEXTPROC = ?*const fn (GLuint, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLSETLOCALCONSTANTEXTPROC = ?*const fn (GLuint, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLSHADEROP1EXTPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.c) void;
pub const PFNGLSHADEROP2EXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLSHADEROP3EXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLSWIZZLEEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLVARIANTPOINTEREXTPROC = ?*const fn (GLuint, GLenum, GLuint, ?*anyopaque) callconv(.c) void;
pub const PFNGLVARIANTBVEXTPROC = ?*const fn (GLuint, [*c]GLbyte) callconv(.c) void;
pub const PFNGLVARIANTDVEXTPROC = ?*const fn (GLuint, [*c]GLdouble) callconv(.c) void;
pub const PFNGLVARIANTFVEXTPROC = ?*const fn (GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLVARIANTIVEXTPROC = ?*const fn (GLuint, [*c]GLint) callconv(.c) void;
pub const PFNGLVARIANTSVEXTPROC = ?*const fn (GLuint, [*c]GLshort) callconv(.c) void;
pub const PFNGLVARIANTUBVEXTPROC = ?*const fn (GLuint, [*c]GLubyte) callconv(.c) void;
pub const PFNGLVARIANTUIVEXTPROC = ?*const fn (GLuint, [*c]GLuint) callconv(.c) void;
pub const PFNGLVARIANTUSVEXTPROC = ?*const fn (GLuint, [*c]GLushort) callconv(.c) void;
pub const PFNGLWRITEMASKEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLVERTEXWEIGHTPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLVERTEXWEIGHTFEXTPROC = ?*const fn (GLfloat) callconv(.c) void;
pub const PFNGLVERTEXWEIGHTFVEXTPROC = ?*const fn ([*c]GLfloat) callconv(.c) void;
pub const PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC = ?*const fn (GLuint, GLuint64, GLuint) callconv(.c) GLboolean;
pub const PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC = ?*const fn (GLuint, GLuint64) callconv(.c) GLboolean;
pub const PFNGLWINDOWRECTANGLESEXTPROC = ?*const fn (GLenum, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLIMPORTSYNCEXTPROC = ?*const fn (GLenum, GLintptr, GLbitfield) callconv(.c) GLsync;
pub const PFNGLFRAMETERMINATORGREMEDYPROC = ?*const fn () callconv(.c) void;
pub const PFNGLSTRINGMARKERGREMEDYPROC = ?*const fn (GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFHPPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFVHPPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIHPPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIVHPPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLMULTIMODEDRAWARRAYSIBMPROC = ?*const fn ([*c]const GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei, GLint) callconv(.c) void;
pub const PFNGLMULTIMODEDRAWELEMENTSIBMPROC = ?*const fn ([*c]const GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, GLint) callconv(.c) void;
pub const PFNGLCOLORPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLEDGEFLAGPOINTERLISTIBMPROC = ?*const fn (GLint, [*c][*c]const GLboolean, GLint) callconv(.c) void;
pub const PFNGLFOGCOORDPOINTERLISTIBMPROC = ?*const fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLINDEXPOINTERLISTIBMPROC = ?*const fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLNORMALPOINTERLISTIBMPROC = ?*const fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLSECONDARYCOLORPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLTEXCOORDPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLVERTEXPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLGETTEXTUREHANDLEIMGPROC = ?*const fn (GLuint) callconv(.c) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLEIMGPROC = ?*const fn (GLuint, GLuint) callconv(.c) GLuint64;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64IMGPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VIMGPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLUNIFORMHANDLEUI64IMGPROC = ?*const fn (GLint, GLuint64) callconv(.c) void;
pub const PFNGLUNIFORMHANDLEUI64VIMGPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLMAPTEXTURE2DINTELPROC = ?*const fn (GLuint, GLint, GLbitfield, [*c]GLint, [*c]GLenum) callconv(.c) ?*anyopaque;
pub const PFNGLSYNCTEXTUREINTELPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLUNMAPTEXTURE2DINTELPROC = ?*const fn (GLuint, GLint) callconv(.c) void;
pub const PFNGLCOLORPOINTERVINTELPROC = ?*const fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.c) void;
pub const PFNGLNORMALPOINTERVINTELPROC = ?*const fn (GLenum, [*c]?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXCOORDPOINTERVINTELPROC = ?*const fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.c) void;
pub const PFNGLVERTEXPOINTERVINTELPROC = ?*const fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.c) void;
pub const PFNGLBEGINPERFQUERYINTELPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLCREATEPERFQUERYINTELPROC = ?*const fn (GLuint, [*c]GLuint) callconv(.c) void;
pub const PFNGLDELETEPERFQUERYINTELPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLENDPERFQUERYINTELPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGETFIRSTPERFQUERYIDINTELPROC = ?*const fn ([*c]GLuint) callconv(.c) void;
pub const PFNGLGETNEXTPERFQUERYIDINTELPROC = ?*const fn (GLuint, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETPERFCOUNTERINFOINTELPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]GLchar, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint64) callconv(.c) void;
pub const PFNGLGETPERFQUERYDATAINTELPROC = ?*const fn (GLuint, GLuint, GLsizei, ?*anyopaque, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETPERFQUERYIDBYNAMEINTELPROC = ?*const fn ([*c]GLchar, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETPERFQUERYINFOINTELPROC = ?*const fn (GLuint, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint) callconv(.c) void;
pub const PFNGLTEXSCISSORFUNCINTELPROC = ?*const fn (GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLTEXSCISSORINTELPROC = ?*const fn (GLenum, GLclampf, GLclampf) callconv(.c) void;
pub const PFNGLBLENDBARRIERKHRPROC = ?*const fn () callconv(.c) void;
pub const GLDEBUGPROC = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const anyopaque) callconv(.c) void;
pub const PFNGLDEBUGMESSAGECALLBACKPROC = ?*const fn (GLDEBUGPROC, ?*const anyopaque) callconv(.c) void;
pub const PFNGLDEBUGMESSAGECONTROLPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.c) void;
pub const PFNGLDEBUGMESSAGEINSERTPROC = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLGETDEBUGMESSAGELOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.c) GLuint;
pub const PFNGLGETOBJECTLABELPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETOBJECTPTRLABELPROC = ?*const fn (?*anyopaque, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLOBJECTLABELPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLOBJECTPTRLABELPROC = ?*const fn (?*anyopaque, GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLPOPDEBUGGROUPPROC = ?*const fn () callconv(.c) void;
pub const PFNGLPUSHDEBUGGROUPPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLMAXSHADERCOMPILERTHREADSKHRPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGETNUNIFORMFVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETNUNIFORMIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.c) void;
pub const PFNGLGETNUNIFORMUIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLREADNPIXELSPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLBUFFERREGIONENABLEDPROC = ?*const fn () callconv(.c) GLuint;
pub const PFNGLDELETEBUFFERREGIONPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLDRAWBUFFERREGIONPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLsizei, GLint, GLint) callconv(.c) void;
pub const PFNGLNEWBUFFERREGIONPROC = ?*const fn (GLenum) callconv(.c) GLuint;
pub const PFNGLREADBUFFERREGIONPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLFRAMEBUFFERPARAMETERIMESAPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLRESIZEBUFFERSMESAPROC = ?*const fn () callconv(.c) void;
pub const PFNGLWINDOWPOS2DMESAPROC = ?*const fn (GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLWINDOWPOS2DVMESAPROC = ?*const fn ([*c]const GLdouble) callconv(.c) void;
pub const PFNGLWINDOWPOS2FMESAPROC = ?*const fn (GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLWINDOWPOS2FVMESAPROC = ?*const fn ([*c]const GLfloat) callconv(.c) void;
pub const PFNGLWINDOWPOS2IMESAPROC = ?*const fn (GLint, GLint) callconv(.c) void;
pub const PFNGLWINDOWPOS2IVMESAPROC = ?*const fn ([*c]const GLint) callconv(.c) void;
pub const PFNGLWINDOWPOS2SMESAPROC = ?*const fn (GLshort, GLshort) callconv(.c) void;
pub const PFNGLWINDOWPOS2SVMESAPROC = ?*const fn ([*c]const GLshort) callconv(.c) void;
pub const PFNGLWINDOWPOS3DMESAPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLWINDOWPOS3DVMESAPROC = ?*const fn ([*c]const GLdouble) callconv(.c) void;
pub const PFNGLWINDOWPOS3FMESAPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLWINDOWPOS3FVMESAPROC = ?*const fn ([*c]const GLfloat) callconv(.c) void;
pub const PFNGLWINDOWPOS3IMESAPROC = ?*const fn (GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLWINDOWPOS3IVMESAPROC = ?*const fn ([*c]const GLint) callconv(.c) void;
pub const PFNGLWINDOWPOS3SMESAPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLWINDOWPOS3SVMESAPROC = ?*const fn ([*c]const GLshort) callconv(.c) void;
pub const PFNGLWINDOWPOS4DMESAPROC = ?*const fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLWINDOWPOS4DVMESAPROC = ?*const fn ([*c]const GLdouble) callconv(.c) void;
pub const PFNGLWINDOWPOS4FMESAPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLWINDOWPOS4FVMESAPROC = ?*const fn ([*c]const GLfloat) callconv(.c) void;
pub const PFNGLWINDOWPOS4IMESAPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLWINDOWPOS4IVMESAPROC = ?*const fn ([*c]const GLint) callconv(.c) void;
pub const PFNGLWINDOWPOS4SMESAPROC = ?*const fn (GLshort, GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLWINDOWPOS4SVMESAPROC = ?*const fn ([*c]const GLshort) callconv(.c) void;
pub const PFNGLBEGINCONDITIONALRENDERNVXPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLENDCONDITIONALRENDERNVXPROC = ?*const fn () callconv(.c) void;
pub const PFNGLASYNCCOPYBUFFERSUBDATANVXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.c) GLsync;
pub const PFNGLASYNCCOPYIMAGESUBDATANVXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.c) GLuint;
pub const PFNGLMULTICASTSCISSORARRAYVNVXPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLMULTICASTVIEWPORTARRAYVNVXPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLUPLOADGPUMASKNVXPROC = ?*const fn (GLbitfield) callconv(.c) void;
pub const PFNGLLGPUCOPYIMAGESUBDATANVXPROC = ?*const fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLLGPUINTERLOCKNVXPROC = ?*const fn () callconv(.c) void;
pub const PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC = ?*const fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLSIGNALSEMAPHOREUI64NVXPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLWAITSEMAPHOREUI64NVXPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLSTEREOPARAMETERFNVPROC = ?*const fn (GLenum, GLfloat) callconv(.c) void;
pub const PFNGLSTEREOPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei, GLint) callconv(.c) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei, GLint) callconv(.c) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC = ?*const fn (GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei, GLint) callconv(.c) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei, GLint) callconv(.c) void;
pub const PFNGLGETIMAGEHANDLENVPROC = ?*const fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.c) GLuint64;
pub const PFNGLGETTEXTUREHANDLENVPROC = ?*const fn (GLuint) callconv(.c) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLENVPROC = ?*const fn (GLuint, GLuint) callconv(.c) GLuint64;
pub const PFNGLISIMAGEHANDLERESIDENTNVPROC = ?*const fn (GLuint64) callconv(.c) GLboolean;
pub const PFNGLISTEXTUREHANDLERESIDENTNVPROC = ?*const fn (GLuint64) callconv(.c) GLboolean;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC = ?*const fn (GLuint64) callconv(.c) void;
pub const PFNGLMAKEIMAGEHANDLERESIDENTNVPROC = ?*const fn (GLuint64, GLenum) callconv(.c) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC = ?*const fn (GLuint64) callconv(.c) void;
pub const PFNGLMAKETEXTUREHANDLERESIDENTNVPROC = ?*const fn (GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLUNIFORMHANDLEUI64NVPROC = ?*const fn (GLint, GLuint64) callconv(.c) void;
pub const PFNGLUNIFORMHANDLEUI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLBLENDBARRIERNVPROC = ?*const fn () callconv(.c) void;
pub const PFNGLBLENDPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLVIEWPORTPOSITIONWSCALENVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLCALLCOMMANDLISTNVPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLCOMMANDLISTSEGMENTSNVPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLCOMPILECOMMANDLISTNVPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLCREATECOMMANDLISTSNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLCREATESTATESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLDELETECOMMANDLISTSNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLDELETESTATESNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLDRAWCOMMANDSADDRESSNVPROC = ?*const fn (GLenum, [*c]const GLuint64, [*c]const GLsizei, GLuint) callconv(.c) void;
pub const PFNGLDRAWCOMMANDSNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLintptr, [*c]const GLsizei, GLuint) callconv(.c) void;
pub const PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC = ?*const fn ([*c]const GLuint64, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.c) void;
pub const PFNGLDRAWCOMMANDSSTATESNVPROC = ?*const fn (GLuint, [*c]const GLintptr, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.c) void;
pub const PFNGLGETCOMMANDHEADERNVPROC = ?*const fn (GLenum, GLuint) callconv(.c) GLuint;
pub const PFNGLGETSTAGEINDEXNVPROC = ?*const fn (GLenum) callconv(.c) GLushort;
pub const PFNGLISCOMMANDLISTNVPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLISSTATENVPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC = ?*const fn (GLuint, GLuint, [*c]?*const anyopaque, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.c) void;
pub const PFNGLSTATECAPTURENVPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLBEGINCONDITIONALRENDERNVPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLENDCONDITIONALRENDERNVPROC = ?*const fn () callconv(.c) void;
pub const PFNGLSUBPIXELPRECISIONBIASNVPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERFNVPROC = ?*const fn (GLenum, GLfloat) callconv(.c) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLCOPYBUFFERSUBDATANVPROC = ?*const fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLCOPYIMAGESUBDATANVPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLCLEARDEPTHDNVPROC = ?*const fn (GLdouble) callconv(.c) void;
pub const PFNGLDEPTHBOUNDSDNVPROC = ?*const fn (GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLDEPTHRANGEDNVPROC = ?*const fn (GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLDRAWBUFFERSNVPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.c) void;
pub const PFNGLDRAWARRAYSINSTANCEDNVPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDNVPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.c) void;
pub const PFNGLDRAWTEXTURENVPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const GLVULKANPROCNV = ?*const fn () callconv(.c) void;
pub const PFNGLDRAWVKIMAGENVPROC = ?*const fn (GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLGETVKPROCADDRNVPROC = ?*const fn ([*c]const GLchar) callconv(.c) GLVULKANPROCNV;
pub const PFNGLSIGNALVKFENCENVPROC = ?*const fn (GLuint64) callconv(.c) void;
pub const PFNGLSIGNALVKSEMAPHORENVPROC = ?*const fn (GLuint64) callconv(.c) void;
pub const PFNGLWAITVKSEMAPHORENVPROC = ?*const fn (GLuint64) callconv(.c) void;
pub const PFNGLEVALMAPSNVPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLGETMAPATTRIBPARAMETERFVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETMAPATTRIBPARAMETERIVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETMAPCONTROLPOINTSNVPROC = ?*const fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETMAPPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETMAPPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLMAPCONTROLPOINTSNVPROC = ?*const fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, ?*const anyopaque) callconv(.c) void;
pub const PFNGLMAPPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMAPPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLGETMULTISAMPLEFVNVPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLSAMPLEMASKINDEXEDNVPROC = ?*const fn (GLuint, GLbitfield) callconv(.c) void;
pub const PFNGLTEXRENDERBUFFERNVPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDELETEFENCESNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLFINISHFENCENVPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGENFENCESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETFENCEIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISFENCENVPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLSETFENCENVPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLTESTFENCENVPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLFRAGMENTCOVERAGECOLORNVPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLdouble) callconv(.c) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLBLITFRAMEBUFFERNVPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.c) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLPROGRAMVERTEXLIMITNVPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLMULTICASTBARRIERNVPROC = ?*const fn () callconv(.c) void;
pub const PFNGLMULTICASTBLITFRAMEBUFFERNVPROC = ?*const fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.c) void;
pub const PFNGLMULTICASTBUFFERSUBDATANVPROC = ?*const fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.c) void;
pub const PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC = ?*const fn (GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLMULTICASTCOPYIMAGESUBDATANVPROC = ?*const fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?*const fn (GLuint, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.c) void;
pub const PFNGLMULTICASTGETQUERYOBJECTIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLuint64) callconv(.c) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLMULTICASTWAITSYNCNVPROC = ?*const fn (GLuint, GLbitfield) callconv(.c) void;
pub const PFNGLRENDERGPUMASKNVPROC = ?*const fn (GLbitfield) callconv(.c) void;
pub const PFNGLPROGRAMENVPARAMETERI4INVPROC = ?*const fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLPROGRAMENVPARAMETERI4IVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMENVPARAMETERI4UINVPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLPROGRAMENVPARAMETERI4UIVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMENVPARAMETERSI4IVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4INVPROC = ?*const fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UINVPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGETUNIFORMI64VNVPROC = ?*const fn (GLuint, GLint, [*c]GLint64EXT) callconv(.c) void;
pub const PFNGLGETUNIFORMUI64VNVPROC = ?*const fn (GLuint, GLint, [*c]GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT, GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT, GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM1I64NVPROC = ?*const fn (GLint, GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM1I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM1UI64NVPROC = ?*const fn (GLint, GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM1UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM2I64NVPROC = ?*const fn (GLint, GLint64EXT, GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM2I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM2UI64NVPROC = ?*const fn (GLint, GLuint64EXT, GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM2UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM3I64NVPROC = ?*const fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM3I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM3UI64NVPROC = ?*const fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM3UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM4I64NVPROC = ?*const fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM4I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM4UI64NVPROC = ?*const fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM4UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const GLhalf = c_ushort;
pub const PFNGLCOLOR3HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLCOLOR3HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.c) void;
pub const PFNGLCOLOR4HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLCOLOR4HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.c) void;
pub const PFNGLFOGCOORDHNVPROC = ?*const fn (GLhalf) callconv(.c) void;
pub const PFNGLFOGCOORDHVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1HNVPROC = ?*const fn (GLenum, GLhalf) callconv(.c) void;
pub const PFNGLMULTITEXCOORD1HVNVPROC = ?*const fn (GLenum, [*c]const GLhalf) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2HNVPROC = ?*const fn (GLenum, GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLMULTITEXCOORD2HVNVPROC = ?*const fn (GLenum, [*c]const GLhalf) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3HNVPROC = ?*const fn (GLenum, GLhalf, GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLMULTITEXCOORD3HVNVPROC = ?*const fn (GLenum, [*c]const GLhalf) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4HNVPROC = ?*const fn (GLenum, GLhalf, GLhalf, GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4HVNVPROC = ?*const fn (GLenum, [*c]const GLhalf) callconv(.c) void;
pub const PFNGLNORMAL3HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLNORMAL3HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLSECONDARYCOLOR3HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.c) void;
pub const PFNGLTEXCOORD1HNVPROC = ?*const fn (GLhalf) callconv(.c) void;
pub const PFNGLTEXCOORD1HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.c) void;
pub const PFNGLTEXCOORD2HNVPROC = ?*const fn (GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLTEXCOORD2HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.c) void;
pub const PFNGLTEXCOORD3HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLTEXCOORD3HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.c) void;
pub const PFNGLTEXCOORD4HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLTEXCOORD4HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.c) void;
pub const PFNGLVERTEX2HNVPROC = ?*const fn (GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLVERTEX2HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.c) void;
pub const PFNGLVERTEX3HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLVERTEX3HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.c) void;
pub const PFNGLVERTEX4HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLVERTEX4HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1HNVPROC = ?*const fn (GLuint, GLhalf) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1HVNVPROC = ?*const fn (GLuint, [*c]const GLhalf) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2HNVPROC = ?*const fn (GLuint, GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2HVNVPROC = ?*const fn (GLuint, [*c]const GLhalf) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3HNVPROC = ?*const fn (GLuint, GLhalf, GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3HVNVPROC = ?*const fn (GLuint, [*c]const GLhalf) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4HNVPROC = ?*const fn (GLuint, GLhalf, GLhalf, GLhalf, GLhalf) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4HVNVPROC = ?*const fn (GLuint, [*c]const GLhalf) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS1HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalf) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS2HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalf) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS3HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalf) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS4HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalf) callconv(.c) void;
pub const PFNGLVERTEXWEIGHTHNVPROC = ?*const fn (GLhalf) callconv(.c) void;
pub const PFNGLVERTEXWEIGHTHVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.c) void;
pub const PFNGLVERTEXATTRIBDIVISORNVPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLGETINTERNALFORMATSAMPLEIVNVPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLsizei, [*c]GLint) callconv(.c) void;
pub const PFNGLBUFFERATTACHMEMORYNVPROC = ?*const fn (GLenum, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC = ?*const fn (GLuint, GLenum, GLint, GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLNAMEDBUFFERATTACHMEMORYNVPROC = ?*const fn (GLuint, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLRESETMEMORYOBJECTPARAMETERNVPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLTEXATTACHMEMORYNVPROC = ?*const fn (GLenum, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXTUREATTACHMEMORYNVPROC = ?*const fn (GLuint, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLDRAWMESHTASKSINDIRECTNVPROC = ?*const fn (GLintptr) callconv(.c) void;
pub const PFNGLDRAWMESHTASKSNVPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC = ?*const fn (GLintptr, GLintptr, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC = ?*const fn (GLintptr, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX2X3FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX2X4FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX3X2FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX3X4FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX4X2FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX4X3FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLBEGINOCCLUSIONQUERYNVPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDELETEOCCLUSIONQUERIESNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLENDOCCLUSIONQUERYNVPROC = ?*const fn () callconv(.c) void;
pub const PFNGLGENOCCLUSIONQUERIESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETOCCLUSIONQUERYIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETOCCLUSIONQUERYUIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLISOCCLUSIONQUERYNVPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCOPYPATHNVPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLCOVERFILLPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCOVERFILLPATHNVPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCOVERSTROKEPATHNVPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLDELETEPATHSNVPROC = ?*const fn (GLuint, GLsizei) callconv(.c) void;
pub const PFNGLGENPATHSNVPROC = ?*const fn (GLsizei) callconv(.c) GLuint;
pub const PFNGLGETPATHCOLORGENFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPATHCOLORGENIVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETPATHCOMMANDSNVPROC = ?*const fn (GLuint, [*c]GLubyte) callconv(.c) void;
pub const PFNGLGETPATHCOORDSNVPROC = ?*const fn (GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPATHDASHARRAYNVPROC = ?*const fn (GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPATHLENGTHNVPROC = ?*const fn (GLuint, GLsizei, GLsizei) callconv(.c) GLfloat;
pub const PFNGLGETPATHMETRICRANGENVPROC = ?*const fn (GLbitfield, GLuint, GLsizei, GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPATHMETRICSNVPROC = ?*const fn (GLbitfield, GLsizei, GLenum, ?*const anyopaque, GLuint, GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPATHPARAMETERFVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPATHPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETPATHSPACINGNVPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLuint, GLfloat, GLfloat, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPATHTEXGENFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPATHTEXGENIVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETPROGRAMRESOURCEFVNVPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLINTERPOLATEPATHSNVPROC = ?*const fn (GLuint, GLuint, GLuint, GLfloat) callconv(.c) void;
pub const PFNGLISPATHNVPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLISPOINTINFILLPATHNVPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.c) GLboolean;
pub const PFNGLISPOINTINSTROKEPATHNVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.c) GLboolean;
pub const PFNGLMATRIXLOAD3X2FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXLOAD3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXMULT3X2FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXMULT3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPATHCOLORGENNVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPATHCOMMANDSNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLPATHCOORDSNVPROC = ?*const fn (GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLPATHCOVERDEPTHFUNCNVPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLPATHDASHARRAYNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPATHFOGGENNVPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLPATHGLYPHINDEXARRAYNVPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLuint, GLsizei, GLuint, GLfloat) callconv(.c) GLenum;
pub const PFNGLPATHGLYPHINDEXRANGENVPROC = ?*const fn (GLenum, ?*const anyopaque, GLbitfield, GLuint, GLfloat, [*c]GLuint) callconv(.c) GLenum;
pub const PFNGLPATHGLYPHRANGENVPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat) callconv(.c) void;
pub const PFNGLPATHGLYPHSNVPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLsizei, GLenum, ?*const anyopaque, GLenum, GLuint, GLfloat) callconv(.c) void;
pub const PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC = ?*const fn (GLuint, GLenum, GLsizeiptr, ?*const anyopaque, GLsizei, GLuint, GLsizei, GLuint, GLfloat) callconv(.c) GLenum;
pub const PFNGLPATHPARAMETERFNVPROC = ?*const fn (GLuint, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLPATHPARAMETERFVNVPROC = ?*const fn (GLuint, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPATHPARAMETERINVPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.c) void;
pub const PFNGLPATHPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLPATHSTENCILDEPTHOFFSETNVPROC = ?*const fn (GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPATHSTENCILFUNCNVPROC = ?*const fn (GLenum, GLint, GLuint) callconv(.c) void;
pub const PFNGLPATHSTRINGNVPROC = ?*const fn (GLuint, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLPATHSUBCOMMANDSNVPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLPATHSUBCOORDSNVPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLPATHTEXGENNVPROC = ?*const fn (GLenum, GLenum, GLint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPOINTALONGPATHNVPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat) callconv(.c) GLboolean;
pub const PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC = ?*const fn (GLuint, GLint, GLenum, GLint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLSTENCILFILLPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLuint, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLSTENCILFILLPATHNVPROC = ?*const fn (GLuint, GLenum, GLuint) callconv(.c) void;
pub const PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLint, GLuint, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLSTENCILSTROKEPATHNVPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.c) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHNVPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum) callconv(.c) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLint, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC = ?*const fn (GLuint, GLint, GLuint, GLenum) callconv(.c) void;
pub const PFNGLTRANSFORMPATHNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLWEIGHTPATHSNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLFLUSHPIXELDATARANGENVPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLPIXELDATARANGENVPROC = ?*const fn (GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLPOINTPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLPOINTPARAMETERIVNVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLPOLYGONMODENVPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLGETVIDEOI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.c) void;
pub const PFNGLGETVIDEOIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVIDEOUI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.c) void;
pub const PFNGLGETVIDEOUIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLPRESENTFRAMEDUALFILLNVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint) callconv(.c) void;
pub const PFNGLPRESENTFRAMEKEYEDNVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint) callconv(.c) void;
pub const PFNGLPRIMITIVERESTARTINDEXNVPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLPRIMITIVERESTARTNVPROC = ?*const fn () callconv(.c) void;
pub const PFNGLREADBUFFERNVPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLCOMBINERINPUTNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLCOMBINEROUTPUTNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean) callconv(.c) void;
pub const PFNGLCOMBINERPARAMETERFNVPROC = ?*const fn (GLenum, GLfloat) callconv(.c) void;
pub const PFNGLCOMBINERPARAMETERFVNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCOMBINERPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLCOMBINERPARAMETERIVNVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLFINALCOMBINERINPUTNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLCOMBINERSTAGEPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLRESOLVEDEPTHVALUESNVPROC = ?*const fn () callconv(.c) void;
pub const PFNGLSCISSOREXCLUSIVEARRAYVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLSCISSOREXCLUSIVENVPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLGETBUFFERPARAMETERUI64VNVPROC = ?*const fn (GLenum, GLenum, [*c]GLuint64EXT) callconv(.c) void;
pub const PFNGLGETINTEGERUI64VNVPROC = ?*const fn (GLenum, [*c]GLuint64EXT) callconv(.c) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.c) void;
pub const PFNGLISBUFFERRESIDENTNVPROC = ?*const fn (GLenum) callconv(.c) GLboolean;
pub const PFNGLISNAMEDBUFFERRESIDENTNVPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLMAKEBUFFERNONRESIDENTNVPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLMAKEBUFFERRESIDENTNVPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLMAKENAMEDBUFFERRESIDENTNVPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMUI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMUI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORMUI64NVPROC = ?*const fn (GLint, GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORMUI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLBINDSHADINGRATEIMAGENVPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGETSHADINGRATEIMAGEPALETTENVPROC = ?*const fn (GLuint, GLuint, [*c]GLenum) callconv(.c) void;
pub const PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC = ?*const fn (GLenum, GLuint, GLuint, [*c]GLint) callconv(.c) void;
pub const PFNGLSHADINGRATEIMAGEBARRIERNVPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLSHADINGRATEIMAGEPALETTENVPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLenum) callconv(.c) void;
pub const PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DNVPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DNVPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOPYTEXSUBIMAGE3DNVPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERNVPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLTEXIMAGE3DNVPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXSUBIMAGE3DNVPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXTUREBARRIERNVPROC = ?*const fn () callconv(.c) void;
pub const PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLACTIVEVARYINGNVPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.c) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKNVPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLBINDBUFFERBASENVPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.c) void;
pub const PFNGLBINDBUFFEROFFSETNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr) callconv(.c) void;
pub const PFNGLBINDBUFFERRANGENVPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLENDTRANSFORMFEEDBACKNVPROC = ?*const fn () callconv(.c) void;
pub const PFNGLGETACTIVEVARYINGNVPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC = ?*const fn (GLuint, GLuint, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVARYINGLOCATIONNVPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.c) GLint;
pub const PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC = ?*const fn (GLuint, [*c]const GLint, GLenum) callconv(.c) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint, GLenum) callconv(.c) void;
pub const PFNGLBINDTRANSFORMFEEDBACKNVPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKNVPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLGENTRANSFORMFEEDBACKSNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLISTRANSFORMFEEDBACKNVPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLPAUSETRANSFORMFEEDBACKNVPROC = ?*const fn () callconv(.c) void;
pub const PFNGLRESUMETRANSFORMFEEDBACKNVPROC = ?*const fn () callconv(.c) void;
pub const GLvdpauSurfaceNV = GLintptr;
pub const PFNGLVDPAUFININVPROC = ?*const fn () callconv(.c) void;
pub const PFNGLVDPAUGETSURFACEIVNVPROC = ?*const fn (GLvdpauSurfaceNV, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.c) void;
pub const PFNGLVDPAUINITNVPROC = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) void;
pub const PFNGLVDPAUISSURFACENVPROC = ?*const fn (GLvdpauSurfaceNV) callconv(.c) void;
pub const PFNGLVDPAUMAPSURFACESNVPROC = ?*const fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.c) void;
pub const PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC = ?*const fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint) callconv(.c) GLvdpauSurfaceNV;
pub const PFNGLVDPAUREGISTERVIDEOSURFACENVPROC = ?*const fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint) callconv(.c) GLvdpauSurfaceNV;
pub const PFNGLVDPAUSURFACEACCESSNVPROC = ?*const fn (GLvdpauSurfaceNV, GLenum) callconv(.c) void;
pub const PFNGLVDPAUUNMAPSURFACESNVPROC = ?*const fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.c) void;
pub const PFNGLVDPAUUNREGISTERSURFACENVPROC = ?*const fn (GLvdpauSurfaceNV) callconv(.c) void;
pub const PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC = ?*const fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.c) GLvdpauSurfaceNV;
pub const PFNGLFLUSHVERTEXARRAYRANGENVPROC = ?*const fn () callconv(.c) void;
pub const PFNGLVERTEXARRAYRANGENVPROC = ?*const fn (GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBLI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBLUI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL1I64NVPROC = ?*const fn (GLuint, GLint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL1I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL1UI64NVPROC = ?*const fn (GLuint, GLuint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL1UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL2I64NVPROC = ?*const fn (GLuint, GLint64EXT, GLint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL2I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL2UI64NVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL2UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL3I64NVPROC = ?*const fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL3I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL3UI64NVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL3UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL4I64NVPROC = ?*const fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL4I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL4UI64NVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBL4UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBLFORMATNVPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei) callconv(.c) void;
pub const PFNGLBUFFERADDRESSRANGENVPROC = ?*const fn (GLenum, GLuint, GLuint64EXT, GLsizeiptr) callconv(.c) void;
pub const PFNGLCOLORFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.c) void;
pub const PFNGLEDGEFLAGFORMATNVPROC = ?*const fn (GLsizei) callconv(.c) void;
pub const PFNGLFOGCOORDFORMATNVPROC = ?*const fn (GLenum, GLsizei) callconv(.c) void;
pub const PFNGLGETINTEGERUI64I_VNVPROC = ?*const fn (GLenum, GLuint, [*c]GLuint64EXT) callconv(.c) void;
pub const PFNGLINDEXFORMATNVPROC = ?*const fn (GLenum, GLsizei) callconv(.c) void;
pub const PFNGLNORMALFORMATNVPROC = ?*const fn (GLenum, GLsizei) callconv(.c) void;
pub const PFNGLSECONDARYCOLORFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.c) void;
pub const PFNGLTEXCOORDFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.c) void;
pub const PFNGLVERTEXATTRIBFORMATNVPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei) callconv(.c) void;
pub const PFNGLVERTEXATTRIBIFORMATNVPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei) callconv(.c) void;
pub const PFNGLVERTEXFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.c) void;
pub const PFNGLAREPROGRAMSRESIDENTNVPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.c) GLboolean;
pub const PFNGLBINDPROGRAMNVPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDELETEPROGRAMSNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLEXECUTEPROGRAMNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLGENPROGRAMSNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETPROGRAMPARAMETERDVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLdouble) callconv(.c) void;
pub const PFNGLGETPROGRAMPARAMETERFVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPROGRAMSTRINGNVPROC = ?*const fn (GLuint, GLenum, [*c]GLubyte) callconv(.c) void;
pub const PFNGLGETPROGRAMIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETTRACKMATRIXIVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVNVPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBDVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBFVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISPROGRAMNVPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLLOADPROGRAMNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLubyte) callconv(.c) void;
pub const PFNGLPROGRAMPARAMETER4DNVPROC = ?*const fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMPARAMETER4DVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMPARAMETER4FNVPROC = ?*const fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMPARAMETER4FVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMPARAMETERS4DVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLPROGRAMPARAMETERS4FVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLREQUESTRESIDENTPROGRAMSNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLTRACKMATRIXNVPROC = ?*const fn (GLenum, GLuint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1DNVPROC = ?*const fn (GLuint, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1FNVPROC = ?*const fn (GLuint, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1SNVPROC = ?*const fn (GLuint, GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2DNVPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2FNVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2SNVPROC = ?*const fn (GLuint, GLshort, GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3DNVPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3FNVPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3SNVPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4DNVPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4FNVPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4SNVPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4UBNVPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4UBVNVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.c) void;
pub const PFNGLVERTEXATTRIBPOINTERNVPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS1DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS1FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS1SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS2DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS2FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS2SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS3DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS3FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS3SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS4DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS4FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS4SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.c) void;
pub const PFNGLVERTEXATTRIBS4UBVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte) callconv(.c) void;
pub const PFNGLBEGINVIDEOCAPTURENVPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptrARB) callconv(.c) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC = ?*const fn (GLuint, GLuint, GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLENDVIDEOCAPTURENVPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGETVIDEOCAPTURESTREAMDVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLdouble) callconv(.c) void;
pub const PFNGLGETVIDEOCAPTURESTREAMFVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETVIDEOCAPTURESTREAMIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVIDEOCAPTUREIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLVIDEOCAPTURENVPROC = ?*const fn (GLuint, [*c]GLuint, [*c]GLuint64EXT) callconv(.c) GLenum;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLDEPTHRANGEARRAYFVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLDEPTHRANGEINDEXEDFNVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLDISABLEINVPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLENABLEINVPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLGETFLOATI_VNVPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLISENABLEDINVPROC = ?*const fn (GLenum, GLuint) callconv(.c) GLboolean;
pub const PFNGLSCISSORARRAYVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLSCISSORINDEXEDNVPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLSCISSORINDEXEDVNVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLVIEWPORTARRAYVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVIEWPORTINDEXEDFNVPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVIEWPORTINDEXEDFVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVIEWPORTSWIZZLENVPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC = ?*const fn (GLenum, GLeglImageOES) callconv(.c) void;
pub const PFNGLEGLIMAGETARGETTEXTURE2DOESPROC = ?*const fn (GLenum, GLeglImageOES) callconv(.c) void;
pub const PFNGLBLENDEQUATIONSEPARATEOESPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCSEPARATEOESPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDEQUATIONOESPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLCOPYIMAGESUBDATAOESPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLBLENDEQUATIONSEPARATEIOESPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDEQUATIONIOESPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCSEPARATEIOESPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCIOESPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLCOLORMASKIOESPROC = ?*const fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.c) void;
pub const PFNGLDISABLEIOESPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLENABLEIOESPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLISENABLEDIOESPROC = ?*const fn (GLenum, GLuint) callconv(.c) GLboolean;
pub const PFNGLBINDFRAMEBUFFEROESPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLBINDRENDERBUFFEROESPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSOESPROC = ?*const fn (GLenum) callconv(.c) GLenum;
pub const PFNGLDELETEFRAMEBUFFERSOESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLDELETERENDERBUFFERSOESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFEROESPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DOESPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.c) void;
pub const PFNGLGENFRAMEBUFFERSOESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGENRENDERBUFFERSOESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGENERATEMIPMAPOESPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISFRAMEBUFFEROESPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLISRENDERBUFFEROESPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLRENDERBUFFERSTORAGEOESPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLGETPROGRAMBINARYOESPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLPROGRAMBINARYOESPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLGETBUFFERPOINTERVOESPROC = ?*const fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLMAPBUFFEROESPROC = ?*const fn (GLenum, GLenum) callconv(.c) ?*anyopaque;
pub const PFNGLUNMAPBUFFEROESPROC = ?*const fn (GLenum) callconv(.c) GLboolean;
pub const PFNGLCURRENTPALETTEMATRIXOESPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLMATRIXINDEXPOINTEROESPROC = ?*const fn (GLint, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLWEIGHTPOINTEROESPROC = ?*const fn (GLint, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLMINSAMPLESHADINGOESPROC = ?*const fn (GLfloat) callconv(.c) void;
pub const PFNGLCLEARDEPTHFOESPROC = ?*const fn (GLclampf) callconv(.c) void;
pub const PFNGLCLIPPLANEFOESPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLDEPTHRANGEFOESPROC = ?*const fn (GLclampf, GLclampf) callconv(.c) void;
pub const PFNGLFRUSTUMFOESPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLGETCLIPPLANEFOESPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLORTHOFOESPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DOESPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOPYTEXSUBIMAGE3DOESPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DOESPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLTEXIMAGE3DOESPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXSUBIMAGE3DOESPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLGETSAMPLERPARAMETERIIVOESPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVOESPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETTEXPARAMETERIIVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETTEXPARAMETERIUIVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLSAMPLERPARAMETERIIVOESPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLSAMPLERPARAMETERIUIVOESPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLTEXPARAMETERIIVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLTEXPARAMETERIUIVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLTEXBUFFEROESPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLTEXBUFFERRANGEOESPROC = ?*const fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLGETTEXGENFVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETTEXGENIVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETTEXGENXVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.c) void;
pub const PFNGLTEXGENFOESPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLTEXGENFVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLTEXGENIOESPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLTEXGENIVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLTEXGENXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.c) void;
pub const PFNGLTEXGENXVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.c) void;
pub const PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXTUREVIEWOESPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLBINDVERTEXARRAYOESPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDELETEVERTEXARRAYSOESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGENVERTEXARRAYSOESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLISVERTEXARRAYOESPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei) callconv(.c) void;
pub const PFNGLALPHAFUNCQCOMPROC = ?*const fn (GLenum, GLclampf) callconv(.c) void;
pub const PFNGLDISABLEDRIVERCONTROLQCOMPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLENABLEDRIVERCONTROLQCOMPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGETDRIVERCONTROLSTRINGQCOMPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETDRIVERCONTROLSQCOMPROC = ?*const fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLEXTGETBUFFERPOINTERVQCOMPROC = ?*const fn (GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLEXTGETBUFFERSQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTGETFRAMEBUFFERSQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTGETRENDERBUFFERSQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTGETTEXSUBIMAGEQCOMPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLEXTGETTEXTURESQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC = ?*const fn (GLuint, GLenum, [*c]GLchar, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTGETPROGRAMSQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTGETSHADERSQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTISPROGRAMBINARYQCOMPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, [*c]GLuint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC = ?*const fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC = ?*const fn () callconv(.c) void;
pub const PFNGLTEXTUREFOVEATIONPARAMETERSQCOMPROC = ?*const fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLENDTILINGQCOMPROC = ?*const fn (GLbitfield) callconv(.c) void;
pub const PFNGLSTARTTILINGQCOMPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, GLbitfield) callconv(.c) void;
pub const GLclampx = c_int;
pub const PFNGLALPHAFUNCXPROC = ?*const fn (GLenum, GLclampx) callconv(.c) void;
pub const PFNGLCLEARCOLORXPROC = ?*const fn (GLclampx, GLclampx, GLclampx, GLclampx) callconv(.c) void;
pub const PFNGLCLEARDEPTHXPROC = ?*const fn (GLclampx) callconv(.c) void;
pub const PFNGLCOLOR4XPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.c) void;
pub const PFNGLDEPTHRANGEXPROC = ?*const fn (GLclampx, GLclampx) callconv(.c) void;
pub const PFNGLFOGXPROC = ?*const fn (GLenum, GLfixed) callconv(.c) void;
pub const PFNGLFOGXVPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.c) void;
pub const PFNGLFRUSTUMFPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLFRUSTUMXPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.c) void;
pub const PFNGLLIGHTMODELXPROC = ?*const fn (GLenum, GLfixed) callconv(.c) void;
pub const PFNGLLIGHTMODELXVPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.c) void;
pub const PFNGLLIGHTXPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.c) void;
pub const PFNGLLIGHTXVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.c) void;
pub const PFNGLLINEWIDTHXPROC = ?*const fn (GLfixed) callconv(.c) void;
pub const PFNGLLOADMATRIXXPROC = ?*const fn ([*c]const GLfixed) callconv(.c) void;
pub const PFNGLMATERIALXPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.c) void;
pub const PFNGLMATERIALXVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.c) void;
pub const PFNGLMULTMATRIXXPROC = ?*const fn ([*c]const GLfixed) callconv(.c) void;
pub const PFNGLMULTITEXCOORD4XPROC = ?*const fn (GLenum, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.c) void;
pub const PFNGLNORMAL3XPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.c) void;
pub const PFNGLORTHOFPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLORTHOXPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.c) void;
pub const PFNGLPOINTSIZEXPROC = ?*const fn (GLfixed) callconv(.c) void;
pub const PFNGLPOLYGONOFFSETXPROC = ?*const fn (GLfixed, GLfixed) callconv(.c) void;
pub const PFNGLROTATEXPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.c) void;
pub const PFNGLSAMPLECOVERAGEXPROC = ?*const fn (GLclampx, GLboolean) callconv(.c) void;
pub const PFNGLSCALEXPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.c) void;
pub const PFNGLTEXENVXPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.c) void;
pub const PFNGLTEXENVXVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.c) void;
pub const PFNGLTEXPARAMETERXPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.c) void;
pub const PFNGLTRANSLATEXPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.c) void;
pub const PFNGLCLIPPLANEFPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCLIPPLANEXPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.c) void;
pub const PFNGLGETCLIPPLANEFPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETCLIPPLANEXPROC = ?*const fn (GLenum, [*c]GLfixed) callconv(.c) void;
pub const PFNGLGETFIXEDVPROC = ?*const fn (GLenum, [*c]GLfixed) callconv(.c) void;
pub const PFNGLGETLIGHTXVPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.c) void;
pub const PFNGLGETMATERIALXVPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.c) void;
pub const PFNGLGETTEXENVXVPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.c) void;
pub const PFNGLGETTEXPARAMETERXVPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.c) void;
pub const PFNGLPOINTPARAMETERXPROC = ?*const fn (GLenum, GLfixed) callconv(.c) void;
pub const PFNGLPOINTPARAMETERXVPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.c) void;
pub const PFNGLPOINTSIZEPOINTEROESPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXPARAMETERXVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.c) void;
pub const PFNGLERRORSTRINGREGALPROC = ?*const fn (GLenum) callconv(.c) [*c]const GLchar;
pub const PFNGLGETEXTENSIONREGALPROC = ?*const fn ([*c]const GLchar) callconv(.c) GLboolean;
pub const PFNGLISSUPPORTEDREGALPROC = ?*const fn ([*c]const GLchar) callconv(.c) GLboolean;
pub const GLLOGPROCREGAL = ?*const fn (GLenum, GLsizei, [*c]const GLchar, ?*anyopaque) callconv(.c) void;
pub const PFNGLLOGMESSAGECALLBACKREGALPROC = ?*const fn (GLLOGPROCREGAL) callconv(.c) void;
pub const PFNGLGETPROCADDRESSREGALPROC = ?*const fn ([*c]const GLchar) callconv(.c) ?*anyopaque;
pub const PFNGLDETAILTEXFUNCSGISPROC = ?*const fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLGETDETAILTEXFUNCSGISPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLFOGFUNCSGISPROC = ?*const fn (GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLGETFOGFUNCSGISPROC = ?*const fn ([*c]GLfloat) callconv(.c) void;
pub const PFNGLSAMPLEMASKSGISPROC = ?*const fn (GLclampf, GLboolean) callconv(.c) void;
pub const PFNGLSAMPLEPATTERNSGISPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLINTERLEAVEDTEXTURECOORDSETSSGISPROC = ?*const fn (GLint) callconv(.c) void;
pub const PFNGLSELECTTEXTURECOORDSETSGISPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLSELECTTEXTURESGISPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLSELECTTEXTURETRANSFORMSGISPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLMULTISAMPLESUBRECTPOSSGISPROC = ?*const fn (GLint, GLint) callconv(.c) void;
pub const PFNGLGETSHARPENTEXFUNCSGISPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLSHARPENTEXFUNCSGISPROC = ?*const fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLTEXIMAGE4DSGISPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXSUBIMAGE4DSGISPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLGETTEXFILTERFUNCSGISPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLTEXFILTERFUNCSGISPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLASYNCMARKERSGIXPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDELETEASYNCMARKERSSGIXPROC = ?*const fn (GLuint, GLsizei) callconv(.c) void;
pub const PFNGLFINISHASYNCSGIXPROC = ?*const fn ([*c]GLuint) callconv(.c) GLint;
pub const PFNGLGENASYNCMARKERSSGIXPROC = ?*const fn (GLsizei) callconv(.c) GLuint;
pub const PFNGLISASYNCMARKERSGIXPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLPOLLASYNCSGIXPROC = ?*const fn ([*c]GLuint) callconv(.c) GLint;
pub const PFNGLADDRESSSPACEPROC = ?*const fn (GLenum, GLbitfield) callconv(.c) void;
pub const PFNGLDATAPIPEPROC = ?*const fn (GLenum) callconv(.c) GLint;
pub const PFNGLFLUSHRASTERSGIXPROC = ?*const fn () callconv(.c) void;
pub const PFNGLFOGLAYERSSGIXPROC = ?*const fn (GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLGETFOGLAYERSSGIXPROC = ?*const fn ([*c]GLfloat) callconv(.c) void;
pub const PFNGLTEXTUREFOGSGIXPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLFRAGMENTCOLORMATERIALSGIXPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTMODELFSGIXPROC = ?*const fn (GLenum, GLfloat) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTMODELFVSGIXPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTMODELISGIXPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTMODELIVSGIXPROC = ?*const fn (GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTFSGIXPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTISGIXPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLFRAGMENTLIGHTIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLFRAGMENTMATERIALFSGIXPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLFRAGMENTMATERIALFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLFRAGMENTMATERIALISGIXPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLFRAGMENTMATERIALIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLGETFRAGMENTLIGHTFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETFRAGMENTLIGHTIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETFRAGMENTMATERIALFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETFRAGMENTMATERIALIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLFRAMEZOOMSGIXPROC = ?*const fn (GLint) callconv(.c) void;
pub const PFNGLIGLOOINTERFACESGIXPROC = ?*const fn (GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLALLOCMPEGPREDICTORSSGIXPROC = ?*const fn (GLsizei, GLsizei, GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLDELETEMPEGPREDICTORSSGIXPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGENMPEGPREDICTORSSGIXPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETMPEGPARAMETERFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETMPEGPARAMETERIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETMPEGPREDICTORSGIXPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETMPEGQUANTTABLEUBVPROC = ?*const fn (GLenum, [*c]GLubyte) callconv(.c) void;
pub const PFNGLISMPEGPREDICTORSGIXPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLMPEGPREDICTORSGIXPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLMPEGQUANTTABLEUBVPROC = ?*const fn (GLenum, [*c]GLubyte) callconv(.c) void;
pub const PFNGLSWAPMPEGPREDICTORSSGIXPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLGETNONLINLIGHTFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETNONLINMATERIALFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLNONLINLIGHTFVSGIXPROC = ?*const fn (GLenum, GLenum, GLint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLNONLINMATERIALFVSGIXPROC = ?*const fn (GLenum, GLenum, GLint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPIXELTEXGENSGIXPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLDEFORMSGIXPROC = ?*const fn (GLbitfield) callconv(.c) void;
pub const PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC = ?*const fn (GLbitfield) callconv(.c) void;
pub const PFNGLMESHBREADTHSGIXPROC = ?*const fn (GLint) callconv(.c) void;
pub const PFNGLMESHSTRIDESGIXPROC = ?*const fn (GLint) callconv(.c) void;
pub const PFNGLREFERENCEPLANESGIXPROC = ?*const fn ([*c]const GLdouble) callconv(.c) void;
pub const PFNGLSPRITEPARAMETERFSGIXPROC = ?*const fn (GLenum, GLfloat) callconv(.c) void;
pub const PFNGLSPRITEPARAMETERFVSGIXPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLSPRITEPARAMETERISGIXPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLSPRITEPARAMETERIVSGIXPROC = ?*const fn (GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLTAGSAMPLEBUFFERSGIXPROC = ?*const fn () callconv(.c) void;
pub const PFNGLGETVECTOROPERATIONSGIXPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLVECTOROPERATIONSGIXPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLAREVERTEXARRAYSRESIDENTSGIXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.c) GLboolean;
pub const PFNGLBINDVERTEXARRAYSGIXPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDELETEVERTEXARRAYSSGIXPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGENVERTEXARRAYSSGIXPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLISVERTEXARRAYSGIXPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLPRIORITIZEVERTEXARRAYSSGIXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLclampf) callconv(.c) void;
pub const PFNGLCOLORTABLEPARAMETERFVSGIPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCOLORTABLEPARAMETERIVSGIPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLCOLORTABLESGIPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOPYCOLORTABLESGIPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVSGIPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVSGIPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETCOLORTABLESGIPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERFVSGIPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERIVSGIPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFSGIPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFVSGIPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPIXELTRANSFORMPARAMETERISGIPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIVSGIPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLPIXELTRANSFORMSGIPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLFINISHTEXTURESUNXPROC = ?*const fn () callconv(.c) void;
pub const PFNGLGLOBALALPHAFACTORBSUNPROC = ?*const fn (GLbyte) callconv(.c) void;
pub const PFNGLGLOBALALPHAFACTORDSUNPROC = ?*const fn (GLdouble) callconv(.c) void;
pub const PFNGLGLOBALALPHAFACTORFSUNPROC = ?*const fn (GLfloat) callconv(.c) void;
pub const PFNGLGLOBALALPHAFACTORISUNPROC = ?*const fn (GLint) callconv(.c) void;
pub const PFNGLGLOBALALPHAFACTORSSUNPROC = ?*const fn (GLshort) callconv(.c) void;
pub const PFNGLGLOBALALPHAFACTORUBSUNPROC = ?*const fn (GLubyte) callconv(.c) void;
pub const PFNGLGLOBALALPHAFACTORUISUNPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGLOBALALPHAFACTORUSSUNPROC = ?*const fn (GLushort) callconv(.c) void;
pub const PFNGLREADVIDEOPIXELSSUNPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEPOINTERSUNPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUBSUNPROC = ?*const fn (GLubyte) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUBVSUNPROC = ?*const fn ([*c]const GLubyte) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUISUNPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUIVSUNPROC = ?*const fn ([*c]const GLuint) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUSSUNPROC = ?*const fn (GLushort) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUSVSUNPROC = ?*const fn ([*c]const GLushort) callconv(.c) void;
pub const PFNGLCOLOR3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLCOLOR3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCOLOR4UBVERTEX2FSUNPROC = ?*const fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLCOLOR4UBVERTEX2FVSUNPROC = ?*const fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCOLOR4UBVERTEX3FSUNPROC = ?*const fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLCOLOR4UBVERTEX3FVSUNPROC = ?*const fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLubyte, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLubyte, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLTEXCOORD2FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLTEXCOORD2FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLTEXCOORD4FVERTEX4FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLTEXCOORD4FVERTEX4FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLADDSWAPHINTRECTWINPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub extern var __glewCopyTexSubImage3D: PFNGLCOPYTEXSUBIMAGE3DPROC;
pub extern var __glewDrawRangeElements: PFNGLDRAWRANGEELEMENTSPROC;
pub extern var __glewTexImage3D: PFNGLTEXIMAGE3DPROC;
pub extern var __glewTexSubImage3D: PFNGLTEXSUBIMAGE3DPROC;
pub extern var __glewActiveTexture: PFNGLACTIVETEXTUREPROC;
pub extern var __glewClientActiveTexture: PFNGLCLIENTACTIVETEXTUREPROC;
pub extern var __glewCompressedTexImage1D: PFNGLCOMPRESSEDTEXIMAGE1DPROC;
pub extern var __glewCompressedTexImage2D: PFNGLCOMPRESSEDTEXIMAGE2DPROC;
pub extern var __glewCompressedTexImage3D: PFNGLCOMPRESSEDTEXIMAGE3DPROC;
pub extern var __glewCompressedTexSubImage1D: PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC;
pub extern var __glewCompressedTexSubImage2D: PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC;
pub extern var __glewCompressedTexSubImage3D: PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC;
pub extern var __glewGetCompressedTexImage: PFNGLGETCOMPRESSEDTEXIMAGEPROC;
pub extern var __glewLoadTransposeMatrixd: PFNGLLOADTRANSPOSEMATRIXDPROC;
pub extern var __glewLoadTransposeMatrixf: PFNGLLOADTRANSPOSEMATRIXFPROC;
pub extern var __glewMultTransposeMatrixd: PFNGLMULTTRANSPOSEMATRIXDPROC;
pub extern var __glewMultTransposeMatrixf: PFNGLMULTTRANSPOSEMATRIXFPROC;
pub extern var __glewMultiTexCoord1d: PFNGLMULTITEXCOORD1DPROC;
pub extern var __glewMultiTexCoord1dv: PFNGLMULTITEXCOORD1DVPROC;
pub extern var __glewMultiTexCoord1f: PFNGLMULTITEXCOORD1FPROC;
pub extern var __glewMultiTexCoord1fv: PFNGLMULTITEXCOORD1FVPROC;
pub extern var __glewMultiTexCoord1i: PFNGLMULTITEXCOORD1IPROC;
pub extern var __glewMultiTexCoord1iv: PFNGLMULTITEXCOORD1IVPROC;
pub extern var __glewMultiTexCoord1s: PFNGLMULTITEXCOORD1SPROC;
pub extern var __glewMultiTexCoord1sv: PFNGLMULTITEXCOORD1SVPROC;
pub extern var __glewMultiTexCoord2d: PFNGLMULTITEXCOORD2DPROC;
pub extern var __glewMultiTexCoord2dv: PFNGLMULTITEXCOORD2DVPROC;
pub extern var __glewMultiTexCoord2f: PFNGLMULTITEXCOORD2FPROC;
pub extern var __glewMultiTexCoord2fv: PFNGLMULTITEXCOORD2FVPROC;
pub extern var __glewMultiTexCoord2i: PFNGLMULTITEXCOORD2IPROC;
pub extern var __glewMultiTexCoord2iv: PFNGLMULTITEXCOORD2IVPROC;
pub extern var __glewMultiTexCoord2s: PFNGLMULTITEXCOORD2SPROC;
pub extern var __glewMultiTexCoord2sv: PFNGLMULTITEXCOORD2SVPROC;
pub extern var __glewMultiTexCoord3d: PFNGLMULTITEXCOORD3DPROC;
pub extern var __glewMultiTexCoord3dv: PFNGLMULTITEXCOORD3DVPROC;
pub extern var __glewMultiTexCoord3f: PFNGLMULTITEXCOORD3FPROC;
pub extern var __glewMultiTexCoord3fv: PFNGLMULTITEXCOORD3FVPROC;
pub extern var __glewMultiTexCoord3i: PFNGLMULTITEXCOORD3IPROC;
pub extern var __glewMultiTexCoord3iv: PFNGLMULTITEXCOORD3IVPROC;
pub extern var __glewMultiTexCoord3s: PFNGLMULTITEXCOORD3SPROC;
pub extern var __glewMultiTexCoord3sv: PFNGLMULTITEXCOORD3SVPROC;
pub extern var __glewMultiTexCoord4d: PFNGLMULTITEXCOORD4DPROC;
pub extern var __glewMultiTexCoord4dv: PFNGLMULTITEXCOORD4DVPROC;
pub extern var __glewMultiTexCoord4f: PFNGLMULTITEXCOORD4FPROC;
pub extern var __glewMultiTexCoord4fv: PFNGLMULTITEXCOORD4FVPROC;
pub extern var __glewMultiTexCoord4i: PFNGLMULTITEXCOORD4IPROC;
pub extern var __glewMultiTexCoord4iv: PFNGLMULTITEXCOORD4IVPROC;
pub extern var __glewMultiTexCoord4s: PFNGLMULTITEXCOORD4SPROC;
pub extern var __glewMultiTexCoord4sv: PFNGLMULTITEXCOORD4SVPROC;
pub extern var __glewSampleCoverage: PFNGLSAMPLECOVERAGEPROC;
pub extern var __glewBlendColor: PFNGLBLENDCOLORPROC;
pub extern var __glewBlendEquation: PFNGLBLENDEQUATIONPROC;
pub extern var __glewBlendFuncSeparate: PFNGLBLENDFUNCSEPARATEPROC;
pub extern var __glewFogCoordPointer: PFNGLFOGCOORDPOINTERPROC;
pub extern var __glewFogCoordd: PFNGLFOGCOORDDPROC;
pub extern var __glewFogCoorddv: PFNGLFOGCOORDDVPROC;
pub extern var __glewFogCoordf: PFNGLFOGCOORDFPROC;
pub extern var __glewFogCoordfv: PFNGLFOGCOORDFVPROC;
pub extern var __glewMultiDrawArrays: PFNGLMULTIDRAWARRAYSPROC;
pub extern var __glewMultiDrawElements: PFNGLMULTIDRAWELEMENTSPROC;
pub extern var __glewPointParameterf: PFNGLPOINTPARAMETERFPROC;
pub extern var __glewPointParameterfv: PFNGLPOINTPARAMETERFVPROC;
pub extern var __glewPointParameteri: PFNGLPOINTPARAMETERIPROC;
pub extern var __glewPointParameteriv: PFNGLPOINTPARAMETERIVPROC;
pub extern var __glewSecondaryColor3b: PFNGLSECONDARYCOLOR3BPROC;
pub extern var __glewSecondaryColor3bv: PFNGLSECONDARYCOLOR3BVPROC;
pub extern var __glewSecondaryColor3d: PFNGLSECONDARYCOLOR3DPROC;
pub extern var __glewSecondaryColor3dv: PFNGLSECONDARYCOLOR3DVPROC;
pub extern var __glewSecondaryColor3f: PFNGLSECONDARYCOLOR3FPROC;
pub extern var __glewSecondaryColor3fv: PFNGLSECONDARYCOLOR3FVPROC;
pub extern var __glewSecondaryColor3i: PFNGLSECONDARYCOLOR3IPROC;
pub extern var __glewSecondaryColor3iv: PFNGLSECONDARYCOLOR3IVPROC;
pub extern var __glewSecondaryColor3s: PFNGLSECONDARYCOLOR3SPROC;
pub extern var __glewSecondaryColor3sv: PFNGLSECONDARYCOLOR3SVPROC;
pub extern var __glewSecondaryColor3ub: PFNGLSECONDARYCOLOR3UBPROC;
pub extern var __glewSecondaryColor3ubv: PFNGLSECONDARYCOLOR3UBVPROC;
pub extern var __glewSecondaryColor3ui: PFNGLSECONDARYCOLOR3UIPROC;
pub extern var __glewSecondaryColor3uiv: PFNGLSECONDARYCOLOR3UIVPROC;
pub extern var __glewSecondaryColor3us: PFNGLSECONDARYCOLOR3USPROC;
pub extern var __glewSecondaryColor3usv: PFNGLSECONDARYCOLOR3USVPROC;
pub extern var __glewSecondaryColorPointer: PFNGLSECONDARYCOLORPOINTERPROC;
pub extern var __glewWindowPos2d: PFNGLWINDOWPOS2DPROC;
pub extern var __glewWindowPos2dv: PFNGLWINDOWPOS2DVPROC;
pub extern var __glewWindowPos2f: PFNGLWINDOWPOS2FPROC;
pub extern var __glewWindowPos2fv: PFNGLWINDOWPOS2FVPROC;
pub extern var __glewWindowPos2i: PFNGLWINDOWPOS2IPROC;
pub extern var __glewWindowPos2iv: PFNGLWINDOWPOS2IVPROC;
pub extern var __glewWindowPos2s: PFNGLWINDOWPOS2SPROC;
pub extern var __glewWindowPos2sv: PFNGLWINDOWPOS2SVPROC;
pub extern var __glewWindowPos3d: PFNGLWINDOWPOS3DPROC;
pub extern var __glewWindowPos3dv: PFNGLWINDOWPOS3DVPROC;
pub extern var __glewWindowPos3f: PFNGLWINDOWPOS3FPROC;
pub extern var __glewWindowPos3fv: PFNGLWINDOWPOS3FVPROC;
pub extern var __glewWindowPos3i: PFNGLWINDOWPOS3IPROC;
pub extern var __glewWindowPos3iv: PFNGLWINDOWPOS3IVPROC;
pub extern var __glewWindowPos3s: PFNGLWINDOWPOS3SPROC;
pub extern var __glewWindowPos3sv: PFNGLWINDOWPOS3SVPROC;
pub extern var __glewBeginQuery: PFNGLBEGINQUERYPROC;
pub extern var __glewBindBuffer: PFNGLBINDBUFFERPROC;
pub extern var __glewBufferData: PFNGLBUFFERDATAPROC;
pub extern var __glewBufferSubData: PFNGLBUFFERSUBDATAPROC;
pub extern var __glewDeleteBuffers: PFNGLDELETEBUFFERSPROC;
pub extern var __glewDeleteQueries: PFNGLDELETEQUERIESPROC;
pub extern var __glewEndQuery: PFNGLENDQUERYPROC;
pub extern var __glewGenBuffers: PFNGLGENBUFFERSPROC;
pub extern var __glewGenQueries: PFNGLGENQUERIESPROC;
pub extern var __glewGetBufferParameteriv: PFNGLGETBUFFERPARAMETERIVPROC;
pub extern var __glewGetBufferPointerv: PFNGLGETBUFFERPOINTERVPROC;
pub extern var __glewGetBufferSubData: PFNGLGETBUFFERSUBDATAPROC;
pub extern var __glewGetQueryObjectiv: PFNGLGETQUERYOBJECTIVPROC;
pub extern var __glewGetQueryObjectuiv: PFNGLGETQUERYOBJECTUIVPROC;
pub extern var __glewGetQueryiv: PFNGLGETQUERYIVPROC;
pub extern var __glewIsBuffer: PFNGLISBUFFERPROC;
pub extern var __glewIsQuery: PFNGLISQUERYPROC;
pub extern var __glewMapBuffer: PFNGLMAPBUFFERPROC;
pub extern var __glewUnmapBuffer: PFNGLUNMAPBUFFERPROC;
pub extern var __glewAttachShader: PFNGLATTACHSHADERPROC;
pub extern var __glewBindAttribLocation: PFNGLBINDATTRIBLOCATIONPROC;
pub extern var __glewBlendEquationSeparate: PFNGLBLENDEQUATIONSEPARATEPROC;
pub extern var __glewCompileShader: PFNGLCOMPILESHADERPROC;
pub extern var __glewCreateProgram: PFNGLCREATEPROGRAMPROC;
pub extern var __glewCreateShader: PFNGLCREATESHADERPROC;
pub extern var __glewDeleteProgram: PFNGLDELETEPROGRAMPROC;
pub extern var __glewDeleteShader: PFNGLDELETESHADERPROC;
pub extern var __glewDetachShader: PFNGLDETACHSHADERPROC;
pub extern var __glewDisableVertexAttribArray: PFNGLDISABLEVERTEXATTRIBARRAYPROC;
pub extern var __glewDrawBuffers: PFNGLDRAWBUFFERSPROC;
pub extern var __glewEnableVertexAttribArray: PFNGLENABLEVERTEXATTRIBARRAYPROC;
pub extern var __glewGetActiveAttrib: PFNGLGETACTIVEATTRIBPROC;
pub extern var __glewGetActiveUniform: PFNGLGETACTIVEUNIFORMPROC;
pub extern var __glewGetAttachedShaders: PFNGLGETATTACHEDSHADERSPROC;
pub extern var __glewGetAttribLocation: PFNGLGETATTRIBLOCATIONPROC;
pub extern var __glewGetProgramInfoLog: PFNGLGETPROGRAMINFOLOGPROC;
pub extern var __glewGetProgramiv: PFNGLGETPROGRAMIVPROC;
pub extern var __glewGetShaderInfoLog: PFNGLGETSHADERINFOLOGPROC;
pub extern var __glewGetShaderSource: PFNGLGETSHADERSOURCEPROC;
pub extern var __glewGetShaderiv: PFNGLGETSHADERIVPROC;
pub extern var __glewGetUniformLocation: PFNGLGETUNIFORMLOCATIONPROC;
pub extern var __glewGetUniformfv: PFNGLGETUNIFORMFVPROC;
pub extern var __glewGetUniformiv: PFNGLGETUNIFORMIVPROC;
pub extern var __glewGetVertexAttribPointerv: PFNGLGETVERTEXATTRIBPOINTERVPROC;
pub extern var __glewGetVertexAttribdv: PFNGLGETVERTEXATTRIBDVPROC;
pub extern var __glewGetVertexAttribfv: PFNGLGETVERTEXATTRIBFVPROC;
pub extern var __glewGetVertexAttribiv: PFNGLGETVERTEXATTRIBIVPROC;
pub extern var __glewIsProgram: PFNGLISPROGRAMPROC;
pub extern var __glewIsShader: PFNGLISSHADERPROC;
pub extern var __glewLinkProgram: PFNGLLINKPROGRAMPROC;
pub extern var __glewShaderSource: PFNGLSHADERSOURCEPROC;
pub extern var __glewStencilFuncSeparate: PFNGLSTENCILFUNCSEPARATEPROC;
pub extern var __glewStencilMaskSeparate: PFNGLSTENCILMASKSEPARATEPROC;
pub extern var __glewStencilOpSeparate: PFNGLSTENCILOPSEPARATEPROC;
pub extern var __glewUniform1f: PFNGLUNIFORM1FPROC;
pub extern var __glewUniform1fv: PFNGLUNIFORM1FVPROC;
pub extern var __glewUniform1i: PFNGLUNIFORM1IPROC;
pub extern var __glewUniform1iv: PFNGLUNIFORM1IVPROC;
pub extern var __glewUniform2f: PFNGLUNIFORM2FPROC;
pub extern var __glewUniform2fv: PFNGLUNIFORM2FVPROC;
pub extern var __glewUniform2i: PFNGLUNIFORM2IPROC;
pub extern var __glewUniform2iv: PFNGLUNIFORM2IVPROC;
pub extern var __glewUniform3f: PFNGLUNIFORM3FPROC;
pub extern var __glewUniform3fv: PFNGLUNIFORM3FVPROC;
pub extern var __glewUniform3i: PFNGLUNIFORM3IPROC;
pub extern var __glewUniform3iv: PFNGLUNIFORM3IVPROC;
pub extern var __glewUniform4f: PFNGLUNIFORM4FPROC;
pub extern var __glewUniform4fv: PFNGLUNIFORM4FVPROC;
pub extern var __glewUniform4i: PFNGLUNIFORM4IPROC;
pub extern var __glewUniform4iv: PFNGLUNIFORM4IVPROC;
pub extern var __glewUniformMatrix2fv: PFNGLUNIFORMMATRIX2FVPROC;
pub extern var __glewUniformMatrix3fv: PFNGLUNIFORMMATRIX3FVPROC;
pub extern var __glewUniformMatrix4fv: PFNGLUNIFORMMATRIX4FVPROC;
pub extern var __glewUseProgram: PFNGLUSEPROGRAMPROC;
pub extern var __glewValidateProgram: PFNGLVALIDATEPROGRAMPROC;
pub extern var __glewVertexAttrib1d: PFNGLVERTEXATTRIB1DPROC;
pub extern var __glewVertexAttrib1dv: PFNGLVERTEXATTRIB1DVPROC;
pub extern var __glewVertexAttrib1f: PFNGLVERTEXATTRIB1FPROC;
pub extern var __glewVertexAttrib1fv: PFNGLVERTEXATTRIB1FVPROC;
pub extern var __glewVertexAttrib1s: PFNGLVERTEXATTRIB1SPROC;
pub extern var __glewVertexAttrib1sv: PFNGLVERTEXATTRIB1SVPROC;
pub extern var __glewVertexAttrib2d: PFNGLVERTEXATTRIB2DPROC;
pub extern var __glewVertexAttrib2dv: PFNGLVERTEXATTRIB2DVPROC;
pub extern var __glewVertexAttrib2f: PFNGLVERTEXATTRIB2FPROC;
pub extern var __glewVertexAttrib2fv: PFNGLVERTEXATTRIB2FVPROC;
pub extern var __glewVertexAttrib2s: PFNGLVERTEXATTRIB2SPROC;
pub extern var __glewVertexAttrib2sv: PFNGLVERTEXATTRIB2SVPROC;
pub extern var __glewVertexAttrib3d: PFNGLVERTEXATTRIB3DPROC;
pub extern var __glewVertexAttrib3dv: PFNGLVERTEXATTRIB3DVPROC;
pub extern var __glewVertexAttrib3f: PFNGLVERTEXATTRIB3FPROC;
pub extern var __glewVertexAttrib3fv: PFNGLVERTEXATTRIB3FVPROC;
pub extern var __glewVertexAttrib3s: PFNGLVERTEXATTRIB3SPROC;
pub extern var __glewVertexAttrib3sv: PFNGLVERTEXATTRIB3SVPROC;
pub extern var __glewVertexAttrib4Nbv: PFNGLVERTEXATTRIB4NBVPROC;
pub extern var __glewVertexAttrib4Niv: PFNGLVERTEXATTRIB4NIVPROC;
pub extern var __glewVertexAttrib4Nsv: PFNGLVERTEXATTRIB4NSVPROC;
pub extern var __glewVertexAttrib4Nub: PFNGLVERTEXATTRIB4NUBPROC;
pub extern var __glewVertexAttrib4Nubv: PFNGLVERTEXATTRIB4NUBVPROC;
pub extern var __glewVertexAttrib4Nuiv: PFNGLVERTEXATTRIB4NUIVPROC;
pub extern var __glewVertexAttrib4Nusv: PFNGLVERTEXATTRIB4NUSVPROC;
pub extern var __glewVertexAttrib4bv: PFNGLVERTEXATTRIB4BVPROC;
pub extern var __glewVertexAttrib4d: PFNGLVERTEXATTRIB4DPROC;
pub extern var __glewVertexAttrib4dv: PFNGLVERTEXATTRIB4DVPROC;
pub extern var __glewVertexAttrib4f: PFNGLVERTEXATTRIB4FPROC;
pub extern var __glewVertexAttrib4fv: PFNGLVERTEXATTRIB4FVPROC;
pub extern var __glewVertexAttrib4iv: PFNGLVERTEXATTRIB4IVPROC;
pub extern var __glewVertexAttrib4s: PFNGLVERTEXATTRIB4SPROC;
pub extern var __glewVertexAttrib4sv: PFNGLVERTEXATTRIB4SVPROC;
pub extern var __glewVertexAttrib4ubv: PFNGLVERTEXATTRIB4UBVPROC;
pub extern var __glewVertexAttrib4uiv: PFNGLVERTEXATTRIB4UIVPROC;
pub extern var __glewVertexAttrib4usv: PFNGLVERTEXATTRIB4USVPROC;
pub extern var __glewVertexAttribPointer: PFNGLVERTEXATTRIBPOINTERPROC;
pub extern var __glewUniformMatrix2x3fv: PFNGLUNIFORMMATRIX2X3FVPROC;
pub extern var __glewUniformMatrix2x4fv: PFNGLUNIFORMMATRIX2X4FVPROC;
pub extern var __glewUniformMatrix3x2fv: PFNGLUNIFORMMATRIX3X2FVPROC;
pub extern var __glewUniformMatrix3x4fv: PFNGLUNIFORMMATRIX3X4FVPROC;
pub extern var __glewUniformMatrix4x2fv: PFNGLUNIFORMMATRIX4X2FVPROC;
pub extern var __glewUniformMatrix4x3fv: PFNGLUNIFORMMATRIX4X3FVPROC;
pub extern var __glewBeginConditionalRender: PFNGLBEGINCONDITIONALRENDERPROC;
pub extern var __glewBeginTransformFeedback: PFNGLBEGINTRANSFORMFEEDBACKPROC;
pub extern var __glewBindFragDataLocation: PFNGLBINDFRAGDATALOCATIONPROC;
pub extern var __glewClampColor: PFNGLCLAMPCOLORPROC;
pub extern var __glewClearBufferfi: PFNGLCLEARBUFFERFIPROC;
pub extern var __glewClearBufferfv: PFNGLCLEARBUFFERFVPROC;
pub extern var __glewClearBufferiv: PFNGLCLEARBUFFERIVPROC;
pub extern var __glewClearBufferuiv: PFNGLCLEARBUFFERUIVPROC;
pub extern var __glewColorMaski: PFNGLCOLORMASKIPROC;
pub extern var __glewDisablei: PFNGLDISABLEIPROC;
pub extern var __glewEnablei: PFNGLENABLEIPROC;
pub extern var __glewEndConditionalRender: PFNGLENDCONDITIONALRENDERPROC;
pub extern var __glewEndTransformFeedback: PFNGLENDTRANSFORMFEEDBACKPROC;
pub extern var __glewGetBooleani_v: PFNGLGETBOOLEANI_VPROC;
pub extern var __glewGetFragDataLocation: PFNGLGETFRAGDATALOCATIONPROC;
pub extern var __glewGetStringi: PFNGLGETSTRINGIPROC;
pub extern var __glewGetTexParameterIiv: PFNGLGETTEXPARAMETERIIVPROC;
pub extern var __glewGetTexParameterIuiv: PFNGLGETTEXPARAMETERIUIVPROC;
pub extern var __glewGetTransformFeedbackVarying: PFNGLGETTRANSFORMFEEDBACKVARYINGPROC;
pub extern var __glewGetUniformuiv: PFNGLGETUNIFORMUIVPROC;
pub extern var __glewGetVertexAttribIiv: PFNGLGETVERTEXATTRIBIIVPROC;
pub extern var __glewGetVertexAttribIuiv: PFNGLGETVERTEXATTRIBIUIVPROC;
pub extern var __glewIsEnabledi: PFNGLISENABLEDIPROC;
pub extern var __glewTexParameterIiv: PFNGLTEXPARAMETERIIVPROC;
pub extern var __glewTexParameterIuiv: PFNGLTEXPARAMETERIUIVPROC;
pub extern var __glewTransformFeedbackVaryings: PFNGLTRANSFORMFEEDBACKVARYINGSPROC;
pub extern var __glewUniform1ui: PFNGLUNIFORM1UIPROC;
pub extern var __glewUniform1uiv: PFNGLUNIFORM1UIVPROC;
pub extern var __glewUniform2ui: PFNGLUNIFORM2UIPROC;
pub extern var __glewUniform2uiv: PFNGLUNIFORM2UIVPROC;
pub extern var __glewUniform3ui: PFNGLUNIFORM3UIPROC;
pub extern var __glewUniform3uiv: PFNGLUNIFORM3UIVPROC;
pub extern var __glewUniform4ui: PFNGLUNIFORM4UIPROC;
pub extern var __glewUniform4uiv: PFNGLUNIFORM4UIVPROC;
pub extern var __glewVertexAttribI1i: PFNGLVERTEXATTRIBI1IPROC;
pub extern var __glewVertexAttribI1iv: PFNGLVERTEXATTRIBI1IVPROC;
pub extern var __glewVertexAttribI1ui: PFNGLVERTEXATTRIBI1UIPROC;
pub extern var __glewVertexAttribI1uiv: PFNGLVERTEXATTRIBI1UIVPROC;
pub extern var __glewVertexAttribI2i: PFNGLVERTEXATTRIBI2IPROC;
pub extern var __glewVertexAttribI2iv: PFNGLVERTEXATTRIBI2IVPROC;
pub extern var __glewVertexAttribI2ui: PFNGLVERTEXATTRIBI2UIPROC;
pub extern var __glewVertexAttribI2uiv: PFNGLVERTEXATTRIBI2UIVPROC;
pub extern var __glewVertexAttribI3i: PFNGLVERTEXATTRIBI3IPROC;
pub extern var __glewVertexAttribI3iv: PFNGLVERTEXATTRIBI3IVPROC;
pub extern var __glewVertexAttribI3ui: PFNGLVERTEXATTRIBI3UIPROC;
pub extern var __glewVertexAttribI3uiv: PFNGLVERTEXATTRIBI3UIVPROC;
pub extern var __glewVertexAttribI4bv: PFNGLVERTEXATTRIBI4BVPROC;
pub extern var __glewVertexAttribI4i: PFNGLVERTEXATTRIBI4IPROC;
pub extern var __glewVertexAttribI4iv: PFNGLVERTEXATTRIBI4IVPROC;
pub extern var __glewVertexAttribI4sv: PFNGLVERTEXATTRIBI4SVPROC;
pub extern var __glewVertexAttribI4ubv: PFNGLVERTEXATTRIBI4UBVPROC;
pub extern var __glewVertexAttribI4ui: PFNGLVERTEXATTRIBI4UIPROC;
pub extern var __glewVertexAttribI4uiv: PFNGLVERTEXATTRIBI4UIVPROC;
pub extern var __glewVertexAttribI4usv: PFNGLVERTEXATTRIBI4USVPROC;
pub extern var __glewVertexAttribIPointer: PFNGLVERTEXATTRIBIPOINTERPROC;
pub extern var __glewDrawArraysInstanced: PFNGLDRAWARRAYSINSTANCEDPROC;
pub extern var __glewDrawElementsInstanced: PFNGLDRAWELEMENTSINSTANCEDPROC;
pub extern var __glewPrimitiveRestartIndex: PFNGLPRIMITIVERESTARTINDEXPROC;
pub extern var __glewTexBuffer: PFNGLTEXBUFFERPROC;
pub extern var __glewFramebufferTexture: PFNGLFRAMEBUFFERTEXTUREPROC;
pub extern var __glewGetBufferParameteri64v: PFNGLGETBUFFERPARAMETERI64VPROC;
pub extern var __glewGetInteger64i_v: PFNGLGETINTEGER64I_VPROC;
pub extern var __glewVertexAttribDivisor: PFNGLVERTEXATTRIBDIVISORPROC;
pub extern var __glewBlendEquationSeparatei: PFNGLBLENDEQUATIONSEPARATEIPROC;
pub extern var __glewBlendEquationi: PFNGLBLENDEQUATIONIPROC;
pub extern var __glewBlendFuncSeparatei: PFNGLBLENDFUNCSEPARATEIPROC;
pub extern var __glewBlendFunci: PFNGLBLENDFUNCIPROC;
pub extern var __glewMinSampleShading: PFNGLMINSAMPLESHADINGPROC;
pub extern var __glewGetGraphicsResetStatus: PFNGLGETGRAPHICSRESETSTATUSPROC;
pub extern var __glewGetnCompressedTexImage: PFNGLGETNCOMPRESSEDTEXIMAGEPROC;
pub extern var __glewGetnTexImage: PFNGLGETNTEXIMAGEPROC;
pub extern var __glewGetnUniformdv: PFNGLGETNUNIFORMDVPROC;
pub extern var __glewMultiDrawArraysIndirectCount: PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC;
pub extern var __glewMultiDrawElementsIndirectCount: PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC;
pub extern var __glewSpecializeShader: PFNGLSPECIALIZESHADERPROC;
pub extern var __glewTbufferMask3DFX: PFNGLTBUFFERMASK3DFXPROC;
pub extern var __glewDebugMessageCallbackAMD: PFNGLDEBUGMESSAGECALLBACKAMDPROC;
pub extern var __glewDebugMessageEnableAMD: PFNGLDEBUGMESSAGEENABLEAMDPROC;
pub extern var __glewDebugMessageInsertAMD: PFNGLDEBUGMESSAGEINSERTAMDPROC;
pub extern var __glewGetDebugMessageLogAMD: PFNGLGETDEBUGMESSAGELOGAMDPROC;
pub extern var __glewBlendEquationIndexedAMD: PFNGLBLENDEQUATIONINDEXEDAMDPROC;
pub extern var __glewBlendEquationSeparateIndexedAMD: PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC;
pub extern var __glewBlendFuncIndexedAMD: PFNGLBLENDFUNCINDEXEDAMDPROC;
pub extern var __glewBlendFuncSeparateIndexedAMD: PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC;
pub extern var __glewNamedRenderbufferStorageMultisampleAdvancedAMD: PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC;
pub extern var __glewRenderbufferStorageMultisampleAdvancedAMD: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC;
pub extern var __glewFramebufferSamplePositionsfvAMD: PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC;
pub extern var __glewGetFramebufferParameterfvAMD: PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC;
pub extern var __glewGetNamedFramebufferParameterfvAMD: PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC;
pub extern var __glewNamedFramebufferSamplePositionsfvAMD: PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC;
pub extern var __glewVertexAttribParameteriAMD: PFNGLVERTEXATTRIBPARAMETERIAMDPROC;
pub extern var __glewMultiDrawArraysIndirectAMD: PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC;
pub extern var __glewMultiDrawElementsIndirectAMD: PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC;
pub extern var __glewDeleteNamesAMD: PFNGLDELETENAMESAMDPROC;
pub extern var __glewGenNamesAMD: PFNGLGENNAMESAMDPROC;
pub extern var __glewIsNameAMD: PFNGLISNAMEAMDPROC;
pub extern var __glewQueryObjectParameteruiAMD: PFNGLQUERYOBJECTPARAMETERUIAMDPROC;
pub extern var __glewBeginPerfMonitorAMD: PFNGLBEGINPERFMONITORAMDPROC;
pub extern var __glewDeletePerfMonitorsAMD: PFNGLDELETEPERFMONITORSAMDPROC;
pub extern var __glewEndPerfMonitorAMD: PFNGLENDPERFMONITORAMDPROC;
pub extern var __glewGenPerfMonitorsAMD: PFNGLGENPERFMONITORSAMDPROC;
pub extern var __glewGetPerfMonitorCounterDataAMD: PFNGLGETPERFMONITORCOUNTERDATAAMDPROC;
pub extern var __glewGetPerfMonitorCounterInfoAMD: PFNGLGETPERFMONITORCOUNTERINFOAMDPROC;
pub extern var __glewGetPerfMonitorCounterStringAMD: PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC;
pub extern var __glewGetPerfMonitorCountersAMD: PFNGLGETPERFMONITORCOUNTERSAMDPROC;
pub extern var __glewGetPerfMonitorGroupStringAMD: PFNGLGETPERFMONITORGROUPSTRINGAMDPROC;
pub extern var __glewGetPerfMonitorGroupsAMD: PFNGLGETPERFMONITORGROUPSAMDPROC;
pub extern var __glewSelectPerfMonitorCountersAMD: PFNGLSELECTPERFMONITORCOUNTERSAMDPROC;
pub extern var __glewSetMultisamplefvAMD: PFNGLSETMULTISAMPLEFVAMDPROC;
pub extern var __glewTexStorageSparseAMD: PFNGLTEXSTORAGESPARSEAMDPROC;
pub extern var __glewTextureStorageSparseAMD: PFNGLTEXTURESTORAGESPARSEAMDPROC;
pub extern var __glewStencilOpValueAMD: PFNGLSTENCILOPVALUEAMDPROC;
pub extern var __glewTessellationFactorAMD: PFNGLTESSELLATIONFACTORAMDPROC;
pub extern var __glewTessellationModeAMD: PFNGLTESSELLATIONMODEAMDPROC;
pub extern var __glewBlitFramebufferANGLE: PFNGLBLITFRAMEBUFFERANGLEPROC;
pub extern var __glewRenderbufferStorageMultisampleANGLE: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC;
pub extern var __glewDrawArraysInstancedANGLE: PFNGLDRAWARRAYSINSTANCEDANGLEPROC;
pub extern var __glewDrawElementsInstancedANGLE: PFNGLDRAWELEMENTSINSTANCEDANGLEPROC;
pub extern var __glewVertexAttribDivisorANGLE: PFNGLVERTEXATTRIBDIVISORANGLEPROC;
pub extern var __glewBeginQueryANGLE: PFNGLBEGINQUERYANGLEPROC;
pub extern var __glewDeleteQueriesANGLE: PFNGLDELETEQUERIESANGLEPROC;
pub extern var __glewEndQueryANGLE: PFNGLENDQUERYANGLEPROC;
pub extern var __glewGenQueriesANGLE: PFNGLGENQUERIESANGLEPROC;
pub extern var __glewGetQueryObjecti64vANGLE: PFNGLGETQUERYOBJECTI64VANGLEPROC;
pub extern var __glewGetQueryObjectivANGLE: PFNGLGETQUERYOBJECTIVANGLEPROC;
pub extern var __glewGetQueryObjectui64vANGLE: PFNGLGETQUERYOBJECTUI64VANGLEPROC;
pub extern var __glewGetQueryObjectuivANGLE: PFNGLGETQUERYOBJECTUIVANGLEPROC;
pub extern var __glewGetQueryivANGLE: PFNGLGETQUERYIVANGLEPROC;
pub extern var __glewIsQueryANGLE: PFNGLISQUERYANGLEPROC;
pub extern var __glewQueryCounterANGLE: PFNGLQUERYCOUNTERANGLEPROC;
pub extern var __glewGetTranslatedShaderSourceANGLE: PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC;
pub extern var __glewCopyTextureLevelsAPPLE: PFNGLCOPYTEXTURELEVELSAPPLEPROC;
pub extern var __glewDrawElementArrayAPPLE: PFNGLDRAWELEMENTARRAYAPPLEPROC;
pub extern var __glewDrawRangeElementArrayAPPLE: PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC;
pub extern var __glewElementPointerAPPLE: PFNGLELEMENTPOINTERAPPLEPROC;
pub extern var __glewMultiDrawElementArrayAPPLE: PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC;
pub extern var __glewMultiDrawRangeElementArrayAPPLE: PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC;
pub extern var __glewDeleteFencesAPPLE: PFNGLDELETEFENCESAPPLEPROC;
pub extern var __glewFinishFenceAPPLE: PFNGLFINISHFENCEAPPLEPROC;
pub extern var __glewFinishObjectAPPLE: PFNGLFINISHOBJECTAPPLEPROC;
pub extern var __glewGenFencesAPPLE: PFNGLGENFENCESAPPLEPROC;
pub extern var __glewIsFenceAPPLE: PFNGLISFENCEAPPLEPROC;
pub extern var __glewSetFenceAPPLE: PFNGLSETFENCEAPPLEPROC;
pub extern var __glewTestFenceAPPLE: PFNGLTESTFENCEAPPLEPROC;
pub extern var __glewTestObjectAPPLE: PFNGLTESTOBJECTAPPLEPROC;
pub extern var __glewBufferParameteriAPPLE: PFNGLBUFFERPARAMETERIAPPLEPROC;
pub extern var __glewFlushMappedBufferRangeAPPLE: PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC;
pub extern var __glewRenderbufferStorageMultisampleAPPLE: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC;
pub extern var __glewResolveMultisampleFramebufferAPPLE: PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC;
pub extern var __glewGetObjectParameterivAPPLE: PFNGLGETOBJECTPARAMETERIVAPPLEPROC;
pub extern var __glewObjectPurgeableAPPLE: PFNGLOBJECTPURGEABLEAPPLEPROC;
pub extern var __glewObjectUnpurgeableAPPLE: PFNGLOBJECTUNPURGEABLEAPPLEPROC;
pub extern var __glewClientWaitSyncAPPLE: PFNGLCLIENTWAITSYNCAPPLEPROC;
pub extern var __glewDeleteSyncAPPLE: PFNGLDELETESYNCAPPLEPROC;
pub extern var __glewFenceSyncAPPLE: PFNGLFENCESYNCAPPLEPROC;
pub extern var __glewGetInteger64vAPPLE: PFNGLGETINTEGER64VAPPLEPROC;
pub extern var __glewGetSyncivAPPLE: PFNGLGETSYNCIVAPPLEPROC;
pub extern var __glewIsSyncAPPLE: PFNGLISSYNCAPPLEPROC;
pub extern var __glewWaitSyncAPPLE: PFNGLWAITSYNCAPPLEPROC;
pub extern var __glewGetTexParameterPointervAPPLE: PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC;
pub extern var __glewTextureRangeAPPLE: PFNGLTEXTURERANGEAPPLEPROC;
pub extern var __glewBindVertexArrayAPPLE: PFNGLBINDVERTEXARRAYAPPLEPROC;
pub extern var __glewDeleteVertexArraysAPPLE: PFNGLDELETEVERTEXARRAYSAPPLEPROC;
pub extern var __glewGenVertexArraysAPPLE: PFNGLGENVERTEXARRAYSAPPLEPROC;
pub extern var __glewIsVertexArrayAPPLE: PFNGLISVERTEXARRAYAPPLEPROC;
pub extern var __glewFlushVertexArrayRangeAPPLE: PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC;
pub extern var __glewVertexArrayParameteriAPPLE: PFNGLVERTEXARRAYPARAMETERIAPPLEPROC;
pub extern var __glewVertexArrayRangeAPPLE: PFNGLVERTEXARRAYRANGEAPPLEPROC;
pub extern var __glewDisableVertexAttribAPPLE: PFNGLDISABLEVERTEXATTRIBAPPLEPROC;
pub extern var __glewEnableVertexAttribAPPLE: PFNGLENABLEVERTEXATTRIBAPPLEPROC;
pub extern var __glewIsVertexAttribEnabledAPPLE: PFNGLISVERTEXATTRIBENABLEDAPPLEPROC;
pub extern var __glewMapVertexAttrib1dAPPLE: PFNGLMAPVERTEXATTRIB1DAPPLEPROC;
pub extern var __glewMapVertexAttrib1fAPPLE: PFNGLMAPVERTEXATTRIB1FAPPLEPROC;
pub extern var __glewMapVertexAttrib2dAPPLE: PFNGLMAPVERTEXATTRIB2DAPPLEPROC;
pub extern var __glewMapVertexAttrib2fAPPLE: PFNGLMAPVERTEXATTRIB2FAPPLEPROC;
pub extern var __glewClearDepthf: PFNGLCLEARDEPTHFPROC;
pub extern var __glewDepthRangef: PFNGLDEPTHRANGEFPROC;
pub extern var __glewGetShaderPrecisionFormat: PFNGLGETSHADERPRECISIONFORMATPROC;
pub extern var __glewReleaseShaderCompiler: PFNGLRELEASESHADERCOMPILERPROC;
pub extern var __glewShaderBinary: PFNGLSHADERBINARYPROC;
pub extern var __glewMemoryBarrierByRegion: PFNGLMEMORYBARRIERBYREGIONPROC;
pub extern var __glewPrimitiveBoundingBoxARB: PFNGLPRIMITIVEBOUNDINGBOXARBPROC;
pub extern var __glewDrawArraysInstancedBaseInstance: PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC;
pub extern var __glewDrawElementsInstancedBaseInstance: PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC;
pub extern var __glewDrawElementsInstancedBaseVertexBaseInstance: PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC;
pub extern var __glewGetImageHandleARB: PFNGLGETIMAGEHANDLEARBPROC;
pub extern var __glewGetTextureHandleARB: PFNGLGETTEXTUREHANDLEARBPROC;
pub extern var __glewGetTextureSamplerHandleARB: PFNGLGETTEXTURESAMPLERHANDLEARBPROC;
pub extern var __glewGetVertexAttribLui64vARB: PFNGLGETVERTEXATTRIBLUI64VARBPROC;
pub extern var __glewIsImageHandleResidentARB: PFNGLISIMAGEHANDLERESIDENTARBPROC;
pub extern var __glewIsTextureHandleResidentARB: PFNGLISTEXTUREHANDLERESIDENTARBPROC;
pub extern var __glewMakeImageHandleNonResidentARB: PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC;
pub extern var __glewMakeImageHandleResidentARB: PFNGLMAKEIMAGEHANDLERESIDENTARBPROC;
pub extern var __glewMakeTextureHandleNonResidentARB: PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC;
pub extern var __glewMakeTextureHandleResidentARB: PFNGLMAKETEXTUREHANDLERESIDENTARBPROC;
pub extern var __glewProgramUniformHandleui64ARB: PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC;
pub extern var __glewProgramUniformHandleui64vARB: PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC;
pub extern var __glewUniformHandleui64ARB: PFNGLUNIFORMHANDLEUI64ARBPROC;
pub extern var __glewUniformHandleui64vARB: PFNGLUNIFORMHANDLEUI64VARBPROC;
pub extern var __glewVertexAttribL1ui64ARB: PFNGLVERTEXATTRIBL1UI64ARBPROC;
pub extern var __glewVertexAttribL1ui64vARB: PFNGLVERTEXATTRIBL1UI64VARBPROC;
pub extern var __glewBindFragDataLocationIndexed: PFNGLBINDFRAGDATALOCATIONINDEXEDPROC;
pub extern var __glewGetFragDataIndex: PFNGLGETFRAGDATAINDEXPROC;
pub extern var __glewBufferStorage: PFNGLBUFFERSTORAGEPROC;
pub extern var __glewCreateSyncFromCLeventARB: PFNGLCREATESYNCFROMCLEVENTARBPROC;
pub extern var __glewClearBufferData: PFNGLCLEARBUFFERDATAPROC;
pub extern var __glewClearBufferSubData: PFNGLCLEARBUFFERSUBDATAPROC;
pub extern var __glewClearNamedBufferDataEXT: PFNGLCLEARNAMEDBUFFERDATAEXTPROC;
pub extern var __glewClearNamedBufferSubDataEXT: PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC;
pub extern var __glewClearTexImage: PFNGLCLEARTEXIMAGEPROC;
pub extern var __glewClearTexSubImage: PFNGLCLEARTEXSUBIMAGEPROC;
pub extern var __glewClipControl: PFNGLCLIPCONTROLPROC;
pub extern var __glewClampColorARB: PFNGLCLAMPCOLORARBPROC;
pub extern var __glewDispatchCompute: PFNGLDISPATCHCOMPUTEPROC;
pub extern var __glewDispatchComputeIndirect: PFNGLDISPATCHCOMPUTEINDIRECTPROC;
pub extern var __glewDispatchComputeGroupSizeARB: PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC;
pub extern var __glewCopyBufferSubData: PFNGLCOPYBUFFERSUBDATAPROC;
pub extern var __glewCopyImageSubData: PFNGLCOPYIMAGESUBDATAPROC;
pub extern var __glewDebugMessageCallbackARB: PFNGLDEBUGMESSAGECALLBACKARBPROC;
pub extern var __glewDebugMessageControlARB: PFNGLDEBUGMESSAGECONTROLARBPROC;
pub extern var __glewDebugMessageInsertARB: PFNGLDEBUGMESSAGEINSERTARBPROC;
pub extern var __glewGetDebugMessageLogARB: PFNGLGETDEBUGMESSAGELOGARBPROC;
pub extern var __glewBindTextureUnit: PFNGLBINDTEXTUREUNITPROC;
pub extern var __glewBlitNamedFramebuffer: PFNGLBLITNAMEDFRAMEBUFFERPROC;
pub extern var __glewCheckNamedFramebufferStatus: PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC;
pub extern var __glewClearNamedBufferData: PFNGLCLEARNAMEDBUFFERDATAPROC;
pub extern var __glewClearNamedBufferSubData: PFNGLCLEARNAMEDBUFFERSUBDATAPROC;
pub extern var __glewClearNamedFramebufferfi: PFNGLCLEARNAMEDFRAMEBUFFERFIPROC;
pub extern var __glewClearNamedFramebufferfv: PFNGLCLEARNAMEDFRAMEBUFFERFVPROC;
pub extern var __glewClearNamedFramebufferiv: PFNGLCLEARNAMEDFRAMEBUFFERIVPROC;
pub extern var __glewClearNamedFramebufferuiv: PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC;
pub extern var __glewCompressedTextureSubImage1D: PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC;
pub extern var __glewCompressedTextureSubImage2D: PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC;
pub extern var __glewCompressedTextureSubImage3D: PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC;
pub extern var __glewCopyNamedBufferSubData: PFNGLCOPYNAMEDBUFFERSUBDATAPROC;
pub extern var __glewCopyTextureSubImage1D: PFNGLCOPYTEXTURESUBIMAGE1DPROC;
pub extern var __glewCopyTextureSubImage2D: PFNGLCOPYTEXTURESUBIMAGE2DPROC;
pub extern var __glewCopyTextureSubImage3D: PFNGLCOPYTEXTURESUBIMAGE3DPROC;
pub extern var __glewCreateBuffers: PFNGLCREATEBUFFERSPROC;
pub extern var __glewCreateFramebuffers: PFNGLCREATEFRAMEBUFFERSPROC;
pub extern var __glewCreateProgramPipelines: PFNGLCREATEPROGRAMPIPELINESPROC;
pub extern var __glewCreateQueries: PFNGLCREATEQUERIESPROC;
pub extern var __glewCreateRenderbuffers: PFNGLCREATERENDERBUFFERSPROC;
pub extern var __glewCreateSamplers: PFNGLCREATESAMPLERSPROC;
pub extern var __glewCreateTextures: PFNGLCREATETEXTURESPROC;
pub extern var __glewCreateTransformFeedbacks: PFNGLCREATETRANSFORMFEEDBACKSPROC;
pub extern var __glewCreateVertexArrays: PFNGLCREATEVERTEXARRAYSPROC;
pub extern var __glewDisableVertexArrayAttrib: PFNGLDISABLEVERTEXARRAYATTRIBPROC;
pub extern var __glewEnableVertexArrayAttrib: PFNGLENABLEVERTEXARRAYATTRIBPROC;
pub extern var __glewFlushMappedNamedBufferRange: PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC;
pub extern var __glewGenerateTextureMipmap: PFNGLGENERATETEXTUREMIPMAPPROC;
pub extern var __glewGetCompressedTextureImage: PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC;
pub extern var __glewGetNamedBufferParameteri64v: PFNGLGETNAMEDBUFFERPARAMETERI64VPROC;
pub extern var __glewGetNamedBufferParameteriv: PFNGLGETNAMEDBUFFERPARAMETERIVPROC;
pub extern var __glewGetNamedBufferPointerv: PFNGLGETNAMEDBUFFERPOINTERVPROC;
pub extern var __glewGetNamedBufferSubData: PFNGLGETNAMEDBUFFERSUBDATAPROC;
pub extern var __glewGetNamedFramebufferAttachmentParameteriv: PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC;
pub extern var __glewGetNamedFramebufferParameteriv: PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC;
pub extern var __glewGetNamedRenderbufferParameteriv: PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC;
pub extern var __glewGetQueryBufferObjecti64v: PFNGLGETQUERYBUFFEROBJECTI64VPROC;
pub extern var __glewGetQueryBufferObjectiv: PFNGLGETQUERYBUFFEROBJECTIVPROC;
pub extern var __glewGetQueryBufferObjectui64v: PFNGLGETQUERYBUFFEROBJECTUI64VPROC;
pub extern var __glewGetQueryBufferObjectuiv: PFNGLGETQUERYBUFFEROBJECTUIVPROC;
pub extern var __glewGetTextureImage: PFNGLGETTEXTUREIMAGEPROC;
pub extern var __glewGetTextureLevelParameterfv: PFNGLGETTEXTURELEVELPARAMETERFVPROC;
pub extern var __glewGetTextureLevelParameteriv: PFNGLGETTEXTURELEVELPARAMETERIVPROC;
pub extern var __glewGetTextureParameterIiv: PFNGLGETTEXTUREPARAMETERIIVPROC;
pub extern var __glewGetTextureParameterIuiv: PFNGLGETTEXTUREPARAMETERIUIVPROC;
pub extern var __glewGetTextureParameterfv: PFNGLGETTEXTUREPARAMETERFVPROC;
pub extern var __glewGetTextureParameteriv: PFNGLGETTEXTUREPARAMETERIVPROC;
pub extern var __glewGetTransformFeedbacki64_v: PFNGLGETTRANSFORMFEEDBACKI64_VPROC;
pub extern var __glewGetTransformFeedbacki_v: PFNGLGETTRANSFORMFEEDBACKI_VPROC;
pub extern var __glewGetTransformFeedbackiv: PFNGLGETTRANSFORMFEEDBACKIVPROC;
pub extern var __glewGetVertexArrayIndexed64iv: PFNGLGETVERTEXARRAYINDEXED64IVPROC;
pub extern var __glewGetVertexArrayIndexediv: PFNGLGETVERTEXARRAYINDEXEDIVPROC;
pub extern var __glewGetVertexArrayiv: PFNGLGETVERTEXARRAYIVPROC;
pub extern var __glewInvalidateNamedFramebufferData: PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC;
pub extern var __glewInvalidateNamedFramebufferSubData: PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC;
pub extern var __glewMapNamedBuffer: PFNGLMAPNAMEDBUFFERPROC;
pub extern var __glewMapNamedBufferRange: PFNGLMAPNAMEDBUFFERRANGEPROC;
pub extern var __glewNamedBufferData: PFNGLNAMEDBUFFERDATAPROC;
pub extern var __glewNamedBufferStorage: PFNGLNAMEDBUFFERSTORAGEPROC;
pub extern var __glewNamedBufferSubData: PFNGLNAMEDBUFFERSUBDATAPROC;
pub extern var __glewNamedFramebufferDrawBuffer: PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC;
pub extern var __glewNamedFramebufferDrawBuffers: PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC;
pub extern var __glewNamedFramebufferParameteri: PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC;
pub extern var __glewNamedFramebufferReadBuffer: PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC;
pub extern var __glewNamedFramebufferRenderbuffer: PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC;
pub extern var __glewNamedFramebufferTexture: PFNGLNAMEDFRAMEBUFFERTEXTUREPROC;
pub extern var __glewNamedFramebufferTextureLayer: PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC;
pub extern var __glewNamedRenderbufferStorage: PFNGLNAMEDRENDERBUFFERSTORAGEPROC;
pub extern var __glewNamedRenderbufferStorageMultisample: PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC;
pub extern var __glewTextureBuffer: PFNGLTEXTUREBUFFERPROC;
pub extern var __glewTextureBufferRange: PFNGLTEXTUREBUFFERRANGEPROC;
pub extern var __glewTextureParameterIiv: PFNGLTEXTUREPARAMETERIIVPROC;
pub extern var __glewTextureParameterIuiv: PFNGLTEXTUREPARAMETERIUIVPROC;
pub extern var __glewTextureParameterf: PFNGLTEXTUREPARAMETERFPROC;
pub extern var __glewTextureParameterfv: PFNGLTEXTUREPARAMETERFVPROC;
pub extern var __glewTextureParameteri: PFNGLTEXTUREPARAMETERIPROC;
pub extern var __glewTextureParameteriv: PFNGLTEXTUREPARAMETERIVPROC;
pub extern var __glewTextureStorage1D: PFNGLTEXTURESTORAGE1DPROC;
pub extern var __glewTextureStorage2D: PFNGLTEXTURESTORAGE2DPROC;
pub extern var __glewTextureStorage2DMultisample: PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC;
pub extern var __glewTextureStorage3D: PFNGLTEXTURESTORAGE3DPROC;
pub extern var __glewTextureStorage3DMultisample: PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC;
pub extern var __glewTextureSubImage1D: PFNGLTEXTURESUBIMAGE1DPROC;
pub extern var __glewTextureSubImage2D: PFNGLTEXTURESUBIMAGE2DPROC;
pub extern var __glewTextureSubImage3D: PFNGLTEXTURESUBIMAGE3DPROC;
pub extern var __glewTransformFeedbackBufferBase: PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC;
pub extern var __glewTransformFeedbackBufferRange: PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC;
pub extern var __glewUnmapNamedBuffer: PFNGLUNMAPNAMEDBUFFERPROC;
pub extern var __glewVertexArrayAttribBinding: PFNGLVERTEXARRAYATTRIBBINDINGPROC;
pub extern var __glewVertexArrayAttribFormat: PFNGLVERTEXARRAYATTRIBFORMATPROC;
pub extern var __glewVertexArrayAttribIFormat: PFNGLVERTEXARRAYATTRIBIFORMATPROC;
pub extern var __glewVertexArrayAttribLFormat: PFNGLVERTEXARRAYATTRIBLFORMATPROC;
pub extern var __glewVertexArrayBindingDivisor: PFNGLVERTEXARRAYBINDINGDIVISORPROC;
pub extern var __glewVertexArrayElementBuffer: PFNGLVERTEXARRAYELEMENTBUFFERPROC;
pub extern var __glewVertexArrayVertexBuffer: PFNGLVERTEXARRAYVERTEXBUFFERPROC;
pub extern var __glewVertexArrayVertexBuffers: PFNGLVERTEXARRAYVERTEXBUFFERSPROC;
pub extern var __glewDrawBuffersARB: PFNGLDRAWBUFFERSARBPROC;
pub extern var __glewBlendEquationSeparateiARB: PFNGLBLENDEQUATIONSEPARATEIARBPROC;
pub extern var __glewBlendEquationiARB: PFNGLBLENDEQUATIONIARBPROC;
pub extern var __glewBlendFuncSeparateiARB: PFNGLBLENDFUNCSEPARATEIARBPROC;
pub extern var __glewBlendFunciARB: PFNGLBLENDFUNCIARBPROC;
pub extern var __glewDrawElementsBaseVertex: PFNGLDRAWELEMENTSBASEVERTEXPROC;
pub extern var __glewDrawElementsInstancedBaseVertex: PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC;
pub extern var __glewDrawRangeElementsBaseVertex: PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC;
pub extern var __glewMultiDrawElementsBaseVertex: PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC;
pub extern var __glewDrawArraysIndirect: PFNGLDRAWARRAYSINDIRECTPROC;
pub extern var __glewDrawElementsIndirect: PFNGLDRAWELEMENTSINDIRECTPROC;
pub extern var __glewFramebufferParameteri: PFNGLFRAMEBUFFERPARAMETERIPROC;
pub extern var __glewGetFramebufferParameteriv: PFNGLGETFRAMEBUFFERPARAMETERIVPROC;
pub extern var __glewGetNamedFramebufferParameterivEXT: PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC;
pub extern var __glewNamedFramebufferParameteriEXT: PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC;
pub extern var __glewBindFramebuffer: PFNGLBINDFRAMEBUFFERPROC;
pub extern var __glewBindRenderbuffer: PFNGLBINDRENDERBUFFERPROC;
pub extern var __glewBlitFramebuffer: PFNGLBLITFRAMEBUFFERPROC;
pub extern var __glewCheckFramebufferStatus: PFNGLCHECKFRAMEBUFFERSTATUSPROC;
pub extern var __glewDeleteFramebuffers: PFNGLDELETEFRAMEBUFFERSPROC;
pub extern var __glewDeleteRenderbuffers: PFNGLDELETERENDERBUFFERSPROC;
pub extern var __glewFramebufferRenderbuffer: PFNGLFRAMEBUFFERRENDERBUFFERPROC;
pub extern var __glewFramebufferTexture1D: PFNGLFRAMEBUFFERTEXTURE1DPROC;
pub extern var __glewFramebufferTexture2D: PFNGLFRAMEBUFFERTEXTURE2DPROC;
pub extern var __glewFramebufferTexture3D: PFNGLFRAMEBUFFERTEXTURE3DPROC;
pub extern var __glewFramebufferTextureLayer: PFNGLFRAMEBUFFERTEXTURELAYERPROC;
pub extern var __glewGenFramebuffers: PFNGLGENFRAMEBUFFERSPROC;
pub extern var __glewGenRenderbuffers: PFNGLGENRENDERBUFFERSPROC;
pub extern var __glewGenerateMipmap: PFNGLGENERATEMIPMAPPROC;
pub extern var __glewGetFramebufferAttachmentParameteriv: PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC;
pub extern var __glewGetRenderbufferParameteriv: PFNGLGETRENDERBUFFERPARAMETERIVPROC;
pub extern var __glewIsFramebuffer: PFNGLISFRAMEBUFFERPROC;
pub extern var __glewIsRenderbuffer: PFNGLISRENDERBUFFERPROC;
pub extern var __glewRenderbufferStorage: PFNGLRENDERBUFFERSTORAGEPROC;
pub extern var __glewRenderbufferStorageMultisample: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC;
pub extern var __glewFramebufferTextureARB: PFNGLFRAMEBUFFERTEXTUREARBPROC;
pub extern var __glewFramebufferTextureFaceARB: PFNGLFRAMEBUFFERTEXTUREFACEARBPROC;
pub extern var __glewFramebufferTextureLayerARB: PFNGLFRAMEBUFFERTEXTURELAYERARBPROC;
pub extern var __glewProgramParameteriARB: PFNGLPROGRAMPARAMETERIARBPROC;
pub extern var __glewGetProgramBinary: PFNGLGETPROGRAMBINARYPROC;
pub extern var __glewProgramBinary: PFNGLPROGRAMBINARYPROC;
pub extern var __glewProgramParameteri: PFNGLPROGRAMPARAMETERIPROC;
pub extern var __glewGetCompressedTextureSubImage: PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC;
pub extern var __glewGetTextureSubImage: PFNGLGETTEXTURESUBIMAGEPROC;
pub extern var __glewSpecializeShaderARB: PFNGLSPECIALIZESHADERARBPROC;
pub extern var __glewGetUniformdv: PFNGLGETUNIFORMDVPROC;
pub extern var __glewUniform1d: PFNGLUNIFORM1DPROC;
pub extern var __glewUniform1dv: PFNGLUNIFORM1DVPROC;
pub extern var __glewUniform2d: PFNGLUNIFORM2DPROC;
pub extern var __glewUniform2dv: PFNGLUNIFORM2DVPROC;
pub extern var __glewUniform3d: PFNGLUNIFORM3DPROC;
pub extern var __glewUniform3dv: PFNGLUNIFORM3DVPROC;
pub extern var __glewUniform4d: PFNGLUNIFORM4DPROC;
pub extern var __glewUniform4dv: PFNGLUNIFORM4DVPROC;
pub extern var __glewUniformMatrix2dv: PFNGLUNIFORMMATRIX2DVPROC;
pub extern var __glewUniformMatrix2x3dv: PFNGLUNIFORMMATRIX2X3DVPROC;
pub extern var __glewUniformMatrix2x4dv: PFNGLUNIFORMMATRIX2X4DVPROC;
pub extern var __glewUniformMatrix3dv: PFNGLUNIFORMMATRIX3DVPROC;
pub extern var __glewUniformMatrix3x2dv: PFNGLUNIFORMMATRIX3X2DVPROC;
pub extern var __glewUniformMatrix3x4dv: PFNGLUNIFORMMATRIX3X4DVPROC;
pub extern var __glewUniformMatrix4dv: PFNGLUNIFORMMATRIX4DVPROC;
pub extern var __glewUniformMatrix4x2dv: PFNGLUNIFORMMATRIX4X2DVPROC;
pub extern var __glewUniformMatrix4x3dv: PFNGLUNIFORMMATRIX4X3DVPROC;
pub extern var __glewGetUniformi64vARB: PFNGLGETUNIFORMI64VARBPROC;
pub extern var __glewGetUniformui64vARB: PFNGLGETUNIFORMUI64VARBPROC;
pub extern var __glewGetnUniformi64vARB: PFNGLGETNUNIFORMI64VARBPROC;
pub extern var __glewGetnUniformui64vARB: PFNGLGETNUNIFORMUI64VARBPROC;
pub extern var __glewProgramUniform1i64ARB: PFNGLPROGRAMUNIFORM1I64ARBPROC;
pub extern var __glewProgramUniform1i64vARB: PFNGLPROGRAMUNIFORM1I64VARBPROC;
pub extern var __glewProgramUniform1ui64ARB: PFNGLPROGRAMUNIFORM1UI64ARBPROC;
pub extern var __glewProgramUniform1ui64vARB: PFNGLPROGRAMUNIFORM1UI64VARBPROC;
pub extern var __glewProgramUniform2i64ARB: PFNGLPROGRAMUNIFORM2I64ARBPROC;
pub extern var __glewProgramUniform2i64vARB: PFNGLPROGRAMUNIFORM2I64VARBPROC;
pub extern var __glewProgramUniform2ui64ARB: PFNGLPROGRAMUNIFORM2UI64ARBPROC;
pub extern var __glewProgramUniform2ui64vARB: PFNGLPROGRAMUNIFORM2UI64VARBPROC;
pub extern var __glewProgramUniform3i64ARB: PFNGLPROGRAMUNIFORM3I64ARBPROC;
pub extern var __glewProgramUniform3i64vARB: PFNGLPROGRAMUNIFORM3I64VARBPROC;
pub extern var __glewProgramUniform3ui64ARB: PFNGLPROGRAMUNIFORM3UI64ARBPROC;
pub extern var __glewProgramUniform3ui64vARB: PFNGLPROGRAMUNIFORM3UI64VARBPROC;
pub extern var __glewProgramUniform4i64ARB: PFNGLPROGRAMUNIFORM4I64ARBPROC;
pub extern var __glewProgramUniform4i64vARB: PFNGLPROGRAMUNIFORM4I64VARBPROC;
pub extern var __glewProgramUniform4ui64ARB: PFNGLPROGRAMUNIFORM4UI64ARBPROC;
pub extern var __glewProgramUniform4ui64vARB: PFNGLPROGRAMUNIFORM4UI64VARBPROC;
pub extern var __glewUniform1i64ARB: PFNGLUNIFORM1I64ARBPROC;
pub extern var __glewUniform1i64vARB: PFNGLUNIFORM1I64VARBPROC;
pub extern var __glewUniform1ui64ARB: PFNGLUNIFORM1UI64ARBPROC;
pub extern var __glewUniform1ui64vARB: PFNGLUNIFORM1UI64VARBPROC;
pub extern var __glewUniform2i64ARB: PFNGLUNIFORM2I64ARBPROC;
pub extern var __glewUniform2i64vARB: PFNGLUNIFORM2I64VARBPROC;
pub extern var __glewUniform2ui64ARB: PFNGLUNIFORM2UI64ARBPROC;
pub extern var __glewUniform2ui64vARB: PFNGLUNIFORM2UI64VARBPROC;
pub extern var __glewUniform3i64ARB: PFNGLUNIFORM3I64ARBPROC;
pub extern var __glewUniform3i64vARB: PFNGLUNIFORM3I64VARBPROC;
pub extern var __glewUniform3ui64ARB: PFNGLUNIFORM3UI64ARBPROC;
pub extern var __glewUniform3ui64vARB: PFNGLUNIFORM3UI64VARBPROC;
pub extern var __glewUniform4i64ARB: PFNGLUNIFORM4I64ARBPROC;
pub extern var __glewUniform4i64vARB: PFNGLUNIFORM4I64VARBPROC;
pub extern var __glewUniform4ui64ARB: PFNGLUNIFORM4UI64ARBPROC;
pub extern var __glewUniform4ui64vARB: PFNGLUNIFORM4UI64VARBPROC;
pub extern var __glewColorSubTable: PFNGLCOLORSUBTABLEPROC;
pub extern var __glewColorTable: PFNGLCOLORTABLEPROC;
pub extern var __glewColorTableParameterfv: PFNGLCOLORTABLEPARAMETERFVPROC;
pub extern var __glewColorTableParameteriv: PFNGLCOLORTABLEPARAMETERIVPROC;
pub extern var __glewConvolutionFilter1D: PFNGLCONVOLUTIONFILTER1DPROC;
pub extern var __glewConvolutionFilter2D: PFNGLCONVOLUTIONFILTER2DPROC;
pub extern var __glewConvolutionParameterf: PFNGLCONVOLUTIONPARAMETERFPROC;
pub extern var __glewConvolutionParameterfv: PFNGLCONVOLUTIONPARAMETERFVPROC;
pub extern var __glewConvolutionParameteri: PFNGLCONVOLUTIONPARAMETERIPROC;
pub extern var __glewConvolutionParameteriv: PFNGLCONVOLUTIONPARAMETERIVPROC;
pub extern var __glewCopyColorSubTable: PFNGLCOPYCOLORSUBTABLEPROC;
pub extern var __glewCopyColorTable: PFNGLCOPYCOLORTABLEPROC;
pub extern var __glewCopyConvolutionFilter1D: PFNGLCOPYCONVOLUTIONFILTER1DPROC;
pub extern var __glewCopyConvolutionFilter2D: PFNGLCOPYCONVOLUTIONFILTER2DPROC;
pub extern var __glewGetColorTable: PFNGLGETCOLORTABLEPROC;
pub extern var __glewGetColorTableParameterfv: PFNGLGETCOLORTABLEPARAMETERFVPROC;
pub extern var __glewGetColorTableParameteriv: PFNGLGETCOLORTABLEPARAMETERIVPROC;
pub extern var __glewGetConvolutionFilter: PFNGLGETCONVOLUTIONFILTERPROC;
pub extern var __glewGetConvolutionParameterfv: PFNGLGETCONVOLUTIONPARAMETERFVPROC;
pub extern var __glewGetConvolutionParameteriv: PFNGLGETCONVOLUTIONPARAMETERIVPROC;
pub extern var __glewGetHistogram: PFNGLGETHISTOGRAMPROC;
pub extern var __glewGetHistogramParameterfv: PFNGLGETHISTOGRAMPARAMETERFVPROC;
pub extern var __glewGetHistogramParameteriv: PFNGLGETHISTOGRAMPARAMETERIVPROC;
pub extern var __glewGetMinmax: PFNGLGETMINMAXPROC;
pub extern var __glewGetMinmaxParameterfv: PFNGLGETMINMAXPARAMETERFVPROC;
pub extern var __glewGetMinmaxParameteriv: PFNGLGETMINMAXPARAMETERIVPROC;
pub extern var __glewGetSeparableFilter: PFNGLGETSEPARABLEFILTERPROC;
pub extern var __glewHistogram: PFNGLHISTOGRAMPROC;
pub extern var __glewMinmax: PFNGLMINMAXPROC;
pub extern var __glewResetHistogram: PFNGLRESETHISTOGRAMPROC;
pub extern var __glewResetMinmax: PFNGLRESETMINMAXPROC;
pub extern var __glewSeparableFilter2D: PFNGLSEPARABLEFILTER2DPROC;
pub extern var __glewMultiDrawArraysIndirectCountARB: PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC;
pub extern var __glewMultiDrawElementsIndirectCountARB: PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC;
pub extern var __glewDrawArraysInstancedARB: PFNGLDRAWARRAYSINSTANCEDARBPROC;
pub extern var __glewDrawElementsInstancedARB: PFNGLDRAWELEMENTSINSTANCEDARBPROC;
pub extern var __glewVertexAttribDivisorARB: PFNGLVERTEXATTRIBDIVISORARBPROC;
pub extern var __glewGetInternalformativ: PFNGLGETINTERNALFORMATIVPROC;
pub extern var __glewGetInternalformati64v: PFNGLGETINTERNALFORMATI64VPROC;
pub extern var __glewInvalidateBufferData: PFNGLINVALIDATEBUFFERDATAPROC;
pub extern var __glewInvalidateBufferSubData: PFNGLINVALIDATEBUFFERSUBDATAPROC;
pub extern var __glewInvalidateFramebuffer: PFNGLINVALIDATEFRAMEBUFFERPROC;
pub extern var __glewInvalidateSubFramebuffer: PFNGLINVALIDATESUBFRAMEBUFFERPROC;
pub extern var __glewInvalidateTexImage: PFNGLINVALIDATETEXIMAGEPROC;
pub extern var __glewInvalidateTexSubImage: PFNGLINVALIDATETEXSUBIMAGEPROC;
pub extern var __glewFlushMappedBufferRange: PFNGLFLUSHMAPPEDBUFFERRANGEPROC;
pub extern var __glewMapBufferRange: PFNGLMAPBUFFERRANGEPROC;
pub extern var __glewCurrentPaletteMatrixARB: PFNGLCURRENTPALETTEMATRIXARBPROC;
pub extern var __glewMatrixIndexPointerARB: PFNGLMATRIXINDEXPOINTERARBPROC;
pub extern var __glewMatrixIndexubvARB: PFNGLMATRIXINDEXUBVARBPROC;
pub extern var __glewMatrixIndexuivARB: PFNGLMATRIXINDEXUIVARBPROC;
pub extern var __glewMatrixIndexusvARB: PFNGLMATRIXINDEXUSVARBPROC;
pub extern var __glewBindBuffersBase: PFNGLBINDBUFFERSBASEPROC;
pub extern var __glewBindBuffersRange: PFNGLBINDBUFFERSRANGEPROC;
pub extern var __glewBindImageTextures: PFNGLBINDIMAGETEXTURESPROC;
pub extern var __glewBindSamplers: PFNGLBINDSAMPLERSPROC;
pub extern var __glewBindTextures: PFNGLBINDTEXTURESPROC;
pub extern var __glewBindVertexBuffers: PFNGLBINDVERTEXBUFFERSPROC;
pub extern var __glewMultiDrawArraysIndirect: PFNGLMULTIDRAWARRAYSINDIRECTPROC;
pub extern var __glewMultiDrawElementsIndirect: PFNGLMULTIDRAWELEMENTSINDIRECTPROC;
pub extern var __glewSampleCoverageARB: PFNGLSAMPLECOVERAGEARBPROC;
pub extern var __glewActiveTextureARB: PFNGLACTIVETEXTUREARBPROC;
pub extern var __glewClientActiveTextureARB: PFNGLCLIENTACTIVETEXTUREARBPROC;
pub extern var __glewMultiTexCoord1dARB: PFNGLMULTITEXCOORD1DARBPROC;
pub extern var __glewMultiTexCoord1dvARB: PFNGLMULTITEXCOORD1DVARBPROC;
pub extern var __glewMultiTexCoord1fARB: PFNGLMULTITEXCOORD1FARBPROC;
pub extern var __glewMultiTexCoord1fvARB: PFNGLMULTITEXCOORD1FVARBPROC;
pub extern var __glewMultiTexCoord1iARB: PFNGLMULTITEXCOORD1IARBPROC;
pub extern var __glewMultiTexCoord1ivARB: PFNGLMULTITEXCOORD1IVARBPROC;
pub extern var __glewMultiTexCoord1sARB: PFNGLMULTITEXCOORD1SARBPROC;
pub extern var __glewMultiTexCoord1svARB: PFNGLMULTITEXCOORD1SVARBPROC;
pub extern var __glewMultiTexCoord2dARB: PFNGLMULTITEXCOORD2DARBPROC;
pub extern var __glewMultiTexCoord2dvARB: PFNGLMULTITEXCOORD2DVARBPROC;
pub extern var __glewMultiTexCoord2fARB: PFNGLMULTITEXCOORD2FARBPROC;
pub extern var __glewMultiTexCoord2fvARB: PFNGLMULTITEXCOORD2FVARBPROC;
pub extern var __glewMultiTexCoord2iARB: PFNGLMULTITEXCOORD2IARBPROC;
pub extern var __glewMultiTexCoord2ivARB: PFNGLMULTITEXCOORD2IVARBPROC;
pub extern var __glewMultiTexCoord2sARB: PFNGLMULTITEXCOORD2SARBPROC;
pub extern var __glewMultiTexCoord2svARB: PFNGLMULTITEXCOORD2SVARBPROC;
pub extern var __glewMultiTexCoord3dARB: PFNGLMULTITEXCOORD3DARBPROC;
pub extern var __glewMultiTexCoord3dvARB: PFNGLMULTITEXCOORD3DVARBPROC;
pub extern var __glewMultiTexCoord3fARB: PFNGLMULTITEXCOORD3FARBPROC;
pub extern var __glewMultiTexCoord3fvARB: PFNGLMULTITEXCOORD3FVARBPROC;
pub extern var __glewMultiTexCoord3iARB: PFNGLMULTITEXCOORD3IARBPROC;
pub extern var __glewMultiTexCoord3ivARB: PFNGLMULTITEXCOORD3IVARBPROC;
pub extern var __glewMultiTexCoord3sARB: PFNGLMULTITEXCOORD3SARBPROC;
pub extern var __glewMultiTexCoord3svARB: PFNGLMULTITEXCOORD3SVARBPROC;
pub extern var __glewMultiTexCoord4dARB: PFNGLMULTITEXCOORD4DARBPROC;
pub extern var __glewMultiTexCoord4dvARB: PFNGLMULTITEXCOORD4DVARBPROC;
pub extern var __glewMultiTexCoord4fARB: PFNGLMULTITEXCOORD4FARBPROC;
pub extern var __glewMultiTexCoord4fvARB: PFNGLMULTITEXCOORD4FVARBPROC;
pub extern var __glewMultiTexCoord4iARB: PFNGLMULTITEXCOORD4IARBPROC;
pub extern var __glewMultiTexCoord4ivARB: PFNGLMULTITEXCOORD4IVARBPROC;
pub extern var __glewMultiTexCoord4sARB: PFNGLMULTITEXCOORD4SARBPROC;
pub extern var __glewMultiTexCoord4svARB: PFNGLMULTITEXCOORD4SVARBPROC;
pub extern var __glewBeginQueryARB: PFNGLBEGINQUERYARBPROC;
pub extern var __glewDeleteQueriesARB: PFNGLDELETEQUERIESARBPROC;
pub extern var __glewEndQueryARB: PFNGLENDQUERYARBPROC;
pub extern var __glewGenQueriesARB: PFNGLGENQUERIESARBPROC;
pub extern var __glewGetQueryObjectivARB: PFNGLGETQUERYOBJECTIVARBPROC;
pub extern var __glewGetQueryObjectuivARB: PFNGLGETQUERYOBJECTUIVARBPROC;
pub extern var __glewGetQueryivARB: PFNGLGETQUERYIVARBPROC;
pub extern var __glewIsQueryARB: PFNGLISQUERYARBPROC;
pub extern var __glewMaxShaderCompilerThreadsARB: PFNGLMAXSHADERCOMPILERTHREADSARBPROC;
pub extern var __glewPointParameterfARB: PFNGLPOINTPARAMETERFARBPROC;
pub extern var __glewPointParameterfvARB: PFNGLPOINTPARAMETERFVARBPROC;
pub extern var __glewPolygonOffsetClamp: PFNGLPOLYGONOFFSETCLAMPPROC;
pub extern var __glewGetProgramInterfaceiv: PFNGLGETPROGRAMINTERFACEIVPROC;
pub extern var __glewGetProgramResourceIndex: PFNGLGETPROGRAMRESOURCEINDEXPROC;
pub extern var __glewGetProgramResourceLocation: PFNGLGETPROGRAMRESOURCELOCATIONPROC;
pub extern var __glewGetProgramResourceLocationIndex: PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC;
pub extern var __glewGetProgramResourceName: PFNGLGETPROGRAMRESOURCENAMEPROC;
pub extern var __glewGetProgramResourceiv: PFNGLGETPROGRAMRESOURCEIVPROC;
pub extern var __glewProvokingVertex: PFNGLPROVOKINGVERTEXPROC;
pub extern var __glewGetGraphicsResetStatusARB: PFNGLGETGRAPHICSRESETSTATUSARBPROC;
pub extern var __glewGetnColorTableARB: PFNGLGETNCOLORTABLEARBPROC;
pub extern var __glewGetnCompressedTexImageARB: PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC;
pub extern var __glewGetnConvolutionFilterARB: PFNGLGETNCONVOLUTIONFILTERARBPROC;
pub extern var __glewGetnHistogramARB: PFNGLGETNHISTOGRAMARBPROC;
pub extern var __glewGetnMapdvARB: PFNGLGETNMAPDVARBPROC;
pub extern var __glewGetnMapfvARB: PFNGLGETNMAPFVARBPROC;
pub extern var __glewGetnMapivARB: PFNGLGETNMAPIVARBPROC;
pub extern var __glewGetnMinmaxARB: PFNGLGETNMINMAXARBPROC;
pub extern var __glewGetnPixelMapfvARB: PFNGLGETNPIXELMAPFVARBPROC;
pub extern var __glewGetnPixelMapuivARB: PFNGLGETNPIXELMAPUIVARBPROC;
pub extern var __glewGetnPixelMapusvARB: PFNGLGETNPIXELMAPUSVARBPROC;
pub extern var __glewGetnPolygonStippleARB: PFNGLGETNPOLYGONSTIPPLEARBPROC;
pub extern var __glewGetnSeparableFilterARB: PFNGLGETNSEPARABLEFILTERARBPROC;
pub extern var __glewGetnTexImageARB: PFNGLGETNTEXIMAGEARBPROC;
pub extern var __glewGetnUniformdvARB: PFNGLGETNUNIFORMDVARBPROC;
pub extern var __glewGetnUniformfvARB: PFNGLGETNUNIFORMFVARBPROC;
pub extern var __glewGetnUniformivARB: PFNGLGETNUNIFORMIVARBPROC;
pub extern var __glewGetnUniformuivARB: PFNGLGETNUNIFORMUIVARBPROC;
pub extern var __glewReadnPixelsARB: PFNGLREADNPIXELSARBPROC;
pub extern var __glewFramebufferSampleLocationsfvARB: PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC;
pub extern var __glewNamedFramebufferSampleLocationsfvARB: PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC;
pub extern var __glewMinSampleShadingARB: PFNGLMINSAMPLESHADINGARBPROC;
pub extern var __glewBindSampler: PFNGLBINDSAMPLERPROC;
pub extern var __glewDeleteSamplers: PFNGLDELETESAMPLERSPROC;
pub extern var __glewGenSamplers: PFNGLGENSAMPLERSPROC;
pub extern var __glewGetSamplerParameterIiv: PFNGLGETSAMPLERPARAMETERIIVPROC;
pub extern var __glewGetSamplerParameterIuiv: PFNGLGETSAMPLERPARAMETERIUIVPROC;
pub extern var __glewGetSamplerParameterfv: PFNGLGETSAMPLERPARAMETERFVPROC;
pub extern var __glewGetSamplerParameteriv: PFNGLGETSAMPLERPARAMETERIVPROC;
pub extern var __glewIsSampler: PFNGLISSAMPLERPROC;
pub extern var __glewSamplerParameterIiv: PFNGLSAMPLERPARAMETERIIVPROC;
pub extern var __glewSamplerParameterIuiv: PFNGLSAMPLERPARAMETERIUIVPROC;
pub extern var __glewSamplerParameterf: PFNGLSAMPLERPARAMETERFPROC;
pub extern var __glewSamplerParameterfv: PFNGLSAMPLERPARAMETERFVPROC;
pub extern var __glewSamplerParameteri: PFNGLSAMPLERPARAMETERIPROC;
pub extern var __glewSamplerParameteriv: PFNGLSAMPLERPARAMETERIVPROC;
pub extern var __glewActiveShaderProgram: PFNGLACTIVESHADERPROGRAMPROC;
pub extern var __glewBindProgramPipeline: PFNGLBINDPROGRAMPIPELINEPROC;
pub extern var __glewCreateShaderProgramv: PFNGLCREATESHADERPROGRAMVPROC;
pub extern var __glewDeleteProgramPipelines: PFNGLDELETEPROGRAMPIPELINESPROC;
pub extern var __glewGenProgramPipelines: PFNGLGENPROGRAMPIPELINESPROC;
pub extern var __glewGetProgramPipelineInfoLog: PFNGLGETPROGRAMPIPELINEINFOLOGPROC;
pub extern var __glewGetProgramPipelineiv: PFNGLGETPROGRAMPIPELINEIVPROC;
pub extern var __glewIsProgramPipeline: PFNGLISPROGRAMPIPELINEPROC;
pub extern var __glewProgramUniform1d: PFNGLPROGRAMUNIFORM1DPROC;
pub extern var __glewProgramUniform1dv: PFNGLPROGRAMUNIFORM1DVPROC;
pub extern var __glewProgramUniform1f: PFNGLPROGRAMUNIFORM1FPROC;
pub extern var __glewProgramUniform1fv: PFNGLPROGRAMUNIFORM1FVPROC;
pub extern var __glewProgramUniform1i: PFNGLPROGRAMUNIFORM1IPROC;
pub extern var __glewProgramUniform1iv: PFNGLPROGRAMUNIFORM1IVPROC;
pub extern var __glewProgramUniform1ui: PFNGLPROGRAMUNIFORM1UIPROC;
pub extern var __glewProgramUniform1uiv: PFNGLPROGRAMUNIFORM1UIVPROC;
pub extern var __glewProgramUniform2d: PFNGLPROGRAMUNIFORM2DPROC;
pub extern var __glewProgramUniform2dv: PFNGLPROGRAMUNIFORM2DVPROC;
pub extern var __glewProgramUniform2f: PFNGLPROGRAMUNIFORM2FPROC;
pub extern var __glewProgramUniform2fv: PFNGLPROGRAMUNIFORM2FVPROC;
pub extern var __glewProgramUniform2i: PFNGLPROGRAMUNIFORM2IPROC;
pub extern var __glewProgramUniform2iv: PFNGLPROGRAMUNIFORM2IVPROC;
pub extern var __glewProgramUniform2ui: PFNGLPROGRAMUNIFORM2UIPROC;
pub extern var __glewProgramUniform2uiv: PFNGLPROGRAMUNIFORM2UIVPROC;
pub extern var __glewProgramUniform3d: PFNGLPROGRAMUNIFORM3DPROC;
pub extern var __glewProgramUniform3dv: PFNGLPROGRAMUNIFORM3DVPROC;
pub extern var __glewProgramUniform3f: PFNGLPROGRAMUNIFORM3FPROC;
pub extern var __glewProgramUniform3fv: PFNGLPROGRAMUNIFORM3FVPROC;
pub extern var __glewProgramUniform3i: PFNGLPROGRAMUNIFORM3IPROC;
pub extern var __glewProgramUniform3iv: PFNGLPROGRAMUNIFORM3IVPROC;
pub extern var __glewProgramUniform3ui: PFNGLPROGRAMUNIFORM3UIPROC;
pub extern var __glewProgramUniform3uiv: PFNGLPROGRAMUNIFORM3UIVPROC;
pub extern var __glewProgramUniform4d: PFNGLPROGRAMUNIFORM4DPROC;
pub extern var __glewProgramUniform4dv: PFNGLPROGRAMUNIFORM4DVPROC;
pub extern var __glewProgramUniform4f: PFNGLPROGRAMUNIFORM4FPROC;
pub extern var __glewProgramUniform4fv: PFNGLPROGRAMUNIFORM4FVPROC;
pub extern var __glewProgramUniform4i: PFNGLPROGRAMUNIFORM4IPROC;
pub extern var __glewProgramUniform4iv: PFNGLPROGRAMUNIFORM4IVPROC;
pub extern var __glewProgramUniform4ui: PFNGLPROGRAMUNIFORM4UIPROC;
pub extern var __glewProgramUniform4uiv: PFNGLPROGRAMUNIFORM4UIVPROC;
pub extern var __glewProgramUniformMatrix2dv: PFNGLPROGRAMUNIFORMMATRIX2DVPROC;
pub extern var __glewProgramUniformMatrix2fv: PFNGLPROGRAMUNIFORMMATRIX2FVPROC;
pub extern var __glewProgramUniformMatrix2x3dv: PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC;
pub extern var __glewProgramUniformMatrix2x3fv: PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC;
pub extern var __glewProgramUniformMatrix2x4dv: PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC;
pub extern var __glewProgramUniformMatrix2x4fv: PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC;
pub extern var __glewProgramUniformMatrix3dv: PFNGLPROGRAMUNIFORMMATRIX3DVPROC;
pub extern var __glewProgramUniformMatrix3fv: PFNGLPROGRAMUNIFORMMATRIX3FVPROC;
pub extern var __glewProgramUniformMatrix3x2dv: PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC;
pub extern var __glewProgramUniformMatrix3x2fv: PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC;
pub extern var __glewProgramUniformMatrix3x4dv: PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC;
pub extern var __glewProgramUniformMatrix3x4fv: PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC;
pub extern var __glewProgramUniformMatrix4dv: PFNGLPROGRAMUNIFORMMATRIX4DVPROC;
pub extern var __glewProgramUniformMatrix4fv: PFNGLPROGRAMUNIFORMMATRIX4FVPROC;
pub extern var __glewProgramUniformMatrix4x2dv: PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC;
pub extern var __glewProgramUniformMatrix4x2fv: PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC;
pub extern var __glewProgramUniformMatrix4x3dv: PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC;
pub extern var __glewProgramUniformMatrix4x3fv: PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC;
pub extern var __glewUseProgramStages: PFNGLUSEPROGRAMSTAGESPROC;
pub extern var __glewValidateProgramPipeline: PFNGLVALIDATEPROGRAMPIPELINEPROC;
pub extern var __glewGetActiveAtomicCounterBufferiv: PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC;
pub extern var __glewBindImageTexture: PFNGLBINDIMAGETEXTUREPROC;
pub extern var __glewMemoryBarrier: PFNGLMEMORYBARRIERPROC;
pub extern var __glewAttachObjectARB: PFNGLATTACHOBJECTARBPROC;
pub extern var __glewCompileShaderARB: PFNGLCOMPILESHADERARBPROC;
pub extern var __glewCreateProgramObjectARB: PFNGLCREATEPROGRAMOBJECTARBPROC;
pub extern var __glewCreateShaderObjectARB: PFNGLCREATESHADEROBJECTARBPROC;
pub extern var __glewDeleteObjectARB: PFNGLDELETEOBJECTARBPROC;
pub extern var __glewDetachObjectARB: PFNGLDETACHOBJECTARBPROC;
pub extern var __glewGetActiveUniformARB: PFNGLGETACTIVEUNIFORMARBPROC;
pub extern var __glewGetAttachedObjectsARB: PFNGLGETATTACHEDOBJECTSARBPROC;
pub extern var __glewGetHandleARB: PFNGLGETHANDLEARBPROC;
pub extern var __glewGetInfoLogARB: PFNGLGETINFOLOGARBPROC;
pub extern var __glewGetObjectParameterfvARB: PFNGLGETOBJECTPARAMETERFVARBPROC;
pub extern var __glewGetObjectParameterivARB: PFNGLGETOBJECTPARAMETERIVARBPROC;
pub extern var __glewGetShaderSourceARB: PFNGLGETSHADERSOURCEARBPROC;
pub extern var __glewGetUniformLocationARB: PFNGLGETUNIFORMLOCATIONARBPROC;
pub extern var __glewGetUniformfvARB: PFNGLGETUNIFORMFVARBPROC;
pub extern var __glewGetUniformivARB: PFNGLGETUNIFORMIVARBPROC;
pub extern var __glewLinkProgramARB: PFNGLLINKPROGRAMARBPROC;
pub extern var __glewShaderSourceARB: PFNGLSHADERSOURCEARBPROC;
pub extern var __glewUniform1fARB: PFNGLUNIFORM1FARBPROC;
pub extern var __glewUniform1fvARB: PFNGLUNIFORM1FVARBPROC;
pub extern var __glewUniform1iARB: PFNGLUNIFORM1IARBPROC;
pub extern var __glewUniform1ivARB: PFNGLUNIFORM1IVARBPROC;
pub extern var __glewUniform2fARB: PFNGLUNIFORM2FARBPROC;
pub extern var __glewUniform2fvARB: PFNGLUNIFORM2FVARBPROC;
pub extern var __glewUniform2iARB: PFNGLUNIFORM2IARBPROC;
pub extern var __glewUniform2ivARB: PFNGLUNIFORM2IVARBPROC;
pub extern var __glewUniform3fARB: PFNGLUNIFORM3FARBPROC;
pub extern var __glewUniform3fvARB: PFNGLUNIFORM3FVARBPROC;
pub extern var __glewUniform3iARB: PFNGLUNIFORM3IARBPROC;
pub extern var __glewUniform3ivARB: PFNGLUNIFORM3IVARBPROC;
pub extern var __glewUniform4fARB: PFNGLUNIFORM4FARBPROC;
pub extern var __glewUniform4fvARB: PFNGLUNIFORM4FVARBPROC;
pub extern var __glewUniform4iARB: PFNGLUNIFORM4IARBPROC;
pub extern var __glewUniform4ivARB: PFNGLUNIFORM4IVARBPROC;
pub extern var __glewUniformMatrix2fvARB: PFNGLUNIFORMMATRIX2FVARBPROC;
pub extern var __glewUniformMatrix3fvARB: PFNGLUNIFORMMATRIX3FVARBPROC;
pub extern var __glewUniformMatrix4fvARB: PFNGLUNIFORMMATRIX4FVARBPROC;
pub extern var __glewUseProgramObjectARB: PFNGLUSEPROGRAMOBJECTARBPROC;
pub extern var __glewValidateProgramARB: PFNGLVALIDATEPROGRAMARBPROC;
pub extern var __glewShaderStorageBlockBinding: PFNGLSHADERSTORAGEBLOCKBINDINGPROC;
pub extern var __glewGetActiveSubroutineName: PFNGLGETACTIVESUBROUTINENAMEPROC;
pub extern var __glewGetActiveSubroutineUniformName: PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC;
pub extern var __glewGetActiveSubroutineUniformiv: PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC;
pub extern var __glewGetProgramStageiv: PFNGLGETPROGRAMSTAGEIVPROC;
pub extern var __glewGetSubroutineIndex: PFNGLGETSUBROUTINEINDEXPROC;
pub extern var __glewGetSubroutineUniformLocation: PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC;
pub extern var __glewGetUniformSubroutineuiv: PFNGLGETUNIFORMSUBROUTINEUIVPROC;
pub extern var __glewUniformSubroutinesuiv: PFNGLUNIFORMSUBROUTINESUIVPROC;
pub extern var __glewCompileShaderIncludeARB: PFNGLCOMPILESHADERINCLUDEARBPROC;
pub extern var __glewDeleteNamedStringARB: PFNGLDELETENAMEDSTRINGARBPROC;
pub extern var __glewGetNamedStringARB: PFNGLGETNAMEDSTRINGARBPROC;
pub extern var __glewGetNamedStringivARB: PFNGLGETNAMEDSTRINGIVARBPROC;
pub extern var __glewIsNamedStringARB: PFNGLISNAMEDSTRINGARBPROC;
pub extern var __glewNamedStringARB: PFNGLNAMEDSTRINGARBPROC;
pub extern var __glewBufferPageCommitmentARB: PFNGLBUFFERPAGECOMMITMENTARBPROC;
pub extern var __glewTexPageCommitmentARB: PFNGLTEXPAGECOMMITMENTARBPROC;
pub extern var __glewClientWaitSync: PFNGLCLIENTWAITSYNCPROC;
pub extern var __glewDeleteSync: PFNGLDELETESYNCPROC;
pub extern var __glewFenceSync: PFNGLFENCESYNCPROC;
pub extern var __glewGetInteger64v: PFNGLGETINTEGER64VPROC;
pub extern var __glewGetSynciv: PFNGLGETSYNCIVPROC;
pub extern var __glewIsSync: PFNGLISSYNCPROC;
pub extern var __glewWaitSync: PFNGLWAITSYNCPROC;
pub extern var __glewPatchParameterfv: PFNGLPATCHPARAMETERFVPROC;
pub extern var __glewPatchParameteri: PFNGLPATCHPARAMETERIPROC;
pub extern var __glewTextureBarrier: PFNGLTEXTUREBARRIERPROC;
pub extern var __glewTexBufferARB: PFNGLTEXBUFFERARBPROC;
pub extern var __glewTexBufferRange: PFNGLTEXBUFFERRANGEPROC;
pub extern var __glewTextureBufferRangeEXT: PFNGLTEXTUREBUFFERRANGEEXTPROC;
pub extern var __glewCompressedTexImage1DARB: PFNGLCOMPRESSEDTEXIMAGE1DARBPROC;
pub extern var __glewCompressedTexImage2DARB: PFNGLCOMPRESSEDTEXIMAGE2DARBPROC;
pub extern var __glewCompressedTexImage3DARB: PFNGLCOMPRESSEDTEXIMAGE3DARBPROC;
pub extern var __glewCompressedTexSubImage1DARB: PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC;
pub extern var __glewCompressedTexSubImage2DARB: PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC;
pub extern var __glewCompressedTexSubImage3DARB: PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC;
pub extern var __glewGetCompressedTexImageARB: PFNGLGETCOMPRESSEDTEXIMAGEARBPROC;
pub extern var __glewGetMultisamplefv: PFNGLGETMULTISAMPLEFVPROC;
pub extern var __glewSampleMaski: PFNGLSAMPLEMASKIPROC;
pub extern var __glewTexImage2DMultisample: PFNGLTEXIMAGE2DMULTISAMPLEPROC;
pub extern var __glewTexImage3DMultisample: PFNGLTEXIMAGE3DMULTISAMPLEPROC;
pub extern var __glewTexStorage1D: PFNGLTEXSTORAGE1DPROC;
pub extern var __glewTexStorage2D: PFNGLTEXSTORAGE2DPROC;
pub extern var __glewTexStorage3D: PFNGLTEXSTORAGE3DPROC;
pub extern var __glewTexStorage2DMultisample: PFNGLTEXSTORAGE2DMULTISAMPLEPROC;
pub extern var __glewTexStorage3DMultisample: PFNGLTEXSTORAGE3DMULTISAMPLEPROC;
pub extern var __glewTextureStorage2DMultisampleEXT: PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC;
pub extern var __glewTextureStorage3DMultisampleEXT: PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC;
pub extern var __glewTextureView: PFNGLTEXTUREVIEWPROC;
pub extern var __glewGetQueryObjecti64v: PFNGLGETQUERYOBJECTI64VPROC;
pub extern var __glewGetQueryObjectui64v: PFNGLGETQUERYOBJECTUI64VPROC;
pub extern var __glewQueryCounter: PFNGLQUERYCOUNTERPROC;
pub extern var __glewBindTransformFeedback: PFNGLBINDTRANSFORMFEEDBACKPROC;
pub extern var __glewDeleteTransformFeedbacks: PFNGLDELETETRANSFORMFEEDBACKSPROC;
pub extern var __glewDrawTransformFeedback: PFNGLDRAWTRANSFORMFEEDBACKPROC;
pub extern var __glewGenTransformFeedbacks: PFNGLGENTRANSFORMFEEDBACKSPROC;
pub extern var __glewIsTransformFeedback: PFNGLISTRANSFORMFEEDBACKPROC;
pub extern var __glewPauseTransformFeedback: PFNGLPAUSETRANSFORMFEEDBACKPROC;
pub extern var __glewResumeTransformFeedback: PFNGLRESUMETRANSFORMFEEDBACKPROC;
pub extern var __glewBeginQueryIndexed: PFNGLBEGINQUERYINDEXEDPROC;
pub extern var __glewDrawTransformFeedbackStream: PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC;
pub extern var __glewEndQueryIndexed: PFNGLENDQUERYINDEXEDPROC;
pub extern var __glewGetQueryIndexediv: PFNGLGETQUERYINDEXEDIVPROC;
pub extern var __glewDrawTransformFeedbackInstanced: PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC;
pub extern var __glewDrawTransformFeedbackStreamInstanced: PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC;
pub extern var __glewLoadTransposeMatrixdARB: PFNGLLOADTRANSPOSEMATRIXDARBPROC;
pub extern var __glewLoadTransposeMatrixfARB: PFNGLLOADTRANSPOSEMATRIXFARBPROC;
pub extern var __glewMultTransposeMatrixdARB: PFNGLMULTTRANSPOSEMATRIXDARBPROC;
pub extern var __glewMultTransposeMatrixfARB: PFNGLMULTTRANSPOSEMATRIXFARBPROC;
pub extern var __glewBindBufferBase: PFNGLBINDBUFFERBASEPROC;
pub extern var __glewBindBufferRange: PFNGLBINDBUFFERRANGEPROC;
pub extern var __glewGetActiveUniformBlockName: PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC;
pub extern var __glewGetActiveUniformBlockiv: PFNGLGETACTIVEUNIFORMBLOCKIVPROC;
pub extern var __glewGetActiveUniformName: PFNGLGETACTIVEUNIFORMNAMEPROC;
pub extern var __glewGetActiveUniformsiv: PFNGLGETACTIVEUNIFORMSIVPROC;
pub extern var __glewGetIntegeri_v: PFNGLGETINTEGERI_VPROC;
pub extern var __glewGetUniformBlockIndex: PFNGLGETUNIFORMBLOCKINDEXPROC;
pub extern var __glewGetUniformIndices: PFNGLGETUNIFORMINDICESPROC;
pub extern var __glewUniformBlockBinding: PFNGLUNIFORMBLOCKBINDINGPROC;
pub extern var __glewBindVertexArray: PFNGLBINDVERTEXARRAYPROC;
pub extern var __glewDeleteVertexArrays: PFNGLDELETEVERTEXARRAYSPROC;
pub extern var __glewGenVertexArrays: PFNGLGENVERTEXARRAYSPROC;
pub extern var __glewIsVertexArray: PFNGLISVERTEXARRAYPROC;
pub extern var __glewGetVertexAttribLdv: PFNGLGETVERTEXATTRIBLDVPROC;
pub extern var __glewVertexAttribL1d: PFNGLVERTEXATTRIBL1DPROC;
pub extern var __glewVertexAttribL1dv: PFNGLVERTEXATTRIBL1DVPROC;
pub extern var __glewVertexAttribL2d: PFNGLVERTEXATTRIBL2DPROC;
pub extern var __glewVertexAttribL2dv: PFNGLVERTEXATTRIBL2DVPROC;
pub extern var __glewVertexAttribL3d: PFNGLVERTEXATTRIBL3DPROC;
pub extern var __glewVertexAttribL3dv: PFNGLVERTEXATTRIBL3DVPROC;
pub extern var __glewVertexAttribL4d: PFNGLVERTEXATTRIBL4DPROC;
pub extern var __glewVertexAttribL4dv: PFNGLVERTEXATTRIBL4DVPROC;
pub extern var __glewVertexAttribLPointer: PFNGLVERTEXATTRIBLPOINTERPROC;
pub extern var __glewBindVertexBuffer: PFNGLBINDVERTEXBUFFERPROC;
pub extern var __glewVertexArrayBindVertexBufferEXT: PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC;
pub extern var __glewVertexArrayVertexAttribBindingEXT: PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC;
pub extern var __glewVertexArrayVertexAttribFormatEXT: PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC;
pub extern var __glewVertexArrayVertexAttribIFormatEXT: PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC;
pub extern var __glewVertexArrayVertexAttribLFormatEXT: PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC;
pub extern var __glewVertexArrayVertexBindingDivisorEXT: PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC;
pub extern var __glewVertexAttribBinding: PFNGLVERTEXATTRIBBINDINGPROC;
pub extern var __glewVertexAttribFormat: PFNGLVERTEXATTRIBFORMATPROC;
pub extern var __glewVertexAttribIFormat: PFNGLVERTEXATTRIBIFORMATPROC;
pub extern var __glewVertexAttribLFormat: PFNGLVERTEXATTRIBLFORMATPROC;
pub extern var __glewVertexBindingDivisor: PFNGLVERTEXBINDINGDIVISORPROC;
pub extern var __glewVertexBlendARB: PFNGLVERTEXBLENDARBPROC;
pub extern var __glewWeightPointerARB: PFNGLWEIGHTPOINTERARBPROC;
pub extern var __glewWeightbvARB: PFNGLWEIGHTBVARBPROC;
pub extern var __glewWeightdvARB: PFNGLWEIGHTDVARBPROC;
pub extern var __glewWeightfvARB: PFNGLWEIGHTFVARBPROC;
pub extern var __glewWeightivARB: PFNGLWEIGHTIVARBPROC;
pub extern var __glewWeightsvARB: PFNGLWEIGHTSVARBPROC;
pub extern var __glewWeightubvARB: PFNGLWEIGHTUBVARBPROC;
pub extern var __glewWeightuivARB: PFNGLWEIGHTUIVARBPROC;
pub extern var __glewWeightusvARB: PFNGLWEIGHTUSVARBPROC;
pub extern var __glewBindBufferARB: PFNGLBINDBUFFERARBPROC;
pub extern var __glewBufferDataARB: PFNGLBUFFERDATAARBPROC;
pub extern var __glewBufferSubDataARB: PFNGLBUFFERSUBDATAARBPROC;
pub extern var __glewDeleteBuffersARB: PFNGLDELETEBUFFERSARBPROC;
pub extern var __glewGenBuffersARB: PFNGLGENBUFFERSARBPROC;
pub extern var __glewGetBufferParameterivARB: PFNGLGETBUFFERPARAMETERIVARBPROC;
pub extern var __glewGetBufferPointervARB: PFNGLGETBUFFERPOINTERVARBPROC;
pub extern var __glewGetBufferSubDataARB: PFNGLGETBUFFERSUBDATAARBPROC;
pub extern var __glewIsBufferARB: PFNGLISBUFFERARBPROC;
pub extern var __glewMapBufferARB: PFNGLMAPBUFFERARBPROC;
pub extern var __glewUnmapBufferARB: PFNGLUNMAPBUFFERARBPROC;
pub extern var __glewBindProgramARB: PFNGLBINDPROGRAMARBPROC;
pub extern var __glewDeleteProgramsARB: PFNGLDELETEPROGRAMSARBPROC;
pub extern var __glewDisableVertexAttribArrayARB: PFNGLDISABLEVERTEXATTRIBARRAYARBPROC;
pub extern var __glewEnableVertexAttribArrayARB: PFNGLENABLEVERTEXATTRIBARRAYARBPROC;
pub extern var __glewGenProgramsARB: PFNGLGENPROGRAMSARBPROC;
pub extern var __glewGetProgramEnvParameterdvARB: PFNGLGETPROGRAMENVPARAMETERDVARBPROC;
pub extern var __glewGetProgramEnvParameterfvARB: PFNGLGETPROGRAMENVPARAMETERFVARBPROC;
pub extern var __glewGetProgramLocalParameterdvARB: PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC;
pub extern var __glewGetProgramLocalParameterfvARB: PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC;
pub extern var __glewGetProgramStringARB: PFNGLGETPROGRAMSTRINGARBPROC;
pub extern var __glewGetProgramivARB: PFNGLGETPROGRAMIVARBPROC;
pub extern var __glewGetVertexAttribPointervARB: PFNGLGETVERTEXATTRIBPOINTERVARBPROC;
pub extern var __glewGetVertexAttribdvARB: PFNGLGETVERTEXATTRIBDVARBPROC;
pub extern var __glewGetVertexAttribfvARB: PFNGLGETVERTEXATTRIBFVARBPROC;
pub extern var __glewGetVertexAttribivARB: PFNGLGETVERTEXATTRIBIVARBPROC;
pub extern var __glewIsProgramARB: PFNGLISPROGRAMARBPROC;
pub extern var __glewProgramEnvParameter4dARB: PFNGLPROGRAMENVPARAMETER4DARBPROC;
pub extern var __glewProgramEnvParameter4dvARB: PFNGLPROGRAMENVPARAMETER4DVARBPROC;
pub extern var __glewProgramEnvParameter4fARB: PFNGLPROGRAMENVPARAMETER4FARBPROC;
pub extern var __glewProgramEnvParameter4fvARB: PFNGLPROGRAMENVPARAMETER4FVARBPROC;
pub extern var __glewProgramLocalParameter4dARB: PFNGLPROGRAMLOCALPARAMETER4DARBPROC;
pub extern var __glewProgramLocalParameter4dvARB: PFNGLPROGRAMLOCALPARAMETER4DVARBPROC;
pub extern var __glewProgramLocalParameter4fARB: PFNGLPROGRAMLOCALPARAMETER4FARBPROC;
pub extern var __glewProgramLocalParameter4fvARB: PFNGLPROGRAMLOCALPARAMETER4FVARBPROC;
pub extern var __glewProgramStringARB: PFNGLPROGRAMSTRINGARBPROC;
pub extern var __glewVertexAttrib1dARB: PFNGLVERTEXATTRIB1DARBPROC;
pub extern var __glewVertexAttrib1dvARB: PFNGLVERTEXATTRIB1DVARBPROC;
pub extern var __glewVertexAttrib1fARB: PFNGLVERTEXATTRIB1FARBPROC;
pub extern var __glewVertexAttrib1fvARB: PFNGLVERTEXATTRIB1FVARBPROC;
pub extern var __glewVertexAttrib1sARB: PFNGLVERTEXATTRIB1SARBPROC;
pub extern var __glewVertexAttrib1svARB: PFNGLVERTEXATTRIB1SVARBPROC;
pub extern var __glewVertexAttrib2dARB: PFNGLVERTEXATTRIB2DARBPROC;
pub extern var __glewVertexAttrib2dvARB: PFNGLVERTEXATTRIB2DVARBPROC;
pub extern var __glewVertexAttrib2fARB: PFNGLVERTEXATTRIB2FARBPROC;
pub extern var __glewVertexAttrib2fvARB: PFNGLVERTEXATTRIB2FVARBPROC;
pub extern var __glewVertexAttrib2sARB: PFNGLVERTEXATTRIB2SARBPROC;
pub extern var __glewVertexAttrib2svARB: PFNGLVERTEXATTRIB2SVARBPROC;
pub extern var __glewVertexAttrib3dARB: PFNGLVERTEXATTRIB3DARBPROC;
pub extern var __glewVertexAttrib3dvARB: PFNGLVERTEXATTRIB3DVARBPROC;
pub extern var __glewVertexAttrib3fARB: PFNGLVERTEXATTRIB3FARBPROC;
pub extern var __glewVertexAttrib3fvARB: PFNGLVERTEXATTRIB3FVARBPROC;
pub extern var __glewVertexAttrib3sARB: PFNGLVERTEXATTRIB3SARBPROC;
pub extern var __glewVertexAttrib3svARB: PFNGLVERTEXATTRIB3SVARBPROC;
pub extern var __glewVertexAttrib4NbvARB: PFNGLVERTEXATTRIB4NBVARBPROC;
pub extern var __glewVertexAttrib4NivARB: PFNGLVERTEXATTRIB4NIVARBPROC;
pub extern var __glewVertexAttrib4NsvARB: PFNGLVERTEXATTRIB4NSVARBPROC;
pub extern var __glewVertexAttrib4NubARB: PFNGLVERTEXATTRIB4NUBARBPROC;
pub extern var __glewVertexAttrib4NubvARB: PFNGLVERTEXATTRIB4NUBVARBPROC;
pub extern var __glewVertexAttrib4NuivARB: PFNGLVERTEXATTRIB4NUIVARBPROC;
pub extern var __glewVertexAttrib4NusvARB: PFNGLVERTEXATTRIB4NUSVARBPROC;
pub extern var __glewVertexAttrib4bvARB: PFNGLVERTEXATTRIB4BVARBPROC;
pub extern var __glewVertexAttrib4dARB: PFNGLVERTEXATTRIB4DARBPROC;
pub extern var __glewVertexAttrib4dvARB: PFNGLVERTEXATTRIB4DVARBPROC;
pub extern var __glewVertexAttrib4fARB: PFNGLVERTEXATTRIB4FARBPROC;
pub extern var __glewVertexAttrib4fvARB: PFNGLVERTEXATTRIB4FVARBPROC;
pub extern var __glewVertexAttrib4ivARB: PFNGLVERTEXATTRIB4IVARBPROC;
pub extern var __glewVertexAttrib4sARB: PFNGLVERTEXATTRIB4SARBPROC;
pub extern var __glewVertexAttrib4svARB: PFNGLVERTEXATTRIB4SVARBPROC;
pub extern var __glewVertexAttrib4ubvARB: PFNGLVERTEXATTRIB4UBVARBPROC;
pub extern var __glewVertexAttrib4uivARB: PFNGLVERTEXATTRIB4UIVARBPROC;
pub extern var __glewVertexAttrib4usvARB: PFNGLVERTEXATTRIB4USVARBPROC;
pub extern var __glewVertexAttribPointerARB: PFNGLVERTEXATTRIBPOINTERARBPROC;
pub extern var __glewBindAttribLocationARB: PFNGLBINDATTRIBLOCATIONARBPROC;
pub extern var __glewGetActiveAttribARB: PFNGLGETACTIVEATTRIBARBPROC;
pub extern var __glewGetAttribLocationARB: PFNGLGETATTRIBLOCATIONARBPROC;
pub extern var __glewColorP3ui: PFNGLCOLORP3UIPROC;
pub extern var __glewColorP3uiv: PFNGLCOLORP3UIVPROC;
pub extern var __glewColorP4ui: PFNGLCOLORP4UIPROC;
pub extern var __glewColorP4uiv: PFNGLCOLORP4UIVPROC;
pub extern var __glewMultiTexCoordP1ui: PFNGLMULTITEXCOORDP1UIPROC;
pub extern var __glewMultiTexCoordP1uiv: PFNGLMULTITEXCOORDP1UIVPROC;
pub extern var __glewMultiTexCoordP2ui: PFNGLMULTITEXCOORDP2UIPROC;
pub extern var __glewMultiTexCoordP2uiv: PFNGLMULTITEXCOORDP2UIVPROC;
pub extern var __glewMultiTexCoordP3ui: PFNGLMULTITEXCOORDP3UIPROC;
pub extern var __glewMultiTexCoordP3uiv: PFNGLMULTITEXCOORDP3UIVPROC;
pub extern var __glewMultiTexCoordP4ui: PFNGLMULTITEXCOORDP4UIPROC;
pub extern var __glewMultiTexCoordP4uiv: PFNGLMULTITEXCOORDP4UIVPROC;
pub extern var __glewNormalP3ui: PFNGLNORMALP3UIPROC;
pub extern var __glewNormalP3uiv: PFNGLNORMALP3UIVPROC;
pub extern var __glewSecondaryColorP3ui: PFNGLSECONDARYCOLORP3UIPROC;
pub extern var __glewSecondaryColorP3uiv: PFNGLSECONDARYCOLORP3UIVPROC;
pub extern var __glewTexCoordP1ui: PFNGLTEXCOORDP1UIPROC;
pub extern var __glewTexCoordP1uiv: PFNGLTEXCOORDP1UIVPROC;
pub extern var __glewTexCoordP2ui: PFNGLTEXCOORDP2UIPROC;
pub extern var __glewTexCoordP2uiv: PFNGLTEXCOORDP2UIVPROC;
pub extern var __glewTexCoordP3ui: PFNGLTEXCOORDP3UIPROC;
pub extern var __glewTexCoordP3uiv: PFNGLTEXCOORDP3UIVPROC;
pub extern var __glewTexCoordP4ui: PFNGLTEXCOORDP4UIPROC;
pub extern var __glewTexCoordP4uiv: PFNGLTEXCOORDP4UIVPROC;
pub extern var __glewVertexAttribP1ui: PFNGLVERTEXATTRIBP1UIPROC;
pub extern var __glewVertexAttribP1uiv: PFNGLVERTEXATTRIBP1UIVPROC;
pub extern var __glewVertexAttribP2ui: PFNGLVERTEXATTRIBP2UIPROC;
pub extern var __glewVertexAttribP2uiv: PFNGLVERTEXATTRIBP2UIVPROC;
pub extern var __glewVertexAttribP3ui: PFNGLVERTEXATTRIBP3UIPROC;
pub extern var __glewVertexAttribP3uiv: PFNGLVERTEXATTRIBP3UIVPROC;
pub extern var __glewVertexAttribP4ui: PFNGLVERTEXATTRIBP4UIPROC;
pub extern var __glewVertexAttribP4uiv: PFNGLVERTEXATTRIBP4UIVPROC;
pub extern var __glewVertexP2ui: PFNGLVERTEXP2UIPROC;
pub extern var __glewVertexP2uiv: PFNGLVERTEXP2UIVPROC;
pub extern var __glewVertexP3ui: PFNGLVERTEXP3UIPROC;
pub extern var __glewVertexP3uiv: PFNGLVERTEXP3UIVPROC;
pub extern var __glewVertexP4ui: PFNGLVERTEXP4UIPROC;
pub extern var __glewVertexP4uiv: PFNGLVERTEXP4UIVPROC;
pub extern var __glewDepthRangeArrayv: PFNGLDEPTHRANGEARRAYVPROC;
pub extern var __glewDepthRangeIndexed: PFNGLDEPTHRANGEINDEXEDPROC;
pub extern var __glewGetDoublei_v: PFNGLGETDOUBLEI_VPROC;
pub extern var __glewGetFloati_v: PFNGLGETFLOATI_VPROC;
pub extern var __glewScissorArrayv: PFNGLSCISSORARRAYVPROC;
pub extern var __glewScissorIndexed: PFNGLSCISSORINDEXEDPROC;
pub extern var __glewScissorIndexedv: PFNGLSCISSORINDEXEDVPROC;
pub extern var __glewViewportArrayv: PFNGLVIEWPORTARRAYVPROC;
pub extern var __glewViewportIndexedf: PFNGLVIEWPORTINDEXEDFPROC;
pub extern var __glewViewportIndexedfv: PFNGLVIEWPORTINDEXEDFVPROC;
pub extern var __glewWindowPos2dARB: PFNGLWINDOWPOS2DARBPROC;
pub extern var __glewWindowPos2dvARB: PFNGLWINDOWPOS2DVARBPROC;
pub extern var __glewWindowPos2fARB: PFNGLWINDOWPOS2FARBPROC;
pub extern var __glewWindowPos2fvARB: PFNGLWINDOWPOS2FVARBPROC;
pub extern var __glewWindowPos2iARB: PFNGLWINDOWPOS2IARBPROC;
pub extern var __glewWindowPos2ivARB: PFNGLWINDOWPOS2IVARBPROC;
pub extern var __glewWindowPos2sARB: PFNGLWINDOWPOS2SARBPROC;
pub extern var __glewWindowPos2svARB: PFNGLWINDOWPOS2SVARBPROC;
pub extern var __glewWindowPos3dARB: PFNGLWINDOWPOS3DARBPROC;
pub extern var __glewWindowPos3dvARB: PFNGLWINDOWPOS3DVARBPROC;
pub extern var __glewWindowPos3fARB: PFNGLWINDOWPOS3FARBPROC;
pub extern var __glewWindowPos3fvARB: PFNGLWINDOWPOS3FVARBPROC;
pub extern var __glewWindowPos3iARB: PFNGLWINDOWPOS3IARBPROC;
pub extern var __glewWindowPos3ivARB: PFNGLWINDOWPOS3IVARBPROC;
pub extern var __glewWindowPos3sARB: PFNGLWINDOWPOS3SARBPROC;
pub extern var __glewWindowPos3svARB: PFNGLWINDOWPOS3SVARBPROC;
pub extern var __glewDrawBuffersATI: PFNGLDRAWBUFFERSATIPROC;
pub extern var __glewDrawElementArrayATI: PFNGLDRAWELEMENTARRAYATIPROC;
pub extern var __glewDrawRangeElementArrayATI: PFNGLDRAWRANGEELEMENTARRAYATIPROC;
pub extern var __glewElementPointerATI: PFNGLELEMENTPOINTERATIPROC;
pub extern var __glewGetTexBumpParameterfvATI: PFNGLGETTEXBUMPPARAMETERFVATIPROC;
pub extern var __glewGetTexBumpParameterivATI: PFNGLGETTEXBUMPPARAMETERIVATIPROC;
pub extern var __glewTexBumpParameterfvATI: PFNGLTEXBUMPPARAMETERFVATIPROC;
pub extern var __glewTexBumpParameterivATI: PFNGLTEXBUMPPARAMETERIVATIPROC;
pub extern var __glewAlphaFragmentOp1ATI: PFNGLALPHAFRAGMENTOP1ATIPROC;
pub extern var __glewAlphaFragmentOp2ATI: PFNGLALPHAFRAGMENTOP2ATIPROC;
pub extern var __glewAlphaFragmentOp3ATI: PFNGLALPHAFRAGMENTOP3ATIPROC;
pub extern var __glewBeginFragmentShaderATI: PFNGLBEGINFRAGMENTSHADERATIPROC;
pub extern var __glewBindFragmentShaderATI: PFNGLBINDFRAGMENTSHADERATIPROC;
pub extern var __glewColorFragmentOp1ATI: PFNGLCOLORFRAGMENTOP1ATIPROC;
pub extern var __glewColorFragmentOp2ATI: PFNGLCOLORFRAGMENTOP2ATIPROC;
pub extern var __glewColorFragmentOp3ATI: PFNGLCOLORFRAGMENTOP3ATIPROC;
pub extern var __glewDeleteFragmentShaderATI: PFNGLDELETEFRAGMENTSHADERATIPROC;
pub extern var __glewEndFragmentShaderATI: PFNGLENDFRAGMENTSHADERATIPROC;
pub extern var __glewGenFragmentShadersATI: PFNGLGENFRAGMENTSHADERSATIPROC;
pub extern var __glewPassTexCoordATI: PFNGLPASSTEXCOORDATIPROC;
pub extern var __glewSampleMapATI: PFNGLSAMPLEMAPATIPROC;
pub extern var __glewSetFragmentShaderConstantATI: PFNGLSETFRAGMENTSHADERCONSTANTATIPROC;
pub extern var __glewMapObjectBufferATI: PFNGLMAPOBJECTBUFFERATIPROC;
pub extern var __glewUnmapObjectBufferATI: PFNGLUNMAPOBJECTBUFFERATIPROC;
pub extern var __glewPNTrianglesfATI: PFNGLPNTRIANGLESFATIPROC;
pub extern var __glewPNTrianglesiATI: PFNGLPNTRIANGLESIATIPROC;
pub extern var __glewStencilFuncSeparateATI: PFNGLSTENCILFUNCSEPARATEATIPROC;
pub extern var __glewStencilOpSeparateATI: PFNGLSTENCILOPSEPARATEATIPROC;
pub extern var __glewArrayObjectATI: PFNGLARRAYOBJECTATIPROC;
pub extern var __glewFreeObjectBufferATI: PFNGLFREEOBJECTBUFFERATIPROC;
pub extern var __glewGetArrayObjectfvATI: PFNGLGETARRAYOBJECTFVATIPROC;
pub extern var __glewGetArrayObjectivATI: PFNGLGETARRAYOBJECTIVATIPROC;
pub extern var __glewGetObjectBufferfvATI: PFNGLGETOBJECTBUFFERFVATIPROC;
pub extern var __glewGetObjectBufferivATI: PFNGLGETOBJECTBUFFERIVATIPROC;
pub extern var __glewGetVariantArrayObjectfvATI: PFNGLGETVARIANTARRAYOBJECTFVATIPROC;
pub extern var __glewGetVariantArrayObjectivATI: PFNGLGETVARIANTARRAYOBJECTIVATIPROC;
pub extern var __glewIsObjectBufferATI: PFNGLISOBJECTBUFFERATIPROC;
pub extern var __glewNewObjectBufferATI: PFNGLNEWOBJECTBUFFERATIPROC;
pub extern var __glewUpdateObjectBufferATI: PFNGLUPDATEOBJECTBUFFERATIPROC;
pub extern var __glewVariantArrayObjectATI: PFNGLVARIANTARRAYOBJECTATIPROC;
pub extern var __glewGetVertexAttribArrayObjectfvATI: PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC;
pub extern var __glewGetVertexAttribArrayObjectivATI: PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC;
pub extern var __glewVertexAttribArrayObjectATI: PFNGLVERTEXATTRIBARRAYOBJECTATIPROC;
pub extern var __glewClientActiveVertexStreamATI: PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC;
pub extern var __glewNormalStream3bATI: PFNGLNORMALSTREAM3BATIPROC;
pub extern var __glewNormalStream3bvATI: PFNGLNORMALSTREAM3BVATIPROC;
pub extern var __glewNormalStream3dATI: PFNGLNORMALSTREAM3DATIPROC;
pub extern var __glewNormalStream3dvATI: PFNGLNORMALSTREAM3DVATIPROC;
pub extern var __glewNormalStream3fATI: PFNGLNORMALSTREAM3FATIPROC;
pub extern var __glewNormalStream3fvATI: PFNGLNORMALSTREAM3FVATIPROC;
pub extern var __glewNormalStream3iATI: PFNGLNORMALSTREAM3IATIPROC;
pub extern var __glewNormalStream3ivATI: PFNGLNORMALSTREAM3IVATIPROC;
pub extern var __glewNormalStream3sATI: PFNGLNORMALSTREAM3SATIPROC;
pub extern var __glewNormalStream3svATI: PFNGLNORMALSTREAM3SVATIPROC;
pub extern var __glewVertexBlendEnvfATI: PFNGLVERTEXBLENDENVFATIPROC;
pub extern var __glewVertexBlendEnviATI: PFNGLVERTEXBLENDENVIATIPROC;
pub extern var __glewVertexStream1dATI: PFNGLVERTEXSTREAM1DATIPROC;
pub extern var __glewVertexStream1dvATI: PFNGLVERTEXSTREAM1DVATIPROC;
pub extern var __glewVertexStream1fATI: PFNGLVERTEXSTREAM1FATIPROC;
pub extern var __glewVertexStream1fvATI: PFNGLVERTEXSTREAM1FVATIPROC;
pub extern var __glewVertexStream1iATI: PFNGLVERTEXSTREAM1IATIPROC;
pub extern var __glewVertexStream1ivATI: PFNGLVERTEXSTREAM1IVATIPROC;
pub extern var __glewVertexStream1sATI: PFNGLVERTEXSTREAM1SATIPROC;
pub extern var __glewVertexStream1svATI: PFNGLVERTEXSTREAM1SVATIPROC;
pub extern var __glewVertexStream2dATI: PFNGLVERTEXSTREAM2DATIPROC;
pub extern var __glewVertexStream2dvATI: PFNGLVERTEXSTREAM2DVATIPROC;
pub extern var __glewVertexStream2fATI: PFNGLVERTEXSTREAM2FATIPROC;
pub extern var __glewVertexStream2fvATI: PFNGLVERTEXSTREAM2FVATIPROC;
pub extern var __glewVertexStream2iATI: PFNGLVERTEXSTREAM2IATIPROC;
pub extern var __glewVertexStream2ivATI: PFNGLVERTEXSTREAM2IVATIPROC;
pub extern var __glewVertexStream2sATI: PFNGLVERTEXSTREAM2SATIPROC;
pub extern var __glewVertexStream2svATI: PFNGLVERTEXSTREAM2SVATIPROC;
pub extern var __glewVertexStream3dATI: PFNGLVERTEXSTREAM3DATIPROC;
pub extern var __glewVertexStream3dvATI: PFNGLVERTEXSTREAM3DVATIPROC;
pub extern var __glewVertexStream3fATI: PFNGLVERTEXSTREAM3FATIPROC;
pub extern var __glewVertexStream3fvATI: PFNGLVERTEXSTREAM3FVATIPROC;
pub extern var __glewVertexStream3iATI: PFNGLVERTEXSTREAM3IATIPROC;
pub extern var __glewVertexStream3ivATI: PFNGLVERTEXSTREAM3IVATIPROC;
pub extern var __glewVertexStream3sATI: PFNGLVERTEXSTREAM3SATIPROC;
pub extern var __glewVertexStream3svATI: PFNGLVERTEXSTREAM3SVATIPROC;
pub extern var __glewVertexStream4dATI: PFNGLVERTEXSTREAM4DATIPROC;
pub extern var __glewVertexStream4dvATI: PFNGLVERTEXSTREAM4DVATIPROC;
pub extern var __glewVertexStream4fATI: PFNGLVERTEXSTREAM4FATIPROC;
pub extern var __glewVertexStream4fvATI: PFNGLVERTEXSTREAM4FVATIPROC;
pub extern var __glewVertexStream4iATI: PFNGLVERTEXSTREAM4IATIPROC;
pub extern var __glewVertexStream4ivATI: PFNGLVERTEXSTREAM4IVATIPROC;
pub extern var __glewVertexStream4sATI: PFNGLVERTEXSTREAM4SATIPROC;
pub extern var __glewVertexStream4svATI: PFNGLVERTEXSTREAM4SVATIPROC;
pub extern var __glewEGLImageTargetTexStorageEXT: PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC;
pub extern var __glewEGLImageTargetTextureStorageEXT: PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC;
pub extern var __glewDrawArraysInstancedBaseInstanceEXT: PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC;
pub extern var __glewDrawElementsInstancedBaseInstanceEXT: PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC;
pub extern var __glewDrawElementsInstancedBaseVertexBaseInstanceEXT: PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC;
pub extern var __glewGetUniformBufferSizeEXT: PFNGLGETUNIFORMBUFFERSIZEEXTPROC;
pub extern var __glewGetUniformOffsetEXT: PFNGLGETUNIFORMOFFSETEXTPROC;
pub extern var __glewUniformBufferEXT: PFNGLUNIFORMBUFFEREXTPROC;
pub extern var __glewBlendColorEXT: PFNGLBLENDCOLOREXTPROC;
pub extern var __glewBlendEquationSeparateEXT: PFNGLBLENDEQUATIONSEPARATEEXTPROC;
pub extern var __glewBindFragDataLocationIndexedEXT: PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC;
pub extern var __glewGetFragDataIndexEXT: PFNGLGETFRAGDATAINDEXEXTPROC;
pub extern var __glewGetProgramResourceLocationIndexEXT: PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC;
pub extern var __glewBlendFuncSeparateEXT: PFNGLBLENDFUNCSEPARATEEXTPROC;
pub extern var __glewBlendEquationEXT: PFNGLBLENDEQUATIONEXTPROC;
pub extern var __glewBufferStorageEXT: PFNGLBUFFERSTORAGEEXTPROC;
pub extern var __glewNamedBufferStorageEXT: PFNGLNAMEDBUFFERSTORAGEEXTPROC;
pub extern var __glewClearTexImageEXT: PFNGLCLEARTEXIMAGEEXTPROC;
pub extern var __glewClearTexSubImageEXT: PFNGLCLEARTEXSUBIMAGEEXTPROC;
pub extern var __glewClipControlEXT: PFNGLCLIPCONTROLEXTPROC;
pub extern var __glewColorSubTableEXT: PFNGLCOLORSUBTABLEEXTPROC;
pub extern var __glewCopyColorSubTableEXT: PFNGLCOPYCOLORSUBTABLEEXTPROC;
pub extern var __glewLockArraysEXT: PFNGLLOCKARRAYSEXTPROC;
pub extern var __glewUnlockArraysEXT: PFNGLUNLOCKARRAYSEXTPROC;
pub extern var __glewConvolutionFilter1DEXT: PFNGLCONVOLUTIONFILTER1DEXTPROC;
pub extern var __glewConvolutionFilter2DEXT: PFNGLCONVOLUTIONFILTER2DEXTPROC;
pub extern var __glewConvolutionParameterfEXT: PFNGLCONVOLUTIONPARAMETERFEXTPROC;
pub extern var __glewConvolutionParameterfvEXT: PFNGLCONVOLUTIONPARAMETERFVEXTPROC;
pub extern var __glewConvolutionParameteriEXT: PFNGLCONVOLUTIONPARAMETERIEXTPROC;
pub extern var __glewConvolutionParameterivEXT: PFNGLCONVOLUTIONPARAMETERIVEXTPROC;
pub extern var __glewCopyConvolutionFilter1DEXT: PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC;
pub extern var __glewCopyConvolutionFilter2DEXT: PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC;
pub extern var __glewGetConvolutionFilterEXT: PFNGLGETCONVOLUTIONFILTEREXTPROC;
pub extern var __glewGetConvolutionParameterfvEXT: PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC;
pub extern var __glewGetConvolutionParameterivEXT: PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC;
pub extern var __glewGetSeparableFilterEXT: PFNGLGETSEPARABLEFILTEREXTPROC;
pub extern var __glewSeparableFilter2DEXT: PFNGLSEPARABLEFILTER2DEXTPROC;
pub extern var __glewBinormalPointerEXT: PFNGLBINORMALPOINTEREXTPROC;
pub extern var __glewTangentPointerEXT: PFNGLTANGENTPOINTEREXTPROC;
pub extern var __glewCopyImageSubDataEXT: PFNGLCOPYIMAGESUBDATAEXTPROC;
pub extern var __glewCopyTexImage1DEXT: PFNGLCOPYTEXIMAGE1DEXTPROC;
pub extern var __glewCopyTexImage2DEXT: PFNGLCOPYTEXIMAGE2DEXTPROC;
pub extern var __glewCopyTexSubImage1DEXT: PFNGLCOPYTEXSUBIMAGE1DEXTPROC;
pub extern var __glewCopyTexSubImage2DEXT: PFNGLCOPYTEXSUBIMAGE2DEXTPROC;
pub extern var __glewCopyTexSubImage3DEXT: PFNGLCOPYTEXSUBIMAGE3DEXTPROC;
pub extern var __glewCullParameterdvEXT: PFNGLCULLPARAMETERDVEXTPROC;
pub extern var __glewCullParameterfvEXT: PFNGLCULLPARAMETERFVEXTPROC;
pub extern var __glewGetObjectLabelEXT: PFNGLGETOBJECTLABELEXTPROC;
pub extern var __glewLabelObjectEXT: PFNGLLABELOBJECTEXTPROC;
pub extern var __glewInsertEventMarkerEXT: PFNGLINSERTEVENTMARKEREXTPROC;
pub extern var __glewPopGroupMarkerEXT: PFNGLPOPGROUPMARKEREXTPROC;
pub extern var __glewPushGroupMarkerEXT: PFNGLPUSHGROUPMARKEREXTPROC;
pub extern var __glewDepthBoundsEXT: PFNGLDEPTHBOUNDSEXTPROC;
pub extern var __glewBindMultiTextureEXT: PFNGLBINDMULTITEXTUREEXTPROC;
pub extern var __glewCheckNamedFramebufferStatusEXT: PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC;
pub extern var __glewClientAttribDefaultEXT: PFNGLCLIENTATTRIBDEFAULTEXTPROC;
pub extern var __glewCompressedMultiTexImage1DEXT: PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC;
pub extern var __glewCompressedMultiTexImage2DEXT: PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC;
pub extern var __glewCompressedMultiTexImage3DEXT: PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC;
pub extern var __glewCompressedMultiTexSubImage1DEXT: PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC;
pub extern var __glewCompressedMultiTexSubImage2DEXT: PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC;
pub extern var __glewCompressedMultiTexSubImage3DEXT: PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC;
pub extern var __glewCompressedTextureImage1DEXT: PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC;
pub extern var __glewCompressedTextureImage2DEXT: PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC;
pub extern var __glewCompressedTextureImage3DEXT: PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC;
pub extern var __glewCompressedTextureSubImage1DEXT: PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC;
pub extern var __glewCompressedTextureSubImage2DEXT: PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC;
pub extern var __glewCompressedTextureSubImage3DEXT: PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC;
pub extern var __glewCopyMultiTexImage1DEXT: PFNGLCOPYMULTITEXIMAGE1DEXTPROC;
pub extern var __glewCopyMultiTexImage2DEXT: PFNGLCOPYMULTITEXIMAGE2DEXTPROC;
pub extern var __glewCopyMultiTexSubImage1DEXT: PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC;
pub extern var __glewCopyMultiTexSubImage2DEXT: PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC;
pub extern var __glewCopyMultiTexSubImage3DEXT: PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC;
pub extern var __glewCopyTextureImage1DEXT: PFNGLCOPYTEXTUREIMAGE1DEXTPROC;
pub extern var __glewCopyTextureImage2DEXT: PFNGLCOPYTEXTUREIMAGE2DEXTPROC;
pub extern var __glewCopyTextureSubImage1DEXT: PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC;
pub extern var __glewCopyTextureSubImage2DEXT: PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC;
pub extern var __glewCopyTextureSubImage3DEXT: PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC;
pub extern var __glewDisableClientStateIndexedEXT: PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC;
pub extern var __glewDisableClientStateiEXT: PFNGLDISABLECLIENTSTATEIEXTPROC;
pub extern var __glewDisableVertexArrayAttribEXT: PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC;
pub extern var __glewDisableVertexArrayEXT: PFNGLDISABLEVERTEXARRAYEXTPROC;
pub extern var __glewEnableClientStateIndexedEXT: PFNGLENABLECLIENTSTATEINDEXEDEXTPROC;
pub extern var __glewEnableClientStateiEXT: PFNGLENABLECLIENTSTATEIEXTPROC;
pub extern var __glewEnableVertexArrayAttribEXT: PFNGLENABLEVERTEXARRAYATTRIBEXTPROC;
pub extern var __glewEnableVertexArrayEXT: PFNGLENABLEVERTEXARRAYEXTPROC;
pub extern var __glewFlushMappedNamedBufferRangeEXT: PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC;
pub extern var __glewFramebufferDrawBufferEXT: PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC;
pub extern var __glewFramebufferDrawBuffersEXT: PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC;
pub extern var __glewFramebufferReadBufferEXT: PFNGLFRAMEBUFFERREADBUFFEREXTPROC;
pub extern var __glewGenerateMultiTexMipmapEXT: PFNGLGENERATEMULTITEXMIPMAPEXTPROC;
pub extern var __glewGenerateTextureMipmapEXT: PFNGLGENERATETEXTUREMIPMAPEXTPROC;
pub extern var __glewGetCompressedMultiTexImageEXT: PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC;
pub extern var __glewGetCompressedTextureImageEXT: PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC;
pub extern var __glewGetDoubleIndexedvEXT: PFNGLGETDOUBLEINDEXEDVEXTPROC;
pub extern var __glewGetDoublei_vEXT: PFNGLGETDOUBLEI_VEXTPROC;
pub extern var __glewGetFloatIndexedvEXT: PFNGLGETFLOATINDEXEDVEXTPROC;
pub extern var __glewGetFloati_vEXT: PFNGLGETFLOATI_VEXTPROC;
pub extern var __glewGetFramebufferParameterivEXT: PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC;
pub extern var __glewGetMultiTexEnvfvEXT: PFNGLGETMULTITEXENVFVEXTPROC;
pub extern var __glewGetMultiTexEnvivEXT: PFNGLGETMULTITEXENVIVEXTPROC;
pub extern var __glewGetMultiTexGendvEXT: PFNGLGETMULTITEXGENDVEXTPROC;
pub extern var __glewGetMultiTexGenfvEXT: PFNGLGETMULTITEXGENFVEXTPROC;
pub extern var __glewGetMultiTexGenivEXT: PFNGLGETMULTITEXGENIVEXTPROC;
pub extern var __glewGetMultiTexImageEXT: PFNGLGETMULTITEXIMAGEEXTPROC;
pub extern var __glewGetMultiTexLevelParameterfvEXT: PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC;
pub extern var __glewGetMultiTexLevelParameterivEXT: PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC;
pub extern var __glewGetMultiTexParameterIivEXT: PFNGLGETMULTITEXPARAMETERIIVEXTPROC;
pub extern var __glewGetMultiTexParameterIuivEXT: PFNGLGETMULTITEXPARAMETERIUIVEXTPROC;
pub extern var __glewGetMultiTexParameterfvEXT: PFNGLGETMULTITEXPARAMETERFVEXTPROC;
pub extern var __glewGetMultiTexParameterivEXT: PFNGLGETMULTITEXPARAMETERIVEXTPROC;
pub extern var __glewGetNamedBufferParameterivEXT: PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC;
pub extern var __glewGetNamedBufferPointervEXT: PFNGLGETNAMEDBUFFERPOINTERVEXTPROC;
pub extern var __glewGetNamedBufferSubDataEXT: PFNGLGETNAMEDBUFFERSUBDATAEXTPROC;
pub extern var __glewGetNamedFramebufferAttachmentParameterivEXT: PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC;
pub extern var __glewGetNamedProgramLocalParameterIivEXT: PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC;
pub extern var __glewGetNamedProgramLocalParameterIuivEXT: PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC;
pub extern var __glewGetNamedProgramLocalParameterdvEXT: PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC;
pub extern var __glewGetNamedProgramLocalParameterfvEXT: PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC;
pub extern var __glewGetNamedProgramStringEXT: PFNGLGETNAMEDPROGRAMSTRINGEXTPROC;
pub extern var __glewGetNamedProgramivEXT: PFNGLGETNAMEDPROGRAMIVEXTPROC;
pub extern var __glewGetNamedRenderbufferParameterivEXT: PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC;
pub extern var __glewGetPointerIndexedvEXT: PFNGLGETPOINTERINDEXEDVEXTPROC;
pub extern var __glewGetPointeri_vEXT: PFNGLGETPOINTERI_VEXTPROC;
pub extern var __glewGetTextureImageEXT: PFNGLGETTEXTUREIMAGEEXTPROC;
pub extern var __glewGetTextureLevelParameterfvEXT: PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC;
pub extern var __glewGetTextureLevelParameterivEXT: PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC;
pub extern var __glewGetTextureParameterIivEXT: PFNGLGETTEXTUREPARAMETERIIVEXTPROC;
pub extern var __glewGetTextureParameterIuivEXT: PFNGLGETTEXTUREPARAMETERIUIVEXTPROC;
pub extern var __glewGetTextureParameterfvEXT: PFNGLGETTEXTUREPARAMETERFVEXTPROC;
pub extern var __glewGetTextureParameterivEXT: PFNGLGETTEXTUREPARAMETERIVEXTPROC;
pub extern var __glewGetVertexArrayIntegeri_vEXT: PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC;
pub extern var __glewGetVertexArrayIntegervEXT: PFNGLGETVERTEXARRAYINTEGERVEXTPROC;
pub extern var __glewGetVertexArrayPointeri_vEXT: PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC;
pub extern var __glewGetVertexArrayPointervEXT: PFNGLGETVERTEXARRAYPOINTERVEXTPROC;
pub extern var __glewMapNamedBufferEXT: PFNGLMAPNAMEDBUFFEREXTPROC;
pub extern var __glewMapNamedBufferRangeEXT: PFNGLMAPNAMEDBUFFERRANGEEXTPROC;
pub extern var __glewMatrixFrustumEXT: PFNGLMATRIXFRUSTUMEXTPROC;
pub extern var __glewMatrixLoadIdentityEXT: PFNGLMATRIXLOADIDENTITYEXTPROC;
pub extern var __glewMatrixLoadTransposedEXT: PFNGLMATRIXLOADTRANSPOSEDEXTPROC;
pub extern var __glewMatrixLoadTransposefEXT: PFNGLMATRIXLOADTRANSPOSEFEXTPROC;
pub extern var __glewMatrixLoaddEXT: PFNGLMATRIXLOADDEXTPROC;
pub extern var __glewMatrixLoadfEXT: PFNGLMATRIXLOADFEXTPROC;
pub extern var __glewMatrixMultTransposedEXT: PFNGLMATRIXMULTTRANSPOSEDEXTPROC;
pub extern var __glewMatrixMultTransposefEXT: PFNGLMATRIXMULTTRANSPOSEFEXTPROC;
pub extern var __glewMatrixMultdEXT: PFNGLMATRIXMULTDEXTPROC;
pub extern var __glewMatrixMultfEXT: PFNGLMATRIXMULTFEXTPROC;
pub extern var __glewMatrixOrthoEXT: PFNGLMATRIXORTHOEXTPROC;
pub extern var __glewMatrixPopEXT: PFNGLMATRIXPOPEXTPROC;
pub extern var __glewMatrixPushEXT: PFNGLMATRIXPUSHEXTPROC;
pub extern var __glewMatrixRotatedEXT: PFNGLMATRIXROTATEDEXTPROC;
pub extern var __glewMatrixRotatefEXT: PFNGLMATRIXROTATEFEXTPROC;
pub extern var __glewMatrixScaledEXT: PFNGLMATRIXSCALEDEXTPROC;
pub extern var __glewMatrixScalefEXT: PFNGLMATRIXSCALEFEXTPROC;
pub extern var __glewMatrixTranslatedEXT: PFNGLMATRIXTRANSLATEDEXTPROC;
pub extern var __glewMatrixTranslatefEXT: PFNGLMATRIXTRANSLATEFEXTPROC;
pub extern var __glewMultiTexBufferEXT: PFNGLMULTITEXBUFFEREXTPROC;
pub extern var __glewMultiTexCoordPointerEXT: PFNGLMULTITEXCOORDPOINTEREXTPROC;
pub extern var __glewMultiTexEnvfEXT: PFNGLMULTITEXENVFEXTPROC;
pub extern var __glewMultiTexEnvfvEXT: PFNGLMULTITEXENVFVEXTPROC;
pub extern var __glewMultiTexEnviEXT: PFNGLMULTITEXENVIEXTPROC;
pub extern var __glewMultiTexEnvivEXT: PFNGLMULTITEXENVIVEXTPROC;
pub extern var __glewMultiTexGendEXT: PFNGLMULTITEXGENDEXTPROC;
pub extern var __glewMultiTexGendvEXT: PFNGLMULTITEXGENDVEXTPROC;
pub extern var __glewMultiTexGenfEXT: PFNGLMULTITEXGENFEXTPROC;
pub extern var __glewMultiTexGenfvEXT: PFNGLMULTITEXGENFVEXTPROC;
pub extern var __glewMultiTexGeniEXT: PFNGLMULTITEXGENIEXTPROC;
pub extern var __glewMultiTexGenivEXT: PFNGLMULTITEXGENIVEXTPROC;
pub extern var __glewMultiTexImage1DEXT: PFNGLMULTITEXIMAGE1DEXTPROC;
pub extern var __glewMultiTexImage2DEXT: PFNGLMULTITEXIMAGE2DEXTPROC;
pub extern var __glewMultiTexImage3DEXT: PFNGLMULTITEXIMAGE3DEXTPROC;
pub extern var __glewMultiTexParameterIivEXT: PFNGLMULTITEXPARAMETERIIVEXTPROC;
pub extern var __glewMultiTexParameterIuivEXT: PFNGLMULTITEXPARAMETERIUIVEXTPROC;
pub extern var __glewMultiTexParameterfEXT: PFNGLMULTITEXPARAMETERFEXTPROC;
pub extern var __glewMultiTexParameterfvEXT: PFNGLMULTITEXPARAMETERFVEXTPROC;
pub extern var __glewMultiTexParameteriEXT: PFNGLMULTITEXPARAMETERIEXTPROC;
pub extern var __glewMultiTexParameterivEXT: PFNGLMULTITEXPARAMETERIVEXTPROC;
pub extern var __glewMultiTexRenderbufferEXT: PFNGLMULTITEXRENDERBUFFEREXTPROC;
pub extern var __glewMultiTexSubImage1DEXT: PFNGLMULTITEXSUBIMAGE1DEXTPROC;
pub extern var __glewMultiTexSubImage2DEXT: PFNGLMULTITEXSUBIMAGE2DEXTPROC;
pub extern var __glewMultiTexSubImage3DEXT: PFNGLMULTITEXSUBIMAGE3DEXTPROC;
pub extern var __glewNamedBufferDataEXT: PFNGLNAMEDBUFFERDATAEXTPROC;
pub extern var __glewNamedBufferSubDataEXT: PFNGLNAMEDBUFFERSUBDATAEXTPROC;
pub extern var __glewNamedCopyBufferSubDataEXT: PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC;
pub extern var __glewNamedFramebufferRenderbufferEXT: PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC;
pub extern var __glewNamedFramebufferTexture1DEXT: PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC;
pub extern var __glewNamedFramebufferTexture2DEXT: PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC;
pub extern var __glewNamedFramebufferTexture3DEXT: PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC;
pub extern var __glewNamedFramebufferTextureEXT: PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC;
pub extern var __glewNamedFramebufferTextureFaceEXT: PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC;
pub extern var __glewNamedFramebufferTextureLayerEXT: PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC;
pub extern var __glewNamedProgramLocalParameter4dEXT: PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC;
pub extern var __glewNamedProgramLocalParameter4dvEXT: PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC;
pub extern var __glewNamedProgramLocalParameter4fEXT: PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC;
pub extern var __glewNamedProgramLocalParameter4fvEXT: PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC;
pub extern var __glewNamedProgramLocalParameterI4iEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC;
pub extern var __glewNamedProgramLocalParameterI4ivEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC;
pub extern var __glewNamedProgramLocalParameterI4uiEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC;
pub extern var __glewNamedProgramLocalParameterI4uivEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC;
pub extern var __glewNamedProgramLocalParameters4fvEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC;
pub extern var __glewNamedProgramLocalParametersI4ivEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC;
pub extern var __glewNamedProgramLocalParametersI4uivEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC;
pub extern var __glewNamedProgramStringEXT: PFNGLNAMEDPROGRAMSTRINGEXTPROC;
pub extern var __glewNamedRenderbufferStorageEXT: PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC;
pub extern var __glewNamedRenderbufferStorageMultisampleCoverageEXT: PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC;
pub extern var __glewNamedRenderbufferStorageMultisampleEXT: PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC;
pub extern var __glewProgramUniform1fEXT: PFNGLPROGRAMUNIFORM1FEXTPROC;
pub extern var __glewProgramUniform1fvEXT: PFNGLPROGRAMUNIFORM1FVEXTPROC;
pub extern var __glewProgramUniform1iEXT: PFNGLPROGRAMUNIFORM1IEXTPROC;
pub extern var __glewProgramUniform1ivEXT: PFNGLPROGRAMUNIFORM1IVEXTPROC;
pub extern var __glewProgramUniform1uiEXT: PFNGLPROGRAMUNIFORM1UIEXTPROC;
pub extern var __glewProgramUniform1uivEXT: PFNGLPROGRAMUNIFORM1UIVEXTPROC;
pub extern var __glewProgramUniform2fEXT: PFNGLPROGRAMUNIFORM2FEXTPROC;
pub extern var __glewProgramUniform2fvEXT: PFNGLPROGRAMUNIFORM2FVEXTPROC;
pub extern var __glewProgramUniform2iEXT: PFNGLPROGRAMUNIFORM2IEXTPROC;
pub extern var __glewProgramUniform2ivEXT: PFNGLPROGRAMUNIFORM2IVEXTPROC;
pub extern var __glewProgramUniform2uiEXT: PFNGLPROGRAMUNIFORM2UIEXTPROC;
pub extern var __glewProgramUniform2uivEXT: PFNGLPROGRAMUNIFORM2UIVEXTPROC;
pub extern var __glewProgramUniform3fEXT: PFNGLPROGRAMUNIFORM3FEXTPROC;
pub extern var __glewProgramUniform3fvEXT: PFNGLPROGRAMUNIFORM3FVEXTPROC;
pub extern var __glewProgramUniform3iEXT: PFNGLPROGRAMUNIFORM3IEXTPROC;
pub extern var __glewProgramUniform3ivEXT: PFNGLPROGRAMUNIFORM3IVEXTPROC;
pub extern var __glewProgramUniform3uiEXT: PFNGLPROGRAMUNIFORM3UIEXTPROC;
pub extern var __glewProgramUniform3uivEXT: PFNGLPROGRAMUNIFORM3UIVEXTPROC;
pub extern var __glewProgramUniform4fEXT: PFNGLPROGRAMUNIFORM4FEXTPROC;
pub extern var __glewProgramUniform4fvEXT: PFNGLPROGRAMUNIFORM4FVEXTPROC;
pub extern var __glewProgramUniform4iEXT: PFNGLPROGRAMUNIFORM4IEXTPROC;
pub extern var __glewProgramUniform4ivEXT: PFNGLPROGRAMUNIFORM4IVEXTPROC;
pub extern var __glewProgramUniform4uiEXT: PFNGLPROGRAMUNIFORM4UIEXTPROC;
pub extern var __glewProgramUniform4uivEXT: PFNGLPROGRAMUNIFORM4UIVEXTPROC;
pub extern var __glewProgramUniformMatrix2fvEXT: PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC;
pub extern var __glewProgramUniformMatrix2x3fvEXT: PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC;
pub extern var __glewProgramUniformMatrix2x4fvEXT: PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC;
pub extern var __glewProgramUniformMatrix3fvEXT: PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC;
pub extern var __glewProgramUniformMatrix3x2fvEXT: PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC;
pub extern var __glewProgramUniformMatrix3x4fvEXT: PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC;
pub extern var __glewProgramUniformMatrix4fvEXT: PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC;
pub extern var __glewProgramUniformMatrix4x2fvEXT: PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC;
pub extern var __glewProgramUniformMatrix4x3fvEXT: PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC;
pub extern var __glewPushClientAttribDefaultEXT: PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC;
pub extern var __glewTextureBufferEXT: PFNGLTEXTUREBUFFEREXTPROC;
pub extern var __glewTextureImage1DEXT: PFNGLTEXTUREIMAGE1DEXTPROC;
pub extern var __glewTextureImage2DEXT: PFNGLTEXTUREIMAGE2DEXTPROC;
pub extern var __glewTextureImage3DEXT: PFNGLTEXTUREIMAGE3DEXTPROC;
pub extern var __glewTextureParameterIivEXT: PFNGLTEXTUREPARAMETERIIVEXTPROC;
pub extern var __glewTextureParameterIuivEXT: PFNGLTEXTUREPARAMETERIUIVEXTPROC;
pub extern var __glewTextureParameterfEXT: PFNGLTEXTUREPARAMETERFEXTPROC;
pub extern var __glewTextureParameterfvEXT: PFNGLTEXTUREPARAMETERFVEXTPROC;
pub extern var __glewTextureParameteriEXT: PFNGLTEXTUREPARAMETERIEXTPROC;
pub extern var __glewTextureParameterivEXT: PFNGLTEXTUREPARAMETERIVEXTPROC;
pub extern var __glewTextureRenderbufferEXT: PFNGLTEXTURERENDERBUFFEREXTPROC;
pub extern var __glewTextureSubImage1DEXT: PFNGLTEXTURESUBIMAGE1DEXTPROC;
pub extern var __glewTextureSubImage2DEXT: PFNGLTEXTURESUBIMAGE2DEXTPROC;
pub extern var __glewTextureSubImage3DEXT: PFNGLTEXTURESUBIMAGE3DEXTPROC;
pub extern var __glewUnmapNamedBufferEXT: PFNGLUNMAPNAMEDBUFFEREXTPROC;
pub extern var __glewVertexArrayColorOffsetEXT: PFNGLVERTEXARRAYCOLOROFFSETEXTPROC;
pub extern var __glewVertexArrayEdgeFlagOffsetEXT: PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC;
pub extern var __glewVertexArrayFogCoordOffsetEXT: PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC;
pub extern var __glewVertexArrayIndexOffsetEXT: PFNGLVERTEXARRAYINDEXOFFSETEXTPROC;
pub extern var __glewVertexArrayMultiTexCoordOffsetEXT: PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC;
pub extern var __glewVertexArrayNormalOffsetEXT: PFNGLVERTEXARRAYNORMALOFFSETEXTPROC;
pub extern var __glewVertexArraySecondaryColorOffsetEXT: PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC;
pub extern var __glewVertexArrayTexCoordOffsetEXT: PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC;
pub extern var __glewVertexArrayVertexAttribDivisorEXT: PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC;
pub extern var __glewVertexArrayVertexAttribIOffsetEXT: PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC;
pub extern var __glewVertexArrayVertexAttribOffsetEXT: PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC;
pub extern var __glewVertexArrayVertexOffsetEXT: PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC;
pub extern var __glewDiscardFramebufferEXT: PFNGLDISCARDFRAMEBUFFEREXTPROC;
pub extern var __glewBeginQueryEXT: PFNGLBEGINQUERYEXTPROC;
pub extern var __glewDeleteQueriesEXT: PFNGLDELETEQUERIESEXTPROC;
pub extern var __glewEndQueryEXT: PFNGLENDQUERYEXTPROC;
pub extern var __glewGenQueriesEXT: PFNGLGENQUERIESEXTPROC;
pub extern var __glewGetInteger64vEXT: PFNGLGETINTEGER64VEXTPROC;
pub extern var __glewGetQueryObjectivEXT: PFNGLGETQUERYOBJECTIVEXTPROC;
pub extern var __glewGetQueryObjectuivEXT: PFNGLGETQUERYOBJECTUIVEXTPROC;
pub extern var __glewGetQueryivEXT: PFNGLGETQUERYIVEXTPROC;
pub extern var __glewIsQueryEXT: PFNGLISQUERYEXTPROC;
pub extern var __glewQueryCounterEXT: PFNGLQUERYCOUNTEREXTPROC;
pub extern var __glewDrawBuffersEXT: PFNGLDRAWBUFFERSEXTPROC;
pub extern var __glewColorMaskIndexedEXT: PFNGLCOLORMASKINDEXEDEXTPROC;
pub extern var __glewDisableIndexedEXT: PFNGLDISABLEINDEXEDEXTPROC;
pub extern var __glewEnableIndexedEXT: PFNGLENABLEINDEXEDEXTPROC;
pub extern var __glewGetBooleanIndexedvEXT: PFNGLGETBOOLEANINDEXEDVEXTPROC;
pub extern var __glewGetIntegerIndexedvEXT: PFNGLGETINTEGERINDEXEDVEXTPROC;
pub extern var __glewIsEnabledIndexedEXT: PFNGLISENABLEDINDEXEDEXTPROC;
pub extern var __glewBlendEquationSeparateiEXT: PFNGLBLENDEQUATIONSEPARATEIEXTPROC;
pub extern var __glewBlendEquationiEXT: PFNGLBLENDEQUATIONIEXTPROC;
pub extern var __glewBlendFuncSeparateiEXT: PFNGLBLENDFUNCSEPARATEIEXTPROC;
pub extern var __glewBlendFunciEXT: PFNGLBLENDFUNCIEXTPROC;
pub extern var __glewColorMaskiEXT: PFNGLCOLORMASKIEXTPROC;
pub extern var __glewDisableiEXT: PFNGLDISABLEIEXTPROC;
pub extern var __glewEnableiEXT: PFNGLENABLEIEXTPROC;
pub extern var __glewIsEnablediEXT: PFNGLISENABLEDIEXTPROC;
pub extern var __glewDrawElementsBaseVertexEXT: PFNGLDRAWELEMENTSBASEVERTEXEXTPROC;
pub extern var __glewDrawElementsInstancedBaseVertexEXT: PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC;
pub extern var __glewDrawRangeElementsBaseVertexEXT: PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC;
pub extern var __glewMultiDrawElementsBaseVertexEXT: PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC;
pub extern var __glewDrawArraysInstancedEXT: PFNGLDRAWARRAYSINSTANCEDEXTPROC;
pub extern var __glewDrawElementsInstancedEXT: PFNGLDRAWELEMENTSINSTANCEDEXTPROC;
pub extern var __glewDrawRangeElementsEXT: PFNGLDRAWRANGEELEMENTSEXTPROC;
pub extern var __glewDrawTransformFeedbackEXT: PFNGLDRAWTRANSFORMFEEDBACKEXTPROC;
pub extern var __glewDrawTransformFeedbackInstancedEXT: PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDEXTPROC;
pub extern var __glewBufferStorageExternalEXT: PFNGLBUFFERSTORAGEEXTERNALEXTPROC;
pub extern var __glewNamedBufferStorageExternalEXT: PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC;
pub extern var __glewFogCoordPointerEXT: PFNGLFOGCOORDPOINTEREXTPROC;
pub extern var __glewFogCoorddEXT: PFNGLFOGCOORDDEXTPROC;
pub extern var __glewFogCoorddvEXT: PFNGLFOGCOORDDVEXTPROC;
pub extern var __glewFogCoordfEXT: PFNGLFOGCOORDFEXTPROC;
pub extern var __glewFogCoordfvEXT: PFNGLFOGCOORDFVEXTPROC;
pub extern var __glewFragmentColorMaterialEXT: PFNGLFRAGMENTCOLORMATERIALEXTPROC;
pub extern var __glewFragmentLightModelfEXT: PFNGLFRAGMENTLIGHTMODELFEXTPROC;
pub extern var __glewFragmentLightModelfvEXT: PFNGLFRAGMENTLIGHTMODELFVEXTPROC;
pub extern var __glewFragmentLightModeliEXT: PFNGLFRAGMENTLIGHTMODELIEXTPROC;
pub extern var __glewFragmentLightModelivEXT: PFNGLFRAGMENTLIGHTMODELIVEXTPROC;
pub extern var __glewFragmentLightfEXT: PFNGLFRAGMENTLIGHTFEXTPROC;
pub extern var __glewFragmentLightfvEXT: PFNGLFRAGMENTLIGHTFVEXTPROC;
pub extern var __glewFragmentLightiEXT: PFNGLFRAGMENTLIGHTIEXTPROC;
pub extern var __glewFragmentLightivEXT: PFNGLFRAGMENTLIGHTIVEXTPROC;
pub extern var __glewFragmentMaterialfEXT: PFNGLFRAGMENTMATERIALFEXTPROC;
pub extern var __glewFragmentMaterialfvEXT: PFNGLFRAGMENTMATERIALFVEXTPROC;
pub extern var __glewFragmentMaterialiEXT: PFNGLFRAGMENTMATERIALIEXTPROC;
pub extern var __glewFragmentMaterialivEXT: PFNGLFRAGMENTMATERIALIVEXTPROC;
pub extern var __glewGetFragmentLightfvEXT: PFNGLGETFRAGMENTLIGHTFVEXTPROC;
pub extern var __glewGetFragmentLightivEXT: PFNGLGETFRAGMENTLIGHTIVEXTPROC;
pub extern var __glewGetFragmentMaterialfvEXT: PFNGLGETFRAGMENTMATERIALFVEXTPROC;
pub extern var __glewGetFragmentMaterialivEXT: PFNGLGETFRAGMENTMATERIALIVEXTPROC;
pub extern var __glewLightEnviEXT: PFNGLLIGHTENVIEXTPROC;
pub extern var __glewBlitFramebufferEXT: PFNGLBLITFRAMEBUFFEREXTPROC;
pub extern var __glewRenderbufferStorageMultisampleEXT: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC;
pub extern var __glewBindFramebufferEXT: PFNGLBINDFRAMEBUFFEREXTPROC;
pub extern var __glewBindRenderbufferEXT: PFNGLBINDRENDERBUFFEREXTPROC;
pub extern var __glewCheckFramebufferStatusEXT: PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC;
pub extern var __glewDeleteFramebuffersEXT: PFNGLDELETEFRAMEBUFFERSEXTPROC;
pub extern var __glewDeleteRenderbuffersEXT: PFNGLDELETERENDERBUFFERSEXTPROC;
pub extern var __glewFramebufferRenderbufferEXT: PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC;
pub extern var __glewFramebufferTexture1DEXT: PFNGLFRAMEBUFFERTEXTURE1DEXTPROC;
pub extern var __glewFramebufferTexture2DEXT: PFNGLFRAMEBUFFERTEXTURE2DEXTPROC;
pub extern var __glewFramebufferTexture3DEXT: PFNGLFRAMEBUFFERTEXTURE3DEXTPROC;
pub extern var __glewGenFramebuffersEXT: PFNGLGENFRAMEBUFFERSEXTPROC;
pub extern var __glewGenRenderbuffersEXT: PFNGLGENRENDERBUFFERSEXTPROC;
pub extern var __glewGenerateMipmapEXT: PFNGLGENERATEMIPMAPEXTPROC;
pub extern var __glewGetFramebufferAttachmentParameterivEXT: PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC;
pub extern var __glewGetRenderbufferParameterivEXT: PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC;
pub extern var __glewIsFramebufferEXT: PFNGLISFRAMEBUFFEREXTPROC;
pub extern var __glewIsRenderbufferEXT: PFNGLISRENDERBUFFEREXTPROC;
pub extern var __glewRenderbufferStorageEXT: PFNGLRENDERBUFFERSTORAGEEXTPROC;
pub extern var __glewFramebufferTextureEXT: PFNGLFRAMEBUFFERTEXTUREEXTPROC;
pub extern var __glewFramebufferTextureFaceEXT: PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC;
pub extern var __glewProgramParameteriEXT: PFNGLPROGRAMPARAMETERIEXTPROC;
pub extern var __glewProgramEnvParameters4fvEXT: PFNGLPROGRAMENVPARAMETERS4FVEXTPROC;
pub extern var __glewProgramLocalParameters4fvEXT: PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC;
pub extern var __glewBindFragDataLocationEXT: PFNGLBINDFRAGDATALOCATIONEXTPROC;
pub extern var __glewGetFragDataLocationEXT: PFNGLGETFRAGDATALOCATIONEXTPROC;
pub extern var __glewGetUniformuivEXT: PFNGLGETUNIFORMUIVEXTPROC;
pub extern var __glewGetVertexAttribIivEXT: PFNGLGETVERTEXATTRIBIIVEXTPROC;
pub extern var __glewGetVertexAttribIuivEXT: PFNGLGETVERTEXATTRIBIUIVEXTPROC;
pub extern var __glewUniform1uiEXT: PFNGLUNIFORM1UIEXTPROC;
pub extern var __glewUniform1uivEXT: PFNGLUNIFORM1UIVEXTPROC;
pub extern var __glewUniform2uiEXT: PFNGLUNIFORM2UIEXTPROC;
pub extern var __glewUniform2uivEXT: PFNGLUNIFORM2UIVEXTPROC;
pub extern var __glewUniform3uiEXT: PFNGLUNIFORM3UIEXTPROC;
pub extern var __glewUniform3uivEXT: PFNGLUNIFORM3UIVEXTPROC;
pub extern var __glewUniform4uiEXT: PFNGLUNIFORM4UIEXTPROC;
pub extern var __glewUniform4uivEXT: PFNGLUNIFORM4UIVEXTPROC;
pub extern var __glewVertexAttribI1iEXT: PFNGLVERTEXATTRIBI1IEXTPROC;
pub extern var __glewVertexAttribI1ivEXT: PFNGLVERTEXATTRIBI1IVEXTPROC;
pub extern var __glewVertexAttribI1uiEXT: PFNGLVERTEXATTRIBI1UIEXTPROC;
pub extern var __glewVertexAttribI1uivEXT: PFNGLVERTEXATTRIBI1UIVEXTPROC;
pub extern var __glewVertexAttribI2iEXT: PFNGLVERTEXATTRIBI2IEXTPROC;
pub extern var __glewVertexAttribI2ivEXT: PFNGLVERTEXATTRIBI2IVEXTPROC;
pub extern var __glewVertexAttribI2uiEXT: PFNGLVERTEXATTRIBI2UIEXTPROC;
pub extern var __glewVertexAttribI2uivEXT: PFNGLVERTEXATTRIBI2UIVEXTPROC;
pub extern var __glewVertexAttribI3iEXT: PFNGLVERTEXATTRIBI3IEXTPROC;
pub extern var __glewVertexAttribI3ivEXT: PFNGLVERTEXATTRIBI3IVEXTPROC;
pub extern var __glewVertexAttribI3uiEXT: PFNGLVERTEXATTRIBI3UIEXTPROC;
pub extern var __glewVertexAttribI3uivEXT: PFNGLVERTEXATTRIBI3UIVEXTPROC;
pub extern var __glewVertexAttribI4bvEXT: PFNGLVERTEXATTRIBI4BVEXTPROC;
pub extern var __glewVertexAttribI4iEXT: PFNGLVERTEXATTRIBI4IEXTPROC;
pub extern var __glewVertexAttribI4ivEXT: PFNGLVERTEXATTRIBI4IVEXTPROC;
pub extern var __glewVertexAttribI4svEXT: PFNGLVERTEXATTRIBI4SVEXTPROC;
pub extern var __glewVertexAttribI4ubvEXT: PFNGLVERTEXATTRIBI4UBVEXTPROC;
pub extern var __glewVertexAttribI4uiEXT: PFNGLVERTEXATTRIBI4UIEXTPROC;
pub extern var __glewVertexAttribI4uivEXT: PFNGLVERTEXATTRIBI4UIVEXTPROC;
pub extern var __glewVertexAttribI4usvEXT: PFNGLVERTEXATTRIBI4USVEXTPROC;
pub extern var __glewVertexAttribIPointerEXT: PFNGLVERTEXATTRIBIPOINTEREXTPROC;
pub extern var __glewGetHistogramEXT: PFNGLGETHISTOGRAMEXTPROC;
pub extern var __glewGetHistogramParameterfvEXT: PFNGLGETHISTOGRAMPARAMETERFVEXTPROC;
pub extern var __glewGetHistogramParameterivEXT: PFNGLGETHISTOGRAMPARAMETERIVEXTPROC;
pub extern var __glewGetMinmaxEXT: PFNGLGETMINMAXEXTPROC;
pub extern var __glewGetMinmaxParameterfvEXT: PFNGLGETMINMAXPARAMETERFVEXTPROC;
pub extern var __glewGetMinmaxParameterivEXT: PFNGLGETMINMAXPARAMETERIVEXTPROC;
pub extern var __glewHistogramEXT: PFNGLHISTOGRAMEXTPROC;
pub extern var __glewMinmaxEXT: PFNGLMINMAXEXTPROC;
pub extern var __glewResetHistogramEXT: PFNGLRESETHISTOGRAMEXTPROC;
pub extern var __glewResetMinmaxEXT: PFNGLRESETMINMAXEXTPROC;
pub extern var __glewIndexFuncEXT: PFNGLINDEXFUNCEXTPROC;
pub extern var __glewIndexMaterialEXT: PFNGLINDEXMATERIALEXTPROC;
pub extern var __glewVertexAttribDivisorEXT: PFNGLVERTEXATTRIBDIVISOREXTPROC;
pub extern var __glewApplyTextureEXT: PFNGLAPPLYTEXTUREEXTPROC;
pub extern var __glewTextureLightEXT: PFNGLTEXTURELIGHTEXTPROC;
pub extern var __glewTextureMaterialEXT: PFNGLTEXTUREMATERIALEXTPROC;
pub extern var __glewFlushMappedBufferRangeEXT: PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC;
pub extern var __glewMapBufferRangeEXT: PFNGLMAPBUFFERRANGEEXTPROC;
pub extern var __glewBufferStorageMemEXT: PFNGLBUFFERSTORAGEMEMEXTPROC;
pub extern var __glewCreateMemoryObjectsEXT: PFNGLCREATEMEMORYOBJECTSEXTPROC;
pub extern var __glewDeleteMemoryObjectsEXT: PFNGLDELETEMEMORYOBJECTSEXTPROC;
pub extern var __glewGetMemoryObjectParameterivEXT: PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC;
pub extern var __glewGetUnsignedBytei_vEXT: PFNGLGETUNSIGNEDBYTEI_VEXTPROC;
pub extern var __glewGetUnsignedBytevEXT: PFNGLGETUNSIGNEDBYTEVEXTPROC;
pub extern var __glewIsMemoryObjectEXT: PFNGLISMEMORYOBJECTEXTPROC;
pub extern var __glewMemoryObjectParameterivEXT: PFNGLMEMORYOBJECTPARAMETERIVEXTPROC;
pub extern var __glewNamedBufferStorageMemEXT: PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC;
pub extern var __glewTexStorageMem1DEXT: PFNGLTEXSTORAGEMEM1DEXTPROC;
pub extern var __glewTexStorageMem2DEXT: PFNGLTEXSTORAGEMEM2DEXTPROC;
pub extern var __glewTexStorageMem2DMultisampleEXT: PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC;
pub extern var __glewTexStorageMem3DEXT: PFNGLTEXSTORAGEMEM3DEXTPROC;
pub extern var __glewTexStorageMem3DMultisampleEXT: PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC;
pub extern var __glewTextureStorageMem1DEXT: PFNGLTEXTURESTORAGEMEM1DEXTPROC;
pub extern var __glewTextureStorageMem2DEXT: PFNGLTEXTURESTORAGEMEM2DEXTPROC;
pub extern var __glewTextureStorageMem2DMultisampleEXT: PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC;
pub extern var __glewTextureStorageMem3DEXT: PFNGLTEXTURESTORAGEMEM3DEXTPROC;
pub extern var __glewTextureStorageMem3DMultisampleEXT: PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC;
pub extern var __glewImportMemoryFdEXT: PFNGLIMPORTMEMORYFDEXTPROC;
pub extern var __glewImportMemoryWin32HandleEXT: PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC;
pub extern var __glewImportMemoryWin32NameEXT: PFNGLIMPORTMEMORYWIN32NAMEEXTPROC;
pub extern var __glewMultiDrawArraysEXT: PFNGLMULTIDRAWARRAYSEXTPROC;
pub extern var __glewMultiDrawElementsEXT: PFNGLMULTIDRAWELEMENTSEXTPROC;
pub extern var __glewMultiDrawArraysIndirectEXT: PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC;
pub extern var __glewMultiDrawElementsIndirectEXT: PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC;
pub extern var __glewSampleMaskEXT: PFNGLSAMPLEMASKEXTPROC;
pub extern var __glewSamplePatternEXT: PFNGLSAMPLEPATTERNEXTPROC;
pub extern var __glewFramebufferTexture2DMultisampleEXT: PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC;
pub extern var __glewDrawBuffersIndexedEXT: PFNGLDRAWBUFFERSINDEXEDEXTPROC;
pub extern var __glewGetIntegeri_vEXT: PFNGLGETINTEGERI_VEXTPROC;
pub extern var __glewReadBufferIndexedEXT: PFNGLREADBUFFERINDEXEDEXTPROC;
pub extern var __glewColorTableEXT: PFNGLCOLORTABLEEXTPROC;
pub extern var __glewGetColorTableEXT: PFNGLGETCOLORTABLEEXTPROC;
pub extern var __glewGetColorTableParameterfvEXT: PFNGLGETCOLORTABLEPARAMETERFVEXTPROC;
pub extern var __glewGetColorTableParameterivEXT: PFNGLGETCOLORTABLEPARAMETERIVEXTPROC;
pub extern var __glewGetPixelTransformParameterfvEXT: PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC;
pub extern var __glewGetPixelTransformParameterivEXT: PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC;
pub extern var __glewPixelTransformParameterfEXT: PFNGLPIXELTRANSFORMPARAMETERFEXTPROC;
pub extern var __glewPixelTransformParameterfvEXT: PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC;
pub extern var __glewPixelTransformParameteriEXT: PFNGLPIXELTRANSFORMPARAMETERIEXTPROC;
pub extern var __glewPixelTransformParameterivEXT: PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC;
pub extern var __glewPointParameterfEXT: PFNGLPOINTPARAMETERFEXTPROC;
pub extern var __glewPointParameterfvEXT: PFNGLPOINTPARAMETERFVEXTPROC;
pub extern var __glewPolygonOffsetEXT: PFNGLPOLYGONOFFSETEXTPROC;
pub extern var __glewPolygonOffsetClampEXT: PFNGLPOLYGONOFFSETCLAMPEXTPROC;
pub extern var __glewPrimitiveBoundingBoxEXT: PFNGLPRIMITIVEBOUNDINGBOXEXTPROC;
pub extern var __glewProvokingVertexEXT: PFNGLPROVOKINGVERTEXEXTPROC;
pub extern var __glewCoverageModulationNV: PFNGLCOVERAGEMODULATIONNVPROC;
pub extern var __glewCoverageModulationTableNV: PFNGLCOVERAGEMODULATIONTABLENVPROC;
pub extern var __glewGetCoverageModulationTableNV: PFNGLGETCOVERAGEMODULATIONTABLENVPROC;
pub extern var __glewRasterSamplesEXT: PFNGLRASTERSAMPLESEXTPROC;
pub extern var __glewGetnUniformfvEXT: PFNGLGETNUNIFORMFVEXTPROC;
pub extern var __glewGetnUniformivEXT: PFNGLGETNUNIFORMIVEXTPROC;
pub extern var __glewReadnPixelsEXT: PFNGLREADNPIXELSEXTPROC;
pub extern var __glewBeginSceneEXT: PFNGLBEGINSCENEEXTPROC;
pub extern var __glewEndSceneEXT: PFNGLENDSCENEEXTPROC;
pub extern var __glewSecondaryColor3bEXT: PFNGLSECONDARYCOLOR3BEXTPROC;
pub extern var __glewSecondaryColor3bvEXT: PFNGLSECONDARYCOLOR3BVEXTPROC;
pub extern var __glewSecondaryColor3dEXT: PFNGLSECONDARYCOLOR3DEXTPROC;
pub extern var __glewSecondaryColor3dvEXT: PFNGLSECONDARYCOLOR3DVEXTPROC;
pub extern var __glewSecondaryColor3fEXT: PFNGLSECONDARYCOLOR3FEXTPROC;
pub extern var __glewSecondaryColor3fvEXT: PFNGLSECONDARYCOLOR3FVEXTPROC;
pub extern var __glewSecondaryColor3iEXT: PFNGLSECONDARYCOLOR3IEXTPROC;
pub extern var __glewSecondaryColor3ivEXT: PFNGLSECONDARYCOLOR3IVEXTPROC;
pub extern var __glewSecondaryColor3sEXT: PFNGLSECONDARYCOLOR3SEXTPROC;
pub extern var __glewSecondaryColor3svEXT: PFNGLSECONDARYCOLOR3SVEXTPROC;
pub extern var __glewSecondaryColor3ubEXT: PFNGLSECONDARYCOLOR3UBEXTPROC;
pub extern var __glewSecondaryColor3ubvEXT: PFNGLSECONDARYCOLOR3UBVEXTPROC;
pub extern var __glewSecondaryColor3uiEXT: PFNGLSECONDARYCOLOR3UIEXTPROC;
pub extern var __glewSecondaryColor3uivEXT: PFNGLSECONDARYCOLOR3UIVEXTPROC;
pub extern var __glewSecondaryColor3usEXT: PFNGLSECONDARYCOLOR3USEXTPROC;
pub extern var __glewSecondaryColor3usvEXT: PFNGLSECONDARYCOLOR3USVEXTPROC;
pub extern var __glewSecondaryColorPointerEXT: PFNGLSECONDARYCOLORPOINTEREXTPROC;
pub extern var __glewDeleteSemaphoresEXT: PFNGLDELETESEMAPHORESEXTPROC;
pub extern var __glewGenSemaphoresEXT: PFNGLGENSEMAPHORESEXTPROC;
pub extern var __glewGetSemaphoreParameterui64vEXT: PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC;
pub extern var __glewIsSemaphoreEXT: PFNGLISSEMAPHOREEXTPROC;
pub extern var __glewSemaphoreParameterui64vEXT: PFNGLSEMAPHOREPARAMETERUI64VEXTPROC;
pub extern var __glewSignalSemaphoreEXT: PFNGLSIGNALSEMAPHOREEXTPROC;
pub extern var __glewWaitSemaphoreEXT: PFNGLWAITSEMAPHOREEXTPROC;
pub extern var __glewImportSemaphoreFdEXT: PFNGLIMPORTSEMAPHOREFDEXTPROC;
pub extern var __glewImportSemaphoreWin32HandleEXT: PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC;
pub extern var __glewImportSemaphoreWin32NameEXT: PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC;
pub extern var __glewActiveProgramEXT: PFNGLACTIVEPROGRAMEXTPROC;
pub extern var __glewCreateShaderProgramEXT: PFNGLCREATESHADERPROGRAMEXTPROC;
pub extern var __glewUseShaderProgramEXT: PFNGLUSESHADERPROGRAMEXTPROC;
pub extern var __glewFramebufferFetchBarrierEXT: PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC;
pub extern var __glewBindImageTextureEXT: PFNGLBINDIMAGETEXTUREEXTPROC;
pub extern var __glewMemoryBarrierEXT: PFNGLMEMORYBARRIEREXTPROC;
pub extern var __glewClearPixelLocalStorageuiEXT: PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC;
pub extern var __glewFramebufferPixelLocalStorageSizeEXT: PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC;
pub extern var __glewGetFramebufferPixelLocalStorageSizeEXT: PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC;
pub extern var __glewTexPageCommitmentEXT: PFNGLTEXPAGECOMMITMENTEXTPROC;
pub extern var __glewTexturePageCommitmentEXT: PFNGLTEXTUREPAGECOMMITMENTEXTPROC;
pub extern var __glewActiveStencilFaceEXT: PFNGLACTIVESTENCILFACEEXTPROC;
pub extern var __glewTexSubImage1DEXT: PFNGLTEXSUBIMAGE1DEXTPROC;
pub extern var __glewTexSubImage2DEXT: PFNGLTEXSUBIMAGE2DEXTPROC;
pub extern var __glewTexSubImage3DEXT: PFNGLTEXSUBIMAGE3DEXTPROC;
pub extern var __glewPatchParameteriEXT: PFNGLPATCHPARAMETERIEXTPROC;
pub extern var __glewTexImage3DEXT: PFNGLTEXIMAGE3DEXTPROC;
pub extern var __glewFramebufferTextureLayerEXT: PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC;
pub extern var __glewGetSamplerParameterIivEXT: PFNGLGETSAMPLERPARAMETERIIVEXTPROC;
pub extern var __glewGetSamplerParameterIuivEXT: PFNGLGETSAMPLERPARAMETERIUIVEXTPROC;
pub extern var __glewSamplerParameterIivEXT: PFNGLSAMPLERPARAMETERIIVEXTPROC;
pub extern var __glewSamplerParameterIuivEXT: PFNGLSAMPLERPARAMETERIUIVEXTPROC;
pub extern var __glewTexBufferEXT: PFNGLTEXBUFFEREXTPROC;
pub extern var __glewClearColorIiEXT: PFNGLCLEARCOLORIIEXTPROC;
pub extern var __glewClearColorIuiEXT: PFNGLCLEARCOLORIUIEXTPROC;
pub extern var __glewGetTexParameterIivEXT: PFNGLGETTEXPARAMETERIIVEXTPROC;
pub extern var __glewGetTexParameterIuivEXT: PFNGLGETTEXPARAMETERIUIVEXTPROC;
pub extern var __glewTexParameterIivEXT: PFNGLTEXPARAMETERIIVEXTPROC;
pub extern var __glewTexParameterIuivEXT: PFNGLTEXPARAMETERIUIVEXTPROC;
pub extern var __glewAreTexturesResidentEXT: PFNGLARETEXTURESRESIDENTEXTPROC;
pub extern var __glewBindTextureEXT: PFNGLBINDTEXTUREEXTPROC;
pub extern var __glewDeleteTexturesEXT: PFNGLDELETETEXTURESEXTPROC;
pub extern var __glewGenTexturesEXT: PFNGLGENTEXTURESEXTPROC;
pub extern var __glewIsTextureEXT: PFNGLISTEXTUREEXTPROC;
pub extern var __glewPrioritizeTexturesEXT: PFNGLPRIORITIZETEXTURESEXTPROC;
pub extern var __glewTextureNormalEXT: PFNGLTEXTURENORMALEXTPROC;
pub extern var __glewTexStorage1DEXT: PFNGLTEXSTORAGE1DEXTPROC;
pub extern var __glewTexStorage2DEXT: PFNGLTEXSTORAGE2DEXTPROC;
pub extern var __glewTexStorage3DEXT: PFNGLTEXSTORAGE3DEXTPROC;
pub extern var __glewTextureStorage1DEXT: PFNGLTEXTURESTORAGE1DEXTPROC;
pub extern var __glewTextureStorage2DEXT: PFNGLTEXTURESTORAGE2DEXTPROC;
pub extern var __glewTextureStorage3DEXT: PFNGLTEXTURESTORAGE3DEXTPROC;
pub extern var __glewTextureViewEXT: PFNGLTEXTUREVIEWEXTPROC;
pub extern var __glewGetQueryObjecti64vEXT: PFNGLGETQUERYOBJECTI64VEXTPROC;
pub extern var __glewGetQueryObjectui64vEXT: PFNGLGETQUERYOBJECTUI64VEXTPROC;
pub extern var __glewBeginTransformFeedbackEXT: PFNGLBEGINTRANSFORMFEEDBACKEXTPROC;
pub extern var __glewBindBufferBaseEXT: PFNGLBINDBUFFERBASEEXTPROC;
pub extern var __glewBindBufferOffsetEXT: PFNGLBINDBUFFEROFFSETEXTPROC;
pub extern var __glewBindBufferRangeEXT: PFNGLBINDBUFFERRANGEEXTPROC;
pub extern var __glewEndTransformFeedbackEXT: PFNGLENDTRANSFORMFEEDBACKEXTPROC;
pub extern var __glewGetTransformFeedbackVaryingEXT: PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC;
pub extern var __glewTransformFeedbackVaryingsEXT: PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC;
pub extern var __glewArrayElementEXT: PFNGLARRAYELEMENTEXTPROC;
pub extern var __glewColorPointerEXT: PFNGLCOLORPOINTEREXTPROC;
pub extern var __glewDrawArraysEXT: PFNGLDRAWARRAYSEXTPROC;
pub extern var __glewEdgeFlagPointerEXT: PFNGLEDGEFLAGPOINTEREXTPROC;
pub extern var __glewIndexPointerEXT: PFNGLINDEXPOINTEREXTPROC;
pub extern var __glewNormalPointerEXT: PFNGLNORMALPOINTEREXTPROC;
pub extern var __glewTexCoordPointerEXT: PFNGLTEXCOORDPOINTEREXTPROC;
pub extern var __glewVertexPointerEXT: PFNGLVERTEXPOINTEREXTPROC;
pub extern var __glewBindArraySetEXT: PFNGLBINDARRAYSETEXTPROC;
pub extern var __glewCreateArraySetExt: PFNGLCREATEARRAYSETEXTPROC;
pub extern var __glewDeleteArraySetsEXT: PFNGLDELETEARRAYSETSEXTPROC;
pub extern var __glewGetVertexAttribLdvEXT: PFNGLGETVERTEXATTRIBLDVEXTPROC;
pub extern var __glewVertexArrayVertexAttribLOffsetEXT: PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC;
pub extern var __glewVertexAttribL1dEXT: PFNGLVERTEXATTRIBL1DEXTPROC;
pub extern var __glewVertexAttribL1dvEXT: PFNGLVERTEXATTRIBL1DVEXTPROC;
pub extern var __glewVertexAttribL2dEXT: PFNGLVERTEXATTRIBL2DEXTPROC;
pub extern var __glewVertexAttribL2dvEXT: PFNGLVERTEXATTRIBL2DVEXTPROC;
pub extern var __glewVertexAttribL3dEXT: PFNGLVERTEXATTRIBL3DEXTPROC;
pub extern var __glewVertexAttribL3dvEXT: PFNGLVERTEXATTRIBL3DVEXTPROC;
pub extern var __glewVertexAttribL4dEXT: PFNGLVERTEXATTRIBL4DEXTPROC;
pub extern var __glewVertexAttribL4dvEXT: PFNGLVERTEXATTRIBL4DVEXTPROC;
pub extern var __glewVertexAttribLPointerEXT: PFNGLVERTEXATTRIBLPOINTEREXTPROC;
pub extern var __glewBeginVertexShaderEXT: PFNGLBEGINVERTEXSHADEREXTPROC;
pub extern var __glewBindLightParameterEXT: PFNGLBINDLIGHTPARAMETEREXTPROC;
pub extern var __glewBindMaterialParameterEXT: PFNGLBINDMATERIALPARAMETEREXTPROC;
pub extern var __glewBindParameterEXT: PFNGLBINDPARAMETEREXTPROC;
pub extern var __glewBindTexGenParameterEXT: PFNGLBINDTEXGENPARAMETEREXTPROC;
pub extern var __glewBindTextureUnitParameterEXT: PFNGLBINDTEXTUREUNITPARAMETEREXTPROC;
pub extern var __glewBindVertexShaderEXT: PFNGLBINDVERTEXSHADEREXTPROC;
pub extern var __glewDeleteVertexShaderEXT: PFNGLDELETEVERTEXSHADEREXTPROC;
pub extern var __glewDisableVariantClientStateEXT: PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC;
pub extern var __glewEnableVariantClientStateEXT: PFNGLENABLEVARIANTCLIENTSTATEEXTPROC;
pub extern var __glewEndVertexShaderEXT: PFNGLENDVERTEXSHADEREXTPROC;
pub extern var __glewExtractComponentEXT: PFNGLEXTRACTCOMPONENTEXTPROC;
pub extern var __glewGenSymbolsEXT: PFNGLGENSYMBOLSEXTPROC;
pub extern var __glewGenVertexShadersEXT: PFNGLGENVERTEXSHADERSEXTPROC;
pub extern var __glewGetInvariantBooleanvEXT: PFNGLGETINVARIANTBOOLEANVEXTPROC;
pub extern var __glewGetInvariantFloatvEXT: PFNGLGETINVARIANTFLOATVEXTPROC;
pub extern var __glewGetInvariantIntegervEXT: PFNGLGETINVARIANTINTEGERVEXTPROC;
pub extern var __glewGetLocalConstantBooleanvEXT: PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC;
pub extern var __glewGetLocalConstantFloatvEXT: PFNGLGETLOCALCONSTANTFLOATVEXTPROC;
pub extern var __glewGetLocalConstantIntegervEXT: PFNGLGETLOCALCONSTANTINTEGERVEXTPROC;
pub extern var __glewGetVariantBooleanvEXT: PFNGLGETVARIANTBOOLEANVEXTPROC;
pub extern var __glewGetVariantFloatvEXT: PFNGLGETVARIANTFLOATVEXTPROC;
pub extern var __glewGetVariantIntegervEXT: PFNGLGETVARIANTINTEGERVEXTPROC;
pub extern var __glewGetVariantPointervEXT: PFNGLGETVARIANTPOINTERVEXTPROC;
pub extern var __glewInsertComponentEXT: PFNGLINSERTCOMPONENTEXTPROC;
pub extern var __glewIsVariantEnabledEXT: PFNGLISVARIANTENABLEDEXTPROC;
pub extern var __glewSetInvariantEXT: PFNGLSETINVARIANTEXTPROC;
pub extern var __glewSetLocalConstantEXT: PFNGLSETLOCALCONSTANTEXTPROC;
pub extern var __glewShaderOp1EXT: PFNGLSHADEROP1EXTPROC;
pub extern var __glewShaderOp2EXT: PFNGLSHADEROP2EXTPROC;
pub extern var __glewShaderOp3EXT: PFNGLSHADEROP3EXTPROC;
pub extern var __glewSwizzleEXT: PFNGLSWIZZLEEXTPROC;
pub extern var __glewVariantPointerEXT: PFNGLVARIANTPOINTEREXTPROC;
pub extern var __glewVariantbvEXT: PFNGLVARIANTBVEXTPROC;
pub extern var __glewVariantdvEXT: PFNGLVARIANTDVEXTPROC;
pub extern var __glewVariantfvEXT: PFNGLVARIANTFVEXTPROC;
pub extern var __glewVariantivEXT: PFNGLVARIANTIVEXTPROC;
pub extern var __glewVariantsvEXT: PFNGLVARIANTSVEXTPROC;
pub extern var __glewVariantubvEXT: PFNGLVARIANTUBVEXTPROC;
pub extern var __glewVariantuivEXT: PFNGLVARIANTUIVEXTPROC;
pub extern var __glewVariantusvEXT: PFNGLVARIANTUSVEXTPROC;
pub extern var __glewWriteMaskEXT: PFNGLWRITEMASKEXTPROC;
pub extern var __glewVertexWeightPointerEXT: PFNGLVERTEXWEIGHTPOINTEREXTPROC;
pub extern var __glewVertexWeightfEXT: PFNGLVERTEXWEIGHTFEXTPROC;
pub extern var __glewVertexWeightfvEXT: PFNGLVERTEXWEIGHTFVEXTPROC;
pub extern var __glewAcquireKeyedMutexWin32EXT: PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC;
pub extern var __glewReleaseKeyedMutexWin32EXT: PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC;
pub extern var __glewWindowRectanglesEXT: PFNGLWINDOWRECTANGLESEXTPROC;
pub extern var __glewImportSyncEXT: PFNGLIMPORTSYNCEXTPROC;
pub extern var __glewFrameTerminatorGREMEDY: PFNGLFRAMETERMINATORGREMEDYPROC;
pub extern var __glewStringMarkerGREMEDY: PFNGLSTRINGMARKERGREMEDYPROC;
pub extern var __glewGetImageTransformParameterfvHP: PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC;
pub extern var __glewGetImageTransformParameterivHP: PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC;
pub extern var __glewImageTransformParameterfHP: PFNGLIMAGETRANSFORMPARAMETERFHPPROC;
pub extern var __glewImageTransformParameterfvHP: PFNGLIMAGETRANSFORMPARAMETERFVHPPROC;
pub extern var __glewImageTransformParameteriHP: PFNGLIMAGETRANSFORMPARAMETERIHPPROC;
pub extern var __glewImageTransformParameterivHP: PFNGLIMAGETRANSFORMPARAMETERIVHPPROC;
pub extern var __glewMultiModeDrawArraysIBM: PFNGLMULTIMODEDRAWARRAYSIBMPROC;
pub extern var __glewMultiModeDrawElementsIBM: PFNGLMULTIMODEDRAWELEMENTSIBMPROC;
pub extern var __glewColorPointerListIBM: PFNGLCOLORPOINTERLISTIBMPROC;
pub extern var __glewEdgeFlagPointerListIBM: PFNGLEDGEFLAGPOINTERLISTIBMPROC;
pub extern var __glewFogCoordPointerListIBM: PFNGLFOGCOORDPOINTERLISTIBMPROC;
pub extern var __glewIndexPointerListIBM: PFNGLINDEXPOINTERLISTIBMPROC;
pub extern var __glewNormalPointerListIBM: PFNGLNORMALPOINTERLISTIBMPROC;
pub extern var __glewSecondaryColorPointerListIBM: PFNGLSECONDARYCOLORPOINTERLISTIBMPROC;
pub extern var __glewTexCoordPointerListIBM: PFNGLTEXCOORDPOINTERLISTIBMPROC;
pub extern var __glewVertexPointerListIBM: PFNGLVERTEXPOINTERLISTIBMPROC;
pub extern var __glewGetTextureHandleIMG: PFNGLGETTEXTUREHANDLEIMGPROC;
pub extern var __glewGetTextureSamplerHandleIMG: PFNGLGETTEXTURESAMPLERHANDLEIMGPROC;
pub extern var __glewProgramUniformHandleui64IMG: PFNGLPROGRAMUNIFORMHANDLEUI64IMGPROC;
pub extern var __glewProgramUniformHandleui64vIMG: PFNGLPROGRAMUNIFORMHANDLEUI64VIMGPROC;
pub extern var __glewUniformHandleui64IMG: PFNGLUNIFORMHANDLEUI64IMGPROC;
pub extern var __glewUniformHandleui64vIMG: PFNGLUNIFORMHANDLEUI64VIMGPROC;
pub extern var __glewFramebufferTexture2DDownsampleIMG: PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC;
pub extern var __glewFramebufferTextureLayerDownsampleIMG: PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC;
pub extern var __glewFramebufferTexture2DMultisampleIMG: PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC;
pub extern var __glewRenderbufferStorageMultisampleIMG: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC;
pub extern var __glewMapTexture2DINTEL: PFNGLMAPTEXTURE2DINTELPROC;
pub extern var __glewSyncTextureINTEL: PFNGLSYNCTEXTUREINTELPROC;
pub extern var __glewUnmapTexture2DINTEL: PFNGLUNMAPTEXTURE2DINTELPROC;
pub extern var __glewColorPointervINTEL: PFNGLCOLORPOINTERVINTELPROC;
pub extern var __glewNormalPointervINTEL: PFNGLNORMALPOINTERVINTELPROC;
pub extern var __glewTexCoordPointervINTEL: PFNGLTEXCOORDPOINTERVINTELPROC;
pub extern var __glewVertexPointervINTEL: PFNGLVERTEXPOINTERVINTELPROC;
pub extern var __glewBeginPerfQueryINTEL: PFNGLBEGINPERFQUERYINTELPROC;
pub extern var __glewCreatePerfQueryINTEL: PFNGLCREATEPERFQUERYINTELPROC;
pub extern var __glewDeletePerfQueryINTEL: PFNGLDELETEPERFQUERYINTELPROC;
pub extern var __glewEndPerfQueryINTEL: PFNGLENDPERFQUERYINTELPROC;
pub extern var __glewGetFirstPerfQueryIdINTEL: PFNGLGETFIRSTPERFQUERYIDINTELPROC;
pub extern var __glewGetNextPerfQueryIdINTEL: PFNGLGETNEXTPERFQUERYIDINTELPROC;
pub extern var __glewGetPerfCounterInfoINTEL: PFNGLGETPERFCOUNTERINFOINTELPROC;
pub extern var __glewGetPerfQueryDataINTEL: PFNGLGETPERFQUERYDATAINTELPROC;
pub extern var __glewGetPerfQueryIdByNameINTEL: PFNGLGETPERFQUERYIDBYNAMEINTELPROC;
pub extern var __glewGetPerfQueryInfoINTEL: PFNGLGETPERFQUERYINFOINTELPROC;
pub extern var __glewTexScissorFuncINTEL: PFNGLTEXSCISSORFUNCINTELPROC;
pub extern var __glewTexScissorINTEL: PFNGLTEXSCISSORINTELPROC;
pub extern var __glewBlendBarrierKHR: PFNGLBLENDBARRIERKHRPROC;
pub extern var __glewDebugMessageCallback: PFNGLDEBUGMESSAGECALLBACKPROC;
pub extern var __glewDebugMessageControl: PFNGLDEBUGMESSAGECONTROLPROC;
pub extern var __glewDebugMessageInsert: PFNGLDEBUGMESSAGEINSERTPROC;
pub extern var __glewGetDebugMessageLog: PFNGLGETDEBUGMESSAGELOGPROC;
pub extern var __glewGetObjectLabel: PFNGLGETOBJECTLABELPROC;
pub extern var __glewGetObjectPtrLabel: PFNGLGETOBJECTPTRLABELPROC;
pub extern var __glewObjectLabel: PFNGLOBJECTLABELPROC;
pub extern var __glewObjectPtrLabel: PFNGLOBJECTPTRLABELPROC;
pub extern var __glewPopDebugGroup: PFNGLPOPDEBUGGROUPPROC;
pub extern var __glewPushDebugGroup: PFNGLPUSHDEBUGGROUPPROC;
pub extern var __glewMaxShaderCompilerThreadsKHR: PFNGLMAXSHADERCOMPILERTHREADSKHRPROC;
pub extern var __glewGetnUniformfv: PFNGLGETNUNIFORMFVPROC;
pub extern var __glewGetnUniformiv: PFNGLGETNUNIFORMIVPROC;
pub extern var __glewGetnUniformuiv: PFNGLGETNUNIFORMUIVPROC;
pub extern var __glewReadnPixels: PFNGLREADNPIXELSPROC;
pub extern var __glewBufferRegionEnabled: PFNGLBUFFERREGIONENABLEDPROC;
pub extern var __glewDeleteBufferRegion: PFNGLDELETEBUFFERREGIONPROC;
pub extern var __glewDrawBufferRegion: PFNGLDRAWBUFFERREGIONPROC;
pub extern var __glewNewBufferRegion: PFNGLNEWBUFFERREGIONPROC;
pub extern var __glewReadBufferRegion: PFNGLREADBUFFERREGIONPROC;
pub extern var __glewFramebufferParameteriMESA: PFNGLFRAMEBUFFERPARAMETERIMESAPROC;
pub extern var __glewGetFramebufferParameterivMESA: PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC;
pub extern var __glewResizeBuffersMESA: PFNGLRESIZEBUFFERSMESAPROC;
pub extern var __glewWindowPos2dMESA: PFNGLWINDOWPOS2DMESAPROC;
pub extern var __glewWindowPos2dvMESA: PFNGLWINDOWPOS2DVMESAPROC;
pub extern var __glewWindowPos2fMESA: PFNGLWINDOWPOS2FMESAPROC;
pub extern var __glewWindowPos2fvMESA: PFNGLWINDOWPOS2FVMESAPROC;
pub extern var __glewWindowPos2iMESA: PFNGLWINDOWPOS2IMESAPROC;
pub extern var __glewWindowPos2ivMESA: PFNGLWINDOWPOS2IVMESAPROC;
pub extern var __glewWindowPos2sMESA: PFNGLWINDOWPOS2SMESAPROC;
pub extern var __glewWindowPos2svMESA: PFNGLWINDOWPOS2SVMESAPROC;
pub extern var __glewWindowPos3dMESA: PFNGLWINDOWPOS3DMESAPROC;
pub extern var __glewWindowPos3dvMESA: PFNGLWINDOWPOS3DVMESAPROC;
pub extern var __glewWindowPos3fMESA: PFNGLWINDOWPOS3FMESAPROC;
pub extern var __glewWindowPos3fvMESA: PFNGLWINDOWPOS3FVMESAPROC;
pub extern var __glewWindowPos3iMESA: PFNGLWINDOWPOS3IMESAPROC;
pub extern var __glewWindowPos3ivMESA: PFNGLWINDOWPOS3IVMESAPROC;
pub extern var __glewWindowPos3sMESA: PFNGLWINDOWPOS3SMESAPROC;
pub extern var __glewWindowPos3svMESA: PFNGLWINDOWPOS3SVMESAPROC;
pub extern var __glewWindowPos4dMESA: PFNGLWINDOWPOS4DMESAPROC;
pub extern var __glewWindowPos4dvMESA: PFNGLWINDOWPOS4DVMESAPROC;
pub extern var __glewWindowPos4fMESA: PFNGLWINDOWPOS4FMESAPROC;
pub extern var __glewWindowPos4fvMESA: PFNGLWINDOWPOS4FVMESAPROC;
pub extern var __glewWindowPos4iMESA: PFNGLWINDOWPOS4IMESAPROC;
pub extern var __glewWindowPos4ivMESA: PFNGLWINDOWPOS4IVMESAPROC;
pub extern var __glewWindowPos4sMESA: PFNGLWINDOWPOS4SMESAPROC;
pub extern var __glewWindowPos4svMESA: PFNGLWINDOWPOS4SVMESAPROC;
pub extern var __glewBeginConditionalRenderNVX: PFNGLBEGINCONDITIONALRENDERNVXPROC;
pub extern var __glewEndConditionalRenderNVX: PFNGLENDCONDITIONALRENDERNVXPROC;
pub extern var __glewAsyncCopyBufferSubDataNVX: PFNGLASYNCCOPYBUFFERSUBDATANVXPROC;
pub extern var __glewAsyncCopyImageSubDataNVX: PFNGLASYNCCOPYIMAGESUBDATANVXPROC;
pub extern var __glewMulticastScissorArrayvNVX: PFNGLMULTICASTSCISSORARRAYVNVXPROC;
pub extern var __glewMulticastViewportArrayvNVX: PFNGLMULTICASTVIEWPORTARRAYVNVXPROC;
pub extern var __glewMulticastViewportPositionWScaleNVX: PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC;
pub extern var __glewUploadGpuMaskNVX: PFNGLUPLOADGPUMASKNVXPROC;
pub extern var __glewLGPUCopyImageSubDataNVX: PFNGLLGPUCOPYIMAGESUBDATANVXPROC;
pub extern var __glewLGPUInterlockNVX: PFNGLLGPUINTERLOCKNVXPROC;
pub extern var __glewLGPUNamedBufferSubDataNVX: PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC;
pub extern var __glewClientWaitSemaphoreui64NVX: PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC;
pub extern var __glewSignalSemaphoreui64NVX: PFNGLSIGNALSEMAPHOREUI64NVXPROC;
pub extern var __glewWaitSemaphoreui64NVX: PFNGLWAITSEMAPHOREUI64NVXPROC;
pub extern var __glewStereoParameterfNV: PFNGLSTEREOPARAMETERFNVPROC;
pub extern var __glewStereoParameteriNV: PFNGLSTEREOPARAMETERINVPROC;
pub extern var __glewAlphaToCoverageDitherControlNV: PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC;
pub extern var __glewMultiDrawArraysIndirectBindlessNV: PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC;
pub extern var __glewMultiDrawElementsIndirectBindlessNV: PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC;
pub extern var __glewMultiDrawArraysIndirectBindlessCountNV: PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC;
pub extern var __glewMultiDrawElementsIndirectBindlessCountNV: PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC;
pub extern var __glewGetImageHandleNV: PFNGLGETIMAGEHANDLENVPROC;
pub extern var __glewGetTextureHandleNV: PFNGLGETTEXTUREHANDLENVPROC;
pub extern var __glewGetTextureSamplerHandleNV: PFNGLGETTEXTURESAMPLERHANDLENVPROC;
pub extern var __glewIsImageHandleResidentNV: PFNGLISIMAGEHANDLERESIDENTNVPROC;
pub extern var __glewIsTextureHandleResidentNV: PFNGLISTEXTUREHANDLERESIDENTNVPROC;
pub extern var __glewMakeImageHandleNonResidentNV: PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC;
pub extern var __glewMakeImageHandleResidentNV: PFNGLMAKEIMAGEHANDLERESIDENTNVPROC;
pub extern var __glewMakeTextureHandleNonResidentNV: PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC;
pub extern var __glewMakeTextureHandleResidentNV: PFNGLMAKETEXTUREHANDLERESIDENTNVPROC;
pub extern var __glewProgramUniformHandleui64NV: PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC;
pub extern var __glewProgramUniformHandleui64vNV: PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC;
pub extern var __glewUniformHandleui64NV: PFNGLUNIFORMHANDLEUI64NVPROC;
pub extern var __glewUniformHandleui64vNV: PFNGLUNIFORMHANDLEUI64VNVPROC;
pub extern var __glewBlendBarrierNV: PFNGLBLENDBARRIERNVPROC;
pub extern var __glewBlendParameteriNV: PFNGLBLENDPARAMETERINVPROC;
pub extern var __glewViewportPositionWScaleNV: PFNGLVIEWPORTPOSITIONWSCALENVPROC;
pub extern var __glewCallCommandListNV: PFNGLCALLCOMMANDLISTNVPROC;
pub extern var __glewCommandListSegmentsNV: PFNGLCOMMANDLISTSEGMENTSNVPROC;
pub extern var __glewCompileCommandListNV: PFNGLCOMPILECOMMANDLISTNVPROC;
pub extern var __glewCreateCommandListsNV: PFNGLCREATECOMMANDLISTSNVPROC;
pub extern var __glewCreateStatesNV: PFNGLCREATESTATESNVPROC;
pub extern var __glewDeleteCommandListsNV: PFNGLDELETECOMMANDLISTSNVPROC;
pub extern var __glewDeleteStatesNV: PFNGLDELETESTATESNVPROC;
pub extern var __glewDrawCommandsAddressNV: PFNGLDRAWCOMMANDSADDRESSNVPROC;
pub extern var __glewDrawCommandsNV: PFNGLDRAWCOMMANDSNVPROC;
pub extern var __glewDrawCommandsStatesAddressNV: PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC;
pub extern var __glewDrawCommandsStatesNV: PFNGLDRAWCOMMANDSSTATESNVPROC;
pub extern var __glewGetCommandHeaderNV: PFNGLGETCOMMANDHEADERNVPROC;
pub extern var __glewGetStageIndexNV: PFNGLGETSTAGEINDEXNVPROC;
pub extern var __glewIsCommandListNV: PFNGLISCOMMANDLISTNVPROC;
pub extern var __glewIsStateNV: PFNGLISSTATENVPROC;
pub extern var __glewListDrawCommandsStatesClientNV: PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC;
pub extern var __glewStateCaptureNV: PFNGLSTATECAPTURENVPROC;
pub extern var __glewBeginConditionalRenderNV: PFNGLBEGINCONDITIONALRENDERNVPROC;
pub extern var __glewEndConditionalRenderNV: PFNGLENDCONDITIONALRENDERNVPROC;
pub extern var __glewSubpixelPrecisionBiasNV: PFNGLSUBPIXELPRECISIONBIASNVPROC;
pub extern var __glewConservativeRasterParameterfNV: PFNGLCONSERVATIVERASTERPARAMETERFNVPROC;
pub extern var __glewConservativeRasterParameteriNV: PFNGLCONSERVATIVERASTERPARAMETERINVPROC;
pub extern var __glewCopyBufferSubDataNV: PFNGLCOPYBUFFERSUBDATANVPROC;
pub extern var __glewCopyImageSubDataNV: PFNGLCOPYIMAGESUBDATANVPROC;
pub extern var __glewClearDepthdNV: PFNGLCLEARDEPTHDNVPROC;
pub extern var __glewDepthBoundsdNV: PFNGLDEPTHBOUNDSDNVPROC;
pub extern var __glewDepthRangedNV: PFNGLDEPTHRANGEDNVPROC;
pub extern var __glewDrawBuffersNV: PFNGLDRAWBUFFERSNVPROC;
pub extern var __glewDrawArraysInstancedNV: PFNGLDRAWARRAYSINSTANCEDNVPROC;
pub extern var __glewDrawElementsInstancedNV: PFNGLDRAWELEMENTSINSTANCEDNVPROC;
pub extern var __glewDrawTextureNV: PFNGLDRAWTEXTURENVPROC;
pub extern var __glewDrawVkImageNV: PFNGLDRAWVKIMAGENVPROC;
pub extern var __glewGetVkProcAddrNV: PFNGLGETVKPROCADDRNVPROC;
pub extern var __glewSignalVkFenceNV: PFNGLSIGNALVKFENCENVPROC;
pub extern var __glewSignalVkSemaphoreNV: PFNGLSIGNALVKSEMAPHORENVPROC;
pub extern var __glewWaitVkSemaphoreNV: PFNGLWAITVKSEMAPHORENVPROC;
pub extern var __glewEvalMapsNV: PFNGLEVALMAPSNVPROC;
pub extern var __glewGetMapAttribParameterfvNV: PFNGLGETMAPATTRIBPARAMETERFVNVPROC;
pub extern var __glewGetMapAttribParameterivNV: PFNGLGETMAPATTRIBPARAMETERIVNVPROC;
pub extern var __glewGetMapControlPointsNV: PFNGLGETMAPCONTROLPOINTSNVPROC;
pub extern var __glewGetMapParameterfvNV: PFNGLGETMAPPARAMETERFVNVPROC;
pub extern var __glewGetMapParameterivNV: PFNGLGETMAPPARAMETERIVNVPROC;
pub extern var __glewMapControlPointsNV: PFNGLMAPCONTROLPOINTSNVPROC;
pub extern var __glewMapParameterfvNV: PFNGLMAPPARAMETERFVNVPROC;
pub extern var __glewMapParameterivNV: PFNGLMAPPARAMETERIVNVPROC;
pub extern var __glewGetMultisamplefvNV: PFNGLGETMULTISAMPLEFVNVPROC;
pub extern var __glewSampleMaskIndexedNV: PFNGLSAMPLEMASKINDEXEDNVPROC;
pub extern var __glewTexRenderbufferNV: PFNGLTEXRENDERBUFFERNVPROC;
pub extern var __glewDeleteFencesNV: PFNGLDELETEFENCESNVPROC;
pub extern var __glewFinishFenceNV: PFNGLFINISHFENCENVPROC;
pub extern var __glewGenFencesNV: PFNGLGENFENCESNVPROC;
pub extern var __glewGetFenceivNV: PFNGLGETFENCEIVNVPROC;
pub extern var __glewIsFenceNV: PFNGLISFENCENVPROC;
pub extern var __glewSetFenceNV: PFNGLSETFENCENVPROC;
pub extern var __glewTestFenceNV: PFNGLTESTFENCENVPROC;
pub extern var __glewFragmentCoverageColorNV: PFNGLFRAGMENTCOVERAGECOLORNVPROC;
pub extern var __glewGetProgramNamedParameterdvNV: PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC;
pub extern var __glewGetProgramNamedParameterfvNV: PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC;
pub extern var __glewProgramNamedParameter4dNV: PFNGLPROGRAMNAMEDPARAMETER4DNVPROC;
pub extern var __glewProgramNamedParameter4dvNV: PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC;
pub extern var __glewProgramNamedParameter4fNV: PFNGLPROGRAMNAMEDPARAMETER4FNVPROC;
pub extern var __glewProgramNamedParameter4fvNV: PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC;
pub extern var __glewBlitFramebufferNV: PFNGLBLITFRAMEBUFFERNVPROC;
pub extern var __glewRenderbufferStorageMultisampleNV: PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC;
pub extern var __glewRenderbufferStorageMultisampleCoverageNV: PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC;
pub extern var __glewProgramVertexLimitNV: PFNGLPROGRAMVERTEXLIMITNVPROC;
pub extern var __glewMulticastBarrierNV: PFNGLMULTICASTBARRIERNVPROC;
pub extern var __glewMulticastBlitFramebufferNV: PFNGLMULTICASTBLITFRAMEBUFFERNVPROC;
pub extern var __glewMulticastBufferSubDataNV: PFNGLMULTICASTBUFFERSUBDATANVPROC;
pub extern var __glewMulticastCopyBufferSubDataNV: PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC;
pub extern var __glewMulticastCopyImageSubDataNV: PFNGLMULTICASTCOPYIMAGESUBDATANVPROC;
pub extern var __glewMulticastFramebufferSampleLocationsfvNV: PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC;
pub extern var __glewMulticastGetQueryObjecti64vNV: PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC;
pub extern var __glewMulticastGetQueryObjectivNV: PFNGLMULTICASTGETQUERYOBJECTIVNVPROC;
pub extern var __glewMulticastGetQueryObjectui64vNV: PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC;
pub extern var __glewMulticastGetQueryObjectuivNV: PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC;
pub extern var __glewMulticastWaitSyncNV: PFNGLMULTICASTWAITSYNCNVPROC;
pub extern var __glewRenderGpuMaskNV: PFNGLRENDERGPUMASKNVPROC;
pub extern var __glewProgramEnvParameterI4iNV: PFNGLPROGRAMENVPARAMETERI4INVPROC;
pub extern var __glewProgramEnvParameterI4ivNV: PFNGLPROGRAMENVPARAMETERI4IVNVPROC;
pub extern var __glewProgramEnvParameterI4uiNV: PFNGLPROGRAMENVPARAMETERI4UINVPROC;
pub extern var __glewProgramEnvParameterI4uivNV: PFNGLPROGRAMENVPARAMETERI4UIVNVPROC;
pub extern var __glewProgramEnvParametersI4ivNV: PFNGLPROGRAMENVPARAMETERSI4IVNVPROC;
pub extern var __glewProgramEnvParametersI4uivNV: PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC;
pub extern var __glewProgramLocalParameterI4iNV: PFNGLPROGRAMLOCALPARAMETERI4INVPROC;
pub extern var __glewProgramLocalParameterI4ivNV: PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC;
pub extern var __glewProgramLocalParameterI4uiNV: PFNGLPROGRAMLOCALPARAMETERI4UINVPROC;
pub extern var __glewProgramLocalParameterI4uivNV: PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC;
pub extern var __glewProgramLocalParametersI4ivNV: PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC;
pub extern var __glewProgramLocalParametersI4uivNV: PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC;
pub extern var __glewGetUniformi64vNV: PFNGLGETUNIFORMI64VNVPROC;
pub extern var __glewGetUniformui64vNV: PFNGLGETUNIFORMUI64VNVPROC;
pub extern var __glewProgramUniform1i64NV: PFNGLPROGRAMUNIFORM1I64NVPROC;
pub extern var __glewProgramUniform1i64vNV: PFNGLPROGRAMUNIFORM1I64VNVPROC;
pub extern var __glewProgramUniform1ui64NV: PFNGLPROGRAMUNIFORM1UI64NVPROC;
pub extern var __glewProgramUniform1ui64vNV: PFNGLPROGRAMUNIFORM1UI64VNVPROC;
pub extern var __glewProgramUniform2i64NV: PFNGLPROGRAMUNIFORM2I64NVPROC;
pub extern var __glewProgramUniform2i64vNV: PFNGLPROGRAMUNIFORM2I64VNVPROC;
pub extern var __glewProgramUniform2ui64NV: PFNGLPROGRAMUNIFORM2UI64NVPROC;
pub extern var __glewProgramUniform2ui64vNV: PFNGLPROGRAMUNIFORM2UI64VNVPROC;
pub extern var __glewProgramUniform3i64NV: PFNGLPROGRAMUNIFORM3I64NVPROC;
pub extern var __glewProgramUniform3i64vNV: PFNGLPROGRAMUNIFORM3I64VNVPROC;
pub extern var __glewProgramUniform3ui64NV: PFNGLPROGRAMUNIFORM3UI64NVPROC;
pub extern var __glewProgramUniform3ui64vNV: PFNGLPROGRAMUNIFORM3UI64VNVPROC;
pub extern var __glewProgramUniform4i64NV: PFNGLPROGRAMUNIFORM4I64NVPROC;
pub extern var __glewProgramUniform4i64vNV: PFNGLPROGRAMUNIFORM4I64VNVPROC;
pub extern var __glewProgramUniform4ui64NV: PFNGLPROGRAMUNIFORM4UI64NVPROC;
pub extern var __glewProgramUniform4ui64vNV: PFNGLPROGRAMUNIFORM4UI64VNVPROC;
pub extern var __glewUniform1i64NV: PFNGLUNIFORM1I64NVPROC;
pub extern var __glewUniform1i64vNV: PFNGLUNIFORM1I64VNVPROC;
pub extern var __glewUniform1ui64NV: PFNGLUNIFORM1UI64NVPROC;
pub extern var __glewUniform1ui64vNV: PFNGLUNIFORM1UI64VNVPROC;
pub extern var __glewUniform2i64NV: PFNGLUNIFORM2I64NVPROC;
pub extern var __glewUniform2i64vNV: PFNGLUNIFORM2I64VNVPROC;
pub extern var __glewUniform2ui64NV: PFNGLUNIFORM2UI64NVPROC;
pub extern var __glewUniform2ui64vNV: PFNGLUNIFORM2UI64VNVPROC;
pub extern var __glewUniform3i64NV: PFNGLUNIFORM3I64NVPROC;
pub extern var __glewUniform3i64vNV: PFNGLUNIFORM3I64VNVPROC;
pub extern var __glewUniform3ui64NV: PFNGLUNIFORM3UI64NVPROC;
pub extern var __glewUniform3ui64vNV: PFNGLUNIFORM3UI64VNVPROC;
pub extern var __glewUniform4i64NV: PFNGLUNIFORM4I64NVPROC;
pub extern var __glewUniform4i64vNV: PFNGLUNIFORM4I64VNVPROC;
pub extern var __glewUniform4ui64NV: PFNGLUNIFORM4UI64NVPROC;
pub extern var __glewUniform4ui64vNV: PFNGLUNIFORM4UI64VNVPROC;
pub extern var __glewColor3hNV: PFNGLCOLOR3HNVPROC;
pub extern var __glewColor3hvNV: PFNGLCOLOR3HVNVPROC;
pub extern var __glewColor4hNV: PFNGLCOLOR4HNVPROC;
pub extern var __glewColor4hvNV: PFNGLCOLOR4HVNVPROC;
pub extern var __glewFogCoordhNV: PFNGLFOGCOORDHNVPROC;
pub extern var __glewFogCoordhvNV: PFNGLFOGCOORDHVNVPROC;
pub extern var __glewMultiTexCoord1hNV: PFNGLMULTITEXCOORD1HNVPROC;
pub extern var __glewMultiTexCoord1hvNV: PFNGLMULTITEXCOORD1HVNVPROC;
pub extern var __glewMultiTexCoord2hNV: PFNGLMULTITEXCOORD2HNVPROC;
pub extern var __glewMultiTexCoord2hvNV: PFNGLMULTITEXCOORD2HVNVPROC;
pub extern var __glewMultiTexCoord3hNV: PFNGLMULTITEXCOORD3HNVPROC;
pub extern var __glewMultiTexCoord3hvNV: PFNGLMULTITEXCOORD3HVNVPROC;
pub extern var __glewMultiTexCoord4hNV: PFNGLMULTITEXCOORD4HNVPROC;
pub extern var __glewMultiTexCoord4hvNV: PFNGLMULTITEXCOORD4HVNVPROC;
pub extern var __glewNormal3hNV: PFNGLNORMAL3HNVPROC;
pub extern var __glewNormal3hvNV: PFNGLNORMAL3HVNVPROC;
pub extern var __glewSecondaryColor3hNV: PFNGLSECONDARYCOLOR3HNVPROC;
pub extern var __glewSecondaryColor3hvNV: PFNGLSECONDARYCOLOR3HVNVPROC;
pub extern var __glewTexCoord1hNV: PFNGLTEXCOORD1HNVPROC;
pub extern var __glewTexCoord1hvNV: PFNGLTEXCOORD1HVNVPROC;
pub extern var __glewTexCoord2hNV: PFNGLTEXCOORD2HNVPROC;
pub extern var __glewTexCoord2hvNV: PFNGLTEXCOORD2HVNVPROC;
pub extern var __glewTexCoord3hNV: PFNGLTEXCOORD3HNVPROC;
pub extern var __glewTexCoord3hvNV: PFNGLTEXCOORD3HVNVPROC;
pub extern var __glewTexCoord4hNV: PFNGLTEXCOORD4HNVPROC;
pub extern var __glewTexCoord4hvNV: PFNGLTEXCOORD4HVNVPROC;
pub extern var __glewVertex2hNV: PFNGLVERTEX2HNVPROC;
pub extern var __glewVertex2hvNV: PFNGLVERTEX2HVNVPROC;
pub extern var __glewVertex3hNV: PFNGLVERTEX3HNVPROC;
pub extern var __glewVertex3hvNV: PFNGLVERTEX3HVNVPROC;
pub extern var __glewVertex4hNV: PFNGLVERTEX4HNVPROC;
pub extern var __glewVertex4hvNV: PFNGLVERTEX4HVNVPROC;
pub extern var __glewVertexAttrib1hNV: PFNGLVERTEXATTRIB1HNVPROC;
pub extern var __glewVertexAttrib1hvNV: PFNGLVERTEXATTRIB1HVNVPROC;
pub extern var __glewVertexAttrib2hNV: PFNGLVERTEXATTRIB2HNVPROC;
pub extern var __glewVertexAttrib2hvNV: PFNGLVERTEXATTRIB2HVNVPROC;
pub extern var __glewVertexAttrib3hNV: PFNGLVERTEXATTRIB3HNVPROC;
pub extern var __glewVertexAttrib3hvNV: PFNGLVERTEXATTRIB3HVNVPROC;
pub extern var __glewVertexAttrib4hNV: PFNGLVERTEXATTRIB4HNVPROC;
pub extern var __glewVertexAttrib4hvNV: PFNGLVERTEXATTRIB4HVNVPROC;
pub extern var __glewVertexAttribs1hvNV: PFNGLVERTEXATTRIBS1HVNVPROC;
pub extern var __glewVertexAttribs2hvNV: PFNGLVERTEXATTRIBS2HVNVPROC;
pub extern var __glewVertexAttribs3hvNV: PFNGLVERTEXATTRIBS3HVNVPROC;
pub extern var __glewVertexAttribs4hvNV: PFNGLVERTEXATTRIBS4HVNVPROC;
pub extern var __glewVertexWeighthNV: PFNGLVERTEXWEIGHTHNVPROC;
pub extern var __glewVertexWeighthvNV: PFNGLVERTEXWEIGHTHVNVPROC;
pub extern var __glewVertexAttribDivisorNV: PFNGLVERTEXATTRIBDIVISORNVPROC;
pub extern var __glewGetInternalformatSampleivNV: PFNGLGETINTERNALFORMATSAMPLEIVNVPROC;
pub extern var __glewBufferAttachMemoryNV: PFNGLBUFFERATTACHMEMORYNVPROC;
pub extern var __glewGetMemoryObjectDetachedResourcesuivNV: PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC;
pub extern var __glewNamedBufferAttachMemoryNV: PFNGLNAMEDBUFFERATTACHMEMORYNVPROC;
pub extern var __glewResetMemoryObjectParameterNV: PFNGLRESETMEMORYOBJECTPARAMETERNVPROC;
pub extern var __glewTexAttachMemoryNV: PFNGLTEXATTACHMEMORYNVPROC;
pub extern var __glewTextureAttachMemoryNV: PFNGLTEXTUREATTACHMEMORYNVPROC;
pub extern var __glewDrawMeshTasksIndirectNV: PFNGLDRAWMESHTASKSINDIRECTNVPROC;
pub extern var __glewDrawMeshTasksNV: PFNGLDRAWMESHTASKSNVPROC;
pub extern var __glewMultiDrawMeshTasksIndirectCountNV: PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC;
pub extern var __glewMultiDrawMeshTasksIndirectNV: PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC;
pub extern var __glewUniformMatrix2x3fvNV: PFNGLUNIFORMMATRIX2X3FVNVPROC;
pub extern var __glewUniformMatrix2x4fvNV: PFNGLUNIFORMMATRIX2X4FVNVPROC;
pub extern var __glewUniformMatrix3x2fvNV: PFNGLUNIFORMMATRIX3X2FVNVPROC;
pub extern var __glewUniformMatrix3x4fvNV: PFNGLUNIFORMMATRIX3X4FVNVPROC;
pub extern var __glewUniformMatrix4x2fvNV: PFNGLUNIFORMMATRIX4X2FVNVPROC;
pub extern var __glewUniformMatrix4x3fvNV: PFNGLUNIFORMMATRIX4X3FVNVPROC;
pub extern var __glewBeginOcclusionQueryNV: PFNGLBEGINOCCLUSIONQUERYNVPROC;
pub extern var __glewDeleteOcclusionQueriesNV: PFNGLDELETEOCCLUSIONQUERIESNVPROC;
pub extern var __glewEndOcclusionQueryNV: PFNGLENDOCCLUSIONQUERYNVPROC;
pub extern var __glewGenOcclusionQueriesNV: PFNGLGENOCCLUSIONQUERIESNVPROC;
pub extern var __glewGetOcclusionQueryivNV: PFNGLGETOCCLUSIONQUERYIVNVPROC;
pub extern var __glewGetOcclusionQueryuivNV: PFNGLGETOCCLUSIONQUERYUIVNVPROC;
pub extern var __glewIsOcclusionQueryNV: PFNGLISOCCLUSIONQUERYNVPROC;
pub extern var __glewProgramBufferParametersIivNV: PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC;
pub extern var __glewProgramBufferParametersIuivNV: PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC;
pub extern var __glewProgramBufferParametersfvNV: PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC;
pub extern var __glewCopyPathNV: PFNGLCOPYPATHNVPROC;
pub extern var __glewCoverFillPathInstancedNV: PFNGLCOVERFILLPATHINSTANCEDNVPROC;
pub extern var __glewCoverFillPathNV: PFNGLCOVERFILLPATHNVPROC;
pub extern var __glewCoverStrokePathInstancedNV: PFNGLCOVERSTROKEPATHINSTANCEDNVPROC;
pub extern var __glewCoverStrokePathNV: PFNGLCOVERSTROKEPATHNVPROC;
pub extern var __glewDeletePathsNV: PFNGLDELETEPATHSNVPROC;
pub extern var __glewGenPathsNV: PFNGLGENPATHSNVPROC;
pub extern var __glewGetPathColorGenfvNV: PFNGLGETPATHCOLORGENFVNVPROC;
pub extern var __glewGetPathColorGenivNV: PFNGLGETPATHCOLORGENIVNVPROC;
pub extern var __glewGetPathCommandsNV: PFNGLGETPATHCOMMANDSNVPROC;
pub extern var __glewGetPathCoordsNV: PFNGLGETPATHCOORDSNVPROC;
pub extern var __glewGetPathDashArrayNV: PFNGLGETPATHDASHARRAYNVPROC;
pub extern var __glewGetPathLengthNV: PFNGLGETPATHLENGTHNVPROC;
pub extern var __glewGetPathMetricRangeNV: PFNGLGETPATHMETRICRANGENVPROC;
pub extern var __glewGetPathMetricsNV: PFNGLGETPATHMETRICSNVPROC;
pub extern var __glewGetPathParameterfvNV: PFNGLGETPATHPARAMETERFVNVPROC;
pub extern var __glewGetPathParameterivNV: PFNGLGETPATHPARAMETERIVNVPROC;
pub extern var __glewGetPathSpacingNV: PFNGLGETPATHSPACINGNVPROC;
pub extern var __glewGetPathTexGenfvNV: PFNGLGETPATHTEXGENFVNVPROC;
pub extern var __glewGetPathTexGenivNV: PFNGLGETPATHTEXGENIVNVPROC;
pub extern var __glewGetProgramResourcefvNV: PFNGLGETPROGRAMRESOURCEFVNVPROC;
pub extern var __glewInterpolatePathsNV: PFNGLINTERPOLATEPATHSNVPROC;
pub extern var __glewIsPathNV: PFNGLISPATHNVPROC;
pub extern var __glewIsPointInFillPathNV: PFNGLISPOINTINFILLPATHNVPROC;
pub extern var __glewIsPointInStrokePathNV: PFNGLISPOINTINSTROKEPATHNVPROC;
pub extern var __glewMatrixLoad3x2fNV: PFNGLMATRIXLOAD3X2FNVPROC;
pub extern var __glewMatrixLoad3x3fNV: PFNGLMATRIXLOAD3X3FNVPROC;
pub extern var __glewMatrixLoadTranspose3x3fNV: PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC;
pub extern var __glewMatrixMult3x2fNV: PFNGLMATRIXMULT3X2FNVPROC;
pub extern var __glewMatrixMult3x3fNV: PFNGLMATRIXMULT3X3FNVPROC;
pub extern var __glewMatrixMultTranspose3x3fNV: PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC;
pub extern var __glewPathColorGenNV: PFNGLPATHCOLORGENNVPROC;
pub extern var __glewPathCommandsNV: PFNGLPATHCOMMANDSNVPROC;
pub extern var __glewPathCoordsNV: PFNGLPATHCOORDSNVPROC;
pub extern var __glewPathCoverDepthFuncNV: PFNGLPATHCOVERDEPTHFUNCNVPROC;
pub extern var __glewPathDashArrayNV: PFNGLPATHDASHARRAYNVPROC;
pub extern var __glewPathFogGenNV: PFNGLPATHFOGGENNVPROC;
pub extern var __glewPathGlyphIndexArrayNV: PFNGLPATHGLYPHINDEXARRAYNVPROC;
pub extern var __glewPathGlyphIndexRangeNV: PFNGLPATHGLYPHINDEXRANGENVPROC;
pub extern var __glewPathGlyphRangeNV: PFNGLPATHGLYPHRANGENVPROC;
pub extern var __glewPathGlyphsNV: PFNGLPATHGLYPHSNVPROC;
pub extern var __glewPathMemoryGlyphIndexArrayNV: PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC;
pub extern var __glewPathParameterfNV: PFNGLPATHPARAMETERFNVPROC;
pub extern var __glewPathParameterfvNV: PFNGLPATHPARAMETERFVNVPROC;
pub extern var __glewPathParameteriNV: PFNGLPATHPARAMETERINVPROC;
pub extern var __glewPathParameterivNV: PFNGLPATHPARAMETERIVNVPROC;
pub extern var __glewPathStencilDepthOffsetNV: PFNGLPATHSTENCILDEPTHOFFSETNVPROC;
pub extern var __glewPathStencilFuncNV: PFNGLPATHSTENCILFUNCNVPROC;
pub extern var __glewPathStringNV: PFNGLPATHSTRINGNVPROC;
pub extern var __glewPathSubCommandsNV: PFNGLPATHSUBCOMMANDSNVPROC;
pub extern var __glewPathSubCoordsNV: PFNGLPATHSUBCOORDSNVPROC;
pub extern var __glewPathTexGenNV: PFNGLPATHTEXGENNVPROC;
pub extern var __glewPointAlongPathNV: PFNGLPOINTALONGPATHNVPROC;
pub extern var __glewProgramPathFragmentInputGenNV: PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC;
pub extern var __glewStencilFillPathInstancedNV: PFNGLSTENCILFILLPATHINSTANCEDNVPROC;
pub extern var __glewStencilFillPathNV: PFNGLSTENCILFILLPATHNVPROC;
pub extern var __glewStencilStrokePathInstancedNV: PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC;
pub extern var __glewStencilStrokePathNV: PFNGLSTENCILSTROKEPATHNVPROC;
pub extern var __glewStencilThenCoverFillPathInstancedNV: PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC;
pub extern var __glewStencilThenCoverFillPathNV: PFNGLSTENCILTHENCOVERFILLPATHNVPROC;
pub extern var __glewStencilThenCoverStrokePathInstancedNV: PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC;
pub extern var __glewStencilThenCoverStrokePathNV: PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC;
pub extern var __glewTransformPathNV: PFNGLTRANSFORMPATHNVPROC;
pub extern var __glewWeightPathsNV: PFNGLWEIGHTPATHSNVPROC;
pub extern var __glewFlushPixelDataRangeNV: PFNGLFLUSHPIXELDATARANGENVPROC;
pub extern var __glewPixelDataRangeNV: PFNGLPIXELDATARANGENVPROC;
pub extern var __glewPointParameteriNV: PFNGLPOINTPARAMETERINVPROC;
pub extern var __glewPointParameterivNV: PFNGLPOINTPARAMETERIVNVPROC;
pub extern var __glewPolygonModeNV: PFNGLPOLYGONMODENVPROC;
pub extern var __glewGetVideoi64vNV: PFNGLGETVIDEOI64VNVPROC;
pub extern var __glewGetVideoivNV: PFNGLGETVIDEOIVNVPROC;
pub extern var __glewGetVideoui64vNV: PFNGLGETVIDEOUI64VNVPROC;
pub extern var __glewGetVideouivNV: PFNGLGETVIDEOUIVNVPROC;
pub extern var __glewPresentFrameDualFillNV: PFNGLPRESENTFRAMEDUALFILLNVPROC;
pub extern var __glewPresentFrameKeyedNV: PFNGLPRESENTFRAMEKEYEDNVPROC;
pub extern var __glewPrimitiveRestartIndexNV: PFNGLPRIMITIVERESTARTINDEXNVPROC;
pub extern var __glewPrimitiveRestartNV: PFNGLPRIMITIVERESTARTNVPROC;
pub extern var __glewReadBufferNV: PFNGLREADBUFFERNVPROC;
pub extern var __glewCombinerInputNV: PFNGLCOMBINERINPUTNVPROC;
pub extern var __glewCombinerOutputNV: PFNGLCOMBINEROUTPUTNVPROC;
pub extern var __glewCombinerParameterfNV: PFNGLCOMBINERPARAMETERFNVPROC;
pub extern var __glewCombinerParameterfvNV: PFNGLCOMBINERPARAMETERFVNVPROC;
pub extern var __glewCombinerParameteriNV: PFNGLCOMBINERPARAMETERINVPROC;
pub extern var __glewCombinerParameterivNV: PFNGLCOMBINERPARAMETERIVNVPROC;
pub extern var __glewFinalCombinerInputNV: PFNGLFINALCOMBINERINPUTNVPROC;
pub extern var __glewGetCombinerInputParameterfvNV: PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC;
pub extern var __glewGetCombinerInputParameterivNV: PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC;
pub extern var __glewGetCombinerOutputParameterfvNV: PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC;
pub extern var __glewGetCombinerOutputParameterivNV: PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC;
pub extern var __glewGetFinalCombinerInputParameterfvNV: PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC;
pub extern var __glewGetFinalCombinerInputParameterivNV: PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC;
pub extern var __glewCombinerStageParameterfvNV: PFNGLCOMBINERSTAGEPARAMETERFVNVPROC;
pub extern var __glewGetCombinerStageParameterfvNV: PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC;
pub extern var __glewFramebufferSampleLocationsfvNV: PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC;
pub extern var __glewNamedFramebufferSampleLocationsfvNV: PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC;
pub extern var __glewResolveDepthValuesNV: PFNGLRESOLVEDEPTHVALUESNVPROC;
pub extern var __glewScissorExclusiveArrayvNV: PFNGLSCISSOREXCLUSIVEARRAYVNVPROC;
pub extern var __glewScissorExclusiveNV: PFNGLSCISSOREXCLUSIVENVPROC;
pub extern var __glewGetBufferParameterui64vNV: PFNGLGETBUFFERPARAMETERUI64VNVPROC;
pub extern var __glewGetIntegerui64vNV: PFNGLGETINTEGERUI64VNVPROC;
pub extern var __glewGetNamedBufferParameterui64vNV: PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC;
pub extern var __glewIsBufferResidentNV: PFNGLISBUFFERRESIDENTNVPROC;
pub extern var __glewIsNamedBufferResidentNV: PFNGLISNAMEDBUFFERRESIDENTNVPROC;
pub extern var __glewMakeBufferNonResidentNV: PFNGLMAKEBUFFERNONRESIDENTNVPROC;
pub extern var __glewMakeBufferResidentNV: PFNGLMAKEBUFFERRESIDENTNVPROC;
pub extern var __glewMakeNamedBufferNonResidentNV: PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC;
pub extern var __glewMakeNamedBufferResidentNV: PFNGLMAKENAMEDBUFFERRESIDENTNVPROC;
pub extern var __glewProgramUniformui64NV: PFNGLPROGRAMUNIFORMUI64NVPROC;
pub extern var __glewProgramUniformui64vNV: PFNGLPROGRAMUNIFORMUI64VNVPROC;
pub extern var __glewUniformui64NV: PFNGLUNIFORMUI64NVPROC;
pub extern var __glewUniformui64vNV: PFNGLUNIFORMUI64VNVPROC;
pub extern var __glewBindShadingRateImageNV: PFNGLBINDSHADINGRATEIMAGENVPROC;
pub extern var __glewGetShadingRateImagePaletteNV: PFNGLGETSHADINGRATEIMAGEPALETTENVPROC;
pub extern var __glewGetShadingRateSampleLocationivNV: PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC;
pub extern var __glewShadingRateImageBarrierNV: PFNGLSHADINGRATEIMAGEBARRIERNVPROC;
pub extern var __glewShadingRateImagePaletteNV: PFNGLSHADINGRATEIMAGEPALETTENVPROC;
pub extern var __glewShadingRateSampleOrderCustomNV: PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC;
pub extern var __glewCompressedTexImage3DNV: PFNGLCOMPRESSEDTEXIMAGE3DNVPROC;
pub extern var __glewCompressedTexSubImage3DNV: PFNGLCOMPRESSEDTEXSUBIMAGE3DNVPROC;
pub extern var __glewCopyTexSubImage3DNV: PFNGLCOPYTEXSUBIMAGE3DNVPROC;
pub extern var __glewFramebufferTextureLayerNV: PFNGLFRAMEBUFFERTEXTURELAYERNVPROC;
pub extern var __glewTexImage3DNV: PFNGLTEXIMAGE3DNVPROC;
pub extern var __glewTexSubImage3DNV: PFNGLTEXSUBIMAGE3DNVPROC;
pub extern var __glewTextureBarrierNV: PFNGLTEXTUREBARRIERNVPROC;
pub extern var __glewTexImage2DMultisampleCoverageNV: PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC;
pub extern var __glewTexImage3DMultisampleCoverageNV: PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC;
pub extern var __glewTextureImage2DMultisampleCoverageNV: PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC;
pub extern var __glewTextureImage2DMultisampleNV: PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC;
pub extern var __glewTextureImage3DMultisampleCoverageNV: PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC;
pub extern var __glewTextureImage3DMultisampleNV: PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC;
pub extern var __glewActiveVaryingNV: PFNGLACTIVEVARYINGNVPROC;
pub extern var __glewBeginTransformFeedbackNV: PFNGLBEGINTRANSFORMFEEDBACKNVPROC;
pub extern var __glewBindBufferBaseNV: PFNGLBINDBUFFERBASENVPROC;
pub extern var __glewBindBufferOffsetNV: PFNGLBINDBUFFEROFFSETNVPROC;
pub extern var __glewBindBufferRangeNV: PFNGLBINDBUFFERRANGENVPROC;
pub extern var __glewEndTransformFeedbackNV: PFNGLENDTRANSFORMFEEDBACKNVPROC;
pub extern var __glewGetActiveVaryingNV: PFNGLGETACTIVEVARYINGNVPROC;
pub extern var __glewGetTransformFeedbackVaryingNV: PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC;
pub extern var __glewGetVaryingLocationNV: PFNGLGETVARYINGLOCATIONNVPROC;
pub extern var __glewTransformFeedbackAttribsNV: PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC;
pub extern var __glewTransformFeedbackVaryingsNV: PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC;
pub extern var __glewBindTransformFeedbackNV: PFNGLBINDTRANSFORMFEEDBACKNVPROC;
pub extern var __glewDeleteTransformFeedbacksNV: PFNGLDELETETRANSFORMFEEDBACKSNVPROC;
pub extern var __glewDrawTransformFeedbackNV: PFNGLDRAWTRANSFORMFEEDBACKNVPROC;
pub extern var __glewGenTransformFeedbacksNV: PFNGLGENTRANSFORMFEEDBACKSNVPROC;
pub extern var __glewIsTransformFeedbackNV: PFNGLISTRANSFORMFEEDBACKNVPROC;
pub extern var __glewPauseTransformFeedbackNV: PFNGLPAUSETRANSFORMFEEDBACKNVPROC;
pub extern var __glewResumeTransformFeedbackNV: PFNGLRESUMETRANSFORMFEEDBACKNVPROC;
pub extern var __glewVDPAUFiniNV: PFNGLVDPAUFININVPROC;
pub extern var __glewVDPAUGetSurfaceivNV: PFNGLVDPAUGETSURFACEIVNVPROC;
pub extern var __glewVDPAUInitNV: PFNGLVDPAUINITNVPROC;
pub extern var __glewVDPAUIsSurfaceNV: PFNGLVDPAUISSURFACENVPROC;
pub extern var __glewVDPAUMapSurfacesNV: PFNGLVDPAUMAPSURFACESNVPROC;
pub extern var __glewVDPAURegisterOutputSurfaceNV: PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC;
pub extern var __glewVDPAURegisterVideoSurfaceNV: PFNGLVDPAUREGISTERVIDEOSURFACENVPROC;
pub extern var __glewVDPAUSurfaceAccessNV: PFNGLVDPAUSURFACEACCESSNVPROC;
pub extern var __glewVDPAUUnmapSurfacesNV: PFNGLVDPAUUNMAPSURFACESNVPROC;
pub extern var __glewVDPAUUnregisterSurfaceNV: PFNGLVDPAUUNREGISTERSURFACENVPROC;
pub extern var __glewVDPAURegisterVideoSurfaceWithPictureStructureNV: PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC;
pub extern var __glewFlushVertexArrayRangeNV: PFNGLFLUSHVERTEXARRAYRANGENVPROC;
pub extern var __glewVertexArrayRangeNV: PFNGLVERTEXARRAYRANGENVPROC;
pub extern var __glewGetVertexAttribLi64vNV: PFNGLGETVERTEXATTRIBLI64VNVPROC;
pub extern var __glewGetVertexAttribLui64vNV: PFNGLGETVERTEXATTRIBLUI64VNVPROC;
pub extern var __glewVertexAttribL1i64NV: PFNGLVERTEXATTRIBL1I64NVPROC;
pub extern var __glewVertexAttribL1i64vNV: PFNGLVERTEXATTRIBL1I64VNVPROC;
pub extern var __glewVertexAttribL1ui64NV: PFNGLVERTEXATTRIBL1UI64NVPROC;
pub extern var __glewVertexAttribL1ui64vNV: PFNGLVERTEXATTRIBL1UI64VNVPROC;
pub extern var __glewVertexAttribL2i64NV: PFNGLVERTEXATTRIBL2I64NVPROC;
pub extern var __glewVertexAttribL2i64vNV: PFNGLVERTEXATTRIBL2I64VNVPROC;
pub extern var __glewVertexAttribL2ui64NV: PFNGLVERTEXATTRIBL2UI64NVPROC;
pub extern var __glewVertexAttribL2ui64vNV: PFNGLVERTEXATTRIBL2UI64VNVPROC;
pub extern var __glewVertexAttribL3i64NV: PFNGLVERTEXATTRIBL3I64NVPROC;
pub extern var __glewVertexAttribL3i64vNV: PFNGLVERTEXATTRIBL3I64VNVPROC;
pub extern var __glewVertexAttribL3ui64NV: PFNGLVERTEXATTRIBL3UI64NVPROC;
pub extern var __glewVertexAttribL3ui64vNV: PFNGLVERTEXATTRIBL3UI64VNVPROC;
pub extern var __glewVertexAttribL4i64NV: PFNGLVERTEXATTRIBL4I64NVPROC;
pub extern var __glewVertexAttribL4i64vNV: PFNGLVERTEXATTRIBL4I64VNVPROC;
pub extern var __glewVertexAttribL4ui64NV: PFNGLVERTEXATTRIBL4UI64NVPROC;
pub extern var __glewVertexAttribL4ui64vNV: PFNGLVERTEXATTRIBL4UI64VNVPROC;
pub extern var __glewVertexAttribLFormatNV: PFNGLVERTEXATTRIBLFORMATNVPROC;
pub extern var __glewBufferAddressRangeNV: PFNGLBUFFERADDRESSRANGENVPROC;
pub extern var __glewColorFormatNV: PFNGLCOLORFORMATNVPROC;
pub extern var __glewEdgeFlagFormatNV: PFNGLEDGEFLAGFORMATNVPROC;
pub extern var __glewFogCoordFormatNV: PFNGLFOGCOORDFORMATNVPROC;
pub extern var __glewGetIntegerui64i_vNV: PFNGLGETINTEGERUI64I_VNVPROC;
pub extern var __glewIndexFormatNV: PFNGLINDEXFORMATNVPROC;
pub extern var __glewNormalFormatNV: PFNGLNORMALFORMATNVPROC;
pub extern var __glewSecondaryColorFormatNV: PFNGLSECONDARYCOLORFORMATNVPROC;
pub extern var __glewTexCoordFormatNV: PFNGLTEXCOORDFORMATNVPROC;
pub extern var __glewVertexAttribFormatNV: PFNGLVERTEXATTRIBFORMATNVPROC;
pub extern var __glewVertexAttribIFormatNV: PFNGLVERTEXATTRIBIFORMATNVPROC;
pub extern var __glewVertexFormatNV: PFNGLVERTEXFORMATNVPROC;
pub extern var __glewAreProgramsResidentNV: PFNGLAREPROGRAMSRESIDENTNVPROC;
pub extern var __glewBindProgramNV: PFNGLBINDPROGRAMNVPROC;
pub extern var __glewDeleteProgramsNV: PFNGLDELETEPROGRAMSNVPROC;
pub extern var __glewExecuteProgramNV: PFNGLEXECUTEPROGRAMNVPROC;
pub extern var __glewGenProgramsNV: PFNGLGENPROGRAMSNVPROC;
pub extern var __glewGetProgramParameterdvNV: PFNGLGETPROGRAMPARAMETERDVNVPROC;
pub extern var __glewGetProgramParameterfvNV: PFNGLGETPROGRAMPARAMETERFVNVPROC;
pub extern var __glewGetProgramStringNV: PFNGLGETPROGRAMSTRINGNVPROC;
pub extern var __glewGetProgramivNV: PFNGLGETPROGRAMIVNVPROC;
pub extern var __glewGetTrackMatrixivNV: PFNGLGETTRACKMATRIXIVNVPROC;
pub extern var __glewGetVertexAttribPointervNV: PFNGLGETVERTEXATTRIBPOINTERVNVPROC;
pub extern var __glewGetVertexAttribdvNV: PFNGLGETVERTEXATTRIBDVNVPROC;
pub extern var __glewGetVertexAttribfvNV: PFNGLGETVERTEXATTRIBFVNVPROC;
pub extern var __glewGetVertexAttribivNV: PFNGLGETVERTEXATTRIBIVNVPROC;
pub extern var __glewIsProgramNV: PFNGLISPROGRAMNVPROC;
pub extern var __glewLoadProgramNV: PFNGLLOADPROGRAMNVPROC;
pub extern var __glewProgramParameter4dNV: PFNGLPROGRAMPARAMETER4DNVPROC;
pub extern var __glewProgramParameter4dvNV: PFNGLPROGRAMPARAMETER4DVNVPROC;
pub extern var __glewProgramParameter4fNV: PFNGLPROGRAMPARAMETER4FNVPROC;
pub extern var __glewProgramParameter4fvNV: PFNGLPROGRAMPARAMETER4FVNVPROC;
pub extern var __glewProgramParameters4dvNV: PFNGLPROGRAMPARAMETERS4DVNVPROC;
pub extern var __glewProgramParameters4fvNV: PFNGLPROGRAMPARAMETERS4FVNVPROC;
pub extern var __glewRequestResidentProgramsNV: PFNGLREQUESTRESIDENTPROGRAMSNVPROC;
pub extern var __glewTrackMatrixNV: PFNGLTRACKMATRIXNVPROC;
pub extern var __glewVertexAttrib1dNV: PFNGLVERTEXATTRIB1DNVPROC;
pub extern var __glewVertexAttrib1dvNV: PFNGLVERTEXATTRIB1DVNVPROC;
pub extern var __glewVertexAttrib1fNV: PFNGLVERTEXATTRIB1FNVPROC;
pub extern var __glewVertexAttrib1fvNV: PFNGLVERTEXATTRIB1FVNVPROC;
pub extern var __glewVertexAttrib1sNV: PFNGLVERTEXATTRIB1SNVPROC;
pub extern var __glewVertexAttrib1svNV: PFNGLVERTEXATTRIB1SVNVPROC;
pub extern var __glewVertexAttrib2dNV: PFNGLVERTEXATTRIB2DNVPROC;
pub extern var __glewVertexAttrib2dvNV: PFNGLVERTEXATTRIB2DVNVPROC;
pub extern var __glewVertexAttrib2fNV: PFNGLVERTEXATTRIB2FNVPROC;
pub extern var __glewVertexAttrib2fvNV: PFNGLVERTEXATTRIB2FVNVPROC;
pub extern var __glewVertexAttrib2sNV: PFNGLVERTEXATTRIB2SNVPROC;
pub extern var __glewVertexAttrib2svNV: PFNGLVERTEXATTRIB2SVNVPROC;
pub extern var __glewVertexAttrib3dNV: PFNGLVERTEXATTRIB3DNVPROC;
pub extern var __glewVertexAttrib3dvNV: PFNGLVERTEXATTRIB3DVNVPROC;
pub extern var __glewVertexAttrib3fNV: PFNGLVERTEXATTRIB3FNVPROC;
pub extern var __glewVertexAttrib3fvNV: PFNGLVERTEXATTRIB3FVNVPROC;
pub extern var __glewVertexAttrib3sNV: PFNGLVERTEXATTRIB3SNVPROC;
pub extern var __glewVertexAttrib3svNV: PFNGLVERTEXATTRIB3SVNVPROC;
pub extern var __glewVertexAttrib4dNV: PFNGLVERTEXATTRIB4DNVPROC;
pub extern var __glewVertexAttrib4dvNV: PFNGLVERTEXATTRIB4DVNVPROC;
pub extern var __glewVertexAttrib4fNV: PFNGLVERTEXATTRIB4FNVPROC;
pub extern var __glewVertexAttrib4fvNV: PFNGLVERTEXATTRIB4FVNVPROC;
pub extern var __glewVertexAttrib4sNV: PFNGLVERTEXATTRIB4SNVPROC;
pub extern var __glewVertexAttrib4svNV: PFNGLVERTEXATTRIB4SVNVPROC;
pub extern var __glewVertexAttrib4ubNV: PFNGLVERTEXATTRIB4UBNVPROC;
pub extern var __glewVertexAttrib4ubvNV: PFNGLVERTEXATTRIB4UBVNVPROC;
pub extern var __glewVertexAttribPointerNV: PFNGLVERTEXATTRIBPOINTERNVPROC;
pub extern var __glewVertexAttribs1dvNV: PFNGLVERTEXATTRIBS1DVNVPROC;
pub extern var __glewVertexAttribs1fvNV: PFNGLVERTEXATTRIBS1FVNVPROC;
pub extern var __glewVertexAttribs1svNV: PFNGLVERTEXATTRIBS1SVNVPROC;
pub extern var __glewVertexAttribs2dvNV: PFNGLVERTEXATTRIBS2DVNVPROC;
pub extern var __glewVertexAttribs2fvNV: PFNGLVERTEXATTRIBS2FVNVPROC;
pub extern var __glewVertexAttribs2svNV: PFNGLVERTEXATTRIBS2SVNVPROC;
pub extern var __glewVertexAttribs3dvNV: PFNGLVERTEXATTRIBS3DVNVPROC;
pub extern var __glewVertexAttribs3fvNV: PFNGLVERTEXATTRIBS3FVNVPROC;
pub extern var __glewVertexAttribs3svNV: PFNGLVERTEXATTRIBS3SVNVPROC;
pub extern var __glewVertexAttribs4dvNV: PFNGLVERTEXATTRIBS4DVNVPROC;
pub extern var __glewVertexAttribs4fvNV: PFNGLVERTEXATTRIBS4FVNVPROC;
pub extern var __glewVertexAttribs4svNV: PFNGLVERTEXATTRIBS4SVNVPROC;
pub extern var __glewVertexAttribs4ubvNV: PFNGLVERTEXATTRIBS4UBVNVPROC;
pub extern var __glewBeginVideoCaptureNV: PFNGLBEGINVIDEOCAPTURENVPROC;
pub extern var __glewBindVideoCaptureStreamBufferNV: PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC;
pub extern var __glewBindVideoCaptureStreamTextureNV: PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC;
pub extern var __glewEndVideoCaptureNV: PFNGLENDVIDEOCAPTURENVPROC;
pub extern var __glewGetVideoCaptureStreamdvNV: PFNGLGETVIDEOCAPTURESTREAMDVNVPROC;
pub extern var __glewGetVideoCaptureStreamfvNV: PFNGLGETVIDEOCAPTURESTREAMFVNVPROC;
pub extern var __glewGetVideoCaptureStreamivNV: PFNGLGETVIDEOCAPTURESTREAMIVNVPROC;
pub extern var __glewGetVideoCaptureivNV: PFNGLGETVIDEOCAPTUREIVNVPROC;
pub extern var __glewVideoCaptureNV: PFNGLVIDEOCAPTURENVPROC;
pub extern var __glewVideoCaptureStreamParameterdvNV: PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC;
pub extern var __glewVideoCaptureStreamParameterfvNV: PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC;
pub extern var __glewVideoCaptureStreamParameterivNV: PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC;
pub extern var __glewDepthRangeArrayfvNV: PFNGLDEPTHRANGEARRAYFVNVPROC;
pub extern var __glewDepthRangeIndexedfNV: PFNGLDEPTHRANGEINDEXEDFNVPROC;
pub extern var __glewDisableiNV: PFNGLDISABLEINVPROC;
pub extern var __glewEnableiNV: PFNGLENABLEINVPROC;
pub extern var __glewGetFloati_vNV: PFNGLGETFLOATI_VNVPROC;
pub extern var __glewIsEnablediNV: PFNGLISENABLEDINVPROC;
pub extern var __glewScissorArrayvNV: PFNGLSCISSORARRAYVNVPROC;
pub extern var __glewScissorIndexedNV: PFNGLSCISSORINDEXEDNVPROC;
pub extern var __glewScissorIndexedvNV: PFNGLSCISSORINDEXEDVNVPROC;
pub extern var __glewViewportArrayvNV: PFNGLVIEWPORTARRAYVNVPROC;
pub extern var __glewViewportIndexedfNV: PFNGLVIEWPORTINDEXEDFNVPROC;
pub extern var __glewViewportIndexedfvNV: PFNGLVIEWPORTINDEXEDFVNVPROC;
pub extern var __glewViewportSwizzleNV: PFNGLVIEWPORTSWIZZLENVPROC;
pub extern var __glewEGLImageTargetRenderbufferStorageOES: PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC;
pub extern var __glewEGLImageTargetTexture2DOES: PFNGLEGLIMAGETARGETTEXTURE2DOESPROC;
pub extern var __glewBlendEquationSeparateOES: PFNGLBLENDEQUATIONSEPARATEOESPROC;
pub extern var __glewBlendFuncSeparateOES: PFNGLBLENDFUNCSEPARATEOESPROC;
pub extern var __glewBlendEquationOES: PFNGLBLENDEQUATIONOESPROC;
pub extern var __glewCopyImageSubDataOES: PFNGLCOPYIMAGESUBDATAOESPROC;
pub extern var __glewBlendEquationSeparateiOES: PFNGLBLENDEQUATIONSEPARATEIOESPROC;
pub extern var __glewBlendEquationiOES: PFNGLBLENDEQUATIONIOESPROC;
pub extern var __glewBlendFuncSeparateiOES: PFNGLBLENDFUNCSEPARATEIOESPROC;
pub extern var __glewBlendFunciOES: PFNGLBLENDFUNCIOESPROC;
pub extern var __glewColorMaskiOES: PFNGLCOLORMASKIOESPROC;
pub extern var __glewDisableiOES: PFNGLDISABLEIOESPROC;
pub extern var __glewEnableiOES: PFNGLENABLEIOESPROC;
pub extern var __glewIsEnablediOES: PFNGLISENABLEDIOESPROC;
pub extern var __glewBindFramebufferOES: PFNGLBINDFRAMEBUFFEROESPROC;
pub extern var __glewBindRenderbufferOES: PFNGLBINDRENDERBUFFEROESPROC;
pub extern var __glewCheckFramebufferStatusOES: PFNGLCHECKFRAMEBUFFERSTATUSOESPROC;
pub extern var __glewDeleteFramebuffersOES: PFNGLDELETEFRAMEBUFFERSOESPROC;
pub extern var __glewDeleteRenderbuffersOES: PFNGLDELETERENDERBUFFERSOESPROC;
pub extern var __glewFramebufferRenderbufferOES: PFNGLFRAMEBUFFERRENDERBUFFEROESPROC;
pub extern var __glewFramebufferTexture2DOES: PFNGLFRAMEBUFFERTEXTURE2DOESPROC;
pub extern var __glewGenFramebuffersOES: PFNGLGENFRAMEBUFFERSOESPROC;
pub extern var __glewGenRenderbuffersOES: PFNGLGENRENDERBUFFERSOESPROC;
pub extern var __glewGenerateMipmapOES: PFNGLGENERATEMIPMAPOESPROC;
pub extern var __glewGetFramebufferAttachmentParameterivOES: PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC;
pub extern var __glewGetRenderbufferParameterivOES: PFNGLGETRENDERBUFFERPARAMETERIVOESPROC;
pub extern var __glewIsFramebufferOES: PFNGLISFRAMEBUFFEROESPROC;
pub extern var __glewIsRenderbufferOES: PFNGLISRENDERBUFFEROESPROC;
pub extern var __glewRenderbufferStorageOES: PFNGLRENDERBUFFERSTORAGEOESPROC;
pub extern var __glewGetProgramBinaryOES: PFNGLGETPROGRAMBINARYOESPROC;
pub extern var __glewProgramBinaryOES: PFNGLPROGRAMBINARYOESPROC;
pub extern var __glewGetBufferPointervOES: PFNGLGETBUFFERPOINTERVOESPROC;
pub extern var __glewMapBufferOES: PFNGLMAPBUFFEROESPROC;
pub extern var __glewUnmapBufferOES: PFNGLUNMAPBUFFEROESPROC;
pub extern var __glewCurrentPaletteMatrixOES: PFNGLCURRENTPALETTEMATRIXOESPROC;
pub extern var __glewMatrixIndexPointerOES: PFNGLMATRIXINDEXPOINTEROESPROC;
pub extern var __glewWeightPointerOES: PFNGLWEIGHTPOINTEROESPROC;
pub extern var __glewMinSampleShadingOES: PFNGLMINSAMPLESHADINGOESPROC;
pub extern var __glewClearDepthfOES: PFNGLCLEARDEPTHFOESPROC;
pub extern var __glewClipPlanefOES: PFNGLCLIPPLANEFOESPROC;
pub extern var __glewDepthRangefOES: PFNGLDEPTHRANGEFOESPROC;
pub extern var __glewFrustumfOES: PFNGLFRUSTUMFOESPROC;
pub extern var __glewGetClipPlanefOES: PFNGLGETCLIPPLANEFOESPROC;
pub extern var __glewOrthofOES: PFNGLORTHOFOESPROC;
pub extern var __glewCompressedTexImage3DOES: PFNGLCOMPRESSEDTEXIMAGE3DOESPROC;
pub extern var __glewCompressedTexSubImage3DOES: PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC;
pub extern var __glewCopyTexSubImage3DOES: PFNGLCOPYTEXSUBIMAGE3DOESPROC;
pub extern var __glewFramebufferTexture3DOES: PFNGLFRAMEBUFFERTEXTURE3DOESPROC;
pub extern var __glewTexImage3DOES: PFNGLTEXIMAGE3DOESPROC;
pub extern var __glewTexSubImage3DOES: PFNGLTEXSUBIMAGE3DOESPROC;
pub extern var __glewGetSamplerParameterIivOES: PFNGLGETSAMPLERPARAMETERIIVOESPROC;
pub extern var __glewGetSamplerParameterIuivOES: PFNGLGETSAMPLERPARAMETERIUIVOESPROC;
pub extern var __glewGetTexParameterIivOES: PFNGLGETTEXPARAMETERIIVOESPROC;
pub extern var __glewGetTexParameterIuivOES: PFNGLGETTEXPARAMETERIUIVOESPROC;
pub extern var __glewSamplerParameterIivOES: PFNGLSAMPLERPARAMETERIIVOESPROC;
pub extern var __glewSamplerParameterIuivOES: PFNGLSAMPLERPARAMETERIUIVOESPROC;
pub extern var __glewTexParameterIivOES: PFNGLTEXPARAMETERIIVOESPROC;
pub extern var __glewTexParameterIuivOES: PFNGLTEXPARAMETERIUIVOESPROC;
pub extern var __glewTexBufferOES: PFNGLTEXBUFFEROESPROC;
pub extern var __glewTexBufferRangeOES: PFNGLTEXBUFFERRANGEOESPROC;
pub extern var __glewGetTexGenfvOES: PFNGLGETTEXGENFVOESPROC;
pub extern var __glewGetTexGenivOES: PFNGLGETTEXGENIVOESPROC;
pub extern var __glewGetTexGenxvOES: PFNGLGETTEXGENXVOESPROC;
pub extern var __glewTexGenfOES: PFNGLTEXGENFOESPROC;
pub extern var __glewTexGenfvOES: PFNGLTEXGENFVOESPROC;
pub extern var __glewTexGeniOES: PFNGLTEXGENIOESPROC;
pub extern var __glewTexGenivOES: PFNGLTEXGENIVOESPROC;
pub extern var __glewTexGenxOES: PFNGLTEXGENXOESPROC;
pub extern var __glewTexGenxvOES: PFNGLTEXGENXVOESPROC;
pub extern var __glewTexStorage3DMultisampleOES: PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC;
pub extern var __glewTextureViewOES: PFNGLTEXTUREVIEWOESPROC;
pub extern var __glewBindVertexArrayOES: PFNGLBINDVERTEXARRAYOESPROC;
pub extern var __glewDeleteVertexArraysOES: PFNGLDELETEVERTEXARRAYSOESPROC;
pub extern var __glewGenVertexArraysOES: PFNGLGENVERTEXARRAYSOESPROC;
pub extern var __glewIsVertexArrayOES: PFNGLISVERTEXARRAYOESPROC;
pub extern var __glewFramebufferTextureMultiviewOVR: PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC;
pub extern var __glewNamedFramebufferTextureMultiviewOVR: PFNGLNAMEDFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC;
pub extern var __glewFramebufferTextureMultisampleMultiviewOVR: PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC;
pub extern var __glewAlphaFuncQCOM: PFNGLALPHAFUNCQCOMPROC;
pub extern var __glewDisableDriverControlQCOM: PFNGLDISABLEDRIVERCONTROLQCOMPROC;
pub extern var __glewEnableDriverControlQCOM: PFNGLENABLEDRIVERCONTROLQCOMPROC;
pub extern var __glewGetDriverControlStringQCOM: PFNGLGETDRIVERCONTROLSTRINGQCOMPROC;
pub extern var __glewGetDriverControlsQCOM: PFNGLGETDRIVERCONTROLSQCOMPROC;
pub extern var __glewExtGetBufferPointervQCOM: PFNGLEXTGETBUFFERPOINTERVQCOMPROC;
pub extern var __glewExtGetBuffersQCOM: PFNGLEXTGETBUFFERSQCOMPROC;
pub extern var __glewExtGetFramebuffersQCOM: PFNGLEXTGETFRAMEBUFFERSQCOMPROC;
pub extern var __glewExtGetRenderbuffersQCOM: PFNGLEXTGETRENDERBUFFERSQCOMPROC;
pub extern var __glewExtGetTexLevelParameterivQCOM: PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC;
pub extern var __glewExtGetTexSubImageQCOM: PFNGLEXTGETTEXSUBIMAGEQCOMPROC;
pub extern var __glewExtGetTexturesQCOM: PFNGLEXTGETTEXTURESQCOMPROC;
pub extern var __glewExtTexObjectStateOverrideiQCOM: PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC;
pub extern var __glewExtGetProgramBinarySourceQCOM: PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC;
pub extern var __glewExtGetProgramsQCOM: PFNGLEXTGETPROGRAMSQCOMPROC;
pub extern var __glewExtGetShadersQCOM: PFNGLEXTGETSHADERSQCOMPROC;
pub extern var __glewExtIsProgramBinaryQCOM: PFNGLEXTISPROGRAMBINARYQCOMPROC;
pub extern var __glewFramebufferFoveationConfigQCOM: PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC;
pub extern var __glewFramebufferFoveationParametersQCOM: PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC;
pub extern var __glewFramebufferFetchBarrierQCOM: PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC;
pub extern var __glewTextureFoveationParametersQCOM: PFNGLTEXTUREFOVEATIONPARAMETERSQCOMPROC;
pub extern var __glewEndTilingQCOM: PFNGLENDTILINGQCOMPROC;
pub extern var __glewStartTilingQCOM: PFNGLSTARTTILINGQCOMPROC;
pub extern var __glewAlphaFuncx: PFNGLALPHAFUNCXPROC;
pub extern var __glewClearColorx: PFNGLCLEARCOLORXPROC;
pub extern var __glewClearDepthx: PFNGLCLEARDEPTHXPROC;
pub extern var __glewColor4x: PFNGLCOLOR4XPROC;
pub extern var __glewDepthRangex: PFNGLDEPTHRANGEXPROC;
pub extern var __glewFogx: PFNGLFOGXPROC;
pub extern var __glewFogxv: PFNGLFOGXVPROC;
pub extern var __glewFrustumf: PFNGLFRUSTUMFPROC;
pub extern var __glewFrustumx: PFNGLFRUSTUMXPROC;
pub extern var __glewLightModelx: PFNGLLIGHTMODELXPROC;
pub extern var __glewLightModelxv: PFNGLLIGHTMODELXVPROC;
pub extern var __glewLightx: PFNGLLIGHTXPROC;
pub extern var __glewLightxv: PFNGLLIGHTXVPROC;
pub extern var __glewLineWidthx: PFNGLLINEWIDTHXPROC;
pub extern var __glewLoadMatrixx: PFNGLLOADMATRIXXPROC;
pub extern var __glewMaterialx: PFNGLMATERIALXPROC;
pub extern var __glewMaterialxv: PFNGLMATERIALXVPROC;
pub extern var __glewMultMatrixx: PFNGLMULTMATRIXXPROC;
pub extern var __glewMultiTexCoord4x: PFNGLMULTITEXCOORD4XPROC;
pub extern var __glewNormal3x: PFNGLNORMAL3XPROC;
pub extern var __glewOrthof: PFNGLORTHOFPROC;
pub extern var __glewOrthox: PFNGLORTHOXPROC;
pub extern var __glewPointSizex: PFNGLPOINTSIZEXPROC;
pub extern var __glewPolygonOffsetx: PFNGLPOLYGONOFFSETXPROC;
pub extern var __glewRotatex: PFNGLROTATEXPROC;
pub extern var __glewSampleCoveragex: PFNGLSAMPLECOVERAGEXPROC;
pub extern var __glewScalex: PFNGLSCALEXPROC;
pub extern var __glewTexEnvx: PFNGLTEXENVXPROC;
pub extern var __glewTexEnvxv: PFNGLTEXENVXVPROC;
pub extern var __glewTexParameterx: PFNGLTEXPARAMETERXPROC;
pub extern var __glewTranslatex: PFNGLTRANSLATEXPROC;
pub extern var __glewClipPlanef: PFNGLCLIPPLANEFPROC;
pub extern var __glewClipPlanex: PFNGLCLIPPLANEXPROC;
pub extern var __glewGetClipPlanef: PFNGLGETCLIPPLANEFPROC;
pub extern var __glewGetClipPlanex: PFNGLGETCLIPPLANEXPROC;
pub extern var __glewGetFixedv: PFNGLGETFIXEDVPROC;
pub extern var __glewGetLightxv: PFNGLGETLIGHTXVPROC;
pub extern var __glewGetMaterialxv: PFNGLGETMATERIALXVPROC;
pub extern var __glewGetTexEnvxv: PFNGLGETTEXENVXVPROC;
pub extern var __glewGetTexParameterxv: PFNGLGETTEXPARAMETERXVPROC;
pub extern var __glewPointParameterx: PFNGLPOINTPARAMETERXPROC;
pub extern var __glewPointParameterxv: PFNGLPOINTPARAMETERXVPROC;
pub extern var __glewPointSizePointerOES: PFNGLPOINTSIZEPOINTEROESPROC;
pub extern var __glewTexParameterxv: PFNGLTEXPARAMETERXVPROC;
pub extern var __glewErrorStringREGAL: PFNGLERRORSTRINGREGALPROC;
pub extern var __glewGetExtensionREGAL: PFNGLGETEXTENSIONREGALPROC;
pub extern var __glewIsSupportedREGAL: PFNGLISSUPPORTEDREGALPROC;
pub extern var __glewLogMessageCallbackREGAL: PFNGLLOGMESSAGECALLBACKREGALPROC;
pub extern var __glewGetProcAddressREGAL: PFNGLGETPROCADDRESSREGALPROC;
pub extern var __glewDetailTexFuncSGIS: PFNGLDETAILTEXFUNCSGISPROC;
pub extern var __glewGetDetailTexFuncSGIS: PFNGLGETDETAILTEXFUNCSGISPROC;
pub extern var __glewFogFuncSGIS: PFNGLFOGFUNCSGISPROC;
pub extern var __glewGetFogFuncSGIS: PFNGLGETFOGFUNCSGISPROC;
pub extern var __glewSampleMaskSGIS: PFNGLSAMPLEMASKSGISPROC;
pub extern var __glewSamplePatternSGIS: PFNGLSAMPLEPATTERNSGISPROC;
pub extern var __glewInterleavedTextureCoordSetsSGIS: PFNGLINTERLEAVEDTEXTURECOORDSETSSGISPROC;
pub extern var __glewSelectTextureCoordSetSGIS: PFNGLSELECTTEXTURECOORDSETSGISPROC;
pub extern var __glewSelectTextureSGIS: PFNGLSELECTTEXTURESGISPROC;
pub extern var __glewSelectTextureTransformSGIS: PFNGLSELECTTEXTURETRANSFORMSGISPROC;
pub extern var __glewMultisampleSubRectPosSGIS: PFNGLMULTISAMPLESUBRECTPOSSGISPROC;
pub extern var __glewGetSharpenTexFuncSGIS: PFNGLGETSHARPENTEXFUNCSGISPROC;
pub extern var __glewSharpenTexFuncSGIS: PFNGLSHARPENTEXFUNCSGISPROC;
pub extern var __glewTexImage4DSGIS: PFNGLTEXIMAGE4DSGISPROC;
pub extern var __glewTexSubImage4DSGIS: PFNGLTEXSUBIMAGE4DSGISPROC;
pub extern var __glewGetTexFilterFuncSGIS: PFNGLGETTEXFILTERFUNCSGISPROC;
pub extern var __glewTexFilterFuncSGIS: PFNGLTEXFILTERFUNCSGISPROC;
pub extern var __glewAsyncMarkerSGIX: PFNGLASYNCMARKERSGIXPROC;
pub extern var __glewDeleteAsyncMarkersSGIX: PFNGLDELETEASYNCMARKERSSGIXPROC;
pub extern var __glewFinishAsyncSGIX: PFNGLFINISHASYNCSGIXPROC;
pub extern var __glewGenAsyncMarkersSGIX: PFNGLGENASYNCMARKERSSGIXPROC;
pub extern var __glewIsAsyncMarkerSGIX: PFNGLISASYNCMARKERSGIXPROC;
pub extern var __glewPollAsyncSGIX: PFNGLPOLLASYNCSGIXPROC;
pub extern var __glewAddressSpace: PFNGLADDRESSSPACEPROC;
pub extern var __glewDataPipe: PFNGLDATAPIPEPROC;
pub extern var __glewFlushRasterSGIX: PFNGLFLUSHRASTERSGIXPROC;
pub extern var __glewFogLayersSGIX: PFNGLFOGLAYERSSGIXPROC;
pub extern var __glewGetFogLayersSGIX: PFNGLGETFOGLAYERSSGIXPROC;
pub extern var __glewTextureFogSGIX: PFNGLTEXTUREFOGSGIXPROC;
pub extern var __glewFragmentColorMaterialSGIX: PFNGLFRAGMENTCOLORMATERIALSGIXPROC;
pub extern var __glewFragmentLightModelfSGIX: PFNGLFRAGMENTLIGHTMODELFSGIXPROC;
pub extern var __glewFragmentLightModelfvSGIX: PFNGLFRAGMENTLIGHTMODELFVSGIXPROC;
pub extern var __glewFragmentLightModeliSGIX: PFNGLFRAGMENTLIGHTMODELISGIXPROC;
pub extern var __glewFragmentLightModelivSGIX: PFNGLFRAGMENTLIGHTMODELIVSGIXPROC;
pub extern var __glewFragmentLightfSGIX: PFNGLFRAGMENTLIGHTFSGIXPROC;
pub extern var __glewFragmentLightfvSGIX: PFNGLFRAGMENTLIGHTFVSGIXPROC;
pub extern var __glewFragmentLightiSGIX: PFNGLFRAGMENTLIGHTISGIXPROC;
pub extern var __glewFragmentLightivSGIX: PFNGLFRAGMENTLIGHTIVSGIXPROC;
pub extern var __glewFragmentMaterialfSGIX: PFNGLFRAGMENTMATERIALFSGIXPROC;
pub extern var __glewFragmentMaterialfvSGIX: PFNGLFRAGMENTMATERIALFVSGIXPROC;
pub extern var __glewFragmentMaterialiSGIX: PFNGLFRAGMENTMATERIALISGIXPROC;
pub extern var __glewFragmentMaterialivSGIX: PFNGLFRAGMENTMATERIALIVSGIXPROC;
pub extern var __glewGetFragmentLightfvSGIX: PFNGLGETFRAGMENTLIGHTFVSGIXPROC;
pub extern var __glewGetFragmentLightivSGIX: PFNGLGETFRAGMENTLIGHTIVSGIXPROC;
pub extern var __glewGetFragmentMaterialfvSGIX: PFNGLGETFRAGMENTMATERIALFVSGIXPROC;
pub extern var __glewGetFragmentMaterialivSGIX: PFNGLGETFRAGMENTMATERIALIVSGIXPROC;
pub extern var __glewFrameZoomSGIX: PFNGLFRAMEZOOMSGIXPROC;
pub extern var __glewIglooInterfaceSGIX: PFNGLIGLOOINTERFACESGIXPROC;
pub extern var __glewAllocMPEGPredictorsSGIX: PFNGLALLOCMPEGPREDICTORSSGIXPROC;
pub extern var __glewDeleteMPEGPredictorsSGIX: PFNGLDELETEMPEGPREDICTORSSGIXPROC;
pub extern var __glewGenMPEGPredictorsSGIX: PFNGLGENMPEGPREDICTORSSGIXPROC;
pub extern var __glewGetMPEGParameterfvSGIX: PFNGLGETMPEGPARAMETERFVSGIXPROC;
pub extern var __glewGetMPEGParameterivSGIX: PFNGLGETMPEGPARAMETERIVSGIXPROC;
pub extern var __glewGetMPEGPredictorSGIX: PFNGLGETMPEGPREDICTORSGIXPROC;
pub extern var __glewGetMPEGQuantTableubv: PFNGLGETMPEGQUANTTABLEUBVPROC;
pub extern var __glewIsMPEGPredictorSGIX: PFNGLISMPEGPREDICTORSGIXPROC;
pub extern var __glewMPEGPredictorSGIX: PFNGLMPEGPREDICTORSGIXPROC;
pub extern var __glewMPEGQuantTableubv: PFNGLMPEGQUANTTABLEUBVPROC;
pub extern var __glewSwapMPEGPredictorsSGIX: PFNGLSWAPMPEGPREDICTORSSGIXPROC;
pub extern var __glewGetNonlinLightfvSGIX: PFNGLGETNONLINLIGHTFVSGIXPROC;
pub extern var __glewGetNonlinMaterialfvSGIX: PFNGLGETNONLINMATERIALFVSGIXPROC;
pub extern var __glewNonlinLightfvSGIX: PFNGLNONLINLIGHTFVSGIXPROC;
pub extern var __glewNonlinMaterialfvSGIX: PFNGLNONLINMATERIALFVSGIXPROC;
pub extern var __glewPixelTexGenSGIX: PFNGLPIXELTEXGENSGIXPROC;
pub extern var __glewDeformSGIX: PFNGLDEFORMSGIXPROC;
pub extern var __glewLoadIdentityDeformationMapSGIX: PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC;
pub extern var __glewMeshBreadthSGIX: PFNGLMESHBREADTHSGIXPROC;
pub extern var __glewMeshStrideSGIX: PFNGLMESHSTRIDESGIXPROC;
pub extern var __glewReferencePlaneSGIX: PFNGLREFERENCEPLANESGIXPROC;
pub extern var __glewSpriteParameterfSGIX: PFNGLSPRITEPARAMETERFSGIXPROC;
pub extern var __glewSpriteParameterfvSGIX: PFNGLSPRITEPARAMETERFVSGIXPROC;
pub extern var __glewSpriteParameteriSGIX: PFNGLSPRITEPARAMETERISGIXPROC;
pub extern var __glewSpriteParameterivSGIX: PFNGLSPRITEPARAMETERIVSGIXPROC;
pub extern var __glewTagSampleBufferSGIX: PFNGLTAGSAMPLEBUFFERSGIXPROC;
pub extern var __glewGetVectorOperationSGIX: PFNGLGETVECTOROPERATIONSGIXPROC;
pub extern var __glewVectorOperationSGIX: PFNGLVECTOROPERATIONSGIXPROC;
pub extern var __glewAreVertexArraysResidentSGIX: PFNGLAREVERTEXARRAYSRESIDENTSGIXPROC;
pub extern var __glewBindVertexArraySGIX: PFNGLBINDVERTEXARRAYSGIXPROC;
pub extern var __glewDeleteVertexArraysSGIX: PFNGLDELETEVERTEXARRAYSSGIXPROC;
pub extern var __glewGenVertexArraysSGIX: PFNGLGENVERTEXARRAYSSGIXPROC;
pub extern var __glewIsVertexArraySGIX: PFNGLISVERTEXARRAYSGIXPROC;
pub extern var __glewPrioritizeVertexArraysSGIX: PFNGLPRIORITIZEVERTEXARRAYSSGIXPROC;
pub extern var __glewColorTableParameterfvSGI: PFNGLCOLORTABLEPARAMETERFVSGIPROC;
pub extern var __glewColorTableParameterivSGI: PFNGLCOLORTABLEPARAMETERIVSGIPROC;
pub extern var __glewColorTableSGI: PFNGLCOLORTABLESGIPROC;
pub extern var __glewCopyColorTableSGI: PFNGLCOPYCOLORTABLESGIPROC;
pub extern var __glewGetColorTableParameterfvSGI: PFNGLGETCOLORTABLEPARAMETERFVSGIPROC;
pub extern var __glewGetColorTableParameterivSGI: PFNGLGETCOLORTABLEPARAMETERIVSGIPROC;
pub extern var __glewGetColorTableSGI: PFNGLGETCOLORTABLESGIPROC;
pub extern var __glewGetPixelTransformParameterfvSGI: PFNGLGETPIXELTRANSFORMPARAMETERFVSGIPROC;
pub extern var __glewGetPixelTransformParameterivSGI: PFNGLGETPIXELTRANSFORMPARAMETERIVSGIPROC;
pub extern var __glewPixelTransformParameterfSGI: PFNGLPIXELTRANSFORMPARAMETERFSGIPROC;
pub extern var __glewPixelTransformParameterfvSGI: PFNGLPIXELTRANSFORMPARAMETERFVSGIPROC;
pub extern var __glewPixelTransformParameteriSGI: PFNGLPIXELTRANSFORMPARAMETERISGIPROC;
pub extern var __glewPixelTransformParameterivSGI: PFNGLPIXELTRANSFORMPARAMETERIVSGIPROC;
pub extern var __glewPixelTransformSGI: PFNGLPIXELTRANSFORMSGIPROC;
pub extern var __glewFinishTextureSUNX: PFNGLFINISHTEXTURESUNXPROC;
pub extern var __glewGlobalAlphaFactorbSUN: PFNGLGLOBALALPHAFACTORBSUNPROC;
pub extern var __glewGlobalAlphaFactordSUN: PFNGLGLOBALALPHAFACTORDSUNPROC;
pub extern var __glewGlobalAlphaFactorfSUN: PFNGLGLOBALALPHAFACTORFSUNPROC;
pub extern var __glewGlobalAlphaFactoriSUN: PFNGLGLOBALALPHAFACTORISUNPROC;
pub extern var __glewGlobalAlphaFactorsSUN: PFNGLGLOBALALPHAFACTORSSUNPROC;
pub extern var __glewGlobalAlphaFactorubSUN: PFNGLGLOBALALPHAFACTORUBSUNPROC;
pub extern var __glewGlobalAlphaFactoruiSUN: PFNGLGLOBALALPHAFACTORUISUNPROC;
pub extern var __glewGlobalAlphaFactorusSUN: PFNGLGLOBALALPHAFACTORUSSUNPROC;
pub extern var __glewReadVideoPixelsSUN: PFNGLREADVIDEOPIXELSSUNPROC;
pub extern var __glewReplacementCodePointerSUN: PFNGLREPLACEMENTCODEPOINTERSUNPROC;
pub extern var __glewReplacementCodeubSUN: PFNGLREPLACEMENTCODEUBSUNPROC;
pub extern var __glewReplacementCodeubvSUN: PFNGLREPLACEMENTCODEUBVSUNPROC;
pub extern var __glewReplacementCodeuiSUN: PFNGLREPLACEMENTCODEUISUNPROC;
pub extern var __glewReplacementCodeuivSUN: PFNGLREPLACEMENTCODEUIVSUNPROC;
pub extern var __glewReplacementCodeusSUN: PFNGLREPLACEMENTCODEUSSUNPROC;
pub extern var __glewReplacementCodeusvSUN: PFNGLREPLACEMENTCODEUSVSUNPROC;
pub extern var __glewColor3fVertex3fSUN: PFNGLCOLOR3FVERTEX3FSUNPROC;
pub extern var __glewColor3fVertex3fvSUN: PFNGLCOLOR3FVERTEX3FVSUNPROC;
pub extern var __glewColor4fNormal3fVertex3fSUN: PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC;
pub extern var __glewColor4fNormal3fVertex3fvSUN: PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewColor4ubVertex2fSUN: PFNGLCOLOR4UBVERTEX2FSUNPROC;
pub extern var __glewColor4ubVertex2fvSUN: PFNGLCOLOR4UBVERTEX2FVSUNPROC;
pub extern var __glewColor4ubVertex3fSUN: PFNGLCOLOR4UBVERTEX3FSUNPROC;
pub extern var __glewColor4ubVertex3fvSUN: PFNGLCOLOR4UBVERTEX3FVSUNPROC;
pub extern var __glewNormal3fVertex3fSUN: PFNGLNORMAL3FVERTEX3FSUNPROC;
pub extern var __glewNormal3fVertex3fvSUN: PFNGLNORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiColor3fVertex3fSUN: PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiColor3fVertex3fvSUN: PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiColor4fNormal3fVertex3fSUN: PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiColor4fNormal3fVertex3fvSUN: PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiColor4ubVertex3fSUN: PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiColor4ubVertex3fvSUN: PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiNormal3fVertex3fSUN: PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiNormal3fVertex3fvSUN: PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiTexCoord2fVertex3fSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiTexCoord2fVertex3fvSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiVertex3fSUN: PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiVertex3fvSUN: PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC;
pub extern var __glewTexCoord2fColor3fVertex3fSUN: PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC;
pub extern var __glewTexCoord2fColor3fVertex3fvSUN: PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC;
pub extern var __glewTexCoord2fColor4fNormal3fVertex3fSUN: PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC;
pub extern var __glewTexCoord2fColor4fNormal3fVertex3fvSUN: PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewTexCoord2fColor4ubVertex3fSUN: PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC;
pub extern var __glewTexCoord2fColor4ubVertex3fvSUN: PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC;
pub extern var __glewTexCoord2fNormal3fVertex3fSUN: PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC;
pub extern var __glewTexCoord2fNormal3fVertex3fvSUN: PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewTexCoord2fVertex3fSUN: PFNGLTEXCOORD2FVERTEX3FSUNPROC;
pub extern var __glewTexCoord2fVertex3fvSUN: PFNGLTEXCOORD2FVERTEX3FVSUNPROC;
pub extern var __glewTexCoord4fColor4fNormal3fVertex4fSUN: PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC;
pub extern var __glewTexCoord4fColor4fNormal3fVertex4fvSUN: PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC;
pub extern var __glewTexCoord4fVertex4fSUN: PFNGLTEXCOORD4FVERTEX4FSUNPROC;
pub extern var __glewTexCoord4fVertex4fvSUN: PFNGLTEXCOORD4FVERTEX4FVSUNPROC;
pub extern var __glewAddSwapHintRectWIN: PFNGLADDSWAPHINTRECTWINPROC;
pub extern var __GLEW_VERSION_1_1: GLboolean;
pub extern var __GLEW_VERSION_1_2: GLboolean;
pub extern var __GLEW_VERSION_1_2_1: GLboolean;
pub extern var __GLEW_VERSION_1_3: GLboolean;
pub extern var __GLEW_VERSION_1_4: GLboolean;
pub extern var __GLEW_VERSION_1_5: GLboolean;
pub extern var __GLEW_VERSION_2_0: GLboolean;
pub extern var __GLEW_VERSION_2_1: GLboolean;
pub extern var __GLEW_VERSION_3_0: GLboolean;
pub extern var __GLEW_VERSION_3_1: GLboolean;
pub extern var __GLEW_VERSION_3_2: GLboolean;
pub extern var __GLEW_VERSION_3_3: GLboolean;
pub extern var __GLEW_VERSION_4_0: GLboolean;
pub extern var __GLEW_VERSION_4_1: GLboolean;
pub extern var __GLEW_VERSION_4_2: GLboolean;
pub extern var __GLEW_VERSION_4_3: GLboolean;
pub extern var __GLEW_VERSION_4_4: GLboolean;
pub extern var __GLEW_VERSION_4_5: GLboolean;
pub extern var __GLEW_VERSION_4_6: GLboolean;
pub extern var __GLEW_3DFX_multisample: GLboolean;
pub extern var __GLEW_3DFX_tbuffer: GLboolean;
pub extern var __GLEW_3DFX_texture_compression_FXT1: GLboolean;
pub extern var __GLEW_AMD_blend_minmax_factor: GLboolean;
pub extern var __GLEW_AMD_compressed_3DC_texture: GLboolean;
pub extern var __GLEW_AMD_compressed_ATC_texture: GLboolean;
pub extern var __GLEW_AMD_conservative_depth: GLboolean;
pub extern var __GLEW_AMD_debug_output: GLboolean;
pub extern var __GLEW_AMD_depth_clamp_separate: GLboolean;
pub extern var __GLEW_AMD_draw_buffers_blend: GLboolean;
pub extern var __GLEW_AMD_framebuffer_multisample_advanced: GLboolean;
pub extern var __GLEW_AMD_framebuffer_sample_positions: GLboolean;
pub extern var __GLEW_AMD_gcn_shader: GLboolean;
pub extern var __GLEW_AMD_gpu_shader_half_float: GLboolean;
pub extern var __GLEW_AMD_gpu_shader_half_float_fetch: GLboolean;
pub extern var __GLEW_AMD_gpu_shader_int16: GLboolean;
pub extern var __GLEW_AMD_gpu_shader_int64: GLboolean;
pub extern var __GLEW_AMD_interleaved_elements: GLboolean;
pub extern var __GLEW_AMD_multi_draw_indirect: GLboolean;
pub extern var __GLEW_AMD_name_gen_delete: GLboolean;
pub extern var __GLEW_AMD_occlusion_query_event: GLboolean;
pub extern var __GLEW_AMD_performance_monitor: GLboolean;
pub extern var __GLEW_AMD_pinned_memory: GLboolean;
pub extern var __GLEW_AMD_program_binary_Z400: GLboolean;
pub extern var __GLEW_AMD_query_buffer_object: GLboolean;
pub extern var __GLEW_AMD_sample_positions: GLboolean;
pub extern var __GLEW_AMD_seamless_cubemap_per_texture: GLboolean;
pub extern var __GLEW_AMD_shader_atomic_counter_ops: GLboolean;
pub extern var __GLEW_AMD_shader_ballot: GLboolean;
pub extern var __GLEW_AMD_shader_explicit_vertex_parameter: GLboolean;
pub extern var __GLEW_AMD_shader_image_load_store_lod: GLboolean;
pub extern var __GLEW_AMD_shader_stencil_export: GLboolean;
pub extern var __GLEW_AMD_shader_stencil_value_export: GLboolean;
pub extern var __GLEW_AMD_shader_trinary_minmax: GLboolean;
pub extern var __GLEW_AMD_sparse_texture: GLboolean;
pub extern var __GLEW_AMD_stencil_operation_extended: GLboolean;
pub extern var __GLEW_AMD_texture_gather_bias_lod: GLboolean;
pub extern var __GLEW_AMD_texture_texture4: GLboolean;
pub extern var __GLEW_AMD_transform_feedback3_lines_triangles: GLboolean;
pub extern var __GLEW_AMD_transform_feedback4: GLboolean;
pub extern var __GLEW_AMD_vertex_shader_layer: GLboolean;
pub extern var __GLEW_AMD_vertex_shader_tessellator: GLboolean;
pub extern var __GLEW_AMD_vertex_shader_viewport_index: GLboolean;
pub extern var __GLEW_ANDROID_extension_pack_es31a: GLboolean;
pub extern var __GLEW_ANGLE_depth_texture: GLboolean;
pub extern var __GLEW_ANGLE_framebuffer_blit: GLboolean;
pub extern var __GLEW_ANGLE_framebuffer_multisample: GLboolean;
pub extern var __GLEW_ANGLE_instanced_arrays: GLboolean;
pub extern var __GLEW_ANGLE_pack_reverse_row_order: GLboolean;
pub extern var __GLEW_ANGLE_program_binary: GLboolean;
pub extern var __GLEW_ANGLE_texture_compression_dxt1: GLboolean;
pub extern var __GLEW_ANGLE_texture_compression_dxt3: GLboolean;
pub extern var __GLEW_ANGLE_texture_compression_dxt5: GLboolean;
pub extern var __GLEW_ANGLE_texture_usage: GLboolean;
pub extern var __GLEW_ANGLE_timer_query: GLboolean;
pub extern var __GLEW_ANGLE_translated_shader_source: GLboolean;
pub extern var __GLEW_APPLE_aux_depth_stencil: GLboolean;
pub extern var __GLEW_APPLE_client_storage: GLboolean;
pub extern var __GLEW_APPLE_clip_distance: GLboolean;
pub extern var __GLEW_APPLE_color_buffer_packed_float: GLboolean;
pub extern var __GLEW_APPLE_copy_texture_levels: GLboolean;
pub extern var __GLEW_APPLE_element_array: GLboolean;
pub extern var __GLEW_APPLE_fence: GLboolean;
pub extern var __GLEW_APPLE_float_pixels: GLboolean;
pub extern var __GLEW_APPLE_flush_buffer_range: GLboolean;
pub extern var __GLEW_APPLE_framebuffer_multisample: GLboolean;
pub extern var __GLEW_APPLE_object_purgeable: GLboolean;
pub extern var __GLEW_APPLE_pixel_buffer: GLboolean;
pub extern var __GLEW_APPLE_rgb_422: GLboolean;
pub extern var __GLEW_APPLE_row_bytes: GLboolean;
pub extern var __GLEW_APPLE_specular_vector: GLboolean;
pub extern var __GLEW_APPLE_sync: GLboolean;
pub extern var __GLEW_APPLE_texture_2D_limited_npot: GLboolean;
pub extern var __GLEW_APPLE_texture_format_BGRA8888: GLboolean;
pub extern var __GLEW_APPLE_texture_max_level: GLboolean;
pub extern var __GLEW_APPLE_texture_packed_float: GLboolean;
pub extern var __GLEW_APPLE_texture_range: GLboolean;
pub extern var __GLEW_APPLE_transform_hint: GLboolean;
pub extern var __GLEW_APPLE_vertex_array_object: GLboolean;
pub extern var __GLEW_APPLE_vertex_array_range: GLboolean;
pub extern var __GLEW_APPLE_vertex_program_evaluators: GLboolean;
pub extern var __GLEW_APPLE_ycbcr_422: GLboolean;
pub extern var __GLEW_ARB_ES2_compatibility: GLboolean;
pub extern var __GLEW_ARB_ES3_1_compatibility: GLboolean;
pub extern var __GLEW_ARB_ES3_2_compatibility: GLboolean;
pub extern var __GLEW_ARB_ES3_compatibility: GLboolean;
pub extern var __GLEW_ARB_arrays_of_arrays: GLboolean;
pub extern var __GLEW_ARB_base_instance: GLboolean;
pub extern var __GLEW_ARB_bindless_texture: GLboolean;
pub extern var __GLEW_ARB_blend_func_extended: GLboolean;
pub extern var __GLEW_ARB_buffer_storage: GLboolean;
pub extern var __GLEW_ARB_cl_event: GLboolean;
pub extern var __GLEW_ARB_clear_buffer_object: GLboolean;
pub extern var __GLEW_ARB_clear_texture: GLboolean;
pub extern var __GLEW_ARB_clip_control: GLboolean;
pub extern var __GLEW_ARB_color_buffer_float: GLboolean;
pub extern var __GLEW_ARB_compatibility: GLboolean;
pub extern var __GLEW_ARB_compressed_texture_pixel_storage: GLboolean;
pub extern var __GLEW_ARB_compute_shader: GLboolean;
pub extern var __GLEW_ARB_compute_variable_group_size: GLboolean;
pub extern var __GLEW_ARB_conditional_render_inverted: GLboolean;
pub extern var __GLEW_ARB_conservative_depth: GLboolean;
pub extern var __GLEW_ARB_copy_buffer: GLboolean;
pub extern var __GLEW_ARB_copy_image: GLboolean;
pub extern var __GLEW_ARB_cull_distance: GLboolean;
pub extern var __GLEW_ARB_debug_output: GLboolean;
pub extern var __GLEW_ARB_depth_buffer_float: GLboolean;
pub extern var __GLEW_ARB_depth_clamp: GLboolean;
pub extern var __GLEW_ARB_depth_texture: GLboolean;
pub extern var __GLEW_ARB_derivative_control: GLboolean;
pub extern var __GLEW_ARB_direct_state_access: GLboolean;
pub extern var __GLEW_ARB_draw_buffers: GLboolean;
pub extern var __GLEW_ARB_draw_buffers_blend: GLboolean;
pub extern var __GLEW_ARB_draw_elements_base_vertex: GLboolean;
pub extern var __GLEW_ARB_draw_indirect: GLboolean;
pub extern var __GLEW_ARB_draw_instanced: GLboolean;
pub extern var __GLEW_ARB_enhanced_layouts: GLboolean;
pub extern var __GLEW_ARB_explicit_attrib_location: GLboolean;
pub extern var __GLEW_ARB_explicit_uniform_location: GLboolean;
pub extern var __GLEW_ARB_fragment_coord_conventions: GLboolean;
pub extern var __GLEW_ARB_fragment_layer_viewport: GLboolean;
pub extern var __GLEW_ARB_fragment_program: GLboolean;
pub extern var __GLEW_ARB_fragment_program_shadow: GLboolean;
pub extern var __GLEW_ARB_fragment_shader: GLboolean;
pub extern var __GLEW_ARB_fragment_shader_interlock: GLboolean;
pub extern var __GLEW_ARB_framebuffer_no_attachments: GLboolean;
pub extern var __GLEW_ARB_framebuffer_object: GLboolean;
pub extern var __GLEW_ARB_framebuffer_sRGB: GLboolean;
pub extern var __GLEW_ARB_geometry_shader4: GLboolean;
pub extern var __GLEW_ARB_get_program_binary: GLboolean;
pub extern var __GLEW_ARB_get_texture_sub_image: GLboolean;
pub extern var __GLEW_ARB_gl_spirv: GLboolean;
pub extern var __GLEW_ARB_gpu_shader5: GLboolean;
pub extern var __GLEW_ARB_gpu_shader_fp64: GLboolean;
pub extern var __GLEW_ARB_gpu_shader_int64: GLboolean;
pub extern var __GLEW_ARB_half_float_pixel: GLboolean;
pub extern var __GLEW_ARB_half_float_vertex: GLboolean;
pub extern var __GLEW_ARB_imaging: GLboolean;
pub extern var __GLEW_ARB_indirect_parameters: GLboolean;
pub extern var __GLEW_ARB_instanced_arrays: GLboolean;
pub extern var __GLEW_ARB_internalformat_query: GLboolean;
pub extern var __GLEW_ARB_internalformat_query2: GLboolean;
pub extern var __GLEW_ARB_invalidate_subdata: GLboolean;
pub extern var __GLEW_ARB_map_buffer_alignment: GLboolean;
pub extern var __GLEW_ARB_map_buffer_range: GLboolean;
pub extern var __GLEW_ARB_matrix_palette: GLboolean;
pub extern var __GLEW_ARB_multi_bind: GLboolean;
pub extern var __GLEW_ARB_multi_draw_indirect: GLboolean;
pub extern var __GLEW_ARB_multisample: GLboolean;
pub extern var __GLEW_ARB_multitexture: GLboolean;
pub extern var __GLEW_ARB_occlusion_query: GLboolean;
pub extern var __GLEW_ARB_occlusion_query2: GLboolean;
pub extern var __GLEW_ARB_parallel_shader_compile: GLboolean;
pub extern var __GLEW_ARB_pipeline_statistics_query: GLboolean;
pub extern var __GLEW_ARB_pixel_buffer_object: GLboolean;
pub extern var __GLEW_ARB_point_parameters: GLboolean;
pub extern var __GLEW_ARB_point_sprite: GLboolean;
pub extern var __GLEW_ARB_polygon_offset_clamp: GLboolean;
pub extern var __GLEW_ARB_post_depth_coverage: GLboolean;
pub extern var __GLEW_ARB_program_interface_query: GLboolean;
pub extern var __GLEW_ARB_provoking_vertex: GLboolean;
pub extern var __GLEW_ARB_query_buffer_object: GLboolean;
pub extern var __GLEW_ARB_robust_buffer_access_behavior: GLboolean;
pub extern var __GLEW_ARB_robustness: GLboolean;
pub extern var __GLEW_ARB_robustness_application_isolation: GLboolean;
pub extern var __GLEW_ARB_robustness_share_group_isolation: GLboolean;
pub extern var __GLEW_ARB_sample_locations: GLboolean;
pub extern var __GLEW_ARB_sample_shading: GLboolean;
pub extern var __GLEW_ARB_sampler_objects: GLboolean;
pub extern var __GLEW_ARB_seamless_cube_map: GLboolean;
pub extern var __GLEW_ARB_seamless_cubemap_per_texture: GLboolean;
pub extern var __GLEW_ARB_separate_shader_objects: GLboolean;
pub extern var __GLEW_ARB_shader_atomic_counter_ops: GLboolean;
pub extern var __GLEW_ARB_shader_atomic_counters: GLboolean;
pub extern var __GLEW_ARB_shader_ballot: GLboolean;
pub extern var __GLEW_ARB_shader_bit_encoding: GLboolean;
pub extern var __GLEW_ARB_shader_clock: GLboolean;
pub extern var __GLEW_ARB_shader_draw_parameters: GLboolean;
pub extern var __GLEW_ARB_shader_group_vote: GLboolean;
pub extern var __GLEW_ARB_shader_image_load_store: GLboolean;
pub extern var __GLEW_ARB_shader_image_size: GLboolean;
pub extern var __GLEW_ARB_shader_objects: GLboolean;
pub extern var __GLEW_ARB_shader_precision: GLboolean;
pub extern var __GLEW_ARB_shader_stencil_export: GLboolean;
pub extern var __GLEW_ARB_shader_storage_buffer_object: GLboolean;
pub extern var __GLEW_ARB_shader_subroutine: GLboolean;
pub extern var __GLEW_ARB_shader_texture_image_samples: GLboolean;
pub extern var __GLEW_ARB_shader_texture_lod: GLboolean;
pub extern var __GLEW_ARB_shader_viewport_layer_array: GLboolean;
pub extern var __GLEW_ARB_shading_language_100: GLboolean;
pub extern var __GLEW_ARB_shading_language_420pack: GLboolean;
pub extern var __GLEW_ARB_shading_language_include: GLboolean;
pub extern var __GLEW_ARB_shading_language_packing: GLboolean;
pub extern var __GLEW_ARB_shadow: GLboolean;
pub extern var __GLEW_ARB_shadow_ambient: GLboolean;
pub extern var __GLEW_ARB_sparse_buffer: GLboolean;
pub extern var __GLEW_ARB_sparse_texture: GLboolean;
pub extern var __GLEW_ARB_sparse_texture2: GLboolean;
pub extern var __GLEW_ARB_sparse_texture_clamp: GLboolean;
pub extern var __GLEW_ARB_spirv_extensions: GLboolean;
pub extern var __GLEW_ARB_stencil_texturing: GLboolean;
pub extern var __GLEW_ARB_sync: GLboolean;
pub extern var __GLEW_ARB_tessellation_shader: GLboolean;
pub extern var __GLEW_ARB_texture_barrier: GLboolean;
pub extern var __GLEW_ARB_texture_border_clamp: GLboolean;
pub extern var __GLEW_ARB_texture_buffer_object: GLboolean;
pub extern var __GLEW_ARB_texture_buffer_object_rgb32: GLboolean;
pub extern var __GLEW_ARB_texture_buffer_range: GLboolean;
pub extern var __GLEW_ARB_texture_compression: GLboolean;
pub extern var __GLEW_ARB_texture_compression_bptc: GLboolean;
pub extern var __GLEW_ARB_texture_compression_rgtc: GLboolean;
pub extern var __GLEW_ARB_texture_cube_map: GLboolean;
pub extern var __GLEW_ARB_texture_cube_map_array: GLboolean;
pub extern var __GLEW_ARB_texture_env_add: GLboolean;
pub extern var __GLEW_ARB_texture_env_combine: GLboolean;
pub extern var __GLEW_ARB_texture_env_crossbar: GLboolean;
pub extern var __GLEW_ARB_texture_env_dot3: GLboolean;
pub extern var __GLEW_ARB_texture_filter_anisotropic: GLboolean;
pub extern var __GLEW_ARB_texture_filter_minmax: GLboolean;
pub extern var __GLEW_ARB_texture_float: GLboolean;
pub extern var __GLEW_ARB_texture_gather: GLboolean;
pub extern var __GLEW_ARB_texture_mirror_clamp_to_edge: GLboolean;
pub extern var __GLEW_ARB_texture_mirrored_repeat: GLboolean;
pub extern var __GLEW_ARB_texture_multisample: GLboolean;
pub extern var __GLEW_ARB_texture_non_power_of_two: GLboolean;
pub extern var __GLEW_ARB_texture_query_levels: GLboolean;
pub extern var __GLEW_ARB_texture_query_lod: GLboolean;
pub extern var __GLEW_ARB_texture_rectangle: GLboolean;
pub extern var __GLEW_ARB_texture_rg: GLboolean;
pub extern var __GLEW_ARB_texture_rgb10_a2ui: GLboolean;
pub extern var __GLEW_ARB_texture_stencil8: GLboolean;
pub extern var __GLEW_ARB_texture_storage: GLboolean;
pub extern var __GLEW_ARB_texture_storage_multisample: GLboolean;
pub extern var __GLEW_ARB_texture_swizzle: GLboolean;
pub extern var __GLEW_ARB_texture_view: GLboolean;
pub extern var __GLEW_ARB_timer_query: GLboolean;
pub extern var __GLEW_ARB_transform_feedback2: GLboolean;
pub extern var __GLEW_ARB_transform_feedback3: GLboolean;
pub extern var __GLEW_ARB_transform_feedback_instanced: GLboolean;
pub extern var __GLEW_ARB_transform_feedback_overflow_query: GLboolean;
pub extern var __GLEW_ARB_transpose_matrix: GLboolean;
pub extern var __GLEW_ARB_uniform_buffer_object: GLboolean;
pub extern var __GLEW_ARB_vertex_array_bgra: GLboolean;
pub extern var __GLEW_ARB_vertex_array_object: GLboolean;
pub extern var __GLEW_ARB_vertex_attrib_64bit: GLboolean;
pub extern var __GLEW_ARB_vertex_attrib_binding: GLboolean;
pub extern var __GLEW_ARB_vertex_blend: GLboolean;
pub extern var __GLEW_ARB_vertex_buffer_object: GLboolean;
pub extern var __GLEW_ARB_vertex_program: GLboolean;
pub extern var __GLEW_ARB_vertex_shader: GLboolean;
pub extern var __GLEW_ARB_vertex_type_10f_11f_11f_rev: GLboolean;
pub extern var __GLEW_ARB_vertex_type_2_10_10_10_rev: GLboolean;
pub extern var __GLEW_ARB_viewport_array: GLboolean;
pub extern var __GLEW_ARB_window_pos: GLboolean;
pub extern var __GLEW_ARM_mali_program_binary: GLboolean;
pub extern var __GLEW_ARM_mali_shader_binary: GLboolean;
pub extern var __GLEW_ARM_rgba8: GLboolean;
pub extern var __GLEW_ARM_shader_framebuffer_fetch: GLboolean;
pub extern var __GLEW_ARM_shader_framebuffer_fetch_depth_stencil: GLboolean;
pub extern var __GLEW_ARM_texture_unnormalized_coordinates: GLboolean;
pub extern var __GLEW_ATIX_point_sprites: GLboolean;
pub extern var __GLEW_ATIX_texture_env_combine3: GLboolean;
pub extern var __GLEW_ATIX_texture_env_route: GLboolean;
pub extern var __GLEW_ATIX_vertex_shader_output_point_size: GLboolean;
pub extern var __GLEW_ATI_draw_buffers: GLboolean;
pub extern var __GLEW_ATI_element_array: GLboolean;
pub extern var __GLEW_ATI_envmap_bumpmap: GLboolean;
pub extern var __GLEW_ATI_fragment_shader: GLboolean;
pub extern var __GLEW_ATI_map_object_buffer: GLboolean;
pub extern var __GLEW_ATI_meminfo: GLboolean;
pub extern var __GLEW_ATI_pn_triangles: GLboolean;
pub extern var __GLEW_ATI_separate_stencil: GLboolean;
pub extern var __GLEW_ATI_shader_texture_lod: GLboolean;
pub extern var __GLEW_ATI_text_fragment_shader: GLboolean;
pub extern var __GLEW_ATI_texture_compression_3dc: GLboolean;
pub extern var __GLEW_ATI_texture_env_combine3: GLboolean;
pub extern var __GLEW_ATI_texture_float: GLboolean;
pub extern var __GLEW_ATI_texture_mirror_once: GLboolean;
pub extern var __GLEW_ATI_vertex_array_object: GLboolean;
pub extern var __GLEW_ATI_vertex_attrib_array_object: GLboolean;
pub extern var __GLEW_ATI_vertex_streams: GLboolean;
pub extern var __GLEW_DMP_program_binary: GLboolean;
pub extern var __GLEW_DMP_shader_binary: GLboolean;
pub extern var __GLEW_EXT_422_pixels: GLboolean;
pub extern var __GLEW_EXT_Cg_shader: GLboolean;
pub extern var __GLEW_EXT_EGL_image_array: GLboolean;
pub extern var __GLEW_EXT_EGL_image_external_wrap_modes: GLboolean;
pub extern var __GLEW_EXT_EGL_image_storage: GLboolean;
pub extern var __GLEW_EXT_EGL_sync: GLboolean;
pub extern var __GLEW_EXT_YUV_target: GLboolean;
pub extern var __GLEW_EXT_abgr: GLboolean;
pub extern var __GLEW_EXT_base_instance: GLboolean;
pub extern var __GLEW_EXT_bgra: GLboolean;
pub extern var __GLEW_EXT_bindable_uniform: GLboolean;
pub extern var __GLEW_EXT_blend_color: GLboolean;
pub extern var __GLEW_EXT_blend_equation_separate: GLboolean;
pub extern var __GLEW_EXT_blend_func_extended: GLboolean;
pub extern var __GLEW_EXT_blend_func_separate: GLboolean;
pub extern var __GLEW_EXT_blend_logic_op: GLboolean;
pub extern var __GLEW_EXT_blend_minmax: GLboolean;
pub extern var __GLEW_EXT_blend_subtract: GLboolean;
pub extern var __GLEW_EXT_buffer_storage: GLboolean;
pub extern var __GLEW_EXT_clear_texture: GLboolean;
pub extern var __GLEW_EXT_clip_control: GLboolean;
pub extern var __GLEW_EXT_clip_cull_distance: GLboolean;
pub extern var __GLEW_EXT_clip_volume_hint: GLboolean;
pub extern var __GLEW_EXT_cmyka: GLboolean;
pub extern var __GLEW_EXT_color_buffer_float: GLboolean;
pub extern var __GLEW_EXT_color_buffer_half_float: GLboolean;
pub extern var __GLEW_EXT_color_subtable: GLboolean;
pub extern var __GLEW_EXT_compiled_vertex_array: GLboolean;
pub extern var __GLEW_EXT_compressed_ETC1_RGB8_sub_texture: GLboolean;
pub extern var __GLEW_EXT_conservative_depth: GLboolean;
pub extern var __GLEW_EXT_convolution: GLboolean;
pub extern var __GLEW_EXT_coordinate_frame: GLboolean;
pub extern var __GLEW_EXT_copy_image: GLboolean;
pub extern var __GLEW_EXT_copy_texture: GLboolean;
pub extern var __GLEW_EXT_cull_vertex: GLboolean;
pub extern var __GLEW_EXT_debug_label: GLboolean;
pub extern var __GLEW_EXT_debug_marker: GLboolean;
pub extern var __GLEW_EXT_depth_bounds_test: GLboolean;
pub extern var __GLEW_EXT_depth_clamp: GLboolean;
pub extern var __GLEW_EXT_direct_state_access: GLboolean;
pub extern var __GLEW_EXT_discard_framebuffer: GLboolean;
pub extern var __GLEW_EXT_disjoint_timer_query: GLboolean;
pub extern var __GLEW_EXT_draw_buffers: GLboolean;
pub extern var __GLEW_EXT_draw_buffers2: GLboolean;
pub extern var __GLEW_EXT_draw_buffers_indexed: GLboolean;
pub extern var __GLEW_EXT_draw_elements_base_vertex: GLboolean;
pub extern var __GLEW_EXT_draw_instanced: GLboolean;
pub extern var __GLEW_EXT_draw_range_elements: GLboolean;
pub extern var __GLEW_EXT_draw_transform_feedback: GLboolean;
pub extern var __GLEW_EXT_external_buffer: GLboolean;
pub extern var __GLEW_EXT_float_blend: GLboolean;
pub extern var __GLEW_EXT_fog_coord: GLboolean;
pub extern var __GLEW_EXT_frag_depth: GLboolean;
pub extern var __GLEW_EXT_fragment_lighting: GLboolean;
pub extern var __GLEW_EXT_framebuffer_blit: GLboolean;
pub extern var __GLEW_EXT_framebuffer_multisample: GLboolean;
pub extern var __GLEW_EXT_framebuffer_multisample_blit_scaled: GLboolean;
pub extern var __GLEW_EXT_framebuffer_object: GLboolean;
pub extern var __GLEW_EXT_framebuffer_sRGB: GLboolean;
pub extern var __GLEW_EXT_geometry_point_size: GLboolean;
pub extern var __GLEW_EXT_geometry_shader: GLboolean;
pub extern var __GLEW_EXT_geometry_shader4: GLboolean;
pub extern var __GLEW_EXT_gpu_program_parameters: GLboolean;
pub extern var __GLEW_EXT_gpu_shader4: GLboolean;
pub extern var __GLEW_EXT_gpu_shader5: GLboolean;
pub extern var __GLEW_EXT_histogram: GLboolean;
pub extern var __GLEW_EXT_index_array_formats: GLboolean;
pub extern var __GLEW_EXT_index_func: GLboolean;
pub extern var __GLEW_EXT_index_material: GLboolean;
pub extern var __GLEW_EXT_index_texture: GLboolean;
pub extern var __GLEW_EXT_instanced_arrays: GLboolean;
pub extern var __GLEW_EXT_light_texture: GLboolean;
pub extern var __GLEW_EXT_map_buffer_range: GLboolean;
pub extern var __GLEW_EXT_memory_object: GLboolean;
pub extern var __GLEW_EXT_memory_object_fd: GLboolean;
pub extern var __GLEW_EXT_memory_object_win32: GLboolean;
pub extern var __GLEW_EXT_misc_attribute: GLboolean;
pub extern var __GLEW_EXT_multi_draw_arrays: GLboolean;
pub extern var __GLEW_EXT_multi_draw_indirect: GLboolean;
pub extern var __GLEW_EXT_multiple_textures: GLboolean;
pub extern var __GLEW_EXT_multisample: GLboolean;
pub extern var __GLEW_EXT_multisample_compatibility: GLboolean;
pub extern var __GLEW_EXT_multisampled_render_to_texture: GLboolean;
pub extern var __GLEW_EXT_multisampled_render_to_texture2: GLboolean;
pub extern var __GLEW_EXT_multiview_draw_buffers: GLboolean;
pub extern var __GLEW_EXT_multiview_tessellation_geometry_shader: GLboolean;
pub extern var __GLEW_EXT_multiview_texture_multisample: GLboolean;
pub extern var __GLEW_EXT_multiview_timer_query: GLboolean;
pub extern var __GLEW_EXT_occlusion_query_boolean: GLboolean;
pub extern var __GLEW_EXT_packed_depth_stencil: GLboolean;
pub extern var __GLEW_EXT_packed_float: GLboolean;
pub extern var __GLEW_EXT_packed_pixels: GLboolean;
pub extern var __GLEW_EXT_paletted_texture: GLboolean;
pub extern var __GLEW_EXT_pixel_buffer_object: GLboolean;
pub extern var __GLEW_EXT_pixel_transform: GLboolean;
pub extern var __GLEW_EXT_pixel_transform_color_table: GLboolean;
pub extern var __GLEW_EXT_point_parameters: GLboolean;
pub extern var __GLEW_EXT_polygon_offset: GLboolean;
pub extern var __GLEW_EXT_polygon_offset_clamp: GLboolean;
pub extern var __GLEW_EXT_post_depth_coverage: GLboolean;
pub extern var __GLEW_EXT_primitive_bounding_box: GLboolean;
pub extern var __GLEW_EXT_protected_textures: GLboolean;
pub extern var __GLEW_EXT_provoking_vertex: GLboolean;
pub extern var __GLEW_EXT_pvrtc_sRGB: GLboolean;
pub extern var __GLEW_EXT_raster_multisample: GLboolean;
pub extern var __GLEW_EXT_read_format_bgra: GLboolean;
pub extern var __GLEW_EXT_render_snorm: GLboolean;
pub extern var __GLEW_EXT_rescale_normal: GLboolean;
pub extern var __GLEW_EXT_robustness: GLboolean;
pub extern var __GLEW_EXT_sRGB: GLboolean;
pub extern var __GLEW_EXT_sRGB_write_control: GLboolean;
pub extern var __GLEW_EXT_scene_marker: GLboolean;
pub extern var __GLEW_EXT_secondary_color: GLboolean;
pub extern var __GLEW_EXT_semaphore: GLboolean;
pub extern var __GLEW_EXT_semaphore_fd: GLboolean;
pub extern var __GLEW_EXT_semaphore_win32: GLboolean;
pub extern var __GLEW_EXT_separate_shader_objects: GLboolean;
pub extern var __GLEW_EXT_separate_specular_color: GLboolean;
pub extern var __GLEW_EXT_shader_framebuffer_fetch: GLboolean;
pub extern var __GLEW_EXT_shader_framebuffer_fetch_non_coherent: GLboolean;
pub extern var __GLEW_EXT_shader_group_vote: GLboolean;
pub extern var __GLEW_EXT_shader_image_load_formatted: GLboolean;
pub extern var __GLEW_EXT_shader_image_load_store: GLboolean;
pub extern var __GLEW_EXT_shader_implicit_conversions: GLboolean;
pub extern var __GLEW_EXT_shader_integer_mix: GLboolean;
pub extern var __GLEW_EXT_shader_io_blocks: GLboolean;
pub extern var __GLEW_EXT_shader_non_constant_global_initializers: GLboolean;
pub extern var __GLEW_EXT_shader_pixel_local_storage: GLboolean;
pub extern var __GLEW_EXT_shader_pixel_local_storage2: GLboolean;
pub extern var __GLEW_EXT_shader_texture_lod: GLboolean;
pub extern var __GLEW_EXT_shadow_funcs: GLboolean;
pub extern var __GLEW_EXT_shadow_samplers: GLboolean;
pub extern var __GLEW_EXT_shared_texture_palette: GLboolean;
pub extern var __GLEW_EXT_sparse_texture: GLboolean;
pub extern var __GLEW_EXT_sparse_texture2: GLboolean;
pub extern var __GLEW_EXT_static_vertex_array: GLboolean;
pub extern var __GLEW_EXT_stencil_clear_tag: GLboolean;
pub extern var __GLEW_EXT_stencil_two_side: GLboolean;
pub extern var __GLEW_EXT_stencil_wrap: GLboolean;
pub extern var __GLEW_EXT_subtexture: GLboolean;
pub extern var __GLEW_EXT_tessellation_point_size: GLboolean;
pub extern var __GLEW_EXT_tessellation_shader: GLboolean;
pub extern var __GLEW_EXT_texture: GLboolean;
pub extern var __GLEW_EXT_texture3D: GLboolean;
pub extern var __GLEW_EXT_texture_array: GLboolean;
pub extern var __GLEW_EXT_texture_border_clamp: GLboolean;
pub extern var __GLEW_EXT_texture_buffer: GLboolean;
pub extern var __GLEW_EXT_texture_buffer_object: GLboolean;
pub extern var __GLEW_EXT_texture_compression_astc_decode_mode: GLboolean;
pub extern var __GLEW_EXT_texture_compression_astc_decode_mode_rgb9e5: GLboolean;
pub extern var __GLEW_EXT_texture_compression_bptc: GLboolean;
pub extern var __GLEW_EXT_texture_compression_dxt1: GLboolean;
pub extern var __GLEW_EXT_texture_compression_latc: GLboolean;
pub extern var __GLEW_EXT_texture_compression_rgtc: GLboolean;
pub extern var __GLEW_EXT_texture_compression_s3tc: GLboolean;
pub extern var __GLEW_EXT_texture_compression_s3tc_srgb: GLboolean;
pub extern var __GLEW_EXT_texture_cube_map: GLboolean;
pub extern var __GLEW_EXT_texture_cube_map_array: GLboolean;
pub extern var __GLEW_EXT_texture_edge_clamp: GLboolean;
pub extern var __GLEW_EXT_texture_env: GLboolean;
pub extern var __GLEW_EXT_texture_env_add: GLboolean;
pub extern var __GLEW_EXT_texture_env_combine: GLboolean;
pub extern var __GLEW_EXT_texture_env_dot3: GLboolean;
pub extern var __GLEW_EXT_texture_filter_anisotropic: GLboolean;
pub extern var __GLEW_EXT_texture_filter_minmax: GLboolean;
pub extern var __GLEW_EXT_texture_format_BGRA8888: GLboolean;
pub extern var __GLEW_EXT_texture_format_sRGB_override: GLboolean;
pub extern var __GLEW_EXT_texture_integer: GLboolean;
pub extern var __GLEW_EXT_texture_lod_bias: GLboolean;
pub extern var __GLEW_EXT_texture_mirror_clamp: GLboolean;
pub extern var __GLEW_EXT_texture_mirror_clamp_to_edge: GLboolean;
pub extern var __GLEW_EXT_texture_norm16: GLboolean;
pub extern var __GLEW_EXT_texture_object: GLboolean;
pub extern var __GLEW_EXT_texture_perturb_normal: GLboolean;
pub extern var __GLEW_EXT_texture_query_lod: GLboolean;
pub extern var __GLEW_EXT_texture_rectangle: GLboolean;
pub extern var __GLEW_EXT_texture_rg: GLboolean;
pub extern var __GLEW_EXT_texture_sRGB: GLboolean;
pub extern var __GLEW_EXT_texture_sRGB_R8: GLboolean;
pub extern var __GLEW_EXT_texture_sRGB_RG8: GLboolean;
pub extern var __GLEW_EXT_texture_sRGB_decode: GLboolean;
pub extern var __GLEW_EXT_texture_shadow_lod: GLboolean;
pub extern var __GLEW_EXT_texture_shared_exponent: GLboolean;
pub extern var __GLEW_EXT_texture_snorm: GLboolean;
pub extern var __GLEW_EXT_texture_storage: GLboolean;
pub extern var __GLEW_EXT_texture_swizzle: GLboolean;
pub extern var __GLEW_EXT_texture_type_2_10_10_10_REV: GLboolean;
pub extern var __GLEW_EXT_texture_view: GLboolean;
pub extern var __GLEW_EXT_timer_query: GLboolean;
pub extern var __GLEW_EXT_transform_feedback: GLboolean;
pub extern var __GLEW_EXT_unpack_subimage: GLboolean;
pub extern var __GLEW_EXT_vertex_array: GLboolean;
pub extern var __GLEW_EXT_vertex_array_bgra: GLboolean;
pub extern var __GLEW_EXT_vertex_array_setXXX: GLboolean;
pub extern var __GLEW_EXT_vertex_attrib_64bit: GLboolean;
pub extern var __GLEW_EXT_vertex_shader: GLboolean;
pub extern var __GLEW_EXT_vertex_weighting: GLboolean;
pub extern var __GLEW_EXT_win32_keyed_mutex: GLboolean;
pub extern var __GLEW_EXT_window_rectangles: GLboolean;
pub extern var __GLEW_EXT_x11_sync_object: GLboolean;
pub extern var __GLEW_FJ_shader_binary_GCCSO: GLboolean;
pub extern var __GLEW_GREMEDY_frame_terminator: GLboolean;
pub extern var __GLEW_GREMEDY_string_marker: GLboolean;
pub extern var __GLEW_HP_convolution_border_modes: GLboolean;
pub extern var __GLEW_HP_image_transform: GLboolean;
pub extern var __GLEW_HP_occlusion_test: GLboolean;
pub extern var __GLEW_HP_texture_lighting: GLboolean;
pub extern var __GLEW_IBM_cull_vertex: GLboolean;
pub extern var __GLEW_IBM_multimode_draw_arrays: GLboolean;
pub extern var __GLEW_IBM_rasterpos_clip: GLboolean;
pub extern var __GLEW_IBM_static_data: GLboolean;
pub extern var __GLEW_IBM_texture_mirrored_repeat: GLboolean;
pub extern var __GLEW_IBM_vertex_array_lists: GLboolean;
pub extern var __GLEW_IMG_bindless_texture: GLboolean;
pub extern var __GLEW_IMG_framebuffer_downsample: GLboolean;
pub extern var __GLEW_IMG_multisampled_render_to_texture: GLboolean;
pub extern var __GLEW_IMG_program_binary: GLboolean;
pub extern var __GLEW_IMG_read_format: GLboolean;
pub extern var __GLEW_IMG_shader_binary: GLboolean;
pub extern var __GLEW_IMG_texture_compression_pvrtc: GLboolean;
pub extern var __GLEW_IMG_texture_compression_pvrtc2: GLboolean;
pub extern var __GLEW_IMG_texture_env_enhanced_fixed_function: GLboolean;
pub extern var __GLEW_IMG_texture_filter_cubic: GLboolean;
pub extern var __GLEW_INGR_color_clamp: GLboolean;
pub extern var __GLEW_INGR_interlace_read: GLboolean;
pub extern var __GLEW_INTEL_blackhole_render: GLboolean;
pub extern var __GLEW_INTEL_conservative_rasterization: GLboolean;
pub extern var __GLEW_INTEL_fragment_shader_ordering: GLboolean;
pub extern var __GLEW_INTEL_framebuffer_CMAA: GLboolean;
pub extern var __GLEW_INTEL_map_texture: GLboolean;
pub extern var __GLEW_INTEL_parallel_arrays: GLboolean;
pub extern var __GLEW_INTEL_performance_query: GLboolean;
pub extern var __GLEW_INTEL_shader_integer_functions2: GLboolean;
pub extern var __GLEW_INTEL_texture_scissor: GLboolean;
pub extern var __GLEW_KHR_blend_equation_advanced: GLboolean;
pub extern var __GLEW_KHR_blend_equation_advanced_coherent: GLboolean;
pub extern var __GLEW_KHR_context_flush_control: GLboolean;
pub extern var __GLEW_KHR_debug: GLboolean;
pub extern var __GLEW_KHR_no_error: GLboolean;
pub extern var __GLEW_KHR_parallel_shader_compile: GLboolean;
pub extern var __GLEW_KHR_robust_buffer_access_behavior: GLboolean;
pub extern var __GLEW_KHR_robustness: GLboolean;
pub extern var __GLEW_KHR_shader_subgroup: GLboolean;
pub extern var __GLEW_KHR_texture_compression_astc_hdr: GLboolean;
pub extern var __GLEW_KHR_texture_compression_astc_ldr: GLboolean;
pub extern var __GLEW_KHR_texture_compression_astc_sliced_3d: GLboolean;
pub extern var __GLEW_KTX_buffer_region: GLboolean;
pub extern var __GLEW_MESAX_texture_stack: GLboolean;
pub extern var __GLEW_MESA_framebuffer_flip_y: GLboolean;
pub extern var __GLEW_MESA_pack_invert: GLboolean;
pub extern var __GLEW_MESA_program_binary_formats: GLboolean;
pub extern var __GLEW_MESA_resize_buffers: GLboolean;
pub extern var __GLEW_MESA_shader_integer_functions: GLboolean;
pub extern var __GLEW_MESA_tile_raster_order: GLboolean;
pub extern var __GLEW_MESA_window_pos: GLboolean;
pub extern var __GLEW_MESA_ycbcr_texture: GLboolean;
pub extern var __GLEW_NVX_blend_equation_advanced_multi_draw_buffers: GLboolean;
pub extern var __GLEW_NVX_conditional_render: GLboolean;
pub extern var __GLEW_NVX_gpu_memory_info: GLboolean;
pub extern var __GLEW_NVX_gpu_multicast2: GLboolean;
pub extern var __GLEW_NVX_linked_gpu_multicast: GLboolean;
pub extern var __GLEW_NVX_progress_fence: GLboolean;
pub extern var __GLEW_NV_3dvision_settings: GLboolean;
pub extern var __GLEW_NV_EGL_stream_consumer_external: GLboolean;
pub extern var __GLEW_NV_alpha_to_coverage_dither_control: GLboolean;
pub extern var __GLEW_NV_bgr: GLboolean;
pub extern var __GLEW_NV_bindless_multi_draw_indirect: GLboolean;
pub extern var __GLEW_NV_bindless_multi_draw_indirect_count: GLboolean;
pub extern var __GLEW_NV_bindless_texture: GLboolean;
pub extern var __GLEW_NV_blend_equation_advanced: GLboolean;
pub extern var __GLEW_NV_blend_equation_advanced_coherent: GLboolean;
pub extern var __GLEW_NV_blend_minmax_factor: GLboolean;
pub extern var __GLEW_NV_blend_square: GLboolean;
pub extern var __GLEW_NV_clip_space_w_scaling: GLboolean;
pub extern var __GLEW_NV_command_list: GLboolean;
pub extern var __GLEW_NV_compute_program5: GLboolean;
pub extern var __GLEW_NV_compute_shader_derivatives: GLboolean;
pub extern var __GLEW_NV_conditional_render: GLboolean;
pub extern var __GLEW_NV_conservative_raster: GLboolean;
pub extern var __GLEW_NV_conservative_raster_dilate: GLboolean;
pub extern var __GLEW_NV_conservative_raster_pre_snap: GLboolean;
pub extern var __GLEW_NV_conservative_raster_pre_snap_triangles: GLboolean;
pub extern var __GLEW_NV_conservative_raster_underestimation: GLboolean;
pub extern var __GLEW_NV_copy_buffer: GLboolean;
pub extern var __GLEW_NV_copy_depth_to_color: GLboolean;
pub extern var __GLEW_NV_copy_image: GLboolean;
pub extern var __GLEW_NV_deep_texture3D: GLboolean;
pub extern var __GLEW_NV_depth_buffer_float: GLboolean;
pub extern var __GLEW_NV_depth_clamp: GLboolean;
pub extern var __GLEW_NV_depth_nonlinear: GLboolean;
pub extern var __GLEW_NV_depth_range_unclamped: GLboolean;
pub extern var __GLEW_NV_draw_buffers: GLboolean;
pub extern var __GLEW_NV_draw_instanced: GLboolean;
pub extern var __GLEW_NV_draw_texture: GLboolean;
pub extern var __GLEW_NV_draw_vulkan_image: GLboolean;
pub extern var __GLEW_NV_evaluators: GLboolean;
pub extern var __GLEW_NV_explicit_attrib_location: GLboolean;
pub extern var __GLEW_NV_explicit_multisample: GLboolean;
pub extern var __GLEW_NV_fbo_color_attachments: GLboolean;
pub extern var __GLEW_NV_fence: GLboolean;
pub extern var __GLEW_NV_fill_rectangle: GLboolean;
pub extern var __GLEW_NV_float_buffer: GLboolean;
pub extern var __GLEW_NV_fog_distance: GLboolean;
pub extern var __GLEW_NV_fragment_coverage_to_color: GLboolean;
pub extern var __GLEW_NV_fragment_program: GLboolean;
pub extern var __GLEW_NV_fragment_program2: GLboolean;
pub extern var __GLEW_NV_fragment_program4: GLboolean;
pub extern var __GLEW_NV_fragment_program_option: GLboolean;
pub extern var __GLEW_NV_fragment_shader_barycentric: GLboolean;
pub extern var __GLEW_NV_fragment_shader_interlock: GLboolean;
pub extern var __GLEW_NV_framebuffer_blit: GLboolean;
pub extern var __GLEW_NV_framebuffer_mixed_samples: GLboolean;
pub extern var __GLEW_NV_framebuffer_multisample: GLboolean;
pub extern var __GLEW_NV_framebuffer_multisample_coverage: GLboolean;
pub extern var __GLEW_NV_generate_mipmap_sRGB: GLboolean;
pub extern var __GLEW_NV_geometry_program4: GLboolean;
pub extern var __GLEW_NV_geometry_shader4: GLboolean;
pub extern var __GLEW_NV_geometry_shader_passthrough: GLboolean;
pub extern var __GLEW_NV_gpu_multicast: GLboolean;
pub extern var __GLEW_NV_gpu_program4: GLboolean;
pub extern var __GLEW_NV_gpu_program5: GLboolean;
pub extern var __GLEW_NV_gpu_program5_mem_extended: GLboolean;
pub extern var __GLEW_NV_gpu_program_fp64: GLboolean;
pub extern var __GLEW_NV_gpu_shader5: GLboolean;
pub extern var __GLEW_NV_half_float: GLboolean;
pub extern var __GLEW_NV_image_formats: GLboolean;
pub extern var __GLEW_NV_instanced_arrays: GLboolean;
pub extern var __GLEW_NV_internalformat_sample_query: GLboolean;
pub extern var __GLEW_NV_light_max_exponent: GLboolean;
pub extern var __GLEW_NV_memory_attachment: GLboolean;
pub extern var __GLEW_NV_mesh_shader: GLboolean;
pub extern var __GLEW_NV_multisample_coverage: GLboolean;
pub extern var __GLEW_NV_multisample_filter_hint: GLboolean;
pub extern var __GLEW_NV_non_square_matrices: GLboolean;
pub extern var __GLEW_NV_occlusion_query: GLboolean;
pub extern var __GLEW_NV_pack_subimage: GLboolean;
pub extern var __GLEW_NV_packed_depth_stencil: GLboolean;
pub extern var __GLEW_NV_packed_float: GLboolean;
pub extern var __GLEW_NV_packed_float_linear: GLboolean;
pub extern var __GLEW_NV_parameter_buffer_object: GLboolean;
pub extern var __GLEW_NV_parameter_buffer_object2: GLboolean;
pub extern var __GLEW_NV_path_rendering: GLboolean;
pub extern var __GLEW_NV_path_rendering_shared_edge: GLboolean;
pub extern var __GLEW_NV_pixel_buffer_object: GLboolean;
pub extern var __GLEW_NV_pixel_data_range: GLboolean;
pub extern var __GLEW_NV_platform_binary: GLboolean;
pub extern var __GLEW_NV_point_sprite: GLboolean;
pub extern var __GLEW_NV_polygon_mode: GLboolean;
pub extern var __GLEW_NV_present_video: GLboolean;
pub extern var __GLEW_NV_primitive_restart: GLboolean;
pub extern var __GLEW_NV_query_resource_tag: GLboolean;
pub extern var __GLEW_NV_read_buffer: GLboolean;
pub extern var __GLEW_NV_read_buffer_front: GLboolean;
pub extern var __GLEW_NV_read_depth: GLboolean;
pub extern var __GLEW_NV_read_depth_stencil: GLboolean;
pub extern var __GLEW_NV_read_stencil: GLboolean;
pub extern var __GLEW_NV_register_combiners: GLboolean;
pub extern var __GLEW_NV_register_combiners2: GLboolean;
pub extern var __GLEW_NV_representative_fragment_test: GLboolean;
pub extern var __GLEW_NV_robustness_video_memory_purge: GLboolean;
pub extern var __GLEW_NV_sRGB_formats: GLboolean;
pub extern var __GLEW_NV_sample_locations: GLboolean;
pub extern var __GLEW_NV_sample_mask_override_coverage: GLboolean;
pub extern var __GLEW_NV_scissor_exclusive: GLboolean;
pub extern var __GLEW_NV_shader_atomic_counters: GLboolean;
pub extern var __GLEW_NV_shader_atomic_float: GLboolean;
pub extern var __GLEW_NV_shader_atomic_float64: GLboolean;
pub extern var __GLEW_NV_shader_atomic_fp16_vector: GLboolean;
pub extern var __GLEW_NV_shader_atomic_int64: GLboolean;
pub extern var __GLEW_NV_shader_buffer_load: GLboolean;
pub extern var __GLEW_NV_shader_noperspective_interpolation: GLboolean;
pub extern var __GLEW_NV_shader_storage_buffer_object: GLboolean;
pub extern var __GLEW_NV_shader_subgroup_partitioned: GLboolean;
pub extern var __GLEW_NV_shader_texture_footprint: GLboolean;
pub extern var __GLEW_NV_shader_thread_group: GLboolean;
pub extern var __GLEW_NV_shader_thread_shuffle: GLboolean;
pub extern var __GLEW_NV_shading_rate_image: GLboolean;
pub extern var __GLEW_NV_shadow_samplers_array: GLboolean;
pub extern var __GLEW_NV_shadow_samplers_cube: GLboolean;
pub extern var __GLEW_NV_stereo_view_rendering: GLboolean;
pub extern var __GLEW_NV_tessellation_program5: GLboolean;
pub extern var __GLEW_NV_texgen_emboss: GLboolean;
pub extern var __GLEW_NV_texgen_reflection: GLboolean;
pub extern var __GLEW_NV_texture_array: GLboolean;
pub extern var __GLEW_NV_texture_barrier: GLboolean;
pub extern var __GLEW_NV_texture_border_clamp: GLboolean;
pub extern var __GLEW_NV_texture_compression_latc: GLboolean;
pub extern var __GLEW_NV_texture_compression_s3tc: GLboolean;
pub extern var __GLEW_NV_texture_compression_s3tc_update: GLboolean;
pub extern var __GLEW_NV_texture_compression_vtc: GLboolean;
pub extern var __GLEW_NV_texture_env_combine4: GLboolean;
pub extern var __GLEW_NV_texture_expand_normal: GLboolean;
pub extern var __GLEW_NV_texture_multisample: GLboolean;
pub extern var __GLEW_NV_texture_npot_2D_mipmap: GLboolean;
pub extern var __GLEW_NV_texture_rectangle: GLboolean;
pub extern var __GLEW_NV_texture_rectangle_compressed: GLboolean;
pub extern var __GLEW_NV_texture_shader: GLboolean;
pub extern var __GLEW_NV_texture_shader2: GLboolean;
pub extern var __GLEW_NV_texture_shader3: GLboolean;
pub extern var __GLEW_NV_transform_feedback: GLboolean;
pub extern var __GLEW_NV_transform_feedback2: GLboolean;
pub extern var __GLEW_NV_uniform_buffer_unified_memory: GLboolean;
pub extern var __GLEW_NV_vdpau_interop: GLboolean;
pub extern var __GLEW_NV_vdpau_interop2: GLboolean;
pub extern var __GLEW_NV_vertex_array_range: GLboolean;
pub extern var __GLEW_NV_vertex_array_range2: GLboolean;
pub extern var __GLEW_NV_vertex_attrib_integer_64bit: GLboolean;
pub extern var __GLEW_NV_vertex_buffer_unified_memory: GLboolean;
pub extern var __GLEW_NV_vertex_program: GLboolean;
pub extern var __GLEW_NV_vertex_program1_1: GLboolean;
pub extern var __GLEW_NV_vertex_program2: GLboolean;
pub extern var __GLEW_NV_vertex_program2_option: GLboolean;
pub extern var __GLEW_NV_vertex_program3: GLboolean;
pub extern var __GLEW_NV_vertex_program4: GLboolean;
pub extern var __GLEW_NV_video_capture: GLboolean;
pub extern var __GLEW_NV_viewport_array: GLboolean;
pub extern var __GLEW_NV_viewport_array2: GLboolean;
pub extern var __GLEW_NV_viewport_swizzle: GLboolean;
pub extern var __GLEW_OES_EGL_image: GLboolean;
pub extern var __GLEW_OES_EGL_image_external: GLboolean;
pub extern var __GLEW_OES_EGL_image_external_essl3: GLboolean;
pub extern var __GLEW_OES_blend_equation_separate: GLboolean;
pub extern var __GLEW_OES_blend_func_separate: GLboolean;
pub extern var __GLEW_OES_blend_subtract: GLboolean;
pub extern var __GLEW_OES_byte_coordinates: GLboolean;
pub extern var __GLEW_OES_compressed_ETC1_RGB8_texture: GLboolean;
pub extern var __GLEW_OES_compressed_paletted_texture: GLboolean;
pub extern var __GLEW_OES_copy_image: GLboolean;
pub extern var __GLEW_OES_depth24: GLboolean;
pub extern var __GLEW_OES_depth32: GLboolean;
pub extern var __GLEW_OES_depth_texture: GLboolean;
pub extern var __GLEW_OES_depth_texture_cube_map: GLboolean;
pub extern var __GLEW_OES_draw_buffers_indexed: GLboolean;
pub extern var __GLEW_OES_draw_texture: GLboolean;
pub extern var __GLEW_OES_element_index_uint: GLboolean;
pub extern var __GLEW_OES_extended_matrix_palette: GLboolean;
pub extern var __GLEW_OES_fbo_render_mipmap: GLboolean;
pub extern var __GLEW_OES_fragment_precision_high: GLboolean;
pub extern var __GLEW_OES_framebuffer_object: GLboolean;
pub extern var __GLEW_OES_geometry_point_size: GLboolean;
pub extern var __GLEW_OES_geometry_shader: GLboolean;
pub extern var __GLEW_OES_get_program_binary: GLboolean;
pub extern var __GLEW_OES_gpu_shader5: GLboolean;
pub extern var __GLEW_OES_mapbuffer: GLboolean;
pub extern var __GLEW_OES_matrix_get: GLboolean;
pub extern var __GLEW_OES_matrix_palette: GLboolean;
pub extern var __GLEW_OES_packed_depth_stencil: GLboolean;
pub extern var __GLEW_OES_point_size_array: GLboolean;
pub extern var __GLEW_OES_point_sprite: GLboolean;
pub extern var __GLEW_OES_read_format: GLboolean;
pub extern var __GLEW_OES_required_internalformat: GLboolean;
pub extern var __GLEW_OES_rgb8_rgba8: GLboolean;
pub extern var __GLEW_OES_sample_shading: GLboolean;
pub extern var __GLEW_OES_sample_variables: GLboolean;
pub extern var __GLEW_OES_shader_image_atomic: GLboolean;
pub extern var __GLEW_OES_shader_io_blocks: GLboolean;
pub extern var __GLEW_OES_shader_multisample_interpolation: GLboolean;
pub extern var __GLEW_OES_single_precision: GLboolean;
pub extern var __GLEW_OES_standard_derivatives: GLboolean;
pub extern var __GLEW_OES_stencil1: GLboolean;
pub extern var __GLEW_OES_stencil4: GLboolean;
pub extern var __GLEW_OES_stencil8: GLboolean;
pub extern var __GLEW_OES_surfaceless_context: GLboolean;
pub extern var __GLEW_OES_tessellation_point_size: GLboolean;
pub extern var __GLEW_OES_tessellation_shader: GLboolean;
pub extern var __GLEW_OES_texture_3D: GLboolean;
pub extern var __GLEW_OES_texture_border_clamp: GLboolean;
pub extern var __GLEW_OES_texture_buffer: GLboolean;
pub extern var __GLEW_OES_texture_compression_astc: GLboolean;
pub extern var __GLEW_OES_texture_cube_map: GLboolean;
pub extern var __GLEW_OES_texture_cube_map_array: GLboolean;
pub extern var __GLEW_OES_texture_env_crossbar: GLboolean;
pub extern var __GLEW_OES_texture_mirrored_repeat: GLboolean;
pub extern var __GLEW_OES_texture_npot: GLboolean;
pub extern var __GLEW_OES_texture_stencil8: GLboolean;
pub extern var __GLEW_OES_texture_storage_multisample_2d_array: GLboolean;
pub extern var __GLEW_OES_texture_view: GLboolean;
pub extern var __GLEW_OES_vertex_array_object: GLboolean;
pub extern var __GLEW_OES_vertex_half_float: GLboolean;
pub extern var __GLEW_OES_vertex_type_10_10_10_2: GLboolean;
pub extern var __GLEW_OML_interlace: GLboolean;
pub extern var __GLEW_OML_resample: GLboolean;
pub extern var __GLEW_OML_subsample: GLboolean;
pub extern var __GLEW_OVR_multiview: GLboolean;
pub extern var __GLEW_OVR_multiview2: GLboolean;
pub extern var __GLEW_OVR_multiview_multisampled_render_to_texture: GLboolean;
pub extern var __GLEW_PGI_misc_hints: GLboolean;
pub extern var __GLEW_PGI_vertex_hints: GLboolean;
pub extern var __GLEW_QCOM_YUV_texture_gather: GLboolean;
pub extern var __GLEW_QCOM_alpha_test: GLboolean;
pub extern var __GLEW_QCOM_binning_control: GLboolean;
pub extern var __GLEW_QCOM_driver_control: GLboolean;
pub extern var __GLEW_QCOM_extended_get: GLboolean;
pub extern var __GLEW_QCOM_extended_get2: GLboolean;
pub extern var __GLEW_QCOM_framebuffer_foveated: GLboolean;
pub extern var __GLEW_QCOM_perfmon_global_mode: GLboolean;
pub extern var __GLEW_QCOM_shader_framebuffer_fetch_noncoherent: GLboolean;
pub extern var __GLEW_QCOM_shader_framebuffer_fetch_rate: GLboolean;
pub extern var __GLEW_QCOM_texture_foveated: GLboolean;
pub extern var __GLEW_QCOM_texture_foveated_subsampled_layout: GLboolean;
pub extern var __GLEW_QCOM_tiled_rendering: GLboolean;
pub extern var __GLEW_QCOM_writeonly_rendering: GLboolean;
pub extern var __GLEW_REGAL_ES1_0_compatibility: GLboolean;
pub extern var __GLEW_REGAL_ES1_1_compatibility: GLboolean;
pub extern var __GLEW_REGAL_enable: GLboolean;
pub extern var __GLEW_REGAL_error_string: GLboolean;
pub extern var __GLEW_REGAL_extension_query: GLboolean;
pub extern var __GLEW_REGAL_log: GLboolean;
pub extern var __GLEW_REGAL_proc_address: GLboolean;
pub extern var __GLEW_REND_screen_coordinates: GLboolean;
pub extern var __GLEW_S3_s3tc: GLboolean;
pub extern var __GLEW_SGIS_clip_band_hint: GLboolean;
pub extern var __GLEW_SGIS_color_range: GLboolean;
pub extern var __GLEW_SGIS_detail_texture: GLboolean;
pub extern var __GLEW_SGIS_fog_function: GLboolean;
pub extern var __GLEW_SGIS_generate_mipmap: GLboolean;
pub extern var __GLEW_SGIS_line_texgen: GLboolean;
pub extern var __GLEW_SGIS_multisample: GLboolean;
pub extern var __GLEW_SGIS_multitexture: GLboolean;
pub extern var __GLEW_SGIS_pixel_texture: GLboolean;
pub extern var __GLEW_SGIS_point_line_texgen: GLboolean;
pub extern var __GLEW_SGIS_shared_multisample: GLboolean;
pub extern var __GLEW_SGIS_sharpen_texture: GLboolean;
pub extern var __GLEW_SGIS_texture4D: GLboolean;
pub extern var __GLEW_SGIS_texture_border_clamp: GLboolean;
pub extern var __GLEW_SGIS_texture_edge_clamp: GLboolean;
pub extern var __GLEW_SGIS_texture_filter4: GLboolean;
pub extern var __GLEW_SGIS_texture_lod: GLboolean;
pub extern var __GLEW_SGIS_texture_select: GLboolean;
pub extern var __GLEW_SGIX_async: GLboolean;
pub extern var __GLEW_SGIX_async_histogram: GLboolean;
pub extern var __GLEW_SGIX_async_pixel: GLboolean;
pub extern var __GLEW_SGIX_bali_g_instruments: GLboolean;
pub extern var __GLEW_SGIX_bali_r_instruments: GLboolean;
pub extern var __GLEW_SGIX_bali_timer_instruments: GLboolean;
pub extern var __GLEW_SGIX_blend_alpha_minmax: GLboolean;
pub extern var __GLEW_SGIX_blend_cadd: GLboolean;
pub extern var __GLEW_SGIX_blend_cmultiply: GLboolean;
pub extern var __GLEW_SGIX_calligraphic_fragment: GLboolean;
pub extern var __GLEW_SGIX_clipmap: GLboolean;
pub extern var __GLEW_SGIX_color_matrix_accuracy: GLboolean;
pub extern var __GLEW_SGIX_color_table_index_mode: GLboolean;
pub extern var __GLEW_SGIX_complex_polar: GLboolean;
pub extern var __GLEW_SGIX_convolution_accuracy: GLboolean;
pub extern var __GLEW_SGIX_cube_map: GLboolean;
pub extern var __GLEW_SGIX_cylinder_texgen: GLboolean;
pub extern var __GLEW_SGIX_datapipe: GLboolean;
pub extern var __GLEW_SGIX_decimation: GLboolean;
pub extern var __GLEW_SGIX_depth_pass_instrument: GLboolean;
pub extern var __GLEW_SGIX_depth_texture: GLboolean;
pub extern var __GLEW_SGIX_dvc: GLboolean;
pub extern var __GLEW_SGIX_flush_raster: GLboolean;
pub extern var __GLEW_SGIX_fog_blend: GLboolean;
pub extern var __GLEW_SGIX_fog_factor_to_alpha: GLboolean;
pub extern var __GLEW_SGIX_fog_layers: GLboolean;
pub extern var __GLEW_SGIX_fog_offset: GLboolean;
pub extern var __GLEW_SGIX_fog_patchy: GLboolean;
pub extern var __GLEW_SGIX_fog_scale: GLboolean;
pub extern var __GLEW_SGIX_fog_texture: GLboolean;
pub extern var __GLEW_SGIX_fragment_lighting_space: GLboolean;
pub extern var __GLEW_SGIX_fragment_specular_lighting: GLboolean;
pub extern var __GLEW_SGIX_fragments_instrument: GLboolean;
pub extern var __GLEW_SGIX_framezoom: GLboolean;
pub extern var __GLEW_SGIX_icc_texture: GLboolean;
pub extern var __GLEW_SGIX_igloo_interface: GLboolean;
pub extern var __GLEW_SGIX_image_compression: GLboolean;
pub extern var __GLEW_SGIX_impact_pixel_texture: GLboolean;
pub extern var __GLEW_SGIX_instrument_error: GLboolean;
pub extern var __GLEW_SGIX_interlace: GLboolean;
pub extern var __GLEW_SGIX_ir_instrument1: GLboolean;
pub extern var __GLEW_SGIX_line_quality_hint: GLboolean;
pub extern var __GLEW_SGIX_list_priority: GLboolean;
pub extern var __GLEW_SGIX_mpeg1: GLboolean;
pub extern var __GLEW_SGIX_mpeg2: GLboolean;
pub extern var __GLEW_SGIX_nonlinear_lighting_pervertex: GLboolean;
pub extern var __GLEW_SGIX_nurbs_eval: GLboolean;
pub extern var __GLEW_SGIX_occlusion_instrument: GLboolean;
pub extern var __GLEW_SGIX_packed_6bytes: GLboolean;
pub extern var __GLEW_SGIX_pixel_texture: GLboolean;
pub extern var __GLEW_SGIX_pixel_texture_bits: GLboolean;
pub extern var __GLEW_SGIX_pixel_texture_lod: GLboolean;
pub extern var __GLEW_SGIX_pixel_tiles: GLboolean;
pub extern var __GLEW_SGIX_polynomial_ffd: GLboolean;
pub extern var __GLEW_SGIX_quad_mesh: GLboolean;
pub extern var __GLEW_SGIX_reference_plane: GLboolean;
pub extern var __GLEW_SGIX_resample: GLboolean;
pub extern var __GLEW_SGIX_scalebias_hint: GLboolean;
pub extern var __GLEW_SGIX_shadow: GLboolean;
pub extern var __GLEW_SGIX_shadow_ambient: GLboolean;
pub extern var __GLEW_SGIX_slim: GLboolean;
pub extern var __GLEW_SGIX_spotlight_cutoff: GLboolean;
pub extern var __GLEW_SGIX_sprite: GLboolean;
pub extern var __GLEW_SGIX_subdiv_patch: GLboolean;
pub extern var __GLEW_SGIX_subsample: GLboolean;
pub extern var __GLEW_SGIX_tag_sample_buffer: GLboolean;
pub extern var __GLEW_SGIX_texture_add_env: GLboolean;
pub extern var __GLEW_SGIX_texture_coordinate_clamp: GLboolean;
pub extern var __GLEW_SGIX_texture_lod_bias: GLboolean;
pub extern var __GLEW_SGIX_texture_mipmap_anisotropic: GLboolean;
pub extern var __GLEW_SGIX_texture_multi_buffer: GLboolean;
pub extern var __GLEW_SGIX_texture_phase: GLboolean;
pub extern var __GLEW_SGIX_texture_range: GLboolean;
pub extern var __GLEW_SGIX_texture_scale_bias: GLboolean;
pub extern var __GLEW_SGIX_texture_supersample: GLboolean;
pub extern var __GLEW_SGIX_vector_ops: GLboolean;
pub extern var __GLEW_SGIX_vertex_array_object: GLboolean;
pub extern var __GLEW_SGIX_vertex_preclip: GLboolean;
pub extern var __GLEW_SGIX_vertex_preclip_hint: GLboolean;
pub extern var __GLEW_SGIX_ycrcb: GLboolean;
pub extern var __GLEW_SGIX_ycrcb_subsample: GLboolean;
pub extern var __GLEW_SGIX_ycrcba: GLboolean;
pub extern var __GLEW_SGI_color_matrix: GLboolean;
pub extern var __GLEW_SGI_color_table: GLboolean;
pub extern var __GLEW_SGI_complex: GLboolean;
pub extern var __GLEW_SGI_complex_type: GLboolean;
pub extern var __GLEW_SGI_fft: GLboolean;
pub extern var __GLEW_SGI_texture_color_table: GLboolean;
pub extern var __GLEW_SUNX_constant_data: GLboolean;
pub extern var __GLEW_SUN_convolution_border_modes: GLboolean;
pub extern var __GLEW_SUN_global_alpha: GLboolean;
pub extern var __GLEW_SUN_mesh_array: GLboolean;
pub extern var __GLEW_SUN_read_video_pixels: GLboolean;
pub extern var __GLEW_SUN_slice_accum: GLboolean;
pub extern var __GLEW_SUN_triangle_list: GLboolean;
pub extern var __GLEW_SUN_vertex: GLboolean;
pub extern var __GLEW_VIV_shader_binary: GLboolean;
pub extern var __GLEW_WIN_phong_shading: GLboolean;
pub extern var __GLEW_WIN_scene_markerXXX: GLboolean;
pub extern var __GLEW_WIN_specular_fog: GLboolean;
pub extern var __GLEW_WIN_swap_hint: GLboolean;
pub extern fn glewInit() GLenum;
pub extern fn glewIsSupported(name: [*c]const u8) GLboolean;
pub extern var glewExperimental: GLboolean;
pub extern fn glewGetExtension(name: [*c]const u8) GLboolean;
pub extern fn glewGetErrorString(@"error": GLenum) [*c]const GLubyte;
pub extern fn glewGetString(name: GLenum) [*c]const GLubyte;
pub const GLFWglproc = ?*const fn () callconv(.c) void;
pub const GLFWvkproc = ?*const fn () callconv(.c) void;
pub const struct_GLFWmonitor = opaque {};
pub const GLFWmonitor = struct_GLFWmonitor;
pub const struct_GLFWwindow = opaque {};
pub const GLFWwindow = struct_GLFWwindow;
pub const struct_GLFWcursor = opaque {};
pub const GLFWcursor = struct_GLFWcursor;
pub const GLFWerrorfun = ?*const fn (c_int, [*c]const u8) callconv(.c) void;
pub const GLFWwindowposfun = ?*const fn (?*GLFWwindow, c_int, c_int) callconv(.c) void;
pub const GLFWwindowsizefun = ?*const fn (?*GLFWwindow, c_int, c_int) callconv(.c) void;
pub const GLFWwindowclosefun = ?*const fn (?*GLFWwindow) callconv(.c) void;
pub const GLFWwindowrefreshfun = ?*const fn (?*GLFWwindow) callconv(.c) void;
pub const GLFWwindowfocusfun = ?*const fn (?*GLFWwindow, c_int) callconv(.c) void;
pub const GLFWwindowiconifyfun = ?*const fn (?*GLFWwindow, c_int) callconv(.c) void;
pub const GLFWwindowmaximizefun = ?*const fn (?*GLFWwindow, c_int) callconv(.c) void;
pub const GLFWframebuffersizefun = ?*const fn (?*GLFWwindow, c_int, c_int) callconv(.c) void;
pub const GLFWwindowcontentscalefun = ?*const fn (?*GLFWwindow, f32, f32) callconv(.c) void;
pub const GLFWmousebuttonfun = ?*const fn (?*GLFWwindow, c_int, c_int, c_int) callconv(.c) void;
pub const GLFWcursorposfun = ?*const fn (?*GLFWwindow, f64, f64) callconv(.c) void;
pub const GLFWcursorenterfun = ?*const fn (?*GLFWwindow, c_int) callconv(.c) void;
pub const GLFWscrollfun = ?*const fn (?*GLFWwindow, f64, f64) callconv(.c) void;
pub const GLFWkeyfun = ?*const fn (?*GLFWwindow, c_int, c_int, c_int, c_int) callconv(.c) void;
pub const GLFWcharfun = ?*const fn (?*GLFWwindow, c_uint) callconv(.c) void;
pub const GLFWcharmodsfun = ?*const fn (?*GLFWwindow, c_uint, c_int) callconv(.c) void;
pub const GLFWdropfun = ?*const fn (?*GLFWwindow, c_int, [*c][*c]const u8) callconv(.c) void;
pub const GLFWmonitorfun = ?*const fn (?*GLFWmonitor, c_int) callconv(.c) void;
pub const GLFWjoystickfun = ?*const fn (c_int, c_int) callconv(.c) void;
pub const struct_GLFWvidmode = extern struct {
    width: c_int = @import("std").mem.zeroes(c_int),
    height: c_int = @import("std").mem.zeroes(c_int),
    redBits: c_int = @import("std").mem.zeroes(c_int),
    greenBits: c_int = @import("std").mem.zeroes(c_int),
    blueBits: c_int = @import("std").mem.zeroes(c_int),
    refreshRate: c_int = @import("std").mem.zeroes(c_int),
};
pub const GLFWvidmode = struct_GLFWvidmode;
pub const struct_GLFWgammaramp = extern struct {
    red: [*c]c_ushort = @import("std").mem.zeroes([*c]c_ushort),
    green: [*c]c_ushort = @import("std").mem.zeroes([*c]c_ushort),
    blue: [*c]c_ushort = @import("std").mem.zeroes([*c]c_ushort),
    size: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const GLFWgammaramp = struct_GLFWgammaramp;
pub const struct_GLFWimage = extern struct {
    width: c_int = @import("std").mem.zeroes(c_int),
    height: c_int = @import("std").mem.zeroes(c_int),
    pixels: [*c]u8 = @import("std").mem.zeroes([*c]u8),
};
pub const GLFWimage = struct_GLFWimage;
pub const struct_GLFWgamepadstate = extern struct {
    buttons: [15]u8 = @import("std").mem.zeroes([15]u8),
    axes: [6]f32 = @import("std").mem.zeroes([6]f32),
};
pub const GLFWgamepadstate = struct_GLFWgamepadstate;
pub extern fn glfwInit() c_int;
pub extern fn glfwTerminate() void;
pub extern fn glfwInitHint(hint: c_int, value: c_int) void;
pub extern fn glfwGetVersion(major: [*c]c_int, minor: [*c]c_int, rev: [*c]c_int) void;
pub extern fn glfwGetVersionString() [*c]const u8;
pub extern fn glfwGetError(description: [*c][*c]const u8) c_int;
pub extern fn glfwSetErrorCallback(callback: GLFWerrorfun) GLFWerrorfun;
pub extern fn glfwGetMonitors(count: [*c]c_int) [*c]?*GLFWmonitor;
pub extern fn glfwGetPrimaryMonitor() ?*GLFWmonitor;
pub extern fn glfwGetMonitorPos(monitor: ?*GLFWmonitor, xpos: [*c]c_int, ypos: [*c]c_int) void;
pub extern fn glfwGetMonitorWorkarea(monitor: ?*GLFWmonitor, xpos: [*c]c_int, ypos: [*c]c_int, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwGetMonitorPhysicalSize(monitor: ?*GLFWmonitor, widthMM: [*c]c_int, heightMM: [*c]c_int) void;
pub extern fn glfwGetMonitorContentScale(monitor: ?*GLFWmonitor, xscale: [*c]f32, yscale: [*c]f32) void;
pub extern fn glfwGetMonitorName(monitor: ?*GLFWmonitor) [*c]const u8;
pub extern fn glfwSetMonitorUserPointer(monitor: ?*GLFWmonitor, pointer: ?*anyopaque) void;
pub extern fn glfwGetMonitorUserPointer(monitor: ?*GLFWmonitor) ?*anyopaque;
pub extern fn glfwSetMonitorCallback(callback: GLFWmonitorfun) GLFWmonitorfun;
pub extern fn glfwGetVideoModes(monitor: ?*GLFWmonitor, count: [*c]c_int) [*c]const GLFWvidmode;
pub extern fn glfwGetVideoMode(monitor: ?*GLFWmonitor) [*c]const GLFWvidmode;
pub extern fn glfwSetGamma(monitor: ?*GLFWmonitor, gamma: f32) void;
pub extern fn glfwGetGammaRamp(monitor: ?*GLFWmonitor) [*c]const GLFWgammaramp;
pub extern fn glfwSetGammaRamp(monitor: ?*GLFWmonitor, ramp: [*c]const GLFWgammaramp) void;
pub extern fn glfwDefaultWindowHints() void;
pub extern fn glfwWindowHint(hint: c_int, value: c_int) void;
pub extern fn glfwWindowHintString(hint: c_int, value: [*c]const u8) void;
pub extern fn glfwCreateWindow(width: c_int, height: c_int, title: [*c]const u8, monitor: ?*GLFWmonitor, share: ?*GLFWwindow) ?*GLFWwindow;
pub extern fn glfwDestroyWindow(window: ?*GLFWwindow) void;
pub extern fn glfwWindowShouldClose(window: ?*GLFWwindow) c_int;
pub extern fn glfwSetWindowShouldClose(window: ?*GLFWwindow, value: c_int) void;
pub extern fn glfwSetWindowTitle(window: ?*GLFWwindow, title: [*c]const u8) void;
pub extern fn glfwSetWindowIcon(window: ?*GLFWwindow, count: c_int, images: [*c]const GLFWimage) void;
pub extern fn glfwGetWindowPos(window: ?*GLFWwindow, xpos: [*c]c_int, ypos: [*c]c_int) void;
pub extern fn glfwSetWindowPos(window: ?*GLFWwindow, xpos: c_int, ypos: c_int) void;
pub extern fn glfwGetWindowSize(window: ?*GLFWwindow, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwSetWindowSizeLimits(window: ?*GLFWwindow, minwidth: c_int, minheight: c_int, maxwidth: c_int, maxheight: c_int) void;
pub extern fn glfwSetWindowAspectRatio(window: ?*GLFWwindow, numer: c_int, denom: c_int) void;
pub extern fn glfwSetWindowSize(window: ?*GLFWwindow, width: c_int, height: c_int) void;
pub extern fn glfwGetFramebufferSize(window: ?*GLFWwindow, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwGetWindowFrameSize(window: ?*GLFWwindow, left: [*c]c_int, top: [*c]c_int, right: [*c]c_int, bottom: [*c]c_int) void;
pub extern fn glfwGetWindowContentScale(window: ?*GLFWwindow, xscale: [*c]f32, yscale: [*c]f32) void;
pub extern fn glfwGetWindowOpacity(window: ?*GLFWwindow) f32;
pub extern fn glfwSetWindowOpacity(window: ?*GLFWwindow, opacity: f32) void;
pub extern fn glfwIconifyWindow(window: ?*GLFWwindow) void;
pub extern fn glfwRestoreWindow(window: ?*GLFWwindow) void;
pub extern fn glfwMaximizeWindow(window: ?*GLFWwindow) void;
pub extern fn glfwShowWindow(window: ?*GLFWwindow) void;
pub extern fn glfwHideWindow(window: ?*GLFWwindow) void;
pub extern fn glfwFocusWindow(window: ?*GLFWwindow) void;
pub extern fn glfwRequestWindowAttention(window: ?*GLFWwindow) void;
pub extern fn glfwGetWindowMonitor(window: ?*GLFWwindow) ?*GLFWmonitor;
pub extern fn glfwSetWindowMonitor(window: ?*GLFWwindow, monitor: ?*GLFWmonitor, xpos: c_int, ypos: c_int, width: c_int, height: c_int, refreshRate: c_int) void;
pub extern fn glfwGetWindowAttrib(window: ?*GLFWwindow, attrib: c_int) c_int;
pub extern fn glfwSetWindowAttrib(window: ?*GLFWwindow, attrib: c_int, value: c_int) void;
pub extern fn glfwSetWindowUserPointer(window: ?*GLFWwindow, pointer: ?*anyopaque) void;
pub extern fn glfwGetWindowUserPointer(window: ?*GLFWwindow) ?*anyopaque;
pub extern fn glfwSetWindowPosCallback(window: ?*GLFWwindow, callback: GLFWwindowposfun) GLFWwindowposfun;
pub extern fn glfwSetWindowSizeCallback(window: ?*GLFWwindow, callback: GLFWwindowsizefun) GLFWwindowsizefun;
pub extern fn glfwSetWindowCloseCallback(window: ?*GLFWwindow, callback: GLFWwindowclosefun) GLFWwindowclosefun;
pub extern fn glfwSetWindowRefreshCallback(window: ?*GLFWwindow, callback: GLFWwindowrefreshfun) GLFWwindowrefreshfun;
pub extern fn glfwSetWindowFocusCallback(window: ?*GLFWwindow, callback: GLFWwindowfocusfun) GLFWwindowfocusfun;
pub extern fn glfwSetWindowIconifyCallback(window: ?*GLFWwindow, callback: GLFWwindowiconifyfun) GLFWwindowiconifyfun;
pub extern fn glfwSetWindowMaximizeCallback(window: ?*GLFWwindow, callback: GLFWwindowmaximizefun) GLFWwindowmaximizefun;
pub extern fn glfwSetFramebufferSizeCallback(window: ?*GLFWwindow, callback: GLFWframebuffersizefun) GLFWframebuffersizefun;
pub extern fn glfwSetWindowContentScaleCallback(window: ?*GLFWwindow, callback: GLFWwindowcontentscalefun) GLFWwindowcontentscalefun;
pub extern fn glfwPollEvents() void;
pub extern fn glfwWaitEvents() void;
pub extern fn glfwWaitEventsTimeout(timeout: f64) void;
pub extern fn glfwPostEmptyEvent() void;
pub extern fn glfwGetInputMode(window: ?*GLFWwindow, mode: c_int) c_int;
pub extern fn glfwSetInputMode(window: ?*GLFWwindow, mode: c_int, value: c_int) void;
pub extern fn glfwRawMouseMotionSupported() c_int;
pub extern fn glfwGetKeyName(key: c_int, scancode: c_int) [*c]const u8;
pub extern fn glfwGetKeyScancode(key: c_int) c_int;
pub extern fn glfwGetKey(window: ?*GLFWwindow, key: c_int) c_int;
pub extern fn glfwGetMouseButton(window: ?*GLFWwindow, button: c_int) c_int;
pub extern fn glfwGetCursorPos(window: ?*GLFWwindow, xpos: [*c]f64, ypos: [*c]f64) void;
pub extern fn glfwSetCursorPos(window: ?*GLFWwindow, xpos: f64, ypos: f64) void;
pub extern fn glfwCreateCursor(image: [*c]const GLFWimage, xhot: c_int, yhot: c_int) ?*GLFWcursor;
pub extern fn glfwCreateStandardCursor(shape: c_int) ?*GLFWcursor;
pub extern fn glfwDestroyCursor(cursor: ?*GLFWcursor) void;
pub extern fn glfwSetCursor(window: ?*GLFWwindow, cursor: ?*GLFWcursor) void;
pub extern fn glfwSetKeyCallback(window: ?*GLFWwindow, callback: GLFWkeyfun) GLFWkeyfun;
pub extern fn glfwSetCharCallback(window: ?*GLFWwindow, callback: GLFWcharfun) GLFWcharfun;
pub extern fn glfwSetCharModsCallback(window: ?*GLFWwindow, callback: GLFWcharmodsfun) GLFWcharmodsfun;
pub extern fn glfwSetMouseButtonCallback(window: ?*GLFWwindow, callback: GLFWmousebuttonfun) GLFWmousebuttonfun;
pub extern fn glfwSetCursorPosCallback(window: ?*GLFWwindow, callback: GLFWcursorposfun) GLFWcursorposfun;
pub extern fn glfwSetCursorEnterCallback(window: ?*GLFWwindow, callback: GLFWcursorenterfun) GLFWcursorenterfun;
pub extern fn glfwSetScrollCallback(window: ?*GLFWwindow, callback: GLFWscrollfun) GLFWscrollfun;
pub extern fn glfwSetDropCallback(window: ?*GLFWwindow, callback: GLFWdropfun) GLFWdropfun;
pub extern fn glfwJoystickPresent(jid: c_int) c_int;
pub extern fn glfwGetJoystickAxes(jid: c_int, count: [*c]c_int) [*c]const f32;
pub extern fn glfwGetJoystickButtons(jid: c_int, count: [*c]c_int) [*c]const u8;
pub extern fn glfwGetJoystickHats(jid: c_int, count: [*c]c_int) [*c]const u8;
pub extern fn glfwGetJoystickName(jid: c_int) [*c]const u8;
pub extern fn glfwGetJoystickGUID(jid: c_int) [*c]const u8;
pub extern fn glfwSetJoystickUserPointer(jid: c_int, pointer: ?*anyopaque) void;
pub extern fn glfwGetJoystickUserPointer(jid: c_int) ?*anyopaque;
pub extern fn glfwJoystickIsGamepad(jid: c_int) c_int;
pub extern fn glfwSetJoystickCallback(callback: GLFWjoystickfun) GLFWjoystickfun;
pub extern fn glfwUpdateGamepadMappings(string: [*c]const u8) c_int;
pub extern fn glfwGetGamepadName(jid: c_int) [*c]const u8;
pub extern fn glfwGetGamepadState(jid: c_int, state: [*c]GLFWgamepadstate) c_int;
pub extern fn glfwSetClipboardString(window: ?*GLFWwindow, string: [*c]const u8) void;
pub extern fn glfwGetClipboardString(window: ?*GLFWwindow) [*c]const u8;
pub extern fn glfwGetTime() f64;
pub extern fn glfwSetTime(time: f64) void;
pub extern fn glfwGetTimerValue() u64;
pub extern fn glfwGetTimerFrequency() u64;
pub extern fn glfwMakeContextCurrent(window: ?*GLFWwindow) void;
pub extern fn glfwGetCurrentContext() ?*GLFWwindow;
pub extern fn glfwSwapBuffers(window: ?*GLFWwindow) void;
pub extern fn glfwSwapInterval(interval: c_int) void;
pub extern fn glfwExtensionSupported(extension: [*c]const u8) c_int;
pub extern fn glfwGetProcAddress(procname: [*c]const u8) GLFWglproc;
pub extern fn glfwVulkanSupported() c_int;
pub extern fn glfwGetRequiredInstanceExtensions(count: [*c]u32) [*c][*c]const u8;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 19);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 7);
pub const __clang_version__ = "19.1.7 (https://github.com/ziglang/zig-bootstrap 1c3c59435891bc9caf8cd1d3783773369d191c5f)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 19.1.7 (https://github.com/ziglang/zig-bootstrap 1c3c59435891bc9caf8cd1d3783773369d191c5f)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):95:9
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):101:9
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_uint;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_NORM_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_NORM_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_NORM_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_NORM_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_long;
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):202:9
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):224:9
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulong;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):232:9
pub const __UINT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __INT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_long;
pub const __INT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_TYPE__ = c_ulong;
pub const __UINT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_long;
pub const __INT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_TYPE__ = c_ulong;
pub const __UINT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __GCC_DESTRUCTIVE_SIZE = @as(c_int, 64);
pub const __GCC_CONSTRUCTIVE_SIZE = @as(c_int, 64);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __ELF__ = @as(c_int, 1);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):366:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):367:9
pub const __znver3 = @as(c_int, 1);
pub const __znver3__ = @as(c_int, 1);
pub const __tune_znver3__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __VAES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __VPCLMULQDQ__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __SSE4A__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __SHA__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __CLWB__ = @as(c_int, 1);
pub const __SHSTK__ = @as(c_int, 1);
pub const __CLZERO__ = @as(c_int, 1);
pub const __RDPID__ = @as(c_int, 1);
pub const __RDPRU__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const unix = @as(c_int, 1);
pub const __unix = @as(c_int, 1);
pub const __unix__ = @as(c_int, 1);
pub const linux = @as(c_int, 1);
pub const __linux = @as(c_int, 1);
pub const __linux__ = @as(c_int, 1);
pub const __gnu_linux__ = @as(c_int, 1);
pub const __FLOAT128__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __STDC_EMBED_NOT_FOUND__ = @as(c_int, 0);
pub const __STDC_EMBED_FOUND__ = @as(c_int, 1);
pub const __STDC_EMBED_EMPTY__ = @as(c_int, 2);
pub const __GLIBC_MINOR__ = @as(c_int, 35);
pub const _DEBUG = @as(c_int, 1);
pub const _REENTRANT = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const __glew_h__ = "";
pub const __GLEW_H__ = "";
pub const __gl_h_ = "";
pub const __gl2_h_ = "";
pub const __GL_H__ = "";
pub const _GL_H = "";
pub const __gltypes_h_ = "";
pub const __REGAL_H__ = "";
pub const __X_GL_H = "";
pub const __glext_h_ = "";
pub const __GLEXT_H_ = "";
pub const __gl_glext_h_ = "";
pub const __gl_ATI_h_ = "";
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_max_align_t = "";
pub const __need_offsetof = "";
pub const __STDDEF_H = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /root/zig-linux-x86_64-0.14.0/lib/include/__stddef_offsetof.h:16:9
pub const __CLANG_STDINT_H = "";
pub const _STDINT_H = @as(c_int, 1);
pub const __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION = "";
pub const _FEATURES_H = @as(c_int, 1);
pub const __KERNEL_STRICT_NAMES = "";
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub inline fn __glibc_clang_prereq(maj: anytype, min: anytype) @TypeOf(((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min);
}
pub const __GLIBC_USE = @compileError("unable to translate macro: undefined identifier `__GLIBC_USE_`");
// /usr/include/features.h:186:9
pub const _DEFAULT_SOURCE = @as(c_int, 1);
pub const __GLIBC_USE_ISOC2X = @as(c_int, 0);
pub const __USE_ISOC11 = @as(c_int, 1);
pub const __USE_ISOC99 = @as(c_int, 1);
pub const __USE_ISOC95 = @as(c_int, 1);
pub const __USE_POSIX_IMPLICITLY = @as(c_int, 1);
pub const _POSIX_SOURCE = @as(c_int, 1);
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const __USE_POSIX = @as(c_int, 1);
pub const __USE_POSIX2 = @as(c_int, 1);
pub const __USE_POSIX199309 = @as(c_int, 1);
pub const __USE_POSIX199506 = @as(c_int, 1);
pub const __USE_XOPEN2K = @as(c_int, 1);
pub const __USE_XOPEN2K8 = @as(c_int, 1);
pub const _ATFILE_SOURCE = @as(c_int, 1);
pub const __WORDSIZE = @as(c_int, 64);
pub const __WORDSIZE_TIME64_COMPAT32 = @as(c_int, 1);
pub const __SYSCALL_WORDSIZE = @as(c_int, 64);
pub const __TIMESIZE = __WORDSIZE;
pub const __USE_MISC = @as(c_int, 1);
pub const __USE_ATFILE = @as(c_int, 1);
pub const __USE_FORTIFY_LEVEL = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_GETS = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_SCANF = @as(c_int, 0);
pub const _STDC_PREDEF_H = @as(c_int, 1);
pub const __STDC_IEC_559__ = @as(c_int, 1);
pub const __STDC_IEC_60559_BFP__ = @as(c_long, 201404);
pub const __STDC_IEC_559_COMPLEX__ = @as(c_int, 1);
pub const __STDC_IEC_60559_COMPLEX__ = @as(c_long, 201404);
pub const __STDC_ISO_10646__ = @as(c_long, 201706);
pub const __GNU_LIBRARY__ = @as(c_int, 6);
pub const __GLIBC__ = @as(c_int, 2);
pub inline fn __GLIBC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub const _SYS_CDEFS_H = @as(c_int, 1);
pub const __glibc_has_attribute = @compileError("unable to translate macro: undefined identifier `__has_attribute`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:45:10
pub inline fn __glibc_has_builtin(name: anytype) @TypeOf(__has_builtin(name)) {
    _ = &name;
    return __has_builtin(name);
}
pub const __glibc_has_extension = @compileError("unable to translate macro: undefined identifier `__has_extension`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:10
pub const __LEAF = "";
pub const __LEAF_ATTR = "";
pub const __THROW = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:11
pub const __THROWNL = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:80:11
pub const __NTH = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:81:11
pub const __NTHNL = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:82:11
pub inline fn __P(args: anytype) @TypeOf(args) {
    _ = &args;
    return args;
}
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    _ = &args;
    return args;
}
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token '##'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:124:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token '#'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:125:9
pub const __ptr_t = ?*anyopaque;
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub inline fn __bos(ptr: anytype) @TypeOf(__builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1))) {
    _ = &ptr;
    return __builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1));
}
pub inline fn __bos0(ptr: anytype) @TypeOf(__builtin_object_size(ptr, @as(c_int, 0))) {
    _ = &ptr;
    return __builtin_object_size(ptr, @as(c_int, 0));
}
pub inline fn __glibc_objsize0(__o: anytype) @TypeOf(__bos0(__o)) {
    _ = &__o;
    return __bos0(__o);
}
pub inline fn __glibc_objsize(__o: anytype) @TypeOf(__bos(__o)) {
    _ = &__o;
    return __bos(__o);
}
pub inline fn __glibc_safe_len_cond(__l: anytype, __s: anytype, __osz: anytype) @TypeOf(__l <= @import("std").zig.c_translation.MacroArithmetic.div(__osz, __s)) {
    _ = &__l;
    _ = &__s;
    _ = &__osz;
    return __l <= @import("std").zig.c_translation.MacroArithmetic.div(__osz, __s);
}
pub const __glibc_unsigned_or_positive = @compileError("unable to translate C expr: unexpected token '__typeof'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:160:9
pub inline fn __glibc_safe_or_unknown_len(__l: anytype, __s: anytype, __osz: anytype) @TypeOf(((__glibc_unsigned_or_positive(__l) != 0) and (__builtin_constant_p(__glibc_safe_len_cond(__SIZE_TYPE__(__l), __s, __osz)) != 0)) and (__glibc_safe_len_cond(__SIZE_TYPE__(__l), __s, __osz) != 0)) {
    _ = &__l;
    _ = &__s;
    _ = &__osz;
    return ((__glibc_unsigned_or_positive(__l) != 0) and (__builtin_constant_p(__glibc_safe_len_cond(__SIZE_TYPE__(__l), __s, __osz)) != 0)) and (__glibc_safe_len_cond(__SIZE_TYPE__(__l), __s, __osz) != 0);
}
pub inline fn __glibc_unsafe_len(__l: anytype, __s: anytype, __osz: anytype) @TypeOf(((__glibc_unsigned_or_positive(__l) != 0) and (__builtin_constant_p(__glibc_safe_len_cond(__SIZE_TYPE__(__l), __s, __osz)) != 0)) and !(__glibc_safe_len_cond(__SIZE_TYPE__(__l), __s, __osz) != 0)) {
    _ = &__l;
    _ = &__s;
    _ = &__osz;
    return ((__glibc_unsigned_or_positive(__l) != 0) and (__builtin_constant_p(__glibc_safe_len_cond(__SIZE_TYPE__(__l), __s, __osz)) != 0)) and !(__glibc_safe_len_cond(__SIZE_TYPE__(__l), __s, __osz) != 0);
}
pub const __glibc_fortify = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:185:9
pub const __glibc_fortify_n = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:195:9
pub const __warnattr = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:207:10
pub const __errordecl = @compileError("unable to translate C expr: unexpected token 'extern'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:208:10
pub const __flexarr = @compileError("unable to translate C expr: unexpected token '['");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:216:10
pub const __glibc_c99_flexarr_available = @as(c_int, 1);
pub const __REDIRECT = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:247:10
pub const __REDIRECT_NTH = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:254:11
pub const __REDIRECT_NTHNL = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:256:11
pub const __ASMNAME = @compileError("unable to translate C expr: unexpected token ','");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:259:10
pub inline fn __ASMNAME2(prefix: anytype, cname: anytype) @TypeOf(__STRING(prefix) ++ cname) {
    _ = &prefix;
    _ = &cname;
    return __STRING(prefix) ++ cname;
}
pub const __attribute_malloc__ = @compileError("unable to translate macro: undefined identifier `__malloc__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:281:10
pub const __attribute_alloc_size__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:292:10
pub const __attribute_alloc_align__ = @compileError("unable to translate macro: undefined identifier `__alloc_align__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:298:10
pub const __attribute_pure__ = @compileError("unable to translate macro: undefined identifier `__pure__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:308:10
pub const __attribute_const__ = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:315:10
pub const __attribute_maybe_unused__ = @compileError("unable to translate macro: undefined identifier `__unused__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:321:10
pub const __attribute_used__ = @compileError("unable to translate macro: undefined identifier `__used__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:330:10
pub const __attribute_noinline__ = @compileError("unable to translate macro: undefined identifier `__noinline__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:331:10
pub const __attribute_deprecated__ = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:339:10
pub const __attribute_deprecated_msg__ = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:349:10
pub const __attribute_format_arg__ = @compileError("unable to translate macro: undefined identifier `__format_arg__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:362:10
pub const __attribute_format_strfmon__ = @compileError("unable to translate macro: undefined identifier `__format__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:372:10
pub const __attribute_nonnull__ = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:384:11
pub inline fn __nonnull(params: anytype) @TypeOf(__attribute_nonnull__(params)) {
    _ = &params;
    return __attribute_nonnull__(params);
}
pub const __returns_nonnull = @compileError("unable to translate macro: undefined identifier `__returns_nonnull__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:397:10
pub const __attribute_warn_unused_result__ = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:406:10
pub const __wur = "";
pub const __always_inline = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:424:10
pub const __attribute_artificial__ = @compileError("unable to translate macro: undefined identifier `__artificial__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:433:10
pub const __extern_inline = @compileError("unable to translate macro: undefined identifier `__gnu_inline__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:451:11
pub const __extern_always_inline = @compileError("unable to translate macro: undefined identifier `__gnu_inline__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:452:11
pub const __fortify_function = __extern_always_inline ++ __attribute_artificial__;
pub const __restrict_arr = @compileError("unable to translate C expr: unexpected token '__restrict'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:495:10
pub inline fn __glibc_unlikely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 0))) {
    _ = &cond;
    return __builtin_expect(cond, @as(c_int, 0));
}
pub inline fn __glibc_likely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 1))) {
    _ = &cond;
    return __builtin_expect(cond, @as(c_int, 1));
}
pub const __attribute_nonstring__ = "";
pub const __attribute_copy__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:544:10
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = @as(c_int, 0);
pub inline fn __LDBL_REDIR1(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR(name: anytype, proto: anytype) @TypeOf(name ++ proto) {
    _ = &name;
    _ = &proto;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR1_NTH(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return name ++ proto ++ __THROW;
}
pub inline fn __LDBL_REDIR_NTH(name: anytype, proto: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = &name;
    _ = &proto;
    return name ++ proto ++ __THROW;
}
pub const __LDBL_REDIR2_DECL = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:620:10
pub const __LDBL_REDIR_DECL = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:621:10
pub inline fn __REDIRECT_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT(name, proto, alias)) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return __REDIRECT(name, proto, alias);
}
pub inline fn __REDIRECT_NTH_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT_NTH(name, proto, alias)) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return __REDIRECT_NTH(name, proto, alias);
}
pub const __glibc_macro_warning1 = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:635:10
pub const __glibc_macro_warning = @compileError("unable to translate macro: undefined identifier `GCC`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:636:10
pub const __HAVE_GENERIC_SELECTION = @as(c_int, 1);
pub const __fortified_attr_access = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:681:11
pub const __attr_access = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:682:11
pub const __attr_access_none = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:683:11
pub const __attr_dealloc = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:693:10
pub const __attr_dealloc_free = "";
pub const __attribute_returns_twice__ = @compileError("unable to translate macro: undefined identifier `__returns_twice__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:700:10
pub const __stub___compat_bdflush = "";
pub const __stub_chflags = "";
pub const __stub_fchflags = "";
pub const __stub_gtty = "";
pub const __stub_revoke = "";
pub const __stub_setlogin = "";
pub const __stub_sigreturn = "";
pub const __stub_stty = "";
pub const __GLIBC_USE_LIB_EXT2 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_TYPES_EXT = @as(c_int, 0);
pub const _BITS_TYPES_H = @as(c_int, 1);
pub const __S16_TYPE = c_short;
pub const __U16_TYPE = c_ushort;
pub const __S32_TYPE = c_int;
pub const __U32_TYPE = c_uint;
pub const __SLONGWORD_TYPE = c_long;
pub const __ULONGWORD_TYPE = c_ulong;
pub const __SQUAD_TYPE = c_long;
pub const __UQUAD_TYPE = c_ulong;
pub const __SWORD_TYPE = c_long;
pub const __UWORD_TYPE = c_ulong;
pub const __SLONG32_TYPE = c_int;
pub const __ULONG32_TYPE = c_uint;
pub const __S64_TYPE = c_long;
pub const __U64_TYPE = c_ulong;
pub const __STD_TYPE = @compileError("unable to translate C expr: unexpected token 'typedef'");
// /usr/include/x86_64-linux-gnu/bits/types.h:137:10
pub const _BITS_TYPESIZES_H = @as(c_int, 1);
pub const __SYSCALL_SLONG_TYPE = __SLONGWORD_TYPE;
pub const __SYSCALL_ULONG_TYPE = __ULONGWORD_TYPE;
pub const __DEV_T_TYPE = __UQUAD_TYPE;
pub const __UID_T_TYPE = __U32_TYPE;
pub const __GID_T_TYPE = __U32_TYPE;
pub const __INO_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __INO64_T_TYPE = __UQUAD_TYPE;
pub const __MODE_T_TYPE = __U32_TYPE;
pub const __NLINK_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSWORD_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF64_T_TYPE = __SQUAD_TYPE;
pub const __PID_T_TYPE = __S32_TYPE;
pub const __RLIM_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __RLIM64_T_TYPE = __UQUAD_TYPE;
pub const __BLKCNT_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __BLKCNT64_T_TYPE = __SQUAD_TYPE;
pub const __FSBLKCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;
pub const __FSFILCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSFILCNT64_T_TYPE = __UQUAD_TYPE;
pub const __ID_T_TYPE = __U32_TYPE;
pub const __CLOCK_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __TIME_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __USECONDS_T_TYPE = __U32_TYPE;
pub const __SUSECONDS_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SUSECONDS64_T_TYPE = __SQUAD_TYPE;
pub const __DADDR_T_TYPE = __S32_TYPE;
pub const __KEY_T_TYPE = __S32_TYPE;
pub const __CLOCKID_T_TYPE = __S32_TYPE;
pub const __TIMER_T_TYPE = ?*anyopaque;
pub const __BLKSIZE_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __FSID_T_TYPE = @compileError("unable to translate macro: undefined identifier `__val`");
// /usr/include/x86_64-linux-gnu/bits/typesizes.h:73:9
pub const __SSIZE_T_TYPE = __SWORD_TYPE;
pub const __CPU_MASK_TYPE = __SYSCALL_ULONG_TYPE;
pub const __OFF_T_MATCHES_OFF64_T = @as(c_int, 1);
pub const __INO_T_MATCHES_INO64_T = @as(c_int, 1);
pub const __RLIM_T_MATCHES_RLIM64_T = @as(c_int, 1);
pub const __STATFS_MATCHES_STATFS64 = @as(c_int, 1);
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = @as(c_int, 1);
pub const __FD_SETSIZE = @as(c_int, 1024);
pub const _BITS_TIME64_H = @as(c_int, 1);
pub const __TIME64_T_TYPE = __TIME_T_TYPE;
pub const _BITS_WCHAR_H = @as(c_int, 1);
pub const __WCHAR_MAX = __WCHAR_MAX__;
pub const __WCHAR_MIN = -__WCHAR_MAX - @as(c_int, 1);
pub const _BITS_STDINT_INTN_H = @as(c_int, 1);
pub const _BITS_STDINT_UINTN_H = @as(c_int, 1);
pub const __intptr_t_defined = "";
pub const __INT64_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const __UINT64_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INT8_MIN = -@as(c_int, 128);
pub const INT16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT8_MAX = @as(c_int, 127);
pub const INT16_MAX = @as(c_int, 32767);
pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT8_MAX = @as(c_int, 255);
pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_LEAST8_MIN = -@as(c_int, 128);
pub const INT_LEAST16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT_LEAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT_LEAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_LEAST8_MAX = @as(c_int, 127);
pub const INT_LEAST16_MAX = @as(c_int, 32767);
pub const INT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT_LEAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_LEAST8_MAX = @as(c_int, 255);
pub const UINT_LEAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT_LEAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_FAST8_MIN = -@as(c_int, 128);
pub const INT_FAST16_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_FAST8_MAX = @as(c_int, 127);
pub const INT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_FAST8_MAX = @as(c_int, 255);
pub const UINT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INTPTR_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const UINTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const INTMAX_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INTMAX_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINTMAX_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const PTRDIFF_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const PTRDIFF_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const SIG_ATOMIC_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const SIG_ATOMIC_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const WCHAR_MIN = __WCHAR_MIN;
pub const WCHAR_MAX = __WCHAR_MAX;
pub const WINT_MIN = @as(c_uint, 0);
pub const WINT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub inline fn INT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT32_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const INT64_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub inline fn UINT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn UINT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const UINT64_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INTMAX_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const UINTMAX_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const GLEW_APIENTRY_DEFINED = "";
pub const APIENTRY = "";
pub const GLEWAPI = @compileError("unable to translate macro: undefined identifier `visibility`");
// /usr/include/GL/glew.h:255:12
pub const GLAPI = @compileError("unable to translate C expr: unexpected token 'extern'");
// /usr/include/GL/glew.h:265:9
pub const GLAPIENTRY = "";
pub const GLEWAPIENTRY = "";
pub const GLEW_VAR_EXPORT = GLEWAPI;
pub const GLEW_FUN_EXPORT = GLEWAPI;
pub const GL_VERSION_1_1 = @as(c_int, 1);
pub const GL_ZERO = @as(c_int, 0);
pub const GL_FALSE = @as(c_int, 0);
pub const GL_LOGIC_OP = @as(c_int, 0x0BF1);
pub const GL_NONE = @as(c_int, 0);
pub const GL_TEXTURE_COMPONENTS = @as(c_int, 0x1003);
pub const GL_NO_ERROR = @as(c_int, 0);
pub const GL_POINTS = @as(c_int, 0x0000);
pub const GL_CURRENT_BIT = @as(c_int, 0x00000001);
pub const GL_TRUE = @as(c_int, 1);
pub const GL_ONE = @as(c_int, 1);
pub const GL_CLIENT_PIXEL_STORE_BIT = @as(c_int, 0x00000001);
pub const GL_LINES = @as(c_int, 0x0001);
pub const GL_LINE_LOOP = @as(c_int, 0x0002);
pub const GL_POINT_BIT = @as(c_int, 0x00000002);
pub const GL_CLIENT_VERTEX_ARRAY_BIT = @as(c_int, 0x00000002);
pub const GL_LINE_STRIP = @as(c_int, 0x0003);
pub const GL_LINE_BIT = @as(c_int, 0x00000004);
pub const GL_TRIANGLES = @as(c_int, 0x0004);
pub const GL_TRIANGLE_STRIP = @as(c_int, 0x0005);
pub const GL_TRIANGLE_FAN = @as(c_int, 0x0006);
pub const GL_QUADS = @as(c_int, 0x0007);
pub const GL_QUAD_STRIP = @as(c_int, 0x0008);
pub const GL_POLYGON_BIT = @as(c_int, 0x00000008);
pub const GL_POLYGON = @as(c_int, 0x0009);
pub const GL_POLYGON_STIPPLE_BIT = @as(c_int, 0x00000010);
pub const GL_PIXEL_MODE_BIT = @as(c_int, 0x00000020);
pub const GL_LIGHTING_BIT = @as(c_int, 0x00000040);
pub const GL_FOG_BIT = @as(c_int, 0x00000080);
pub const GL_DEPTH_BUFFER_BIT = @as(c_int, 0x00000100);
pub const GL_ACCUM = @as(c_int, 0x0100);
pub const GL_LOAD = @as(c_int, 0x0101);
pub const GL_RETURN = @as(c_int, 0x0102);
pub const GL_MULT = @as(c_int, 0x0103);
pub const GL_ADD = @as(c_int, 0x0104);
pub const GL_NEVER = @as(c_int, 0x0200);
pub const GL_ACCUM_BUFFER_BIT = @as(c_int, 0x00000200);
pub const GL_LESS = @as(c_int, 0x0201);
pub const GL_EQUAL = @as(c_int, 0x0202);
pub const GL_LEQUAL = @as(c_int, 0x0203);
pub const GL_GREATER = @as(c_int, 0x0204);
pub const GL_NOTEQUAL = @as(c_int, 0x0205);
pub const GL_GEQUAL = @as(c_int, 0x0206);
pub const GL_ALWAYS = @as(c_int, 0x0207);
pub const GL_SRC_COLOR = @as(c_int, 0x0300);
pub const GL_ONE_MINUS_SRC_COLOR = @as(c_int, 0x0301);
pub const GL_SRC_ALPHA = @as(c_int, 0x0302);
pub const GL_ONE_MINUS_SRC_ALPHA = @as(c_int, 0x0303);
pub const GL_DST_ALPHA = @as(c_int, 0x0304);
pub const GL_ONE_MINUS_DST_ALPHA = @as(c_int, 0x0305);
pub const GL_DST_COLOR = @as(c_int, 0x0306);
pub const GL_ONE_MINUS_DST_COLOR = @as(c_int, 0x0307);
pub const GL_SRC_ALPHA_SATURATE = @as(c_int, 0x0308);
pub const GL_STENCIL_BUFFER_BIT = @as(c_int, 0x00000400);
pub const GL_FRONT_LEFT = @as(c_int, 0x0400);
pub const GL_FRONT_RIGHT = @as(c_int, 0x0401);
pub const GL_BACK_LEFT = @as(c_int, 0x0402);
pub const GL_BACK_RIGHT = @as(c_int, 0x0403);
pub const GL_FRONT = @as(c_int, 0x0404);
pub const GL_BACK = @as(c_int, 0x0405);
pub const GL_LEFT = @as(c_int, 0x0406);
pub const GL_RIGHT = @as(c_int, 0x0407);
pub const GL_FRONT_AND_BACK = @as(c_int, 0x0408);
pub const GL_AUX0 = @as(c_int, 0x0409);
pub const GL_AUX1 = @as(c_int, 0x040A);
pub const GL_AUX2 = @as(c_int, 0x040B);
pub const GL_AUX3 = @as(c_int, 0x040C);
pub const GL_INVALID_ENUM = @as(c_int, 0x0500);
pub const GL_INVALID_VALUE = @as(c_int, 0x0501);
pub const GL_INVALID_OPERATION = @as(c_int, 0x0502);
pub const GL_STACK_OVERFLOW = @as(c_int, 0x0503);
pub const GL_STACK_UNDERFLOW = @as(c_int, 0x0504);
pub const GL_OUT_OF_MEMORY = @as(c_int, 0x0505);
pub const GL_2D = @as(c_int, 0x0600);
pub const GL_3D = @as(c_int, 0x0601);
pub const GL_3D_COLOR = @as(c_int, 0x0602);
pub const GL_3D_COLOR_TEXTURE = @as(c_int, 0x0603);
pub const GL_4D_COLOR_TEXTURE = @as(c_int, 0x0604);
pub const GL_PASS_THROUGH_TOKEN = @as(c_int, 0x0700);
pub const GL_POINT_TOKEN = @as(c_int, 0x0701);
pub const GL_LINE_TOKEN = @as(c_int, 0x0702);
pub const GL_POLYGON_TOKEN = @as(c_int, 0x0703);
pub const GL_BITMAP_TOKEN = @as(c_int, 0x0704);
pub const GL_DRAW_PIXEL_TOKEN = @as(c_int, 0x0705);
pub const GL_COPY_PIXEL_TOKEN = @as(c_int, 0x0706);
pub const GL_LINE_RESET_TOKEN = @as(c_int, 0x0707);
pub const GL_EXP = @as(c_int, 0x0800);
pub const GL_VIEWPORT_BIT = @as(c_int, 0x00000800);
pub const GL_EXP2 = @as(c_int, 0x0801);
pub const GL_CW = @as(c_int, 0x0900);
pub const GL_CCW = @as(c_int, 0x0901);
pub const GL_COEFF = @as(c_int, 0x0A00);
pub const GL_ORDER = @as(c_int, 0x0A01);
pub const GL_DOMAIN = @as(c_int, 0x0A02);
pub const GL_CURRENT_COLOR = @as(c_int, 0x0B00);
pub const GL_CURRENT_INDEX = @as(c_int, 0x0B01);
pub const GL_CURRENT_NORMAL = @as(c_int, 0x0B02);
pub const GL_CURRENT_TEXTURE_COORDS = @as(c_int, 0x0B03);
pub const GL_CURRENT_RASTER_COLOR = @as(c_int, 0x0B04);
pub const GL_CURRENT_RASTER_INDEX = @as(c_int, 0x0B05);
pub const GL_CURRENT_RASTER_TEXTURE_COORDS = @as(c_int, 0x0B06);
pub const GL_CURRENT_RASTER_POSITION = @as(c_int, 0x0B07);
pub const GL_CURRENT_RASTER_POSITION_VALID = @as(c_int, 0x0B08);
pub const GL_CURRENT_RASTER_DISTANCE = @as(c_int, 0x0B09);
pub const GL_POINT_SMOOTH = @as(c_int, 0x0B10);
pub const GL_POINT_SIZE = @as(c_int, 0x0B11);
pub const GL_POINT_SIZE_RANGE = @as(c_int, 0x0B12);
pub const GL_POINT_SIZE_GRANULARITY = @as(c_int, 0x0B13);
pub const GL_LINE_SMOOTH = @as(c_int, 0x0B20);
pub const GL_LINE_WIDTH = @as(c_int, 0x0B21);
pub const GL_LINE_WIDTH_RANGE = @as(c_int, 0x0B22);
pub const GL_LINE_WIDTH_GRANULARITY = @as(c_int, 0x0B23);
pub const GL_LINE_STIPPLE = @as(c_int, 0x0B24);
pub const GL_LINE_STIPPLE_PATTERN = @as(c_int, 0x0B25);
pub const GL_LINE_STIPPLE_REPEAT = @as(c_int, 0x0B26);
pub const GL_LIST_MODE = @as(c_int, 0x0B30);
pub const GL_MAX_LIST_NESTING = @as(c_int, 0x0B31);
pub const GL_LIST_BASE = @as(c_int, 0x0B32);
pub const GL_LIST_INDEX = @as(c_int, 0x0B33);
pub const GL_POLYGON_MODE = @as(c_int, 0x0B40);
pub const GL_POLYGON_SMOOTH = @as(c_int, 0x0B41);
pub const GL_POLYGON_STIPPLE = @as(c_int, 0x0B42);
pub const GL_EDGE_FLAG = @as(c_int, 0x0B43);
pub const GL_CULL_FACE = @as(c_int, 0x0B44);
pub const GL_CULL_FACE_MODE = @as(c_int, 0x0B45);
pub const GL_FRONT_FACE = @as(c_int, 0x0B46);
pub const GL_LIGHTING = @as(c_int, 0x0B50);
pub const GL_LIGHT_MODEL_LOCAL_VIEWER = @as(c_int, 0x0B51);
pub const GL_LIGHT_MODEL_TWO_SIDE = @as(c_int, 0x0B52);
pub const GL_LIGHT_MODEL_AMBIENT = @as(c_int, 0x0B53);
pub const GL_SHADE_MODEL = @as(c_int, 0x0B54);
pub const GL_COLOR_MATERIAL_FACE = @as(c_int, 0x0B55);
pub const GL_COLOR_MATERIAL_PARAMETER = @as(c_int, 0x0B56);
pub const GL_COLOR_MATERIAL = @as(c_int, 0x0B57);
pub const GL_FOG = @as(c_int, 0x0B60);
pub const GL_FOG_INDEX = @as(c_int, 0x0B61);
pub const GL_FOG_DENSITY = @as(c_int, 0x0B62);
pub const GL_FOG_START = @as(c_int, 0x0B63);
pub const GL_FOG_END = @as(c_int, 0x0B64);
pub const GL_FOG_MODE = @as(c_int, 0x0B65);
pub const GL_FOG_COLOR = @as(c_int, 0x0B66);
pub const GL_DEPTH_RANGE = @as(c_int, 0x0B70);
pub const GL_DEPTH_TEST = @as(c_int, 0x0B71);
pub const GL_DEPTH_WRITEMASK = @as(c_int, 0x0B72);
pub const GL_DEPTH_CLEAR_VALUE = @as(c_int, 0x0B73);
pub const GL_DEPTH_FUNC = @as(c_int, 0x0B74);
pub const GL_ACCUM_CLEAR_VALUE = @as(c_int, 0x0B80);
pub const GL_STENCIL_TEST = @as(c_int, 0x0B90);
pub const GL_STENCIL_CLEAR_VALUE = @as(c_int, 0x0B91);
pub const GL_STENCIL_FUNC = @as(c_int, 0x0B92);
pub const GL_STENCIL_VALUE_MASK = @as(c_int, 0x0B93);
pub const GL_STENCIL_FAIL = @as(c_int, 0x0B94);
pub const GL_STENCIL_PASS_DEPTH_FAIL = @as(c_int, 0x0B95);
pub const GL_STENCIL_PASS_DEPTH_PASS = @as(c_int, 0x0B96);
pub const GL_STENCIL_REF = @as(c_int, 0x0B97);
pub const GL_STENCIL_WRITEMASK = @as(c_int, 0x0B98);
pub const GL_MATRIX_MODE = @as(c_int, 0x0BA0);
pub const GL_NORMALIZE = @as(c_int, 0x0BA1);
pub const GL_VIEWPORT = @as(c_int, 0x0BA2);
pub const GL_MODELVIEW_STACK_DEPTH = @as(c_int, 0x0BA3);
pub const GL_PROJECTION_STACK_DEPTH = @as(c_int, 0x0BA4);
pub const GL_TEXTURE_STACK_DEPTH = @as(c_int, 0x0BA5);
pub const GL_MODELVIEW_MATRIX = @as(c_int, 0x0BA6);
pub const GL_PROJECTION_MATRIX = @as(c_int, 0x0BA7);
pub const GL_TEXTURE_MATRIX = @as(c_int, 0x0BA8);
pub const GL_ATTRIB_STACK_DEPTH = @as(c_int, 0x0BB0);
pub const GL_CLIENT_ATTRIB_STACK_DEPTH = @as(c_int, 0x0BB1);
pub const GL_ALPHA_TEST = @as(c_int, 0x0BC0);
pub const GL_ALPHA_TEST_FUNC = @as(c_int, 0x0BC1);
pub const GL_ALPHA_TEST_REF = @as(c_int, 0x0BC2);
pub const GL_DITHER = @as(c_int, 0x0BD0);
pub const GL_BLEND_DST = @as(c_int, 0x0BE0);
pub const GL_BLEND_SRC = @as(c_int, 0x0BE1);
pub const GL_BLEND = @as(c_int, 0x0BE2);
pub const GL_LOGIC_OP_MODE = @as(c_int, 0x0BF0);
pub const GL_INDEX_LOGIC_OP = @as(c_int, 0x0BF1);
pub const GL_COLOR_LOGIC_OP = @as(c_int, 0x0BF2);
pub const GL_AUX_BUFFERS = @as(c_int, 0x0C00);
pub const GL_DRAW_BUFFER = @as(c_int, 0x0C01);
pub const GL_READ_BUFFER = @as(c_int, 0x0C02);
pub const GL_SCISSOR_BOX = @as(c_int, 0x0C10);
pub const GL_SCISSOR_TEST = @as(c_int, 0x0C11);
pub const GL_INDEX_CLEAR_VALUE = @as(c_int, 0x0C20);
pub const GL_INDEX_WRITEMASK = @as(c_int, 0x0C21);
pub const GL_COLOR_CLEAR_VALUE = @as(c_int, 0x0C22);
pub const GL_COLOR_WRITEMASK = @as(c_int, 0x0C23);
pub const GL_INDEX_MODE = @as(c_int, 0x0C30);
pub const GL_RGBA_MODE = @as(c_int, 0x0C31);
pub const GL_DOUBLEBUFFER = @as(c_int, 0x0C32);
pub const GL_STEREO = @as(c_int, 0x0C33);
pub const GL_RENDER_MODE = @as(c_int, 0x0C40);
pub const GL_PERSPECTIVE_CORRECTION_HINT = @as(c_int, 0x0C50);
pub const GL_POINT_SMOOTH_HINT = @as(c_int, 0x0C51);
pub const GL_LINE_SMOOTH_HINT = @as(c_int, 0x0C52);
pub const GL_POLYGON_SMOOTH_HINT = @as(c_int, 0x0C53);
pub const GL_FOG_HINT = @as(c_int, 0x0C54);
pub const GL_TEXTURE_GEN_S = @as(c_int, 0x0C60);
pub const GL_TEXTURE_GEN_T = @as(c_int, 0x0C61);
pub const GL_TEXTURE_GEN_R = @as(c_int, 0x0C62);
pub const GL_TEXTURE_GEN_Q = @as(c_int, 0x0C63);
pub const GL_PIXEL_MAP_I_TO_I = @as(c_int, 0x0C70);
pub const GL_PIXEL_MAP_S_TO_S = @as(c_int, 0x0C71);
pub const GL_PIXEL_MAP_I_TO_R = @as(c_int, 0x0C72);
pub const GL_PIXEL_MAP_I_TO_G = @as(c_int, 0x0C73);
pub const GL_PIXEL_MAP_I_TO_B = @as(c_int, 0x0C74);
pub const GL_PIXEL_MAP_I_TO_A = @as(c_int, 0x0C75);
pub const GL_PIXEL_MAP_R_TO_R = @as(c_int, 0x0C76);
pub const GL_PIXEL_MAP_G_TO_G = @as(c_int, 0x0C77);
pub const GL_PIXEL_MAP_B_TO_B = @as(c_int, 0x0C78);
pub const GL_PIXEL_MAP_A_TO_A = @as(c_int, 0x0C79);
pub const GL_PIXEL_MAP_I_TO_I_SIZE = @as(c_int, 0x0CB0);
pub const GL_PIXEL_MAP_S_TO_S_SIZE = @as(c_int, 0x0CB1);
pub const GL_PIXEL_MAP_I_TO_R_SIZE = @as(c_int, 0x0CB2);
pub const GL_PIXEL_MAP_I_TO_G_SIZE = @as(c_int, 0x0CB3);
pub const GL_PIXEL_MAP_I_TO_B_SIZE = @as(c_int, 0x0CB4);
pub const GL_PIXEL_MAP_I_TO_A_SIZE = @as(c_int, 0x0CB5);
pub const GL_PIXEL_MAP_R_TO_R_SIZE = @as(c_int, 0x0CB6);
pub const GL_PIXEL_MAP_G_TO_G_SIZE = @as(c_int, 0x0CB7);
pub const GL_PIXEL_MAP_B_TO_B_SIZE = @as(c_int, 0x0CB8);
pub const GL_PIXEL_MAP_A_TO_A_SIZE = @as(c_int, 0x0CB9);
pub const GL_UNPACK_SWAP_BYTES = @as(c_int, 0x0CF0);
pub const GL_UNPACK_LSB_FIRST = @as(c_int, 0x0CF1);
pub const GL_UNPACK_ROW_LENGTH = @as(c_int, 0x0CF2);
pub const GL_UNPACK_SKIP_ROWS = @as(c_int, 0x0CF3);
pub const GL_UNPACK_SKIP_PIXELS = @as(c_int, 0x0CF4);
pub const GL_UNPACK_ALIGNMENT = @as(c_int, 0x0CF5);
pub const GL_PACK_SWAP_BYTES = @as(c_int, 0x0D00);
pub const GL_PACK_LSB_FIRST = @as(c_int, 0x0D01);
pub const GL_PACK_ROW_LENGTH = @as(c_int, 0x0D02);
pub const GL_PACK_SKIP_ROWS = @as(c_int, 0x0D03);
pub const GL_PACK_SKIP_PIXELS = @as(c_int, 0x0D04);
pub const GL_PACK_ALIGNMENT = @as(c_int, 0x0D05);
pub const GL_MAP_COLOR = @as(c_int, 0x0D10);
pub const GL_MAP_STENCIL = @as(c_int, 0x0D11);
pub const GL_INDEX_SHIFT = @as(c_int, 0x0D12);
pub const GL_INDEX_OFFSET = @as(c_int, 0x0D13);
pub const GL_RED_SCALE = @as(c_int, 0x0D14);
pub const GL_RED_BIAS = @as(c_int, 0x0D15);
pub const GL_ZOOM_X = @as(c_int, 0x0D16);
pub const GL_ZOOM_Y = @as(c_int, 0x0D17);
pub const GL_GREEN_SCALE = @as(c_int, 0x0D18);
pub const GL_GREEN_BIAS = @as(c_int, 0x0D19);
pub const GL_BLUE_SCALE = @as(c_int, 0x0D1A);
pub const GL_BLUE_BIAS = @as(c_int, 0x0D1B);
pub const GL_ALPHA_SCALE = @as(c_int, 0x0D1C);
pub const GL_ALPHA_BIAS = @as(c_int, 0x0D1D);
pub const GL_DEPTH_SCALE = @as(c_int, 0x0D1E);
pub const GL_DEPTH_BIAS = @as(c_int, 0x0D1F);
pub const GL_MAX_EVAL_ORDER = @as(c_int, 0x0D30);
pub const GL_MAX_LIGHTS = @as(c_int, 0x0D31);
pub const GL_MAX_CLIP_PLANES = @as(c_int, 0x0D32);
pub const GL_MAX_TEXTURE_SIZE = @as(c_int, 0x0D33);
pub const GL_MAX_PIXEL_MAP_TABLE = @as(c_int, 0x0D34);
pub const GL_MAX_ATTRIB_STACK_DEPTH = @as(c_int, 0x0D35);
pub const GL_MAX_MODELVIEW_STACK_DEPTH = @as(c_int, 0x0D36);
pub const GL_MAX_NAME_STACK_DEPTH = @as(c_int, 0x0D37);
pub const GL_MAX_PROJECTION_STACK_DEPTH = @as(c_int, 0x0D38);
pub const GL_MAX_TEXTURE_STACK_DEPTH = @as(c_int, 0x0D39);
pub const GL_MAX_VIEWPORT_DIMS = @as(c_int, 0x0D3A);
pub const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = @as(c_int, 0x0D3B);
pub const GL_SUBPIXEL_BITS = @as(c_int, 0x0D50);
pub const GL_INDEX_BITS = @as(c_int, 0x0D51);
pub const GL_RED_BITS = @as(c_int, 0x0D52);
pub const GL_GREEN_BITS = @as(c_int, 0x0D53);
pub const GL_BLUE_BITS = @as(c_int, 0x0D54);
pub const GL_ALPHA_BITS = @as(c_int, 0x0D55);
pub const GL_DEPTH_BITS = @as(c_int, 0x0D56);
pub const GL_STENCIL_BITS = @as(c_int, 0x0D57);
pub const GL_ACCUM_RED_BITS = @as(c_int, 0x0D58);
pub const GL_ACCUM_GREEN_BITS = @as(c_int, 0x0D59);
pub const GL_ACCUM_BLUE_BITS = @as(c_int, 0x0D5A);
pub const GL_ACCUM_ALPHA_BITS = @as(c_int, 0x0D5B);
pub const GL_NAME_STACK_DEPTH = @as(c_int, 0x0D70);
pub const GL_AUTO_NORMAL = @as(c_int, 0x0D80);
pub const GL_MAP1_COLOR_4 = @as(c_int, 0x0D90);
pub const GL_MAP1_INDEX = @as(c_int, 0x0D91);
pub const GL_MAP1_NORMAL = @as(c_int, 0x0D92);
pub const GL_MAP1_TEXTURE_COORD_1 = @as(c_int, 0x0D93);
pub const GL_MAP1_TEXTURE_COORD_2 = @as(c_int, 0x0D94);
pub const GL_MAP1_TEXTURE_COORD_3 = @as(c_int, 0x0D95);
pub const GL_MAP1_TEXTURE_COORD_4 = @as(c_int, 0x0D96);
pub const GL_MAP1_VERTEX_3 = @as(c_int, 0x0D97);
pub const GL_MAP1_VERTEX_4 = @as(c_int, 0x0D98);
pub const GL_MAP2_COLOR_4 = @as(c_int, 0x0DB0);
pub const GL_MAP2_INDEX = @as(c_int, 0x0DB1);
pub const GL_MAP2_NORMAL = @as(c_int, 0x0DB2);
pub const GL_MAP2_TEXTURE_COORD_1 = @as(c_int, 0x0DB3);
pub const GL_MAP2_TEXTURE_COORD_2 = @as(c_int, 0x0DB4);
pub const GL_MAP2_TEXTURE_COORD_3 = @as(c_int, 0x0DB5);
pub const GL_MAP2_TEXTURE_COORD_4 = @as(c_int, 0x0DB6);
pub const GL_MAP2_VERTEX_3 = @as(c_int, 0x0DB7);
pub const GL_MAP2_VERTEX_4 = @as(c_int, 0x0DB8);
pub const GL_MAP1_GRID_DOMAIN = @as(c_int, 0x0DD0);
pub const GL_MAP1_GRID_SEGMENTS = @as(c_int, 0x0DD1);
pub const GL_MAP2_GRID_DOMAIN = @as(c_int, 0x0DD2);
pub const GL_MAP2_GRID_SEGMENTS = @as(c_int, 0x0DD3);
pub const GL_TEXTURE_1D = @as(c_int, 0x0DE0);
pub const GL_TEXTURE_2D = @as(c_int, 0x0DE1);
pub const GL_FEEDBACK_BUFFER_POINTER = @as(c_int, 0x0DF0);
pub const GL_FEEDBACK_BUFFER_SIZE = @as(c_int, 0x0DF1);
pub const GL_FEEDBACK_BUFFER_TYPE = @as(c_int, 0x0DF2);
pub const GL_SELECTION_BUFFER_POINTER = @as(c_int, 0x0DF3);
pub const GL_SELECTION_BUFFER_SIZE = @as(c_int, 0x0DF4);
pub const GL_TEXTURE_WIDTH = @as(c_int, 0x1000);
pub const GL_TRANSFORM_BIT = @as(c_int, 0x00001000);
pub const GL_TEXTURE_HEIGHT = @as(c_int, 0x1001);
pub const GL_TEXTURE_INTERNAL_FORMAT = @as(c_int, 0x1003);
pub const GL_TEXTURE_BORDER_COLOR = @as(c_int, 0x1004);
pub const GL_TEXTURE_BORDER = @as(c_int, 0x1005);
pub const GL_DONT_CARE = @as(c_int, 0x1100);
pub const GL_FASTEST = @as(c_int, 0x1101);
pub const GL_NICEST = @as(c_int, 0x1102);
pub const GL_AMBIENT = @as(c_int, 0x1200);
pub const GL_DIFFUSE = @as(c_int, 0x1201);
pub const GL_SPECULAR = @as(c_int, 0x1202);
pub const GL_POSITION = @as(c_int, 0x1203);
pub const GL_SPOT_DIRECTION = @as(c_int, 0x1204);
pub const GL_SPOT_EXPONENT = @as(c_int, 0x1205);
pub const GL_SPOT_CUTOFF = @as(c_int, 0x1206);
pub const GL_CONSTANT_ATTENUATION = @as(c_int, 0x1207);
pub const GL_LINEAR_ATTENUATION = @as(c_int, 0x1208);
pub const GL_QUADRATIC_ATTENUATION = @as(c_int, 0x1209);
pub const GL_COMPILE = @as(c_int, 0x1300);
pub const GL_COMPILE_AND_EXECUTE = @as(c_int, 0x1301);
pub const GL_BYTE = @as(c_int, 0x1400);
pub const GL_UNSIGNED_BYTE = @as(c_int, 0x1401);
pub const GL_SHORT = @as(c_int, 0x1402);
pub const GL_UNSIGNED_SHORT = @as(c_int, 0x1403);
pub const GL_INT = @as(c_int, 0x1404);
pub const GL_UNSIGNED_INT = @as(c_int, 0x1405);
pub const GL_FLOAT = @as(c_int, 0x1406);
pub const GL_2_BYTES = @as(c_int, 0x1407);
pub const GL_3_BYTES = @as(c_int, 0x1408);
pub const GL_4_BYTES = @as(c_int, 0x1409);
pub const GL_DOUBLE = @as(c_int, 0x140A);
pub const GL_CLEAR = @as(c_int, 0x1500);
pub const GL_AND = @as(c_int, 0x1501);
pub const GL_AND_REVERSE = @as(c_int, 0x1502);
pub const GL_COPY = @as(c_int, 0x1503);
pub const GL_AND_INVERTED = @as(c_int, 0x1504);
pub const GL_NOOP = @as(c_int, 0x1505);
pub const GL_XOR = @as(c_int, 0x1506);
pub const GL_OR = @as(c_int, 0x1507);
pub const GL_NOR = @as(c_int, 0x1508);
pub const GL_EQUIV = @as(c_int, 0x1509);
pub const GL_INVERT = @as(c_int, 0x150A);
pub const GL_OR_REVERSE = @as(c_int, 0x150B);
pub const GL_COPY_INVERTED = @as(c_int, 0x150C);
pub const GL_OR_INVERTED = @as(c_int, 0x150D);
pub const GL_NAND = @as(c_int, 0x150E);
pub const GL_SET = @as(c_int, 0x150F);
pub const GL_EMISSION = @as(c_int, 0x1600);
pub const GL_SHININESS = @as(c_int, 0x1601);
pub const GL_AMBIENT_AND_DIFFUSE = @as(c_int, 0x1602);
pub const GL_COLOR_INDEXES = @as(c_int, 0x1603);
pub const GL_MODELVIEW = @as(c_int, 0x1700);
pub const GL_PROJECTION = @as(c_int, 0x1701);
pub const GL_TEXTURE = @as(c_int, 0x1702);
pub const GL_COLOR = @as(c_int, 0x1800);
pub const GL_DEPTH = @as(c_int, 0x1801);
pub const GL_STENCIL = @as(c_int, 0x1802);
pub const GL_COLOR_INDEX = @as(c_int, 0x1900);
pub const GL_STENCIL_INDEX = @as(c_int, 0x1901);
pub const GL_DEPTH_COMPONENT = @as(c_int, 0x1902);
pub const GL_RED = @as(c_int, 0x1903);
pub const GL_GREEN = @as(c_int, 0x1904);
pub const GL_BLUE = @as(c_int, 0x1905);
pub const GL_ALPHA = @as(c_int, 0x1906);
pub const GL_RGB = @as(c_int, 0x1907);
pub const GL_RGBA = @as(c_int, 0x1908);
pub const GL_LUMINANCE = @as(c_int, 0x1909);
pub const GL_LUMINANCE_ALPHA = @as(c_int, 0x190A);
pub const GL_BITMAP = @as(c_int, 0x1A00);
pub const GL_POINT = @as(c_int, 0x1B00);
pub const GL_LINE = @as(c_int, 0x1B01);
pub const GL_FILL = @as(c_int, 0x1B02);
pub const GL_RENDER = @as(c_int, 0x1C00);
pub const GL_FEEDBACK = @as(c_int, 0x1C01);
pub const GL_SELECT = @as(c_int, 0x1C02);
pub const GL_FLAT = @as(c_int, 0x1D00);
pub const GL_SMOOTH = @as(c_int, 0x1D01);
pub const GL_KEEP = @as(c_int, 0x1E00);
pub const GL_REPLACE = @as(c_int, 0x1E01);
pub const GL_INCR = @as(c_int, 0x1E02);
pub const GL_DECR = @as(c_int, 0x1E03);
pub const GL_VENDOR = @as(c_int, 0x1F00);
pub const GL_RENDERER = @as(c_int, 0x1F01);
pub const GL_VERSION = @as(c_int, 0x1F02);
pub const GL_EXTENSIONS = @as(c_int, 0x1F03);
pub const GL_S = @as(c_int, 0x2000);
pub const GL_ENABLE_BIT = @as(c_int, 0x00002000);
pub const GL_T = @as(c_int, 0x2001);
pub const GL_R = @as(c_int, 0x2002);
pub const GL_Q = @as(c_int, 0x2003);
pub const GL_MODULATE = @as(c_int, 0x2100);
pub const GL_DECAL = @as(c_int, 0x2101);
pub const GL_TEXTURE_ENV_MODE = @as(c_int, 0x2200);
pub const GL_TEXTURE_ENV_COLOR = @as(c_int, 0x2201);
pub const GL_TEXTURE_ENV = @as(c_int, 0x2300);
pub const GL_EYE_LINEAR = @as(c_int, 0x2400);
pub const GL_OBJECT_LINEAR = @as(c_int, 0x2401);
pub const GL_SPHERE_MAP = @as(c_int, 0x2402);
pub const GL_TEXTURE_GEN_MODE = @as(c_int, 0x2500);
pub const GL_OBJECT_PLANE = @as(c_int, 0x2501);
pub const GL_EYE_PLANE = @as(c_int, 0x2502);
pub const GL_NEAREST = @as(c_int, 0x2600);
pub const GL_LINEAR = @as(c_int, 0x2601);
pub const GL_NEAREST_MIPMAP_NEAREST = @as(c_int, 0x2700);
pub const GL_LINEAR_MIPMAP_NEAREST = @as(c_int, 0x2701);
pub const GL_NEAREST_MIPMAP_LINEAR = @as(c_int, 0x2702);
pub const GL_LINEAR_MIPMAP_LINEAR = @as(c_int, 0x2703);
pub const GL_TEXTURE_MAG_FILTER = @as(c_int, 0x2800);
pub const GL_TEXTURE_MIN_FILTER = @as(c_int, 0x2801);
pub const GL_TEXTURE_WRAP_S = @as(c_int, 0x2802);
pub const GL_TEXTURE_WRAP_T = @as(c_int, 0x2803);
pub const GL_CLAMP = @as(c_int, 0x2900);
pub const GL_REPEAT = @as(c_int, 0x2901);
pub const GL_POLYGON_OFFSET_UNITS = @as(c_int, 0x2A00);
pub const GL_POLYGON_OFFSET_POINT = @as(c_int, 0x2A01);
pub const GL_POLYGON_OFFSET_LINE = @as(c_int, 0x2A02);
pub const GL_R3_G3_B2 = @as(c_int, 0x2A10);
pub const GL_V2F = @as(c_int, 0x2A20);
pub const GL_V3F = @as(c_int, 0x2A21);
pub const GL_C4UB_V2F = @as(c_int, 0x2A22);
pub const GL_C4UB_V3F = @as(c_int, 0x2A23);
pub const GL_C3F_V3F = @as(c_int, 0x2A24);
pub const GL_N3F_V3F = @as(c_int, 0x2A25);
pub const GL_C4F_N3F_V3F = @as(c_int, 0x2A26);
pub const GL_T2F_V3F = @as(c_int, 0x2A27);
pub const GL_T4F_V4F = @as(c_int, 0x2A28);
pub const GL_T2F_C4UB_V3F = @as(c_int, 0x2A29);
pub const GL_T2F_C3F_V3F = @as(c_int, 0x2A2A);
pub const GL_T2F_N3F_V3F = @as(c_int, 0x2A2B);
pub const GL_T2F_C4F_N3F_V3F = @as(c_int, 0x2A2C);
pub const GL_T4F_C4F_N3F_V4F = @as(c_int, 0x2A2D);
pub const GL_CLIP_PLANE0 = @as(c_int, 0x3000);
pub const GL_CLIP_PLANE1 = @as(c_int, 0x3001);
pub const GL_CLIP_PLANE2 = @as(c_int, 0x3002);
pub const GL_CLIP_PLANE3 = @as(c_int, 0x3003);
pub const GL_CLIP_PLANE4 = @as(c_int, 0x3004);
pub const GL_CLIP_PLANE5 = @as(c_int, 0x3005);
pub const GL_LIGHT0 = @as(c_int, 0x4000);
pub const GL_COLOR_BUFFER_BIT = @as(c_int, 0x00004000);
pub const GL_LIGHT1 = @as(c_int, 0x4001);
pub const GL_LIGHT2 = @as(c_int, 0x4002);
pub const GL_LIGHT3 = @as(c_int, 0x4003);
pub const GL_LIGHT4 = @as(c_int, 0x4004);
pub const GL_LIGHT5 = @as(c_int, 0x4005);
pub const GL_LIGHT6 = @as(c_int, 0x4006);
pub const GL_LIGHT7 = @as(c_int, 0x4007);
pub const GL_HINT_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex);
pub const GL_POLYGON_OFFSET_FILL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8037, .hex);
pub const GL_POLYGON_OFFSET_FACTOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8038, .hex);
pub const GL_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803B, .hex);
pub const GL_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hex);
pub const GL_ALPHA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803D, .hex);
pub const GL_ALPHA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803E, .hex);
pub const GL_LUMINANCE4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803F, .hex);
pub const GL_LUMINANCE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hex);
pub const GL_LUMINANCE12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8041, .hex);
pub const GL_LUMINANCE16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8042, .hex);
pub const GL_LUMINANCE4_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8043, .hex);
pub const GL_LUMINANCE6_ALPHA2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8044, .hex);
pub const GL_LUMINANCE8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hex);
pub const GL_LUMINANCE12_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8046, .hex);
pub const GL_LUMINANCE12_ALPHA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8047, .hex);
pub const GL_LUMINANCE16_ALPHA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8048, .hex);
pub const GL_INTENSITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8049, .hex);
pub const GL_INTENSITY4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804A, .hex);
pub const GL_INTENSITY8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804B, .hex);
pub const GL_INTENSITY12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804C, .hex);
pub const GL_INTENSITY16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804D, .hex);
pub const GL_RGB4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804F, .hex);
pub const GL_RGB5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8050, .hex);
pub const GL_RGB8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hex);
pub const GL_RGB10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8052, .hex);
pub const GL_RGB12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8053, .hex);
pub const GL_RGB16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8054, .hex);
pub const GL_RGBA2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8055, .hex);
pub const GL_RGBA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hex);
pub const GL_RGB5_A1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hex);
pub const GL_RGBA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hex);
pub const GL_RGB10_A2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8059, .hex);
pub const GL_RGBA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805A, .hex);
pub const GL_RGBA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805B, .hex);
pub const GL_TEXTURE_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805C, .hex);
pub const GL_TEXTURE_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805D, .hex);
pub const GL_TEXTURE_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805E, .hex);
pub const GL_TEXTURE_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805F, .hex);
pub const GL_TEXTURE_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8060, .hex);
pub const GL_TEXTURE_INTENSITY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8061, .hex);
pub const GL_PROXY_TEXTURE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8063, .hex);
pub const GL_PROXY_TEXTURE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8064, .hex);
pub const GL_TEXTURE_PRIORITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8066, .hex);
pub const GL_TEXTURE_RESIDENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8067, .hex);
pub const GL_TEXTURE_BINDING_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8068, .hex);
pub const GL_TEXTURE_BINDING_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8069, .hex);
pub const GL_VERTEX_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8074, .hex);
pub const GL_NORMAL_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8075, .hex);
pub const GL_COLOR_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8076, .hex);
pub const GL_INDEX_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8077, .hex);
pub const GL_TEXTURE_COORD_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8078, .hex);
pub const GL_EDGE_FLAG_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8079, .hex);
pub const GL_VERTEX_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807A, .hex);
pub const GL_VERTEX_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807B, .hex);
pub const GL_VERTEX_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807C, .hex);
pub const GL_NORMAL_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807E, .hex);
pub const GL_NORMAL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807F, .hex);
pub const GL_COLOR_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8081, .hex);
pub const GL_COLOR_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8082, .hex);
pub const GL_COLOR_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8083, .hex);
pub const GL_INDEX_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8085, .hex);
pub const GL_INDEX_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8086, .hex);
pub const GL_TEXTURE_COORD_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8088, .hex);
pub const GL_TEXTURE_COORD_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8089, .hex);
pub const GL_TEXTURE_COORD_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808A, .hex);
pub const GL_EDGE_FLAG_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808C, .hex);
pub const GL_VERTEX_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808E, .hex);
pub const GL_NORMAL_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808F, .hex);
pub const GL_COLOR_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8090, .hex);
pub const GL_INDEX_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8091, .hex);
pub const GL_TEXTURE_COORD_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8092, .hex);
pub const GL_EDGE_FLAG_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8093, .hex);
pub const GL_COLOR_INDEX1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E2, .hex);
pub const GL_COLOR_INDEX2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E3, .hex);
pub const GL_COLOR_INDEX4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E4, .hex);
pub const GL_COLOR_INDEX8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E5, .hex);
pub const GL_COLOR_INDEX12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E6, .hex);
pub const GL_COLOR_INDEX16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E7, .hex);
pub const GL_EVAL_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const GL_LIST_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex);
pub const GL_TEXTURE_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex);
pub const GL_SCISSOR_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex);
pub const GL_ALL_ATTRIB_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000fffff, .hex);
pub const GL_CLIENT_ALL_ATTRIB_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex);
// /usr/include/GL/glew.h:1199:9: warning: macro 'GLEW_VERSION_1_1' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_1_1() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_1_1)) {
    return GLEW_GET_VAR(__GLEW_VERSION_1_1);
}
pub const __glu_h__ = "";
pub const GLAPIENTRYP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/GL/glu.h:45:9
pub const GLU_EXT_object_space_tess = @as(c_int, 1);
pub const GLU_EXT_nurbs_tessellator = @as(c_int, 1);
pub const GLU_FALSE = @as(c_int, 0);
pub const GLU_TRUE = @as(c_int, 1);
pub const GLU_VERSION_1_1 = @as(c_int, 1);
pub const GLU_VERSION_1_2 = @as(c_int, 1);
pub const GLU_VERSION_1_3 = @as(c_int, 1);
pub const GLU_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100800, .decimal);
pub const GLU_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100801, .decimal);
pub const GLU_INVALID_ENUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100900, .decimal);
pub const GLU_INVALID_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100901, .decimal);
pub const GLU_OUT_OF_MEMORY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100902, .decimal);
pub const GLU_INCOMPATIBLE_GL_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100903, .decimal);
pub const GLU_INVALID_OPERATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100904, .decimal);
pub const GLU_OUTLINE_POLYGON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100240, .decimal);
pub const GLU_OUTLINE_PATCH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100241, .decimal);
pub const GLU_NURBS_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100103, .decimal);
pub const GLU_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100103, .decimal);
pub const GLU_NURBS_BEGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100164, .decimal);
pub const GLU_NURBS_BEGIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100164, .decimal);
pub const GLU_NURBS_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100165, .decimal);
pub const GLU_NURBS_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100165, .decimal);
pub const GLU_NURBS_NORMAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100166, .decimal);
pub const GLU_NURBS_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100166, .decimal);
pub const GLU_NURBS_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100167, .decimal);
pub const GLU_NURBS_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100167, .decimal);
pub const GLU_NURBS_TEXTURE_COORD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100168, .decimal);
pub const GLU_NURBS_TEX_COORD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100168, .decimal);
pub const GLU_NURBS_END = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100169, .decimal);
pub const GLU_NURBS_END_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100169, .decimal);
pub const GLU_NURBS_BEGIN_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100170, .decimal);
pub const GLU_NURBS_BEGIN_DATA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100170, .decimal);
pub const GLU_NURBS_VERTEX_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100171, .decimal);
pub const GLU_NURBS_VERTEX_DATA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100171, .decimal);
pub const GLU_NURBS_NORMAL_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100172, .decimal);
pub const GLU_NURBS_NORMAL_DATA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100172, .decimal);
pub const GLU_NURBS_COLOR_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100173, .decimal);
pub const GLU_NURBS_COLOR_DATA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100173, .decimal);
pub const GLU_NURBS_TEXTURE_COORD_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100174, .decimal);
pub const GLU_NURBS_TEX_COORD_DATA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100174, .decimal);
pub const GLU_NURBS_END_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100175, .decimal);
pub const GLU_NURBS_END_DATA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100175, .decimal);
pub const GLU_NURBS_ERROR1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100251, .decimal);
pub const GLU_NURBS_ERROR2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100252, .decimal);
pub const GLU_NURBS_ERROR3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100253, .decimal);
pub const GLU_NURBS_ERROR4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100254, .decimal);
pub const GLU_NURBS_ERROR5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100255, .decimal);
pub const GLU_NURBS_ERROR6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100256, .decimal);
pub const GLU_NURBS_ERROR7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100257, .decimal);
pub const GLU_NURBS_ERROR8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100258, .decimal);
pub const GLU_NURBS_ERROR9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100259, .decimal);
pub const GLU_NURBS_ERROR10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100260, .decimal);
pub const GLU_NURBS_ERROR11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100261, .decimal);
pub const GLU_NURBS_ERROR12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100262, .decimal);
pub const GLU_NURBS_ERROR13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100263, .decimal);
pub const GLU_NURBS_ERROR14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100264, .decimal);
pub const GLU_NURBS_ERROR15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100265, .decimal);
pub const GLU_NURBS_ERROR16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100266, .decimal);
pub const GLU_NURBS_ERROR17 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100267, .decimal);
pub const GLU_NURBS_ERROR18 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100268, .decimal);
pub const GLU_NURBS_ERROR19 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100269, .decimal);
pub const GLU_NURBS_ERROR20 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100270, .decimal);
pub const GLU_NURBS_ERROR21 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100271, .decimal);
pub const GLU_NURBS_ERROR22 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100272, .decimal);
pub const GLU_NURBS_ERROR23 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100273, .decimal);
pub const GLU_NURBS_ERROR24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100274, .decimal);
pub const GLU_NURBS_ERROR25 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100275, .decimal);
pub const GLU_NURBS_ERROR26 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100276, .decimal);
pub const GLU_NURBS_ERROR27 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100277, .decimal);
pub const GLU_NURBS_ERROR28 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100278, .decimal);
pub const GLU_NURBS_ERROR29 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100279, .decimal);
pub const GLU_NURBS_ERROR30 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100280, .decimal);
pub const GLU_NURBS_ERROR31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100281, .decimal);
pub const GLU_NURBS_ERROR32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100282, .decimal);
pub const GLU_NURBS_ERROR33 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100283, .decimal);
pub const GLU_NURBS_ERROR34 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100284, .decimal);
pub const GLU_NURBS_ERROR35 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100285, .decimal);
pub const GLU_NURBS_ERROR36 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100286, .decimal);
pub const GLU_NURBS_ERROR37 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100287, .decimal);
pub const GLU_AUTO_LOAD_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100200, .decimal);
pub const GLU_CULLING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100201, .decimal);
pub const GLU_SAMPLING_TOLERANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100203, .decimal);
pub const GLU_DISPLAY_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100204, .decimal);
pub const GLU_PARAMETRIC_TOLERANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100202, .decimal);
pub const GLU_SAMPLING_METHOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100205, .decimal);
pub const GLU_U_STEP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100206, .decimal);
pub const GLU_V_STEP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100207, .decimal);
pub const GLU_NURBS_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100160, .decimal);
pub const GLU_NURBS_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100160, .decimal);
pub const GLU_NURBS_TESSELLATOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100161, .decimal);
pub const GLU_NURBS_TESSELLATOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100161, .decimal);
pub const GLU_NURBS_RENDERER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100162, .decimal);
pub const GLU_NURBS_RENDERER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100162, .decimal);
pub const GLU_OBJECT_PARAMETRIC_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100208, .decimal);
pub const GLU_OBJECT_PARAMETRIC_ERROR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100208, .decimal);
pub const GLU_OBJECT_PATH_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100209, .decimal);
pub const GLU_OBJECT_PATH_LENGTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100209, .decimal);
pub const GLU_PATH_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100215, .decimal);
pub const GLU_PARAMETRIC_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100216, .decimal);
pub const GLU_DOMAIN_DISTANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100217, .decimal);
pub const GLU_MAP1_TRIM_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100210, .decimal);
pub const GLU_MAP1_TRIM_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100211, .decimal);
pub const GLU_POINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100010, .decimal);
pub const GLU_LINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100011, .decimal);
pub const GLU_FILL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100012, .decimal);
pub const GLU_SILHOUETTE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100013, .decimal);
pub const GLU_SMOOTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const GLU_FLAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100001, .decimal);
pub const GLU_NONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100002, .decimal);
pub const GLU_OUTSIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100020, .decimal);
pub const GLU_INSIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100021, .decimal);
pub const GLU_TESS_BEGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100100, .decimal);
pub const GLU_BEGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100100, .decimal);
pub const GLU_TESS_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100101, .decimal);
pub const GLU_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100101, .decimal);
pub const GLU_TESS_END = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100102, .decimal);
pub const GLU_END = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100102, .decimal);
pub const GLU_TESS_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100103, .decimal);
pub const GLU_TESS_EDGE_FLAG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100104, .decimal);
pub const GLU_EDGE_FLAG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100104, .decimal);
pub const GLU_TESS_COMBINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100105, .decimal);
pub const GLU_TESS_BEGIN_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100106, .decimal);
pub const GLU_TESS_VERTEX_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100107, .decimal);
pub const GLU_TESS_END_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100108, .decimal);
pub const GLU_TESS_ERROR_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100109, .decimal);
pub const GLU_TESS_EDGE_FLAG_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100110, .decimal);
pub const GLU_TESS_COMBINE_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100111, .decimal);
pub const GLU_CW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100120, .decimal);
pub const GLU_CCW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100121, .decimal);
pub const GLU_INTERIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100122, .decimal);
pub const GLU_EXTERIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100123, .decimal);
pub const GLU_UNKNOWN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100124, .decimal);
pub const GLU_TESS_WINDING_RULE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100140, .decimal);
pub const GLU_TESS_BOUNDARY_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100141, .decimal);
pub const GLU_TESS_TOLERANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100142, .decimal);
pub const GLU_TESS_ERROR1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100151, .decimal);
pub const GLU_TESS_ERROR2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100152, .decimal);
pub const GLU_TESS_ERROR3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100153, .decimal);
pub const GLU_TESS_ERROR4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100154, .decimal);
pub const GLU_TESS_ERROR5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100155, .decimal);
pub const GLU_TESS_ERROR6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100156, .decimal);
pub const GLU_TESS_ERROR7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100157, .decimal);
pub const GLU_TESS_ERROR8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100158, .decimal);
pub const GLU_TESS_MISSING_BEGIN_POLYGON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100151, .decimal);
pub const GLU_TESS_MISSING_BEGIN_CONTOUR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100152, .decimal);
pub const GLU_TESS_MISSING_END_POLYGON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100153, .decimal);
pub const GLU_TESS_MISSING_END_CONTOUR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100154, .decimal);
pub const GLU_TESS_COORD_TOO_LARGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100155, .decimal);
pub const GLU_TESS_NEED_COMBINE_CALLBACK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100156, .decimal);
pub const GLU_TESS_WINDING_ODD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100130, .decimal);
pub const GLU_TESS_WINDING_NONZERO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100131, .decimal);
pub const GLU_TESS_WINDING_POSITIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100132, .decimal);
pub const GLU_TESS_WINDING_NEGATIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100133, .decimal);
pub const GLU_TESS_WINDING_ABS_GEQ_TWO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100134, .decimal);
pub const GLU_TESS_MAX_COORD = @as(f64, 1.0e150);
pub const GL_VERSION_1_2 = @as(c_int, 1);
pub const GL_SMOOTH_POINT_SIZE_RANGE = @as(c_int, 0x0B12);
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY = @as(c_int, 0x0B13);
pub const GL_SMOOTH_LINE_WIDTH_RANGE = @as(c_int, 0x0B22);
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY = @as(c_int, 0x0B23);
pub const GL_UNSIGNED_BYTE_3_3_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8032, .hex);
pub const GL_UNSIGNED_SHORT_4_4_4_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8033, .hex);
pub const GL_UNSIGNED_SHORT_5_5_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8034, .hex);
pub const GL_UNSIGNED_INT_8_8_8_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8035, .hex);
pub const GL_UNSIGNED_INT_10_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8036, .hex);
pub const GL_RESCALE_NORMAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803A, .hex);
pub const GL_TEXTURE_BINDING_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hex);
pub const GL_PACK_SKIP_IMAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806B, .hex);
pub const GL_PACK_IMAGE_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806C, .hex);
pub const GL_UNPACK_SKIP_IMAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806D, .hex);
pub const GL_UNPACK_IMAGE_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806E, .hex);
pub const GL_TEXTURE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hex);
pub const GL_PROXY_TEXTURE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8070, .hex);
pub const GL_TEXTURE_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8071, .hex);
pub const GL_TEXTURE_WRAP_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hex);
pub const GL_MAX_3D_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hex);
pub const GL_BGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E0, .hex);
pub const GL_BGRA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hex);
pub const GL_MAX_ELEMENTS_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E8, .hex);
pub const GL_MAX_ELEMENTS_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E9, .hex);
pub const GL_CLAMP_TO_EDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812F, .hex);
pub const GL_TEXTURE_MIN_LOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813A, .hex);
pub const GL_TEXTURE_MAX_LOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813B, .hex);
pub const GL_TEXTURE_BASE_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813C, .hex);
pub const GL_TEXTURE_MAX_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hex);
pub const GL_LIGHT_MODEL_COLOR_CONTROL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F8, .hex);
pub const GL_SINGLE_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F9, .hex);
pub const GL_SEPARATE_SPECULAR_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FA, .hex);
pub const GL_UNSIGNED_BYTE_2_3_3_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8362, .hex);
pub const GL_UNSIGNED_SHORT_5_6_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8363, .hex);
pub const GL_UNSIGNED_SHORT_5_6_5_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8364, .hex);
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8365, .hex);
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8366, .hex);
pub const GL_UNSIGNED_INT_8_8_8_8_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8367, .hex);
pub const GL_ALIASED_POINT_SIZE_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846D, .hex);
pub const GL_ALIASED_LINE_WIDTH_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846E, .hex);
// /usr/include/GL/glew.h:1274:9: warning: macro 'glCopyTexSubImage3D' contains a runtime value, translated to function
pub inline fn glCopyTexSubImage3D() @TypeOf(GLEW_GET_FUN(__glewCopyTexSubImage3D)) {
    return GLEW_GET_FUN(__glewCopyTexSubImage3D);
}
// /usr/include/GL/glew.h:1275:9: warning: macro 'glDrawRangeElements' contains a runtime value, translated to function
pub inline fn glDrawRangeElements() @TypeOf(GLEW_GET_FUN(__glewDrawRangeElements)) {
    return GLEW_GET_FUN(__glewDrawRangeElements);
}
// /usr/include/GL/glew.h:1276:9: warning: macro 'glTexImage3D' contains a runtime value, translated to function
pub inline fn glTexImage3D() @TypeOf(GLEW_GET_FUN(__glewTexImage3D)) {
    return GLEW_GET_FUN(__glewTexImage3D);
}
// /usr/include/GL/glew.h:1277:9: warning: macro 'glTexSubImage3D' contains a runtime value, translated to function
pub inline fn glTexSubImage3D() @TypeOf(GLEW_GET_FUN(__glewTexSubImage3D)) {
    return GLEW_GET_FUN(__glewTexSubImage3D);
}
// /usr/include/GL/glew.h:1279:9: warning: macro 'GLEW_VERSION_1_2' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_1_2() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_1_2)) {
    return GLEW_GET_VAR(__GLEW_VERSION_1_2);
}
pub const GL_VERSION_1_2_1 = @as(c_int, 1);
// /usr/include/GL/glew.h:1288:9: warning: macro 'GLEW_VERSION_1_2_1' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_1_2_1() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_1_2_1)) {
    return GLEW_GET_VAR(__GLEW_VERSION_1_2_1);
}
pub const GL_VERSION_1_3 = @as(c_int, 1);
pub const GL_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hex);
pub const GL_SAMPLE_ALPHA_TO_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hex);
pub const GL_SAMPLE_ALPHA_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hex);
pub const GL_SAMPLE_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hex);
pub const GL_SAMPLE_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hex);
pub const GL_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hex);
pub const GL_SAMPLE_COVERAGE_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hex);
pub const GL_SAMPLE_COVERAGE_INVERT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hex);
pub const GL_CLAMP_TO_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hex);
pub const GL_TEXTURE0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C0, .hex);
pub const GL_TEXTURE1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C1, .hex);
pub const GL_TEXTURE2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C2, .hex);
pub const GL_TEXTURE3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C3, .hex);
pub const GL_TEXTURE4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C4, .hex);
pub const GL_TEXTURE5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C5, .hex);
pub const GL_TEXTURE6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C6, .hex);
pub const GL_TEXTURE7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C7, .hex);
pub const GL_TEXTURE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C8, .hex);
pub const GL_TEXTURE9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C9, .hex);
pub const GL_TEXTURE10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CA, .hex);
pub const GL_TEXTURE11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CB, .hex);
pub const GL_TEXTURE12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CC, .hex);
pub const GL_TEXTURE13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CD, .hex);
pub const GL_TEXTURE14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CE, .hex);
pub const GL_TEXTURE15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CF, .hex);
pub const GL_TEXTURE16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D0, .hex);
pub const GL_TEXTURE17 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D1, .hex);
pub const GL_TEXTURE18 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D2, .hex);
pub const GL_TEXTURE19 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D3, .hex);
pub const GL_TEXTURE20 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D4, .hex);
pub const GL_TEXTURE21 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D5, .hex);
pub const GL_TEXTURE22 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D6, .hex);
pub const GL_TEXTURE23 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D7, .hex);
pub const GL_TEXTURE24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D8, .hex);
pub const GL_TEXTURE25 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D9, .hex);
pub const GL_TEXTURE26 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DA, .hex);
pub const GL_TEXTURE27 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DB, .hex);
pub const GL_TEXTURE28 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DC, .hex);
pub const GL_TEXTURE29 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DD, .hex);
pub const GL_TEXTURE30 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DE, .hex);
pub const GL_TEXTURE31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DF, .hex);
pub const GL_ACTIVE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E0, .hex);
pub const GL_CLIENT_ACTIVE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E1, .hex);
pub const GL_MAX_TEXTURE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E2, .hex);
pub const GL_TRANSPOSE_MODELVIEW_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E3, .hex);
pub const GL_TRANSPOSE_PROJECTION_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E4, .hex);
pub const GL_TRANSPOSE_TEXTURE_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E5, .hex);
pub const GL_TRANSPOSE_COLOR_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E6, .hex);
pub const GL_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E7, .hex);
pub const GL_COMPRESSED_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E9, .hex);
pub const GL_COMPRESSED_LUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EA, .hex);
pub const GL_COMPRESSED_LUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EB, .hex);
pub const GL_COMPRESSED_INTENSITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EC, .hex);
pub const GL_COMPRESSED_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84ED, .hex);
pub const GL_COMPRESSED_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EE, .hex);
pub const GL_TEXTURE_COMPRESSION_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EF, .hex);
pub const GL_NORMAL_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hex);
pub const GL_REFLECTION_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hex);
pub const GL_TEXTURE_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hex);
pub const GL_TEXTURE_BINDING_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hex);
pub const GL_PROXY_TEXTURE_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hex);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hex);
pub const GL_COMBINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hex);
pub const GL_COMBINE_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hex);
pub const GL_COMBINE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hex);
pub const GL_RGB_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hex);
pub const GL_ADD_SIGNED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hex);
pub const GL_INTERPOLATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hex);
pub const GL_CONSTANT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hex);
pub const GL_PRIMARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hex);
pub const GL_PREVIOUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hex);
pub const GL_SOURCE0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hex);
pub const GL_SOURCE1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hex);
pub const GL_SOURCE2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hex);
pub const GL_SOURCE0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hex);
pub const GL_SOURCE1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hex);
pub const GL_SOURCE2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hex);
pub const GL_OPERAND0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hex);
pub const GL_OPERAND1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hex);
pub const GL_OPERAND2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hex);
pub const GL_OPERAND0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hex);
pub const GL_OPERAND1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hex);
pub const GL_OPERAND2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hex);
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A0, .hex);
pub const GL_TEXTURE_COMPRESSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A1, .hex);
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A2, .hex);
pub const GL_COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A3, .hex);
pub const GL_DOT3_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AE, .hex);
pub const GL_DOT3_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AF, .hex);
pub const GL_MULTISAMPLE_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
// /usr/include/GL/glew.h:1441:9: warning: macro 'glActiveTexture' contains a runtime value, translated to function
pub inline fn glActiveTexture() @TypeOf(GLEW_GET_FUN(__glewActiveTexture)) {
    return GLEW_GET_FUN(__glewActiveTexture);
}
// /usr/include/GL/glew.h:1442:9: warning: macro 'glClientActiveTexture' contains a runtime value, translated to function
pub inline fn glClientActiveTexture() @TypeOf(GLEW_GET_FUN(__glewClientActiveTexture)) {
    return GLEW_GET_FUN(__glewClientActiveTexture);
}
// /usr/include/GL/glew.h:1443:9: warning: macro 'glCompressedTexImage1D' contains a runtime value, translated to function
pub inline fn glCompressedTexImage1D() @TypeOf(GLEW_GET_FUN(__glewCompressedTexImage1D)) {
    return GLEW_GET_FUN(__glewCompressedTexImage1D);
}
// /usr/include/GL/glew.h:1444:9: warning: macro 'glCompressedTexImage2D' contains a runtime value, translated to function
pub inline fn glCompressedTexImage2D() @TypeOf(GLEW_GET_FUN(__glewCompressedTexImage2D)) {
    return GLEW_GET_FUN(__glewCompressedTexImage2D);
}
// /usr/include/GL/glew.h:1445:9: warning: macro 'glCompressedTexImage3D' contains a runtime value, translated to function
pub inline fn glCompressedTexImage3D() @TypeOf(GLEW_GET_FUN(__glewCompressedTexImage3D)) {
    return GLEW_GET_FUN(__glewCompressedTexImage3D);
}
// /usr/include/GL/glew.h:1446:9: warning: macro 'glCompressedTexSubImage1D' contains a runtime value, translated to function
pub inline fn glCompressedTexSubImage1D() @TypeOf(GLEW_GET_FUN(__glewCompressedTexSubImage1D)) {
    return GLEW_GET_FUN(__glewCompressedTexSubImage1D);
}
// /usr/include/GL/glew.h:1447:9: warning: macro 'glCompressedTexSubImage2D' contains a runtime value, translated to function
pub inline fn glCompressedTexSubImage2D() @TypeOf(GLEW_GET_FUN(__glewCompressedTexSubImage2D)) {
    return GLEW_GET_FUN(__glewCompressedTexSubImage2D);
}
// /usr/include/GL/glew.h:1448:9: warning: macro 'glCompressedTexSubImage3D' contains a runtime value, translated to function
pub inline fn glCompressedTexSubImage3D() @TypeOf(GLEW_GET_FUN(__glewCompressedTexSubImage3D)) {
    return GLEW_GET_FUN(__glewCompressedTexSubImage3D);
}
// /usr/include/GL/glew.h:1449:9: warning: macro 'glGetCompressedTexImage' contains a runtime value, translated to function
pub inline fn glGetCompressedTexImage() @TypeOf(GLEW_GET_FUN(__glewGetCompressedTexImage)) {
    return GLEW_GET_FUN(__glewGetCompressedTexImage);
}
// /usr/include/GL/glew.h:1450:9: warning: macro 'glLoadTransposeMatrixd' contains a runtime value, translated to function
pub inline fn glLoadTransposeMatrixd() @TypeOf(GLEW_GET_FUN(__glewLoadTransposeMatrixd)) {
    return GLEW_GET_FUN(__glewLoadTransposeMatrixd);
}
// /usr/include/GL/glew.h:1451:9: warning: macro 'glLoadTransposeMatrixf' contains a runtime value, translated to function
pub inline fn glLoadTransposeMatrixf() @TypeOf(GLEW_GET_FUN(__glewLoadTransposeMatrixf)) {
    return GLEW_GET_FUN(__glewLoadTransposeMatrixf);
}
// /usr/include/GL/glew.h:1452:9: warning: macro 'glMultTransposeMatrixd' contains a runtime value, translated to function
pub inline fn glMultTransposeMatrixd() @TypeOf(GLEW_GET_FUN(__glewMultTransposeMatrixd)) {
    return GLEW_GET_FUN(__glewMultTransposeMatrixd);
}
// /usr/include/GL/glew.h:1453:9: warning: macro 'glMultTransposeMatrixf' contains a runtime value, translated to function
pub inline fn glMultTransposeMatrixf() @TypeOf(GLEW_GET_FUN(__glewMultTransposeMatrixf)) {
    return GLEW_GET_FUN(__glewMultTransposeMatrixf);
}
// /usr/include/GL/glew.h:1454:9: warning: macro 'glMultiTexCoord1d' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1d() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1d)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1d);
}
// /usr/include/GL/glew.h:1455:9: warning: macro 'glMultiTexCoord1dv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1dv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1dv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1dv);
}
// /usr/include/GL/glew.h:1456:9: warning: macro 'glMultiTexCoord1f' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1f() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1f)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1f);
}
// /usr/include/GL/glew.h:1457:9: warning: macro 'glMultiTexCoord1fv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1fv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1fv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1fv);
}
// /usr/include/GL/glew.h:1458:9: warning: macro 'glMultiTexCoord1i' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1i() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1i)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1i);
}
// /usr/include/GL/glew.h:1459:9: warning: macro 'glMultiTexCoord1iv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1iv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1iv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1iv);
}
// /usr/include/GL/glew.h:1460:9: warning: macro 'glMultiTexCoord1s' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1s() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1s)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1s);
}
// /usr/include/GL/glew.h:1461:9: warning: macro 'glMultiTexCoord1sv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1sv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1sv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1sv);
}
// /usr/include/GL/glew.h:1462:9: warning: macro 'glMultiTexCoord2d' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2d() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2d)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2d);
}
// /usr/include/GL/glew.h:1463:9: warning: macro 'glMultiTexCoord2dv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2dv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2dv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2dv);
}
// /usr/include/GL/glew.h:1464:9: warning: macro 'glMultiTexCoord2f' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2f() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2f)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2f);
}
// /usr/include/GL/glew.h:1465:9: warning: macro 'glMultiTexCoord2fv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2fv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2fv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2fv);
}
// /usr/include/GL/glew.h:1466:9: warning: macro 'glMultiTexCoord2i' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2i() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2i)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2i);
}
// /usr/include/GL/glew.h:1467:9: warning: macro 'glMultiTexCoord2iv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2iv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2iv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2iv);
}
// /usr/include/GL/glew.h:1468:9: warning: macro 'glMultiTexCoord2s' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2s() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2s)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2s);
}
// /usr/include/GL/glew.h:1469:9: warning: macro 'glMultiTexCoord2sv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2sv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2sv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2sv);
}
// /usr/include/GL/glew.h:1470:9: warning: macro 'glMultiTexCoord3d' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3d() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3d)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3d);
}
// /usr/include/GL/glew.h:1471:9: warning: macro 'glMultiTexCoord3dv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3dv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3dv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3dv);
}
// /usr/include/GL/glew.h:1472:9: warning: macro 'glMultiTexCoord3f' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3f() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3f)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3f);
}
// /usr/include/GL/glew.h:1473:9: warning: macro 'glMultiTexCoord3fv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3fv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3fv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3fv);
}
// /usr/include/GL/glew.h:1474:9: warning: macro 'glMultiTexCoord3i' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3i() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3i)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3i);
}
// /usr/include/GL/glew.h:1475:9: warning: macro 'glMultiTexCoord3iv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3iv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3iv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3iv);
}
// /usr/include/GL/glew.h:1476:9: warning: macro 'glMultiTexCoord3s' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3s() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3s)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3s);
}
// /usr/include/GL/glew.h:1477:9: warning: macro 'glMultiTexCoord3sv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3sv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3sv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3sv);
}
// /usr/include/GL/glew.h:1478:9: warning: macro 'glMultiTexCoord4d' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4d() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4d)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4d);
}
// /usr/include/GL/glew.h:1479:9: warning: macro 'glMultiTexCoord4dv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4dv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4dv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4dv);
}
// /usr/include/GL/glew.h:1480:9: warning: macro 'glMultiTexCoord4f' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4f() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4f)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4f);
}
// /usr/include/GL/glew.h:1481:9: warning: macro 'glMultiTexCoord4fv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4fv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4fv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4fv);
}
// /usr/include/GL/glew.h:1482:9: warning: macro 'glMultiTexCoord4i' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4i() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4i)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4i);
}
// /usr/include/GL/glew.h:1483:9: warning: macro 'glMultiTexCoord4iv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4iv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4iv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4iv);
}
// /usr/include/GL/glew.h:1484:9: warning: macro 'glMultiTexCoord4s' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4s() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4s)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4s);
}
// /usr/include/GL/glew.h:1485:9: warning: macro 'glMultiTexCoord4sv' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4sv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4sv)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4sv);
}
// /usr/include/GL/glew.h:1486:9: warning: macro 'glSampleCoverage' contains a runtime value, translated to function
pub inline fn glSampleCoverage() @TypeOf(GLEW_GET_FUN(__glewSampleCoverage)) {
    return GLEW_GET_FUN(__glewSampleCoverage);
}
// /usr/include/GL/glew.h:1488:9: warning: macro 'GLEW_VERSION_1_3' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_1_3() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_1_3)) {
    return GLEW_GET_VAR(__GLEW_VERSION_1_3);
}
pub const GL_VERSION_1_4 = @as(c_int, 1);
pub const GL_BLEND_DST_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hex);
pub const GL_BLEND_SRC_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hex);
pub const GL_BLEND_DST_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hex);
pub const GL_BLEND_SRC_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hex);
pub const GL_POINT_SIZE_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hex);
pub const GL_POINT_SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hex);
pub const GL_POINT_FADE_THRESHOLD_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hex);
pub const GL_POINT_DISTANCE_ATTENUATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hex);
pub const GL_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8191, .hex);
pub const GL_GENERATE_MIPMAP_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8192, .hex);
pub const GL_DEPTH_COMPONENT16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hex);
pub const GL_DEPTH_COMPONENT24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hex);
pub const GL_DEPTH_COMPONENT32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hex);
pub const GL_MIRRORED_REPEAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hex);
pub const GL_FOG_COORDINATE_SOURCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8450, .hex);
pub const GL_FOG_COORDINATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8451, .hex);
pub const GL_FRAGMENT_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8452, .hex);
pub const GL_CURRENT_FOG_COORDINATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8453, .hex);
pub const GL_FOG_COORDINATE_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8454, .hex);
pub const GL_FOG_COORDINATE_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8455, .hex);
pub const GL_FOG_COORDINATE_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8456, .hex);
pub const GL_FOG_COORDINATE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8457, .hex);
pub const GL_COLOR_SUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hex);
pub const GL_CURRENT_SECONDARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8459, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845A, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845B, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845C, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845D, .hex);
pub const GL_SECONDARY_COLOR_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845E, .hex);
pub const GL_MAX_TEXTURE_LOD_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FD, .hex);
pub const GL_TEXTURE_FILTER_CONTROL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8500, .hex);
pub const GL_TEXTURE_LOD_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8501, .hex);
pub const GL_INCR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8507, .hex);
pub const GL_DECR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8508, .hex);
pub const GL_TEXTURE_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884A, .hex);
pub const GL_DEPTH_TEXTURE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884B, .hex);
pub const GL_TEXTURE_COMPARE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hex);
pub const GL_TEXTURE_COMPARE_FUNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hex);
pub const GL_COMPARE_R_TO_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hex);
// /usr/include/GL/glew.h:1585:9: warning: macro 'glBlendColor' contains a runtime value, translated to function
pub inline fn glBlendColor() @TypeOf(GLEW_GET_FUN(__glewBlendColor)) {
    return GLEW_GET_FUN(__glewBlendColor);
}
// /usr/include/GL/glew.h:1586:9: warning: macro 'glBlendEquation' contains a runtime value, translated to function
pub inline fn glBlendEquation() @TypeOf(GLEW_GET_FUN(__glewBlendEquation)) {
    return GLEW_GET_FUN(__glewBlendEquation);
}
// /usr/include/GL/glew.h:1587:9: warning: macro 'glBlendFuncSeparate' contains a runtime value, translated to function
pub inline fn glBlendFuncSeparate() @TypeOf(GLEW_GET_FUN(__glewBlendFuncSeparate)) {
    return GLEW_GET_FUN(__glewBlendFuncSeparate);
}
// /usr/include/GL/glew.h:1588:9: warning: macro 'glFogCoordPointer' contains a runtime value, translated to function
pub inline fn glFogCoordPointer() @TypeOf(GLEW_GET_FUN(__glewFogCoordPointer)) {
    return GLEW_GET_FUN(__glewFogCoordPointer);
}
// /usr/include/GL/glew.h:1589:9: warning: macro 'glFogCoordd' contains a runtime value, translated to function
pub inline fn glFogCoordd() @TypeOf(GLEW_GET_FUN(__glewFogCoordd)) {
    return GLEW_GET_FUN(__glewFogCoordd);
}
// /usr/include/GL/glew.h:1590:9: warning: macro 'glFogCoorddv' contains a runtime value, translated to function
pub inline fn glFogCoorddv() @TypeOf(GLEW_GET_FUN(__glewFogCoorddv)) {
    return GLEW_GET_FUN(__glewFogCoorddv);
}
// /usr/include/GL/glew.h:1591:9: warning: macro 'glFogCoordf' contains a runtime value, translated to function
pub inline fn glFogCoordf() @TypeOf(GLEW_GET_FUN(__glewFogCoordf)) {
    return GLEW_GET_FUN(__glewFogCoordf);
}
// /usr/include/GL/glew.h:1592:9: warning: macro 'glFogCoordfv' contains a runtime value, translated to function
pub inline fn glFogCoordfv() @TypeOf(GLEW_GET_FUN(__glewFogCoordfv)) {
    return GLEW_GET_FUN(__glewFogCoordfv);
}
// /usr/include/GL/glew.h:1593:9: warning: macro 'glMultiDrawArrays' contains a runtime value, translated to function
pub inline fn glMultiDrawArrays() @TypeOf(GLEW_GET_FUN(__glewMultiDrawArrays)) {
    return GLEW_GET_FUN(__glewMultiDrawArrays);
}
// /usr/include/GL/glew.h:1594:9: warning: macro 'glMultiDrawElements' contains a runtime value, translated to function
pub inline fn glMultiDrawElements() @TypeOf(GLEW_GET_FUN(__glewMultiDrawElements)) {
    return GLEW_GET_FUN(__glewMultiDrawElements);
}
// /usr/include/GL/glew.h:1595:9: warning: macro 'glPointParameterf' contains a runtime value, translated to function
pub inline fn glPointParameterf() @TypeOf(GLEW_GET_FUN(__glewPointParameterf)) {
    return GLEW_GET_FUN(__glewPointParameterf);
}
// /usr/include/GL/glew.h:1596:9: warning: macro 'glPointParameterfv' contains a runtime value, translated to function
pub inline fn glPointParameterfv() @TypeOf(GLEW_GET_FUN(__glewPointParameterfv)) {
    return GLEW_GET_FUN(__glewPointParameterfv);
}
// /usr/include/GL/glew.h:1597:9: warning: macro 'glPointParameteri' contains a runtime value, translated to function
pub inline fn glPointParameteri() @TypeOf(GLEW_GET_FUN(__glewPointParameteri)) {
    return GLEW_GET_FUN(__glewPointParameteri);
}
// /usr/include/GL/glew.h:1598:9: warning: macro 'glPointParameteriv' contains a runtime value, translated to function
pub inline fn glPointParameteriv() @TypeOf(GLEW_GET_FUN(__glewPointParameteriv)) {
    return GLEW_GET_FUN(__glewPointParameteriv);
}
// /usr/include/GL/glew.h:1599:9: warning: macro 'glSecondaryColor3b' contains a runtime value, translated to function
pub inline fn glSecondaryColor3b() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3b)) {
    return GLEW_GET_FUN(__glewSecondaryColor3b);
}
// /usr/include/GL/glew.h:1600:9: warning: macro 'glSecondaryColor3bv' contains a runtime value, translated to function
pub inline fn glSecondaryColor3bv() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3bv)) {
    return GLEW_GET_FUN(__glewSecondaryColor3bv);
}
// /usr/include/GL/glew.h:1601:9: warning: macro 'glSecondaryColor3d' contains a runtime value, translated to function
pub inline fn glSecondaryColor3d() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3d)) {
    return GLEW_GET_FUN(__glewSecondaryColor3d);
}
// /usr/include/GL/glew.h:1602:9: warning: macro 'glSecondaryColor3dv' contains a runtime value, translated to function
pub inline fn glSecondaryColor3dv() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3dv)) {
    return GLEW_GET_FUN(__glewSecondaryColor3dv);
}
// /usr/include/GL/glew.h:1603:9: warning: macro 'glSecondaryColor3f' contains a runtime value, translated to function
pub inline fn glSecondaryColor3f() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3f)) {
    return GLEW_GET_FUN(__glewSecondaryColor3f);
}
// /usr/include/GL/glew.h:1604:9: warning: macro 'glSecondaryColor3fv' contains a runtime value, translated to function
pub inline fn glSecondaryColor3fv() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3fv)) {
    return GLEW_GET_FUN(__glewSecondaryColor3fv);
}
// /usr/include/GL/glew.h:1605:9: warning: macro 'glSecondaryColor3i' contains a runtime value, translated to function
pub inline fn glSecondaryColor3i() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3i)) {
    return GLEW_GET_FUN(__glewSecondaryColor3i);
}
// /usr/include/GL/glew.h:1606:9: warning: macro 'glSecondaryColor3iv' contains a runtime value, translated to function
pub inline fn glSecondaryColor3iv() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3iv)) {
    return GLEW_GET_FUN(__glewSecondaryColor3iv);
}
// /usr/include/GL/glew.h:1607:9: warning: macro 'glSecondaryColor3s' contains a runtime value, translated to function
pub inline fn glSecondaryColor3s() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3s)) {
    return GLEW_GET_FUN(__glewSecondaryColor3s);
}
// /usr/include/GL/glew.h:1608:9: warning: macro 'glSecondaryColor3sv' contains a runtime value, translated to function
pub inline fn glSecondaryColor3sv() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3sv)) {
    return GLEW_GET_FUN(__glewSecondaryColor3sv);
}
// /usr/include/GL/glew.h:1609:9: warning: macro 'glSecondaryColor3ub' contains a runtime value, translated to function
pub inline fn glSecondaryColor3ub() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3ub)) {
    return GLEW_GET_FUN(__glewSecondaryColor3ub);
}
// /usr/include/GL/glew.h:1610:9: warning: macro 'glSecondaryColor3ubv' contains a runtime value, translated to function
pub inline fn glSecondaryColor3ubv() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3ubv)) {
    return GLEW_GET_FUN(__glewSecondaryColor3ubv);
}
// /usr/include/GL/glew.h:1611:9: warning: macro 'glSecondaryColor3ui' contains a runtime value, translated to function
pub inline fn glSecondaryColor3ui() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3ui)) {
    return GLEW_GET_FUN(__glewSecondaryColor3ui);
}
// /usr/include/GL/glew.h:1612:9: warning: macro 'glSecondaryColor3uiv' contains a runtime value, translated to function
pub inline fn glSecondaryColor3uiv() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3uiv)) {
    return GLEW_GET_FUN(__glewSecondaryColor3uiv);
}
// /usr/include/GL/glew.h:1613:9: warning: macro 'glSecondaryColor3us' contains a runtime value, translated to function
pub inline fn glSecondaryColor3us() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3us)) {
    return GLEW_GET_FUN(__glewSecondaryColor3us);
}
// /usr/include/GL/glew.h:1614:9: warning: macro 'glSecondaryColor3usv' contains a runtime value, translated to function
pub inline fn glSecondaryColor3usv() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3usv)) {
    return GLEW_GET_FUN(__glewSecondaryColor3usv);
}
// /usr/include/GL/glew.h:1615:9: warning: macro 'glSecondaryColorPointer' contains a runtime value, translated to function
pub inline fn glSecondaryColorPointer() @TypeOf(GLEW_GET_FUN(__glewSecondaryColorPointer)) {
    return GLEW_GET_FUN(__glewSecondaryColorPointer);
}
// /usr/include/GL/glew.h:1616:9: warning: macro 'glWindowPos2d' contains a runtime value, translated to function
pub inline fn glWindowPos2d() @TypeOf(GLEW_GET_FUN(__glewWindowPos2d)) {
    return GLEW_GET_FUN(__glewWindowPos2d);
}
// /usr/include/GL/glew.h:1617:9: warning: macro 'glWindowPos2dv' contains a runtime value, translated to function
pub inline fn glWindowPos2dv() @TypeOf(GLEW_GET_FUN(__glewWindowPos2dv)) {
    return GLEW_GET_FUN(__glewWindowPos2dv);
}
// /usr/include/GL/glew.h:1618:9: warning: macro 'glWindowPos2f' contains a runtime value, translated to function
pub inline fn glWindowPos2f() @TypeOf(GLEW_GET_FUN(__glewWindowPos2f)) {
    return GLEW_GET_FUN(__glewWindowPos2f);
}
// /usr/include/GL/glew.h:1619:9: warning: macro 'glWindowPos2fv' contains a runtime value, translated to function
pub inline fn glWindowPos2fv() @TypeOf(GLEW_GET_FUN(__glewWindowPos2fv)) {
    return GLEW_GET_FUN(__glewWindowPos2fv);
}
// /usr/include/GL/glew.h:1620:9: warning: macro 'glWindowPos2i' contains a runtime value, translated to function
pub inline fn glWindowPos2i() @TypeOf(GLEW_GET_FUN(__glewWindowPos2i)) {
    return GLEW_GET_FUN(__glewWindowPos2i);
}
// /usr/include/GL/glew.h:1621:9: warning: macro 'glWindowPos2iv' contains a runtime value, translated to function
pub inline fn glWindowPos2iv() @TypeOf(GLEW_GET_FUN(__glewWindowPos2iv)) {
    return GLEW_GET_FUN(__glewWindowPos2iv);
}
// /usr/include/GL/glew.h:1622:9: warning: macro 'glWindowPos2s' contains a runtime value, translated to function
pub inline fn glWindowPos2s() @TypeOf(GLEW_GET_FUN(__glewWindowPos2s)) {
    return GLEW_GET_FUN(__glewWindowPos2s);
}
// /usr/include/GL/glew.h:1623:9: warning: macro 'glWindowPos2sv' contains a runtime value, translated to function
pub inline fn glWindowPos2sv() @TypeOf(GLEW_GET_FUN(__glewWindowPos2sv)) {
    return GLEW_GET_FUN(__glewWindowPos2sv);
}
// /usr/include/GL/glew.h:1624:9: warning: macro 'glWindowPos3d' contains a runtime value, translated to function
pub inline fn glWindowPos3d() @TypeOf(GLEW_GET_FUN(__glewWindowPos3d)) {
    return GLEW_GET_FUN(__glewWindowPos3d);
}
// /usr/include/GL/glew.h:1625:9: warning: macro 'glWindowPos3dv' contains a runtime value, translated to function
pub inline fn glWindowPos3dv() @TypeOf(GLEW_GET_FUN(__glewWindowPos3dv)) {
    return GLEW_GET_FUN(__glewWindowPos3dv);
}
// /usr/include/GL/glew.h:1626:9: warning: macro 'glWindowPos3f' contains a runtime value, translated to function
pub inline fn glWindowPos3f() @TypeOf(GLEW_GET_FUN(__glewWindowPos3f)) {
    return GLEW_GET_FUN(__glewWindowPos3f);
}
// /usr/include/GL/glew.h:1627:9: warning: macro 'glWindowPos3fv' contains a runtime value, translated to function
pub inline fn glWindowPos3fv() @TypeOf(GLEW_GET_FUN(__glewWindowPos3fv)) {
    return GLEW_GET_FUN(__glewWindowPos3fv);
}
// /usr/include/GL/glew.h:1628:9: warning: macro 'glWindowPos3i' contains a runtime value, translated to function
pub inline fn glWindowPos3i() @TypeOf(GLEW_GET_FUN(__glewWindowPos3i)) {
    return GLEW_GET_FUN(__glewWindowPos3i);
}
// /usr/include/GL/glew.h:1629:9: warning: macro 'glWindowPos3iv' contains a runtime value, translated to function
pub inline fn glWindowPos3iv() @TypeOf(GLEW_GET_FUN(__glewWindowPos3iv)) {
    return GLEW_GET_FUN(__glewWindowPos3iv);
}
// /usr/include/GL/glew.h:1630:9: warning: macro 'glWindowPos3s' contains a runtime value, translated to function
pub inline fn glWindowPos3s() @TypeOf(GLEW_GET_FUN(__glewWindowPos3s)) {
    return GLEW_GET_FUN(__glewWindowPos3s);
}
// /usr/include/GL/glew.h:1631:9: warning: macro 'glWindowPos3sv' contains a runtime value, translated to function
pub inline fn glWindowPos3sv() @TypeOf(GLEW_GET_FUN(__glewWindowPos3sv)) {
    return GLEW_GET_FUN(__glewWindowPos3sv);
}
// /usr/include/GL/glew.h:1633:9: warning: macro 'GLEW_VERSION_1_4' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_1_4() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_1_4)) {
    return GLEW_GET_VAR(__GLEW_VERSION_1_4);
}
pub const GL_VERSION_1_5 = @as(c_int, 1);
pub const GL_CURRENT_FOG_COORD = GL_CURRENT_FOG_COORDINATE;
pub const GL_FOG_COORD = GL_FOG_COORDINATE;
pub const GL_FOG_COORD_ARRAY = GL_FOG_COORDINATE_ARRAY;
pub const GL_FOG_COORD_ARRAY_BUFFER_BINDING = GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING;
pub const GL_FOG_COORD_ARRAY_POINTER = GL_FOG_COORDINATE_ARRAY_POINTER;
pub const GL_FOG_COORD_ARRAY_STRIDE = GL_FOG_COORDINATE_ARRAY_STRIDE;
pub const GL_FOG_COORD_ARRAY_TYPE = GL_FOG_COORDINATE_ARRAY_TYPE;
pub const GL_FOG_COORD_SRC = GL_FOG_COORDINATE_SOURCE;
pub const GL_SRC0_ALPHA = GL_SOURCE0_ALPHA;
pub const GL_SRC0_RGB = GL_SOURCE0_RGB;
pub const GL_SRC1_ALPHA = GL_SOURCE1_ALPHA;
pub const GL_SRC1_RGB = GL_SOURCE1_RGB;
pub const GL_SRC2_ALPHA = GL_SOURCE2_ALPHA;
pub const GL_SRC2_RGB = GL_SOURCE2_RGB;
pub const GL_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hex);
pub const GL_BUFFER_USAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hex);
pub const GL_QUERY_COUNTER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hex);
pub const GL_CURRENT_QUERY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hex);
pub const GL_QUERY_RESULT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hex);
pub const GL_QUERY_RESULT_AVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hex);
pub const GL_ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8892, .hex);
pub const GL_ELEMENT_ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8893, .hex);
pub const GL_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8894, .hex);
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8895, .hex);
pub const GL_VERTEX_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8896, .hex);
pub const GL_NORMAL_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8897, .hex);
pub const GL_COLOR_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8898, .hex);
pub const GL_INDEX_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8899, .hex);
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889A, .hex);
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889B, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889C, .hex);
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889D, .hex);
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889E, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889F, .hex);
pub const GL_READ_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B8, .hex);
pub const GL_WRITE_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hex);
pub const GL_READ_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BA, .hex);
pub const GL_BUFFER_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hex);
pub const GL_BUFFER_MAPPED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hex);
pub const GL_BUFFER_MAP_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hex);
pub const GL_STREAM_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E0, .hex);
pub const GL_STREAM_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E1, .hex);
pub const GL_STREAM_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E2, .hex);
pub const GL_STATIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E4, .hex);
pub const GL_STATIC_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E5, .hex);
pub const GL_STATIC_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E6, .hex);
pub const GL_DYNAMIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E8, .hex);
pub const GL_DYNAMIC_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E9, .hex);
pub const GL_DYNAMIC_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EA, .hex);
pub const GL_SAMPLES_PASSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8914, .hex);
// /usr/include/GL/glew.h:1716:9: warning: macro 'glBeginQuery' contains a runtime value, translated to function
pub inline fn glBeginQuery() @TypeOf(GLEW_GET_FUN(__glewBeginQuery)) {
    return GLEW_GET_FUN(__glewBeginQuery);
}
// /usr/include/GL/glew.h:1717:9: warning: macro 'glBindBuffer' contains a runtime value, translated to function
pub inline fn glBindBuffer() @TypeOf(GLEW_GET_FUN(__glewBindBuffer)) {
    return GLEW_GET_FUN(__glewBindBuffer);
}
// /usr/include/GL/glew.h:1718:9: warning: macro 'glBufferData' contains a runtime value, translated to function
pub inline fn glBufferData() @TypeOf(GLEW_GET_FUN(__glewBufferData)) {
    return GLEW_GET_FUN(__glewBufferData);
}
// /usr/include/GL/glew.h:1719:9: warning: macro 'glBufferSubData' contains a runtime value, translated to function
pub inline fn glBufferSubData() @TypeOf(GLEW_GET_FUN(__glewBufferSubData)) {
    return GLEW_GET_FUN(__glewBufferSubData);
}
// /usr/include/GL/glew.h:1720:9: warning: macro 'glDeleteBuffers' contains a runtime value, translated to function
pub inline fn glDeleteBuffers() @TypeOf(GLEW_GET_FUN(__glewDeleteBuffers)) {
    return GLEW_GET_FUN(__glewDeleteBuffers);
}
// /usr/include/GL/glew.h:1721:9: warning: macro 'glDeleteQueries' contains a runtime value, translated to function
pub inline fn glDeleteQueries() @TypeOf(GLEW_GET_FUN(__glewDeleteQueries)) {
    return GLEW_GET_FUN(__glewDeleteQueries);
}
// /usr/include/GL/glew.h:1722:9: warning: macro 'glEndQuery' contains a runtime value, translated to function
pub inline fn glEndQuery() @TypeOf(GLEW_GET_FUN(__glewEndQuery)) {
    return GLEW_GET_FUN(__glewEndQuery);
}
// /usr/include/GL/glew.h:1723:9: warning: macro 'glGenBuffers' contains a runtime value, translated to function
pub inline fn glGenBuffers() @TypeOf(GLEW_GET_FUN(__glewGenBuffers)) {
    return GLEW_GET_FUN(__glewGenBuffers);
}
// /usr/include/GL/glew.h:1724:9: warning: macro 'glGenQueries' contains a runtime value, translated to function
pub inline fn glGenQueries() @TypeOf(GLEW_GET_FUN(__glewGenQueries)) {
    return GLEW_GET_FUN(__glewGenQueries);
}
// /usr/include/GL/glew.h:1725:9: warning: macro 'glGetBufferParameteriv' contains a runtime value, translated to function
pub inline fn glGetBufferParameteriv() @TypeOf(GLEW_GET_FUN(__glewGetBufferParameteriv)) {
    return GLEW_GET_FUN(__glewGetBufferParameteriv);
}
// /usr/include/GL/glew.h:1726:9: warning: macro 'glGetBufferPointerv' contains a runtime value, translated to function
pub inline fn glGetBufferPointerv() @TypeOf(GLEW_GET_FUN(__glewGetBufferPointerv)) {
    return GLEW_GET_FUN(__glewGetBufferPointerv);
}
// /usr/include/GL/glew.h:1727:9: warning: macro 'glGetBufferSubData' contains a runtime value, translated to function
pub inline fn glGetBufferSubData() @TypeOf(GLEW_GET_FUN(__glewGetBufferSubData)) {
    return GLEW_GET_FUN(__glewGetBufferSubData);
}
// /usr/include/GL/glew.h:1728:9: warning: macro 'glGetQueryObjectiv' contains a runtime value, translated to function
pub inline fn glGetQueryObjectiv() @TypeOf(GLEW_GET_FUN(__glewGetQueryObjectiv)) {
    return GLEW_GET_FUN(__glewGetQueryObjectiv);
}
// /usr/include/GL/glew.h:1729:9: warning: macro 'glGetQueryObjectuiv' contains a runtime value, translated to function
pub inline fn glGetQueryObjectuiv() @TypeOf(GLEW_GET_FUN(__glewGetQueryObjectuiv)) {
    return GLEW_GET_FUN(__glewGetQueryObjectuiv);
}
// /usr/include/GL/glew.h:1730:9: warning: macro 'glGetQueryiv' contains a runtime value, translated to function
pub inline fn glGetQueryiv() @TypeOf(GLEW_GET_FUN(__glewGetQueryiv)) {
    return GLEW_GET_FUN(__glewGetQueryiv);
}
// /usr/include/GL/glew.h:1731:9: warning: macro 'glIsBuffer' contains a runtime value, translated to function
pub inline fn glIsBuffer() @TypeOf(GLEW_GET_FUN(__glewIsBuffer)) {
    return GLEW_GET_FUN(__glewIsBuffer);
}
// /usr/include/GL/glew.h:1732:9: warning: macro 'glIsQuery' contains a runtime value, translated to function
pub inline fn glIsQuery() @TypeOf(GLEW_GET_FUN(__glewIsQuery)) {
    return GLEW_GET_FUN(__glewIsQuery);
}
// /usr/include/GL/glew.h:1733:9: warning: macro 'glMapBuffer' contains a runtime value, translated to function
pub inline fn glMapBuffer() @TypeOf(GLEW_GET_FUN(__glewMapBuffer)) {
    return GLEW_GET_FUN(__glewMapBuffer);
}
// /usr/include/GL/glew.h:1734:9: warning: macro 'glUnmapBuffer' contains a runtime value, translated to function
pub inline fn glUnmapBuffer() @TypeOf(GLEW_GET_FUN(__glewUnmapBuffer)) {
    return GLEW_GET_FUN(__glewUnmapBuffer);
}
// /usr/include/GL/glew.h:1736:9: warning: macro 'GLEW_VERSION_1_5' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_1_5() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_1_5)) {
    return GLEW_GET_VAR(__GLEW_VERSION_1_5);
}
pub const GL_VERSION_2_0 = @as(c_int, 1);
pub const GL_BLEND_EQUATION_RGB = GL_BLEND_EQUATION;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8622, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hex);
pub const GL_CURRENT_VERTEX_ATTRIB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hex);
pub const GL_VERTEX_PROGRAM_POINT_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hex);
pub const GL_VERTEX_PROGRAM_TWO_SIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hex);
pub const GL_STENCIL_BACK_FUNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8800, .hex);
pub const GL_STENCIL_BACK_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8801, .hex);
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8802, .hex);
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8803, .hex);
pub const GL_MAX_DRAW_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hex);
pub const GL_DRAW_BUFFER0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hex);
pub const GL_DRAW_BUFFER1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hex);
pub const GL_DRAW_BUFFER2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hex);
pub const GL_DRAW_BUFFER3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hex);
pub const GL_DRAW_BUFFER4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hex);
pub const GL_DRAW_BUFFER5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hex);
pub const GL_DRAW_BUFFER6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hex);
pub const GL_DRAW_BUFFER7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hex);
pub const GL_DRAW_BUFFER8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hex);
pub const GL_DRAW_BUFFER9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hex);
pub const GL_DRAW_BUFFER10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hex);
pub const GL_DRAW_BUFFER11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hex);
pub const GL_DRAW_BUFFER12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hex);
pub const GL_DRAW_BUFFER13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hex);
pub const GL_DRAW_BUFFER14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hex);
pub const GL_DRAW_BUFFER15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hex);
pub const GL_BLEND_EQUATION_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hex);
pub const GL_POINT_SPRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hex);
pub const GL_COORD_REPLACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hex);
pub const GL_MAX_VERTEX_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8869, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886A, .hex);
pub const GL_MAX_TEXTURE_COORDS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hex);
pub const GL_MAX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hex);
pub const GL_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B30, .hex);
pub const GL_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B31, .hex);
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B49, .hex);
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4A, .hex);
pub const GL_MAX_VARYING_FLOATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hex);
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4C, .hex);
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4D, .hex);
pub const GL_SHADER_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4F, .hex);
pub const GL_FLOAT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B50, .hex);
pub const GL_FLOAT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B51, .hex);
pub const GL_FLOAT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B52, .hex);
pub const GL_INT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B53, .hex);
pub const GL_INT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B54, .hex);
pub const GL_INT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B55, .hex);
pub const GL_BOOL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B56, .hex);
pub const GL_BOOL_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B57, .hex);
pub const GL_BOOL_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B58, .hex);
pub const GL_BOOL_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B59, .hex);
pub const GL_FLOAT_MAT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5A, .hex);
pub const GL_FLOAT_MAT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5B, .hex);
pub const GL_FLOAT_MAT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5C, .hex);
pub const GL_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5D, .hex);
pub const GL_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5E, .hex);
pub const GL_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5F, .hex);
pub const GL_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B60, .hex);
pub const GL_SAMPLER_1D_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B61, .hex);
pub const GL_SAMPLER_2D_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hex);
pub const GL_DELETE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B80, .hex);
pub const GL_COMPILE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B81, .hex);
pub const GL_LINK_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B82, .hex);
pub const GL_VALIDATE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B83, .hex);
pub const GL_INFO_LOG_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B84, .hex);
pub const GL_ATTACHED_SHADERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B85, .hex);
pub const GL_ACTIVE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B86, .hex);
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B87, .hex);
pub const GL_SHADER_SOURCE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B88, .hex);
pub const GL_ACTIVE_ATTRIBUTES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B89, .hex);
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8A, .hex);
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hex);
pub const GL_SHADING_LANGUAGE_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8C, .hex);
pub const GL_CURRENT_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8D, .hex);
pub const GL_POINT_SPRITE_COORD_ORIGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA0, .hex);
pub const GL_LOWER_LEFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA1, .hex);
pub const GL_UPPER_LEFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA2, .hex);
pub const GL_STENCIL_BACK_REF = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA3, .hex);
pub const GL_STENCIL_BACK_VALUE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA4, .hex);
pub const GL_STENCIL_BACK_WRITEMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA5, .hex);
// /usr/include/GL/glew.h:1924:9: warning: macro 'glAttachShader' contains a runtime value, translated to function
pub inline fn glAttachShader() @TypeOf(GLEW_GET_FUN(__glewAttachShader)) {
    return GLEW_GET_FUN(__glewAttachShader);
}
// /usr/include/GL/glew.h:1925:9: warning: macro 'glBindAttribLocation' contains a runtime value, translated to function
pub inline fn glBindAttribLocation() @TypeOf(GLEW_GET_FUN(__glewBindAttribLocation)) {
    return GLEW_GET_FUN(__glewBindAttribLocation);
}
// /usr/include/GL/glew.h:1926:9: warning: macro 'glBlendEquationSeparate' contains a runtime value, translated to function
pub inline fn glBlendEquationSeparate() @TypeOf(GLEW_GET_FUN(__glewBlendEquationSeparate)) {
    return GLEW_GET_FUN(__glewBlendEquationSeparate);
}
// /usr/include/GL/glew.h:1927:9: warning: macro 'glCompileShader' contains a runtime value, translated to function
pub inline fn glCompileShader() @TypeOf(GLEW_GET_FUN(__glewCompileShader)) {
    return GLEW_GET_FUN(__glewCompileShader);
}
// /usr/include/GL/glew.h:1928:9: warning: macro 'glCreateProgram' contains a runtime value, translated to function
pub inline fn glCreateProgram() @TypeOf(GLEW_GET_FUN(__glewCreateProgram)) {
    return GLEW_GET_FUN(__glewCreateProgram);
}
// /usr/include/GL/glew.h:1929:9: warning: macro 'glCreateShader' contains a runtime value, translated to function
pub inline fn glCreateShader() @TypeOf(GLEW_GET_FUN(__glewCreateShader)) {
    return GLEW_GET_FUN(__glewCreateShader);
}
// /usr/include/GL/glew.h:1930:9: warning: macro 'glDeleteProgram' contains a runtime value, translated to function
pub inline fn glDeleteProgram() @TypeOf(GLEW_GET_FUN(__glewDeleteProgram)) {
    return GLEW_GET_FUN(__glewDeleteProgram);
}
// /usr/include/GL/glew.h:1931:9: warning: macro 'glDeleteShader' contains a runtime value, translated to function
pub inline fn glDeleteShader() @TypeOf(GLEW_GET_FUN(__glewDeleteShader)) {
    return GLEW_GET_FUN(__glewDeleteShader);
}
// /usr/include/GL/glew.h:1932:9: warning: macro 'glDetachShader' contains a runtime value, translated to function
pub inline fn glDetachShader() @TypeOf(GLEW_GET_FUN(__glewDetachShader)) {
    return GLEW_GET_FUN(__glewDetachShader);
}
// /usr/include/GL/glew.h:1933:9: warning: macro 'glDisableVertexAttribArray' contains a runtime value, translated to function
pub inline fn glDisableVertexAttribArray() @TypeOf(GLEW_GET_FUN(__glewDisableVertexAttribArray)) {
    return GLEW_GET_FUN(__glewDisableVertexAttribArray);
}
// /usr/include/GL/glew.h:1934:9: warning: macro 'glDrawBuffers' contains a runtime value, translated to function
pub inline fn glDrawBuffers() @TypeOf(GLEW_GET_FUN(__glewDrawBuffers)) {
    return GLEW_GET_FUN(__glewDrawBuffers);
}
// /usr/include/GL/glew.h:1935:9: warning: macro 'glEnableVertexAttribArray' contains a runtime value, translated to function
pub inline fn glEnableVertexAttribArray() @TypeOf(GLEW_GET_FUN(__glewEnableVertexAttribArray)) {
    return GLEW_GET_FUN(__glewEnableVertexAttribArray);
}
// /usr/include/GL/glew.h:1936:9: warning: macro 'glGetActiveAttrib' contains a runtime value, translated to function
pub inline fn glGetActiveAttrib() @TypeOf(GLEW_GET_FUN(__glewGetActiveAttrib)) {
    return GLEW_GET_FUN(__glewGetActiveAttrib);
}
// /usr/include/GL/glew.h:1937:9: warning: macro 'glGetActiveUniform' contains a runtime value, translated to function
pub inline fn glGetActiveUniform() @TypeOf(GLEW_GET_FUN(__glewGetActiveUniform)) {
    return GLEW_GET_FUN(__glewGetActiveUniform);
}
// /usr/include/GL/glew.h:1938:9: warning: macro 'glGetAttachedShaders' contains a runtime value, translated to function
pub inline fn glGetAttachedShaders() @TypeOf(GLEW_GET_FUN(__glewGetAttachedShaders)) {
    return GLEW_GET_FUN(__glewGetAttachedShaders);
}
// /usr/include/GL/glew.h:1939:9: warning: macro 'glGetAttribLocation' contains a runtime value, translated to function
pub inline fn glGetAttribLocation() @TypeOf(GLEW_GET_FUN(__glewGetAttribLocation)) {
    return GLEW_GET_FUN(__glewGetAttribLocation);
}
// /usr/include/GL/glew.h:1940:9: warning: macro 'glGetProgramInfoLog' contains a runtime value, translated to function
pub inline fn glGetProgramInfoLog() @TypeOf(GLEW_GET_FUN(__glewGetProgramInfoLog)) {
    return GLEW_GET_FUN(__glewGetProgramInfoLog);
}
// /usr/include/GL/glew.h:1941:9: warning: macro 'glGetProgramiv' contains a runtime value, translated to function
pub inline fn glGetProgramiv() @TypeOf(GLEW_GET_FUN(__glewGetProgramiv)) {
    return GLEW_GET_FUN(__glewGetProgramiv);
}
// /usr/include/GL/glew.h:1942:9: warning: macro 'glGetShaderInfoLog' contains a runtime value, translated to function
pub inline fn glGetShaderInfoLog() @TypeOf(GLEW_GET_FUN(__glewGetShaderInfoLog)) {
    return GLEW_GET_FUN(__glewGetShaderInfoLog);
}
// /usr/include/GL/glew.h:1943:9: warning: macro 'glGetShaderSource' contains a runtime value, translated to function
pub inline fn glGetShaderSource() @TypeOf(GLEW_GET_FUN(__glewGetShaderSource)) {
    return GLEW_GET_FUN(__glewGetShaderSource);
}
// /usr/include/GL/glew.h:1944:9: warning: macro 'glGetShaderiv' contains a runtime value, translated to function
pub inline fn glGetShaderiv() @TypeOf(GLEW_GET_FUN(__glewGetShaderiv)) {
    return GLEW_GET_FUN(__glewGetShaderiv);
}
// /usr/include/GL/glew.h:1945:9: warning: macro 'glGetUniformLocation' contains a runtime value, translated to function
pub inline fn glGetUniformLocation() @TypeOf(GLEW_GET_FUN(__glewGetUniformLocation)) {
    return GLEW_GET_FUN(__glewGetUniformLocation);
}
// /usr/include/GL/glew.h:1946:9: warning: macro 'glGetUniformfv' contains a runtime value, translated to function
pub inline fn glGetUniformfv() @TypeOf(GLEW_GET_FUN(__glewGetUniformfv)) {
    return GLEW_GET_FUN(__glewGetUniformfv);
}
// /usr/include/GL/glew.h:1947:9: warning: macro 'glGetUniformiv' contains a runtime value, translated to function
pub inline fn glGetUniformiv() @TypeOf(GLEW_GET_FUN(__glewGetUniformiv)) {
    return GLEW_GET_FUN(__glewGetUniformiv);
}
// /usr/include/GL/glew.h:1948:9: warning: macro 'glGetVertexAttribPointerv' contains a runtime value, translated to function
pub inline fn glGetVertexAttribPointerv() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribPointerv)) {
    return GLEW_GET_FUN(__glewGetVertexAttribPointerv);
}
// /usr/include/GL/glew.h:1949:9: warning: macro 'glGetVertexAttribdv' contains a runtime value, translated to function
pub inline fn glGetVertexAttribdv() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribdv)) {
    return GLEW_GET_FUN(__glewGetVertexAttribdv);
}
// /usr/include/GL/glew.h:1950:9: warning: macro 'glGetVertexAttribfv' contains a runtime value, translated to function
pub inline fn glGetVertexAttribfv() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribfv)) {
    return GLEW_GET_FUN(__glewGetVertexAttribfv);
}
// /usr/include/GL/glew.h:1951:9: warning: macro 'glGetVertexAttribiv' contains a runtime value, translated to function
pub inline fn glGetVertexAttribiv() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribiv)) {
    return GLEW_GET_FUN(__glewGetVertexAttribiv);
}
// /usr/include/GL/glew.h:1952:9: warning: macro 'glIsProgram' contains a runtime value, translated to function
pub inline fn glIsProgram() @TypeOf(GLEW_GET_FUN(__glewIsProgram)) {
    return GLEW_GET_FUN(__glewIsProgram);
}
// /usr/include/GL/glew.h:1953:9: warning: macro 'glIsShader' contains a runtime value, translated to function
pub inline fn glIsShader() @TypeOf(GLEW_GET_FUN(__glewIsShader)) {
    return GLEW_GET_FUN(__glewIsShader);
}
// /usr/include/GL/glew.h:1954:9: warning: macro 'glLinkProgram' contains a runtime value, translated to function
pub inline fn glLinkProgram() @TypeOf(GLEW_GET_FUN(__glewLinkProgram)) {
    return GLEW_GET_FUN(__glewLinkProgram);
}
// /usr/include/GL/glew.h:1955:9: warning: macro 'glShaderSource' contains a runtime value, translated to function
pub inline fn glShaderSource() @TypeOf(GLEW_GET_FUN(__glewShaderSource)) {
    return GLEW_GET_FUN(__glewShaderSource);
}
// /usr/include/GL/glew.h:1956:9: warning: macro 'glStencilFuncSeparate' contains a runtime value, translated to function
pub inline fn glStencilFuncSeparate() @TypeOf(GLEW_GET_FUN(__glewStencilFuncSeparate)) {
    return GLEW_GET_FUN(__glewStencilFuncSeparate);
}
// /usr/include/GL/glew.h:1957:9: warning: macro 'glStencilMaskSeparate' contains a runtime value, translated to function
pub inline fn glStencilMaskSeparate() @TypeOf(GLEW_GET_FUN(__glewStencilMaskSeparate)) {
    return GLEW_GET_FUN(__glewStencilMaskSeparate);
}
// /usr/include/GL/glew.h:1958:9: warning: macro 'glStencilOpSeparate' contains a runtime value, translated to function
pub inline fn glStencilOpSeparate() @TypeOf(GLEW_GET_FUN(__glewStencilOpSeparate)) {
    return GLEW_GET_FUN(__glewStencilOpSeparate);
}
// /usr/include/GL/glew.h:1959:9: warning: macro 'glUniform1f' contains a runtime value, translated to function
pub inline fn glUniform1f() @TypeOf(GLEW_GET_FUN(__glewUniform1f)) {
    return GLEW_GET_FUN(__glewUniform1f);
}
// /usr/include/GL/glew.h:1960:9: warning: macro 'glUniform1fv' contains a runtime value, translated to function
pub inline fn glUniform1fv() @TypeOf(GLEW_GET_FUN(__glewUniform1fv)) {
    return GLEW_GET_FUN(__glewUniform1fv);
}
// /usr/include/GL/glew.h:1961:9: warning: macro 'glUniform1i' contains a runtime value, translated to function
pub inline fn glUniform1i() @TypeOf(GLEW_GET_FUN(__glewUniform1i)) {
    return GLEW_GET_FUN(__glewUniform1i);
}
// /usr/include/GL/glew.h:1962:9: warning: macro 'glUniform1iv' contains a runtime value, translated to function
pub inline fn glUniform1iv() @TypeOf(GLEW_GET_FUN(__glewUniform1iv)) {
    return GLEW_GET_FUN(__glewUniform1iv);
}
// /usr/include/GL/glew.h:1963:9: warning: macro 'glUniform2f' contains a runtime value, translated to function
pub inline fn glUniform2f() @TypeOf(GLEW_GET_FUN(__glewUniform2f)) {
    return GLEW_GET_FUN(__glewUniform2f);
}
// /usr/include/GL/glew.h:1964:9: warning: macro 'glUniform2fv' contains a runtime value, translated to function
pub inline fn glUniform2fv() @TypeOf(GLEW_GET_FUN(__glewUniform2fv)) {
    return GLEW_GET_FUN(__glewUniform2fv);
}
// /usr/include/GL/glew.h:1965:9: warning: macro 'glUniform2i' contains a runtime value, translated to function
pub inline fn glUniform2i() @TypeOf(GLEW_GET_FUN(__glewUniform2i)) {
    return GLEW_GET_FUN(__glewUniform2i);
}
// /usr/include/GL/glew.h:1966:9: warning: macro 'glUniform2iv' contains a runtime value, translated to function
pub inline fn glUniform2iv() @TypeOf(GLEW_GET_FUN(__glewUniform2iv)) {
    return GLEW_GET_FUN(__glewUniform2iv);
}
// /usr/include/GL/glew.h:1967:9: warning: macro 'glUniform3f' contains a runtime value, translated to function
pub inline fn glUniform3f() @TypeOf(GLEW_GET_FUN(__glewUniform3f)) {
    return GLEW_GET_FUN(__glewUniform3f);
}
// /usr/include/GL/glew.h:1968:9: warning: macro 'glUniform3fv' contains a runtime value, translated to function
pub inline fn glUniform3fv() @TypeOf(GLEW_GET_FUN(__glewUniform3fv)) {
    return GLEW_GET_FUN(__glewUniform3fv);
}
// /usr/include/GL/glew.h:1969:9: warning: macro 'glUniform3i' contains a runtime value, translated to function
pub inline fn glUniform3i() @TypeOf(GLEW_GET_FUN(__glewUniform3i)) {
    return GLEW_GET_FUN(__glewUniform3i);
}
// /usr/include/GL/glew.h:1970:9: warning: macro 'glUniform3iv' contains a runtime value, translated to function
pub inline fn glUniform3iv() @TypeOf(GLEW_GET_FUN(__glewUniform3iv)) {
    return GLEW_GET_FUN(__glewUniform3iv);
}
// /usr/include/GL/glew.h:1971:9: warning: macro 'glUniform4f' contains a runtime value, translated to function
pub inline fn glUniform4f() @TypeOf(GLEW_GET_FUN(__glewUniform4f)) {
    return GLEW_GET_FUN(__glewUniform4f);
}
// /usr/include/GL/glew.h:1972:9: warning: macro 'glUniform4fv' contains a runtime value, translated to function
pub inline fn glUniform4fv() @TypeOf(GLEW_GET_FUN(__glewUniform4fv)) {
    return GLEW_GET_FUN(__glewUniform4fv);
}
// /usr/include/GL/glew.h:1973:9: warning: macro 'glUniform4i' contains a runtime value, translated to function
pub inline fn glUniform4i() @TypeOf(GLEW_GET_FUN(__glewUniform4i)) {
    return GLEW_GET_FUN(__glewUniform4i);
}
// /usr/include/GL/glew.h:1974:9: warning: macro 'glUniform4iv' contains a runtime value, translated to function
pub inline fn glUniform4iv() @TypeOf(GLEW_GET_FUN(__glewUniform4iv)) {
    return GLEW_GET_FUN(__glewUniform4iv);
}
// /usr/include/GL/glew.h:1975:9: warning: macro 'glUniformMatrix2fv' contains a runtime value, translated to function
pub inline fn glUniformMatrix2fv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix2fv)) {
    return GLEW_GET_FUN(__glewUniformMatrix2fv);
}
// /usr/include/GL/glew.h:1976:9: warning: macro 'glUniformMatrix3fv' contains a runtime value, translated to function
pub inline fn glUniformMatrix3fv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix3fv)) {
    return GLEW_GET_FUN(__glewUniformMatrix3fv);
}
// /usr/include/GL/glew.h:1977:9: warning: macro 'glUniformMatrix4fv' contains a runtime value, translated to function
pub inline fn glUniformMatrix4fv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix4fv)) {
    return GLEW_GET_FUN(__glewUniformMatrix4fv);
}
// /usr/include/GL/glew.h:1978:9: warning: macro 'glUseProgram' contains a runtime value, translated to function
pub inline fn glUseProgram() @TypeOf(GLEW_GET_FUN(__glewUseProgram)) {
    return GLEW_GET_FUN(__glewUseProgram);
}
// /usr/include/GL/glew.h:1979:9: warning: macro 'glValidateProgram' contains a runtime value, translated to function
pub inline fn glValidateProgram() @TypeOf(GLEW_GET_FUN(__glewValidateProgram)) {
    return GLEW_GET_FUN(__glewValidateProgram);
}
// /usr/include/GL/glew.h:1980:9: warning: macro 'glVertexAttrib1d' contains a runtime value, translated to function
pub inline fn glVertexAttrib1d() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1d)) {
    return GLEW_GET_FUN(__glewVertexAttrib1d);
}
// /usr/include/GL/glew.h:1981:9: warning: macro 'glVertexAttrib1dv' contains a runtime value, translated to function
pub inline fn glVertexAttrib1dv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1dv)) {
    return GLEW_GET_FUN(__glewVertexAttrib1dv);
}
// /usr/include/GL/glew.h:1982:9: warning: macro 'glVertexAttrib1f' contains a runtime value, translated to function
pub inline fn glVertexAttrib1f() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1f)) {
    return GLEW_GET_FUN(__glewVertexAttrib1f);
}
// /usr/include/GL/glew.h:1983:9: warning: macro 'glVertexAttrib1fv' contains a runtime value, translated to function
pub inline fn glVertexAttrib1fv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1fv)) {
    return GLEW_GET_FUN(__glewVertexAttrib1fv);
}
// /usr/include/GL/glew.h:1984:9: warning: macro 'glVertexAttrib1s' contains a runtime value, translated to function
pub inline fn glVertexAttrib1s() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1s)) {
    return GLEW_GET_FUN(__glewVertexAttrib1s);
}
// /usr/include/GL/glew.h:1985:9: warning: macro 'glVertexAttrib1sv' contains a runtime value, translated to function
pub inline fn glVertexAttrib1sv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1sv)) {
    return GLEW_GET_FUN(__glewVertexAttrib1sv);
}
// /usr/include/GL/glew.h:1986:9: warning: macro 'glVertexAttrib2d' contains a runtime value, translated to function
pub inline fn glVertexAttrib2d() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2d)) {
    return GLEW_GET_FUN(__glewVertexAttrib2d);
}
// /usr/include/GL/glew.h:1987:9: warning: macro 'glVertexAttrib2dv' contains a runtime value, translated to function
pub inline fn glVertexAttrib2dv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2dv)) {
    return GLEW_GET_FUN(__glewVertexAttrib2dv);
}
// /usr/include/GL/glew.h:1988:9: warning: macro 'glVertexAttrib2f' contains a runtime value, translated to function
pub inline fn glVertexAttrib2f() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2f)) {
    return GLEW_GET_FUN(__glewVertexAttrib2f);
}
// /usr/include/GL/glew.h:1989:9: warning: macro 'glVertexAttrib2fv' contains a runtime value, translated to function
pub inline fn glVertexAttrib2fv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2fv)) {
    return GLEW_GET_FUN(__glewVertexAttrib2fv);
}
// /usr/include/GL/glew.h:1990:9: warning: macro 'glVertexAttrib2s' contains a runtime value, translated to function
pub inline fn glVertexAttrib2s() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2s)) {
    return GLEW_GET_FUN(__glewVertexAttrib2s);
}
// /usr/include/GL/glew.h:1991:9: warning: macro 'glVertexAttrib2sv' contains a runtime value, translated to function
pub inline fn glVertexAttrib2sv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2sv)) {
    return GLEW_GET_FUN(__glewVertexAttrib2sv);
}
// /usr/include/GL/glew.h:1992:9: warning: macro 'glVertexAttrib3d' contains a runtime value, translated to function
pub inline fn glVertexAttrib3d() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3d)) {
    return GLEW_GET_FUN(__glewVertexAttrib3d);
}
// /usr/include/GL/glew.h:1993:9: warning: macro 'glVertexAttrib3dv' contains a runtime value, translated to function
pub inline fn glVertexAttrib3dv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3dv)) {
    return GLEW_GET_FUN(__glewVertexAttrib3dv);
}
// /usr/include/GL/glew.h:1994:9: warning: macro 'glVertexAttrib3f' contains a runtime value, translated to function
pub inline fn glVertexAttrib3f() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3f)) {
    return GLEW_GET_FUN(__glewVertexAttrib3f);
}
// /usr/include/GL/glew.h:1995:9: warning: macro 'glVertexAttrib3fv' contains a runtime value, translated to function
pub inline fn glVertexAttrib3fv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3fv)) {
    return GLEW_GET_FUN(__glewVertexAttrib3fv);
}
// /usr/include/GL/glew.h:1996:9: warning: macro 'glVertexAttrib3s' contains a runtime value, translated to function
pub inline fn glVertexAttrib3s() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3s)) {
    return GLEW_GET_FUN(__glewVertexAttrib3s);
}
// /usr/include/GL/glew.h:1997:9: warning: macro 'glVertexAttrib3sv' contains a runtime value, translated to function
pub inline fn glVertexAttrib3sv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3sv)) {
    return GLEW_GET_FUN(__glewVertexAttrib3sv);
}
// /usr/include/GL/glew.h:1998:9: warning: macro 'glVertexAttrib4Nbv' contains a runtime value, translated to function
pub inline fn glVertexAttrib4Nbv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4Nbv)) {
    return GLEW_GET_FUN(__glewVertexAttrib4Nbv);
}
// /usr/include/GL/glew.h:1999:9: warning: macro 'glVertexAttrib4Niv' contains a runtime value, translated to function
pub inline fn glVertexAttrib4Niv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4Niv)) {
    return GLEW_GET_FUN(__glewVertexAttrib4Niv);
}
// /usr/include/GL/glew.h:2000:9: warning: macro 'glVertexAttrib4Nsv' contains a runtime value, translated to function
pub inline fn glVertexAttrib4Nsv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4Nsv)) {
    return GLEW_GET_FUN(__glewVertexAttrib4Nsv);
}
// /usr/include/GL/glew.h:2001:9: warning: macro 'glVertexAttrib4Nub' contains a runtime value, translated to function
pub inline fn glVertexAttrib4Nub() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4Nub)) {
    return GLEW_GET_FUN(__glewVertexAttrib4Nub);
}
// /usr/include/GL/glew.h:2002:9: warning: macro 'glVertexAttrib4Nubv' contains a runtime value, translated to function
pub inline fn glVertexAttrib4Nubv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4Nubv)) {
    return GLEW_GET_FUN(__glewVertexAttrib4Nubv);
}
// /usr/include/GL/glew.h:2003:9: warning: macro 'glVertexAttrib4Nuiv' contains a runtime value, translated to function
pub inline fn glVertexAttrib4Nuiv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4Nuiv)) {
    return GLEW_GET_FUN(__glewVertexAttrib4Nuiv);
}
// /usr/include/GL/glew.h:2004:9: warning: macro 'glVertexAttrib4Nusv' contains a runtime value, translated to function
pub inline fn glVertexAttrib4Nusv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4Nusv)) {
    return GLEW_GET_FUN(__glewVertexAttrib4Nusv);
}
// /usr/include/GL/glew.h:2005:9: warning: macro 'glVertexAttrib4bv' contains a runtime value, translated to function
pub inline fn glVertexAttrib4bv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4bv)) {
    return GLEW_GET_FUN(__glewVertexAttrib4bv);
}
// /usr/include/GL/glew.h:2006:9: warning: macro 'glVertexAttrib4d' contains a runtime value, translated to function
pub inline fn glVertexAttrib4d() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4d)) {
    return GLEW_GET_FUN(__glewVertexAttrib4d);
}
// /usr/include/GL/glew.h:2007:9: warning: macro 'glVertexAttrib4dv' contains a runtime value, translated to function
pub inline fn glVertexAttrib4dv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4dv)) {
    return GLEW_GET_FUN(__glewVertexAttrib4dv);
}
// /usr/include/GL/glew.h:2008:9: warning: macro 'glVertexAttrib4f' contains a runtime value, translated to function
pub inline fn glVertexAttrib4f() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4f)) {
    return GLEW_GET_FUN(__glewVertexAttrib4f);
}
// /usr/include/GL/glew.h:2009:9: warning: macro 'glVertexAttrib4fv' contains a runtime value, translated to function
pub inline fn glVertexAttrib4fv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4fv)) {
    return GLEW_GET_FUN(__glewVertexAttrib4fv);
}
// /usr/include/GL/glew.h:2010:9: warning: macro 'glVertexAttrib4iv' contains a runtime value, translated to function
pub inline fn glVertexAttrib4iv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4iv)) {
    return GLEW_GET_FUN(__glewVertexAttrib4iv);
}
// /usr/include/GL/glew.h:2011:9: warning: macro 'glVertexAttrib4s' contains a runtime value, translated to function
pub inline fn glVertexAttrib4s() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4s)) {
    return GLEW_GET_FUN(__glewVertexAttrib4s);
}
// /usr/include/GL/glew.h:2012:9: warning: macro 'glVertexAttrib4sv' contains a runtime value, translated to function
pub inline fn glVertexAttrib4sv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4sv)) {
    return GLEW_GET_FUN(__glewVertexAttrib4sv);
}
// /usr/include/GL/glew.h:2013:9: warning: macro 'glVertexAttrib4ubv' contains a runtime value, translated to function
pub inline fn glVertexAttrib4ubv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4ubv)) {
    return GLEW_GET_FUN(__glewVertexAttrib4ubv);
}
// /usr/include/GL/glew.h:2014:9: warning: macro 'glVertexAttrib4uiv' contains a runtime value, translated to function
pub inline fn glVertexAttrib4uiv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4uiv)) {
    return GLEW_GET_FUN(__glewVertexAttrib4uiv);
}
// /usr/include/GL/glew.h:2015:9: warning: macro 'glVertexAttrib4usv' contains a runtime value, translated to function
pub inline fn glVertexAttrib4usv() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4usv)) {
    return GLEW_GET_FUN(__glewVertexAttrib4usv);
}
// /usr/include/GL/glew.h:2016:9: warning: macro 'glVertexAttribPointer' contains a runtime value, translated to function
pub inline fn glVertexAttribPointer() @TypeOf(GLEW_GET_FUN(__glewVertexAttribPointer)) {
    return GLEW_GET_FUN(__glewVertexAttribPointer);
}
// /usr/include/GL/glew.h:2018:9: warning: macro 'GLEW_VERSION_2_0' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_2_0() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_2_0)) {
    return GLEW_GET_VAR(__GLEW_VERSION_2_0);
}
pub const GL_VERSION_2_1 = @as(c_int, 1);
pub const GL_CURRENT_RASTER_SECONDARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845F, .hex);
pub const GL_PIXEL_PACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hex);
pub const GL_PIXEL_UNPACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hex);
pub const GL_PIXEL_PACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hex);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hex);
pub const GL_FLOAT_MAT2x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B65, .hex);
pub const GL_FLOAT_MAT2x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B66, .hex);
pub const GL_FLOAT_MAT3x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B67, .hex);
pub const GL_FLOAT_MAT3x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B68, .hex);
pub const GL_FLOAT_MAT4x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B69, .hex);
pub const GL_FLOAT_MAT4x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B6A, .hex);
pub const GL_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C40, .hex);
pub const GL_SRGB8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hex);
pub const GL_SRGB_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C42, .hex);
pub const GL_SRGB8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C43, .hex);
pub const GL_SLUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C44, .hex);
pub const GL_SLUMINANCE8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C45, .hex);
pub const GL_SLUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C46, .hex);
pub const GL_SLUMINANCE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C47, .hex);
pub const GL_COMPRESSED_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C48, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C49, .hex);
pub const GL_COMPRESSED_SLUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4A, .hex);
pub const GL_COMPRESSED_SLUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4B, .hex);
// /usr/include/GL/glew.h:2058:9: warning: macro 'glUniformMatrix2x3fv' contains a runtime value, translated to function
pub inline fn glUniformMatrix2x3fv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix2x3fv)) {
    return GLEW_GET_FUN(__glewUniformMatrix2x3fv);
}
// /usr/include/GL/glew.h:2059:9: warning: macro 'glUniformMatrix2x4fv' contains a runtime value, translated to function
pub inline fn glUniformMatrix2x4fv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix2x4fv)) {
    return GLEW_GET_FUN(__glewUniformMatrix2x4fv);
}
// /usr/include/GL/glew.h:2060:9: warning: macro 'glUniformMatrix3x2fv' contains a runtime value, translated to function
pub inline fn glUniformMatrix3x2fv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix3x2fv)) {
    return GLEW_GET_FUN(__glewUniformMatrix3x2fv);
}
// /usr/include/GL/glew.h:2061:9: warning: macro 'glUniformMatrix3x4fv' contains a runtime value, translated to function
pub inline fn glUniformMatrix3x4fv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix3x4fv)) {
    return GLEW_GET_FUN(__glewUniformMatrix3x4fv);
}
// /usr/include/GL/glew.h:2062:9: warning: macro 'glUniformMatrix4x2fv' contains a runtime value, translated to function
pub inline fn glUniformMatrix4x2fv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix4x2fv)) {
    return GLEW_GET_FUN(__glewUniformMatrix4x2fv);
}
// /usr/include/GL/glew.h:2063:9: warning: macro 'glUniformMatrix4x3fv' contains a runtime value, translated to function
pub inline fn glUniformMatrix4x3fv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix4x3fv)) {
    return GLEW_GET_FUN(__glewUniformMatrix4x3fv);
}
// /usr/include/GL/glew.h:2065:9: warning: macro 'GLEW_VERSION_2_1' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_2_1() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_2_1)) {
    return GLEW_GET_VAR(__GLEW_VERSION_2_1);
}
pub const GL_VERSION_3_0 = @as(c_int, 1);
pub const GL_CLIP_DISTANCE0 = GL_CLIP_PLANE0;
pub const GL_CLIP_DISTANCE1 = GL_CLIP_PLANE1;
pub const GL_CLIP_DISTANCE2 = GL_CLIP_PLANE2;
pub const GL_CLIP_DISTANCE3 = GL_CLIP_PLANE3;
pub const GL_CLIP_DISTANCE4 = GL_CLIP_PLANE4;
pub const GL_CLIP_DISTANCE5 = GL_CLIP_PLANE5;
pub const GL_COMPARE_REF_TO_TEXTURE = GL_COMPARE_R_TO_TEXTURE_ARB;
pub const GL_MAX_CLIP_DISTANCES = GL_MAX_CLIP_PLANES;
pub const GL_MAX_VARYING_COMPONENTS = GL_MAX_VARYING_FLOATS;
pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = @as(c_int, 0x0001);
pub const GL_MAJOR_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821B, .hex);
pub const GL_MINOR_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821C, .hex);
pub const GL_NUM_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821D, .hex);
pub const GL_CONTEXT_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821E, .hex);
pub const GL_DEPTH_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8223, .hex);
pub const GL_STENCIL_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8224, .hex);
pub const GL_RGBA32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hex);
pub const GL_RGB32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hex);
pub const GL_RGBA16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hex);
pub const GL_RGB16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hex);
pub const GL_MAX_ARRAY_TEXTURE_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FF, .hex);
pub const GL_MIN_PROGRAM_TEXEL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8904, .hex);
pub const GL_MAX_PROGRAM_TEXEL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8905, .hex);
pub const GL_CLAMP_VERTEX_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891A, .hex);
pub const GL_CLAMP_FRAGMENT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891B, .hex);
pub const GL_CLAMP_READ_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891C, .hex);
pub const GL_FIXED_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891D, .hex);
pub const GL_TEXTURE_RED_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C10, .hex);
pub const GL_TEXTURE_GREEN_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C11, .hex);
pub const GL_TEXTURE_BLUE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C12, .hex);
pub const GL_TEXTURE_ALPHA_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C13, .hex);
pub const GL_TEXTURE_LUMINANCE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C14, .hex);
pub const GL_TEXTURE_INTENSITY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C15, .hex);
pub const GL_TEXTURE_DEPTH_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C16, .hex);
pub const GL_TEXTURE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C18, .hex);
pub const GL_PROXY_TEXTURE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C19, .hex);
pub const GL_TEXTURE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1A, .hex);
pub const GL_PROXY_TEXTURE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1B, .hex);
pub const GL_TEXTURE_BINDING_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1C, .hex);
pub const GL_TEXTURE_BINDING_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1D, .hex);
pub const GL_R11F_G11F_B10F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hex);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hex);
pub const GL_RGB9_E5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3D, .hex);
pub const GL_UNSIGNED_INT_5_9_9_9_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3E, .hex);
pub const GL_TEXTURE_SHARED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3F, .hex);
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C76, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hex);
pub const GL_TRANSFORM_FEEDBACK_VARYINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hex);
pub const GL_PRIMITIVES_GENERATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hex);
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hex);
pub const GL_RASTERIZER_DISCARD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hex);
pub const GL_INTERLEAVED_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hex);
pub const GL_SEPARATE_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hex);
pub const GL_RGBA32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D70, .hex);
pub const GL_RGB32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D71, .hex);
pub const GL_RGBA16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D76, .hex);
pub const GL_RGB16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D77, .hex);
pub const GL_RGBA8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7C, .hex);
pub const GL_RGB8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7D, .hex);
pub const GL_RGBA32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D82, .hex);
pub const GL_RGB32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D83, .hex);
pub const GL_RGBA16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D88, .hex);
pub const GL_RGB16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D89, .hex);
pub const GL_RGBA8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8E, .hex);
pub const GL_RGB8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8F, .hex);
pub const GL_RED_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D94, .hex);
pub const GL_GREEN_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D95, .hex);
pub const GL_BLUE_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D96, .hex);
pub const GL_ALPHA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D97, .hex);
pub const GL_RGB_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D98, .hex);
pub const GL_RGBA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D99, .hex);
pub const GL_BGR_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9A, .hex);
pub const GL_BGRA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9B, .hex);
pub const GL_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC0, .hex);
pub const GL_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC1, .hex);
pub const GL_SAMPLER_1D_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC3, .hex);
pub const GL_SAMPLER_2D_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC4, .hex);
pub const GL_SAMPLER_CUBE_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC5, .hex);
pub const GL_UNSIGNED_INT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC6, .hex);
pub const GL_UNSIGNED_INT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC7, .hex);
pub const GL_UNSIGNED_INT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC8, .hex);
pub const GL_INT_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC9, .hex);
pub const GL_INT_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCA, .hex);
pub const GL_INT_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCB, .hex);
pub const GL_INT_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCC, .hex);
pub const GL_INT_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCE, .hex);
pub const GL_INT_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCF, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD1, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD2, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD3, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD4, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD6, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD7, .hex);
pub const GL_QUERY_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E13, .hex);
pub const GL_QUERY_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E14, .hex);
pub const GL_QUERY_BY_REGION_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E15, .hex);
pub const GL_QUERY_BY_REGION_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E16, .hex);
// /usr/include/GL/glew.h:2236:9: warning: macro 'glBeginConditionalRender' contains a runtime value, translated to function
pub inline fn glBeginConditionalRender() @TypeOf(GLEW_GET_FUN(__glewBeginConditionalRender)) {
    return GLEW_GET_FUN(__glewBeginConditionalRender);
}
// /usr/include/GL/glew.h:2237:9: warning: macro 'glBeginTransformFeedback' contains a runtime value, translated to function
pub inline fn glBeginTransformFeedback() @TypeOf(GLEW_GET_FUN(__glewBeginTransformFeedback)) {
    return GLEW_GET_FUN(__glewBeginTransformFeedback);
}
// /usr/include/GL/glew.h:2238:9: warning: macro 'glBindFragDataLocation' contains a runtime value, translated to function
pub inline fn glBindFragDataLocation() @TypeOf(GLEW_GET_FUN(__glewBindFragDataLocation)) {
    return GLEW_GET_FUN(__glewBindFragDataLocation);
}
// /usr/include/GL/glew.h:2239:9: warning: macro 'glClampColor' contains a runtime value, translated to function
pub inline fn glClampColor() @TypeOf(GLEW_GET_FUN(__glewClampColor)) {
    return GLEW_GET_FUN(__glewClampColor);
}
// /usr/include/GL/glew.h:2240:9: warning: macro 'glClearBufferfi' contains a runtime value, translated to function
pub inline fn glClearBufferfi() @TypeOf(GLEW_GET_FUN(__glewClearBufferfi)) {
    return GLEW_GET_FUN(__glewClearBufferfi);
}
// /usr/include/GL/glew.h:2241:9: warning: macro 'glClearBufferfv' contains a runtime value, translated to function
pub inline fn glClearBufferfv() @TypeOf(GLEW_GET_FUN(__glewClearBufferfv)) {
    return GLEW_GET_FUN(__glewClearBufferfv);
}
// /usr/include/GL/glew.h:2242:9: warning: macro 'glClearBufferiv' contains a runtime value, translated to function
pub inline fn glClearBufferiv() @TypeOf(GLEW_GET_FUN(__glewClearBufferiv)) {
    return GLEW_GET_FUN(__glewClearBufferiv);
}
// /usr/include/GL/glew.h:2243:9: warning: macro 'glClearBufferuiv' contains a runtime value, translated to function
pub inline fn glClearBufferuiv() @TypeOf(GLEW_GET_FUN(__glewClearBufferuiv)) {
    return GLEW_GET_FUN(__glewClearBufferuiv);
}
// /usr/include/GL/glew.h:2244:9: warning: macro 'glColorMaski' contains a runtime value, translated to function
pub inline fn glColorMaski() @TypeOf(GLEW_GET_FUN(__glewColorMaski)) {
    return GLEW_GET_FUN(__glewColorMaski);
}
// /usr/include/GL/glew.h:2245:9: warning: macro 'glDisablei' contains a runtime value, translated to function
pub inline fn glDisablei() @TypeOf(GLEW_GET_FUN(__glewDisablei)) {
    return GLEW_GET_FUN(__glewDisablei);
}
// /usr/include/GL/glew.h:2246:9: warning: macro 'glEnablei' contains a runtime value, translated to function
pub inline fn glEnablei() @TypeOf(GLEW_GET_FUN(__glewEnablei)) {
    return GLEW_GET_FUN(__glewEnablei);
}
// /usr/include/GL/glew.h:2247:9: warning: macro 'glEndConditionalRender' contains a runtime value, translated to function
pub inline fn glEndConditionalRender() @TypeOf(GLEW_GET_FUN(__glewEndConditionalRender)) {
    return GLEW_GET_FUN(__glewEndConditionalRender);
}
// /usr/include/GL/glew.h:2248:9: warning: macro 'glEndTransformFeedback' contains a runtime value, translated to function
pub inline fn glEndTransformFeedback() @TypeOf(GLEW_GET_FUN(__glewEndTransformFeedback)) {
    return GLEW_GET_FUN(__glewEndTransformFeedback);
}
// /usr/include/GL/glew.h:2249:9: warning: macro 'glGetBooleani_v' contains a runtime value, translated to function
pub inline fn glGetBooleani_v() @TypeOf(GLEW_GET_FUN(__glewGetBooleani_v)) {
    return GLEW_GET_FUN(__glewGetBooleani_v);
}
// /usr/include/GL/glew.h:2250:9: warning: macro 'glGetFragDataLocation' contains a runtime value, translated to function
pub inline fn glGetFragDataLocation() @TypeOf(GLEW_GET_FUN(__glewGetFragDataLocation)) {
    return GLEW_GET_FUN(__glewGetFragDataLocation);
}
// /usr/include/GL/glew.h:2251:9: warning: macro 'glGetStringi' contains a runtime value, translated to function
pub inline fn glGetStringi() @TypeOf(GLEW_GET_FUN(__glewGetStringi)) {
    return GLEW_GET_FUN(__glewGetStringi);
}
// /usr/include/GL/glew.h:2252:9: warning: macro 'glGetTexParameterIiv' contains a runtime value, translated to function
pub inline fn glGetTexParameterIiv() @TypeOf(GLEW_GET_FUN(__glewGetTexParameterIiv)) {
    return GLEW_GET_FUN(__glewGetTexParameterIiv);
}
// /usr/include/GL/glew.h:2253:9: warning: macro 'glGetTexParameterIuiv' contains a runtime value, translated to function
pub inline fn glGetTexParameterIuiv() @TypeOf(GLEW_GET_FUN(__glewGetTexParameterIuiv)) {
    return GLEW_GET_FUN(__glewGetTexParameterIuiv);
}
// /usr/include/GL/glew.h:2254:9: warning: macro 'glGetTransformFeedbackVarying' contains a runtime value, translated to function
pub inline fn glGetTransformFeedbackVarying() @TypeOf(GLEW_GET_FUN(__glewGetTransformFeedbackVarying)) {
    return GLEW_GET_FUN(__glewGetTransformFeedbackVarying);
}
// /usr/include/GL/glew.h:2255:9: warning: macro 'glGetUniformuiv' contains a runtime value, translated to function
pub inline fn glGetUniformuiv() @TypeOf(GLEW_GET_FUN(__glewGetUniformuiv)) {
    return GLEW_GET_FUN(__glewGetUniformuiv);
}
// /usr/include/GL/glew.h:2256:9: warning: macro 'glGetVertexAttribIiv' contains a runtime value, translated to function
pub inline fn glGetVertexAttribIiv() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribIiv)) {
    return GLEW_GET_FUN(__glewGetVertexAttribIiv);
}
// /usr/include/GL/glew.h:2257:9: warning: macro 'glGetVertexAttribIuiv' contains a runtime value, translated to function
pub inline fn glGetVertexAttribIuiv() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribIuiv)) {
    return GLEW_GET_FUN(__glewGetVertexAttribIuiv);
}
// /usr/include/GL/glew.h:2258:9: warning: macro 'glIsEnabledi' contains a runtime value, translated to function
pub inline fn glIsEnabledi() @TypeOf(GLEW_GET_FUN(__glewIsEnabledi)) {
    return GLEW_GET_FUN(__glewIsEnabledi);
}
// /usr/include/GL/glew.h:2259:9: warning: macro 'glTexParameterIiv' contains a runtime value, translated to function
pub inline fn glTexParameterIiv() @TypeOf(GLEW_GET_FUN(__glewTexParameterIiv)) {
    return GLEW_GET_FUN(__glewTexParameterIiv);
}
// /usr/include/GL/glew.h:2260:9: warning: macro 'glTexParameterIuiv' contains a runtime value, translated to function
pub inline fn glTexParameterIuiv() @TypeOf(GLEW_GET_FUN(__glewTexParameterIuiv)) {
    return GLEW_GET_FUN(__glewTexParameterIuiv);
}
// /usr/include/GL/glew.h:2261:9: warning: macro 'glTransformFeedbackVaryings' contains a runtime value, translated to function
pub inline fn glTransformFeedbackVaryings() @TypeOf(GLEW_GET_FUN(__glewTransformFeedbackVaryings)) {
    return GLEW_GET_FUN(__glewTransformFeedbackVaryings);
}
// /usr/include/GL/glew.h:2262:9: warning: macro 'glUniform1ui' contains a runtime value, translated to function
pub inline fn glUniform1ui() @TypeOf(GLEW_GET_FUN(__glewUniform1ui)) {
    return GLEW_GET_FUN(__glewUniform1ui);
}
// /usr/include/GL/glew.h:2263:9: warning: macro 'glUniform1uiv' contains a runtime value, translated to function
pub inline fn glUniform1uiv() @TypeOf(GLEW_GET_FUN(__glewUniform1uiv)) {
    return GLEW_GET_FUN(__glewUniform1uiv);
}
// /usr/include/GL/glew.h:2264:9: warning: macro 'glUniform2ui' contains a runtime value, translated to function
pub inline fn glUniform2ui() @TypeOf(GLEW_GET_FUN(__glewUniform2ui)) {
    return GLEW_GET_FUN(__glewUniform2ui);
}
// /usr/include/GL/glew.h:2265:9: warning: macro 'glUniform2uiv' contains a runtime value, translated to function
pub inline fn glUniform2uiv() @TypeOf(GLEW_GET_FUN(__glewUniform2uiv)) {
    return GLEW_GET_FUN(__glewUniform2uiv);
}
// /usr/include/GL/glew.h:2266:9: warning: macro 'glUniform3ui' contains a runtime value, translated to function
pub inline fn glUniform3ui() @TypeOf(GLEW_GET_FUN(__glewUniform3ui)) {
    return GLEW_GET_FUN(__glewUniform3ui);
}
// /usr/include/GL/glew.h:2267:9: warning: macro 'glUniform3uiv' contains a runtime value, translated to function
pub inline fn glUniform3uiv() @TypeOf(GLEW_GET_FUN(__glewUniform3uiv)) {
    return GLEW_GET_FUN(__glewUniform3uiv);
}
// /usr/include/GL/glew.h:2268:9: warning: macro 'glUniform4ui' contains a runtime value, translated to function
pub inline fn glUniform4ui() @TypeOf(GLEW_GET_FUN(__glewUniform4ui)) {
    return GLEW_GET_FUN(__glewUniform4ui);
}
// /usr/include/GL/glew.h:2269:9: warning: macro 'glUniform4uiv' contains a runtime value, translated to function
pub inline fn glUniform4uiv() @TypeOf(GLEW_GET_FUN(__glewUniform4uiv)) {
    return GLEW_GET_FUN(__glewUniform4uiv);
}
// /usr/include/GL/glew.h:2270:9: warning: macro 'glVertexAttribI1i' contains a runtime value, translated to function
pub inline fn glVertexAttribI1i() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI1i)) {
    return GLEW_GET_FUN(__glewVertexAttribI1i);
}
// /usr/include/GL/glew.h:2271:9: warning: macro 'glVertexAttribI1iv' contains a runtime value, translated to function
pub inline fn glVertexAttribI1iv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI1iv)) {
    return GLEW_GET_FUN(__glewVertexAttribI1iv);
}
// /usr/include/GL/glew.h:2272:9: warning: macro 'glVertexAttribI1ui' contains a runtime value, translated to function
pub inline fn glVertexAttribI1ui() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI1ui)) {
    return GLEW_GET_FUN(__glewVertexAttribI1ui);
}
// /usr/include/GL/glew.h:2273:9: warning: macro 'glVertexAttribI1uiv' contains a runtime value, translated to function
pub inline fn glVertexAttribI1uiv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI1uiv)) {
    return GLEW_GET_FUN(__glewVertexAttribI1uiv);
}
// /usr/include/GL/glew.h:2274:9: warning: macro 'glVertexAttribI2i' contains a runtime value, translated to function
pub inline fn glVertexAttribI2i() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI2i)) {
    return GLEW_GET_FUN(__glewVertexAttribI2i);
}
// /usr/include/GL/glew.h:2275:9: warning: macro 'glVertexAttribI2iv' contains a runtime value, translated to function
pub inline fn glVertexAttribI2iv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI2iv)) {
    return GLEW_GET_FUN(__glewVertexAttribI2iv);
}
// /usr/include/GL/glew.h:2276:9: warning: macro 'glVertexAttribI2ui' contains a runtime value, translated to function
pub inline fn glVertexAttribI2ui() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI2ui)) {
    return GLEW_GET_FUN(__glewVertexAttribI2ui);
}
// /usr/include/GL/glew.h:2277:9: warning: macro 'glVertexAttribI2uiv' contains a runtime value, translated to function
pub inline fn glVertexAttribI2uiv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI2uiv)) {
    return GLEW_GET_FUN(__glewVertexAttribI2uiv);
}
// /usr/include/GL/glew.h:2278:9: warning: macro 'glVertexAttribI3i' contains a runtime value, translated to function
pub inline fn glVertexAttribI3i() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI3i)) {
    return GLEW_GET_FUN(__glewVertexAttribI3i);
}
// /usr/include/GL/glew.h:2279:9: warning: macro 'glVertexAttribI3iv' contains a runtime value, translated to function
pub inline fn glVertexAttribI3iv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI3iv)) {
    return GLEW_GET_FUN(__glewVertexAttribI3iv);
}
// /usr/include/GL/glew.h:2280:9: warning: macro 'glVertexAttribI3ui' contains a runtime value, translated to function
pub inline fn glVertexAttribI3ui() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI3ui)) {
    return GLEW_GET_FUN(__glewVertexAttribI3ui);
}
// /usr/include/GL/glew.h:2281:9: warning: macro 'glVertexAttribI3uiv' contains a runtime value, translated to function
pub inline fn glVertexAttribI3uiv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI3uiv)) {
    return GLEW_GET_FUN(__glewVertexAttribI3uiv);
}
// /usr/include/GL/glew.h:2282:9: warning: macro 'glVertexAttribI4bv' contains a runtime value, translated to function
pub inline fn glVertexAttribI4bv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4bv)) {
    return GLEW_GET_FUN(__glewVertexAttribI4bv);
}
// /usr/include/GL/glew.h:2283:9: warning: macro 'glVertexAttribI4i' contains a runtime value, translated to function
pub inline fn glVertexAttribI4i() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4i)) {
    return GLEW_GET_FUN(__glewVertexAttribI4i);
}
// /usr/include/GL/glew.h:2284:9: warning: macro 'glVertexAttribI4iv' contains a runtime value, translated to function
pub inline fn glVertexAttribI4iv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4iv)) {
    return GLEW_GET_FUN(__glewVertexAttribI4iv);
}
// /usr/include/GL/glew.h:2285:9: warning: macro 'glVertexAttribI4sv' contains a runtime value, translated to function
pub inline fn glVertexAttribI4sv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4sv)) {
    return GLEW_GET_FUN(__glewVertexAttribI4sv);
}
// /usr/include/GL/glew.h:2286:9: warning: macro 'glVertexAttribI4ubv' contains a runtime value, translated to function
pub inline fn glVertexAttribI4ubv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4ubv)) {
    return GLEW_GET_FUN(__glewVertexAttribI4ubv);
}
// /usr/include/GL/glew.h:2287:9: warning: macro 'glVertexAttribI4ui' contains a runtime value, translated to function
pub inline fn glVertexAttribI4ui() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4ui)) {
    return GLEW_GET_FUN(__glewVertexAttribI4ui);
}
// /usr/include/GL/glew.h:2288:9: warning: macro 'glVertexAttribI4uiv' contains a runtime value, translated to function
pub inline fn glVertexAttribI4uiv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4uiv)) {
    return GLEW_GET_FUN(__glewVertexAttribI4uiv);
}
// /usr/include/GL/glew.h:2289:9: warning: macro 'glVertexAttribI4usv' contains a runtime value, translated to function
pub inline fn glVertexAttribI4usv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4usv)) {
    return GLEW_GET_FUN(__glewVertexAttribI4usv);
}
// /usr/include/GL/glew.h:2290:9: warning: macro 'glVertexAttribIPointer' contains a runtime value, translated to function
pub inline fn glVertexAttribIPointer() @TypeOf(GLEW_GET_FUN(__glewVertexAttribIPointer)) {
    return GLEW_GET_FUN(__glewVertexAttribIPointer);
}
// /usr/include/GL/glew.h:2292:9: warning: macro 'GLEW_VERSION_3_0' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_3_0() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_3_0)) {
    return GLEW_GET_VAR(__GLEW_VERSION_3_0);
}
pub const GL_VERSION_3_1 = @as(c_int, 1);
pub const GL_TEXTURE_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hex);
pub const GL_TEXTURE_BINDING_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hex);
pub const GL_PROXY_TEXTURE_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hex);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hex);
pub const GL_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B63, .hex);
pub const GL_SAMPLER_2D_RECT_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B64, .hex);
pub const GL_TEXTURE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hex);
pub const GL_MAX_TEXTURE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hex);
pub const GL_TEXTURE_BINDING_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hex);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hex);
pub const GL_TEXTURE_BUFFER_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2E, .hex);
pub const GL_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hex);
pub const GL_INT_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCD, .hex);
pub const GL_INT_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD5, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hex);
pub const GL_RED_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F90, .hex);
pub const GL_RG_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F91, .hex);
pub const GL_RGB_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F92, .hex);
pub const GL_RGBA_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F93, .hex);
pub const GL_R8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F94, .hex);
pub const GL_RG8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F95, .hex);
pub const GL_RGB8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F96, .hex);
pub const GL_RGBA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F97, .hex);
pub const GL_R16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F98, .hex);
pub const GL_RG16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F99, .hex);
pub const GL_RGB16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9A, .hex);
pub const GL_RGBA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9B, .hex);
pub const GL_SIGNED_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9C, .hex);
pub const GL_PRIMITIVE_RESTART = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9D, .hex);
pub const GL_PRIMITIVE_RESTART_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9E, .hex);
pub const GL_BUFFER_ACCESS_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911F, .hex);
pub const GL_BUFFER_MAP_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9120, .hex);
pub const GL_BUFFER_MAP_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9121, .hex);
// /usr/include/GL/glew.h:2341:9: warning: macro 'glDrawArraysInstanced' contains a runtime value, translated to function
pub inline fn glDrawArraysInstanced() @TypeOf(GLEW_GET_FUN(__glewDrawArraysInstanced)) {
    return GLEW_GET_FUN(__glewDrawArraysInstanced);
}
// /usr/include/GL/glew.h:2342:9: warning: macro 'glDrawElementsInstanced' contains a runtime value, translated to function
pub inline fn glDrawElementsInstanced() @TypeOf(GLEW_GET_FUN(__glewDrawElementsInstanced)) {
    return GLEW_GET_FUN(__glewDrawElementsInstanced);
}
// /usr/include/GL/glew.h:2343:9: warning: macro 'glPrimitiveRestartIndex' contains a runtime value, translated to function
pub inline fn glPrimitiveRestartIndex() @TypeOf(GLEW_GET_FUN(__glewPrimitiveRestartIndex)) {
    return GLEW_GET_FUN(__glewPrimitiveRestartIndex);
}
// /usr/include/GL/glew.h:2344:9: warning: macro 'glTexBuffer' contains a runtime value, translated to function
pub inline fn glTexBuffer() @TypeOf(GLEW_GET_FUN(__glewTexBuffer)) {
    return GLEW_GET_FUN(__glewTexBuffer);
}
// /usr/include/GL/glew.h:2346:9: warning: macro 'GLEW_VERSION_3_1' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_3_1() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_3_1)) {
    return GLEW_GET_VAR(__GLEW_VERSION_3_1);
}
pub const GL_VERSION_3_2 = @as(c_int, 1);
pub const GL_CONTEXT_CORE_PROFILE_BIT = @as(c_int, 0x00000001);
pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = @as(c_int, 0x00000002);
pub const GL_LINES_ADJACENCY = @as(c_int, 0x000A);
pub const GL_LINE_STRIP_ADJACENCY = @as(c_int, 0x000B);
pub const GL_TRIANGLES_ADJACENCY = @as(c_int, 0x000C);
pub const GL_TRIANGLE_STRIP_ADJACENCY = @as(c_int, 0x000D);
pub const GL_PROGRAM_POINT_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hex);
pub const GL_GEOMETRY_VERTICES_OUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8916, .hex);
pub const GL_GEOMETRY_INPUT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8917, .hex);
pub const GL_GEOMETRY_OUTPUT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8918, .hex);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hex);
pub const GL_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hex);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hex);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hex);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hex);
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9122, .hex);
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9123, .hex);
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9124, .hex);
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9125, .hex);
pub const GL_CONTEXT_PROFILE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9126, .hex);
// /usr/include/GL/glew.h:2382:9: warning: macro 'glFramebufferTexture' contains a runtime value, translated to function
pub inline fn glFramebufferTexture() @TypeOf(GLEW_GET_FUN(__glewFramebufferTexture)) {
    return GLEW_GET_FUN(__glewFramebufferTexture);
}
// /usr/include/GL/glew.h:2383:9: warning: macro 'glGetBufferParameteri64v' contains a runtime value, translated to function
pub inline fn glGetBufferParameteri64v() @TypeOf(GLEW_GET_FUN(__glewGetBufferParameteri64v)) {
    return GLEW_GET_FUN(__glewGetBufferParameteri64v);
}
// /usr/include/GL/glew.h:2384:9: warning: macro 'glGetInteger64i_v' contains a runtime value, translated to function
pub inline fn glGetInteger64i_v() @TypeOf(GLEW_GET_FUN(__glewGetInteger64i_v)) {
    return GLEW_GET_FUN(__glewGetInteger64i_v);
}
// /usr/include/GL/glew.h:2386:9: warning: macro 'GLEW_VERSION_3_2' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_3_2() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_3_2)) {
    return GLEW_GET_VAR(__GLEW_VERSION_3_2);
}
pub const GL_VERSION_3_3 = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hex);
pub const GL_RGB10_A2UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906F, .hex);
// /usr/include/GL/glew.h:2400:9: warning: macro 'glVertexAttribDivisor' contains a runtime value, translated to function
pub inline fn glVertexAttribDivisor() @TypeOf(GLEW_GET_FUN(__glewVertexAttribDivisor)) {
    return GLEW_GET_FUN(__glewVertexAttribDivisor);
}
// /usr/include/GL/glew.h:2402:9: warning: macro 'GLEW_VERSION_3_3' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_3_3() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_3_3)) {
    return GLEW_GET_VAR(__GLEW_VERSION_3_3);
}
pub const GL_VERSION_4_0 = @as(c_int, 1);
pub const GL_SAMPLE_SHADING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C36, .hex);
pub const GL_MIN_SAMPLE_SHADING_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C37, .hex);
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hex);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hex);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9F, .hex);
pub const GL_TEXTURE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hex);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hex);
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900B, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hex);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hex);
// /usr/include/GL/glew.h:2430:9: warning: macro 'glBlendEquationSeparatei' contains a runtime value, translated to function
pub inline fn glBlendEquationSeparatei() @TypeOf(GLEW_GET_FUN(__glewBlendEquationSeparatei)) {
    return GLEW_GET_FUN(__glewBlendEquationSeparatei);
}
// /usr/include/GL/glew.h:2431:9: warning: macro 'glBlendEquationi' contains a runtime value, translated to function
pub inline fn glBlendEquationi() @TypeOf(GLEW_GET_FUN(__glewBlendEquationi)) {
    return GLEW_GET_FUN(__glewBlendEquationi);
}
// /usr/include/GL/glew.h:2432:9: warning: macro 'glBlendFuncSeparatei' contains a runtime value, translated to function
pub inline fn glBlendFuncSeparatei() @TypeOf(GLEW_GET_FUN(__glewBlendFuncSeparatei)) {
    return GLEW_GET_FUN(__glewBlendFuncSeparatei);
}
// /usr/include/GL/glew.h:2433:9: warning: macro 'glBlendFunci' contains a runtime value, translated to function
pub inline fn glBlendFunci() @TypeOf(GLEW_GET_FUN(__glewBlendFunci)) {
    return GLEW_GET_FUN(__glewBlendFunci);
}
// /usr/include/GL/glew.h:2434:9: warning: macro 'glMinSampleShading' contains a runtime value, translated to function
pub inline fn glMinSampleShading() @TypeOf(GLEW_GET_FUN(__glewMinSampleShading)) {
    return GLEW_GET_FUN(__glewMinSampleShading);
}
// /usr/include/GL/glew.h:2436:9: warning: macro 'GLEW_VERSION_4_0' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_4_0() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_4_0)) {
    return GLEW_GET_VAR(__GLEW_VERSION_4_0);
}
pub const GL_VERSION_4_1 = @as(c_int, 1);
// /usr/include/GL/glew.h:2445:9: warning: macro 'GLEW_VERSION_4_1' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_4_1() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_4_1)) {
    return GLEW_GET_VAR(__GLEW_VERSION_4_1);
}
pub const GL_VERSION_4_2 = @as(c_int, 1);
pub const GL_TRANSFORM_FEEDBACK_PAUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hex);
pub const GL_TRANSFORM_FEEDBACK_ACTIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hex);
pub const GL_COMPRESSED_RGBA_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8C, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8D, .hex);
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8E, .hex);
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8F, .hex);
pub const GL_COPY_READ_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hex);
pub const GL_COPY_WRITE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hex);
// /usr/include/GL/glew.h:2463:9: warning: macro 'GLEW_VERSION_4_2' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_4_2() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_4_2)) {
    return GLEW_GET_VAR(__GLEW_VERSION_4_2);
}
pub const GL_VERSION_4_3 = @as(c_int, 1);
pub const GL_NUM_SHADING_LANGUAGE_VERSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E9, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_LONG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874E, .hex);
// /usr/include/GL/glew.h:2475:9: warning: macro 'GLEW_VERSION_4_3' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_4_3() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_4_3)) {
    return GLEW_GET_VAR(__GLEW_VERSION_4_3);
}
pub const GL_VERSION_4_4 = @as(c_int, 1);
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8221, .hex);
pub const GL_MAX_VERTEX_ATTRIB_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E5, .hex);
pub const GL_TEXTURE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hex);
// /usr/include/GL/glew.h:2488:9: warning: macro 'GLEW_VERSION_4_4' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_4_4() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_4_4)) {
    return GLEW_GET_VAR(__GLEW_VERSION_4_4);
}
pub const GL_VERSION_4_5 = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = @as(c_int, 0x00000004);
// /usr/include/GL/glew.h:2504:9: warning: macro 'glGetGraphicsResetStatus' contains a runtime value, translated to function
pub inline fn glGetGraphicsResetStatus() @TypeOf(GLEW_GET_FUN(__glewGetGraphicsResetStatus)) {
    return GLEW_GET_FUN(__glewGetGraphicsResetStatus);
}
// /usr/include/GL/glew.h:2505:9: warning: macro 'glGetnCompressedTexImage' contains a runtime value, translated to function
pub inline fn glGetnCompressedTexImage() @TypeOf(GLEW_GET_FUN(__glewGetnCompressedTexImage)) {
    return GLEW_GET_FUN(__glewGetnCompressedTexImage);
}
// /usr/include/GL/glew.h:2506:9: warning: macro 'glGetnTexImage' contains a runtime value, translated to function
pub inline fn glGetnTexImage() @TypeOf(GLEW_GET_FUN(__glewGetnTexImage)) {
    return GLEW_GET_FUN(__glewGetnTexImage);
}
// /usr/include/GL/glew.h:2507:9: warning: macro 'glGetnUniformdv' contains a runtime value, translated to function
pub inline fn glGetnUniformdv() @TypeOf(GLEW_GET_FUN(__glewGetnUniformdv)) {
    return GLEW_GET_FUN(__glewGetnUniformdv);
}
// /usr/include/GL/glew.h:2509:9: warning: macro 'GLEW_VERSION_4_5' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_4_5() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_4_5)) {
    return GLEW_GET_VAR(__GLEW_VERSION_4_5);
}
pub const GL_VERSION_4_6 = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT = @as(c_int, 0x00000008);
pub const GL_PARAMETER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EE, .hex);
pub const GL_PARAMETER_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EF, .hex);
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EC, .hex);
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82ED, .hex);
pub const GL_VERTICES_SUBMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EE, .hex);
pub const GL_PRIMITIVES_SUBMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EF, .hex);
pub const GL_VERTEX_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F0, .hex);
pub const GL_TESS_CONTROL_SHADER_PATCHES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F1, .hex);
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F2, .hex);
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F3, .hex);
pub const GL_FRAGMENT_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F4, .hex);
pub const GL_COMPUTE_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F5, .hex);
pub const GL_CLIPPING_INPUT_PRIMITIVES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F6, .hex);
pub const GL_CLIPPING_OUTPUT_PRIMITIVES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F7, .hex);
pub const GL_TEXTURE_MAX_ANISOTROPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FE, .hex);
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FF, .hex);
pub const GL_POLYGON_OFFSET_CLAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1B, .hex);
pub const GL_SHADER_BINARY_FORMAT_SPIR_V = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9551, .hex);
pub const GL_SPIR_V_BINARY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9552, .hex);
pub const GL_SPIR_V_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9553, .hex);
pub const GL_NUM_SPIR_V_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9554, .hex);
// /usr/include/GL/glew.h:2545:9: warning: macro 'glMultiDrawArraysIndirectCount' contains a runtime value, translated to function
pub inline fn glMultiDrawArraysIndirectCount() @TypeOf(GLEW_GET_FUN(__glewMultiDrawArraysIndirectCount)) {
    return GLEW_GET_FUN(__glewMultiDrawArraysIndirectCount);
}
// /usr/include/GL/glew.h:2546:9: warning: macro 'glMultiDrawElementsIndirectCount' contains a runtime value, translated to function
pub inline fn glMultiDrawElementsIndirectCount() @TypeOf(GLEW_GET_FUN(__glewMultiDrawElementsIndirectCount)) {
    return GLEW_GET_FUN(__glewMultiDrawElementsIndirectCount);
}
// /usr/include/GL/glew.h:2547:9: warning: macro 'glSpecializeShader' contains a runtime value, translated to function
pub inline fn glSpecializeShader() @TypeOf(GLEW_GET_FUN(__glewSpecializeShader)) {
    return GLEW_GET_FUN(__glewSpecializeShader);
}
// /usr/include/GL/glew.h:2549:9: warning: macro 'GLEW_VERSION_4_6' contains a runtime value, translated to function
pub inline fn GLEW_VERSION_4_6() @TypeOf(GLEW_GET_VAR(__GLEW_VERSION_4_6)) {
    return GLEW_GET_VAR(__GLEW_VERSION_4_6);
}
pub const GL_3DFX_multisample = @as(c_int, 1);
pub const GL_MULTISAMPLE_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B2, .hex);
pub const GL_SAMPLE_BUFFERS_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B3, .hex);
pub const GL_SAMPLES_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B4, .hex);
pub const GL_MULTISAMPLE_BIT_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
// /usr/include/GL/glew.h:2563:9: warning: macro 'GLEW_3DFX_multisample' contains a runtime value, translated to function
pub inline fn GLEW_3DFX_multisample() @TypeOf(GLEW_GET_VAR(__GLEW_3DFX_multisample)) {
    return GLEW_GET_VAR(__GLEW_3DFX_multisample);
}
pub const GL_3DFX_tbuffer = @as(c_int, 1);
// /usr/include/GL/glew.h:2574:9: warning: macro 'glTbufferMask3DFX' contains a runtime value, translated to function
pub inline fn glTbufferMask3DFX() @TypeOf(GLEW_GET_FUN(__glewTbufferMask3DFX)) {
    return GLEW_GET_FUN(__glewTbufferMask3DFX);
}
// /usr/include/GL/glew.h:2576:9: warning: macro 'GLEW_3DFX_tbuffer' contains a runtime value, translated to function
pub inline fn GLEW_3DFX_tbuffer() @TypeOf(GLEW_GET_VAR(__GLEW_3DFX_tbuffer)) {
    return GLEW_GET_VAR(__GLEW_3DFX_tbuffer);
}
pub const GL_3DFX_texture_compression_FXT1 = @as(c_int, 1);
pub const GL_COMPRESSED_RGB_FXT1_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B0, .hex);
pub const GL_COMPRESSED_RGBA_FXT1_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B1, .hex);
// /usr/include/GL/glew.h:2588:9: warning: macro 'GLEW_3DFX_texture_compression_FXT1' contains a runtime value, translated to function
pub inline fn GLEW_3DFX_texture_compression_FXT1() @TypeOf(GLEW_GET_VAR(__GLEW_3DFX_texture_compression_FXT1)) {
    return GLEW_GET_VAR(__GLEW_3DFX_texture_compression_FXT1);
}
pub const GL_AMD_blend_minmax_factor = @as(c_int, 1);
pub const GL_FACTOR_MIN_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901C, .hex);
pub const GL_FACTOR_MAX_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901D, .hex);
// /usr/include/GL/glew.h:2600:9: warning: macro 'GLEW_AMD_blend_minmax_factor' contains a runtime value, translated to function
pub inline fn GLEW_AMD_blend_minmax_factor() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_blend_minmax_factor)) {
    return GLEW_GET_VAR(__GLEW_AMD_blend_minmax_factor);
}
pub const GL_AMD_compressed_3DC_texture = @as(c_int, 1);
pub const GL_3DC_X_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F9, .hex);
pub const GL_3DC_XY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FA, .hex);
// /usr/include/GL/glew.h:2612:9: warning: macro 'GLEW_AMD_compressed_3DC_texture' contains a runtime value, translated to function
pub inline fn GLEW_AMD_compressed_3DC_texture() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_compressed_3DC_texture)) {
    return GLEW_GET_VAR(__GLEW_AMD_compressed_3DC_texture);
}
pub const GL_AMD_compressed_ATC_texture = @as(c_int, 1);
pub const GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EE, .hex);
pub const GL_ATC_RGB_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C92, .hex);
pub const GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C93, .hex);
// /usr/include/GL/glew.h:2625:9: warning: macro 'GLEW_AMD_compressed_ATC_texture' contains a runtime value, translated to function
pub inline fn GLEW_AMD_compressed_ATC_texture() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_compressed_ATC_texture)) {
    return GLEW_GET_VAR(__GLEW_AMD_compressed_ATC_texture);
}
pub const GL_AMD_conservative_depth = @as(c_int, 1);
// /usr/include/GL/glew.h:2634:9: warning: macro 'GLEW_AMD_conservative_depth' contains a runtime value, translated to function
pub inline fn GLEW_AMD_conservative_depth() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_conservative_depth)) {
    return GLEW_GET_VAR(__GLEW_AMD_conservative_depth);
}
pub const GL_AMD_debug_output = @as(c_int, 1);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hex);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hex);
pub const GL_DEBUG_LOGGED_MESSAGES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hex);
pub const GL_DEBUG_SEVERITY_HIGH_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hex);
pub const GL_DEBUG_SEVERITY_MEDIUM_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hex);
pub const GL_DEBUG_SEVERITY_LOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hex);
pub const GL_DEBUG_CATEGORY_API_ERROR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9149, .hex);
pub const GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914A, .hex);
pub const GL_DEBUG_CATEGORY_DEPRECATION_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914B, .hex);
pub const GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914C, .hex);
pub const GL_DEBUG_CATEGORY_PERFORMANCE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914D, .hex);
pub const GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914E, .hex);
pub const GL_DEBUG_CATEGORY_APPLICATION_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914F, .hex);
pub const GL_DEBUG_CATEGORY_OTHER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9150, .hex);
// /usr/include/GL/glew.h:2665:9: warning: macro 'glDebugMessageCallbackAMD' contains a runtime value, translated to function
pub inline fn glDebugMessageCallbackAMD() @TypeOf(GLEW_GET_FUN(__glewDebugMessageCallbackAMD)) {
    return GLEW_GET_FUN(__glewDebugMessageCallbackAMD);
}
// /usr/include/GL/glew.h:2666:9: warning: macro 'glDebugMessageEnableAMD' contains a runtime value, translated to function
pub inline fn glDebugMessageEnableAMD() @TypeOf(GLEW_GET_FUN(__glewDebugMessageEnableAMD)) {
    return GLEW_GET_FUN(__glewDebugMessageEnableAMD);
}
// /usr/include/GL/glew.h:2667:9: warning: macro 'glDebugMessageInsertAMD' contains a runtime value, translated to function
pub inline fn glDebugMessageInsertAMD() @TypeOf(GLEW_GET_FUN(__glewDebugMessageInsertAMD)) {
    return GLEW_GET_FUN(__glewDebugMessageInsertAMD);
}
// /usr/include/GL/glew.h:2668:9: warning: macro 'glGetDebugMessageLogAMD' contains a runtime value, translated to function
pub inline fn glGetDebugMessageLogAMD() @TypeOf(GLEW_GET_FUN(__glewGetDebugMessageLogAMD)) {
    return GLEW_GET_FUN(__glewGetDebugMessageLogAMD);
}
// /usr/include/GL/glew.h:2670:9: warning: macro 'GLEW_AMD_debug_output' contains a runtime value, translated to function
pub inline fn GLEW_AMD_debug_output() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_debug_output)) {
    return GLEW_GET_VAR(__GLEW_AMD_debug_output);
}
pub const GL_AMD_depth_clamp_separate = @as(c_int, 1);
pub const GL_DEPTH_CLAMP_NEAR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901E, .hex);
pub const GL_DEPTH_CLAMP_FAR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901F, .hex);
// /usr/include/GL/glew.h:2682:9: warning: macro 'GLEW_AMD_depth_clamp_separate' contains a runtime value, translated to function
pub inline fn GLEW_AMD_depth_clamp_separate() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_depth_clamp_separate)) {
    return GLEW_GET_VAR(__GLEW_AMD_depth_clamp_separate);
}
pub const GL_AMD_draw_buffers_blend = @as(c_int, 1);
// /usr/include/GL/glew.h:2696:9: warning: macro 'glBlendEquationIndexedAMD' contains a runtime value, translated to function
pub inline fn glBlendEquationIndexedAMD() @TypeOf(GLEW_GET_FUN(__glewBlendEquationIndexedAMD)) {
    return GLEW_GET_FUN(__glewBlendEquationIndexedAMD);
}
// /usr/include/GL/glew.h:2697:9: warning: macro 'glBlendEquationSeparateIndexedAMD' contains a runtime value, translated to function
pub inline fn glBlendEquationSeparateIndexedAMD() @TypeOf(GLEW_GET_FUN(__glewBlendEquationSeparateIndexedAMD)) {
    return GLEW_GET_FUN(__glewBlendEquationSeparateIndexedAMD);
}
// /usr/include/GL/glew.h:2698:9: warning: macro 'glBlendFuncIndexedAMD' contains a runtime value, translated to function
pub inline fn glBlendFuncIndexedAMD() @TypeOf(GLEW_GET_FUN(__glewBlendFuncIndexedAMD)) {
    return GLEW_GET_FUN(__glewBlendFuncIndexedAMD);
}
// /usr/include/GL/glew.h:2699:9: warning: macro 'glBlendFuncSeparateIndexedAMD' contains a runtime value, translated to function
pub inline fn glBlendFuncSeparateIndexedAMD() @TypeOf(GLEW_GET_FUN(__glewBlendFuncSeparateIndexedAMD)) {
    return GLEW_GET_FUN(__glewBlendFuncSeparateIndexedAMD);
}
// /usr/include/GL/glew.h:2701:9: warning: macro 'GLEW_AMD_draw_buffers_blend' contains a runtime value, translated to function
pub inline fn GLEW_AMD_draw_buffers_blend() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_draw_buffers_blend)) {
    return GLEW_GET_VAR(__GLEW_AMD_draw_buffers_blend);
}
pub const GL_AMD_framebuffer_multisample_advanced = @as(c_int, 1);
pub const GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B2, .hex);
pub const GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B3, .hex);
pub const GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B4, .hex);
pub const GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B5, .hex);
pub const GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B6, .hex);
pub const GL_SUPPORTED_MULTISAMPLE_MODES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B7, .hex);
// /usr/include/GL/glew.h:2720:9: warning: macro 'glNamedRenderbufferStorageMultisampleAdvancedAMD' contains a runtime value, translated to function
pub inline fn glNamedRenderbufferStorageMultisampleAdvancedAMD() @TypeOf(GLEW_GET_FUN(__glewNamedRenderbufferStorageMultisampleAdvancedAMD)) {
    return GLEW_GET_FUN(__glewNamedRenderbufferStorageMultisampleAdvancedAMD);
}
// /usr/include/GL/glew.h:2721:9: warning: macro 'glRenderbufferStorageMultisampleAdvancedAMD' contains a runtime value, translated to function
pub inline fn glRenderbufferStorageMultisampleAdvancedAMD() @TypeOf(GLEW_GET_FUN(__glewRenderbufferStorageMultisampleAdvancedAMD)) {
    return GLEW_GET_FUN(__glewRenderbufferStorageMultisampleAdvancedAMD);
}
// /usr/include/GL/glew.h:2723:9: warning: macro 'GLEW_AMD_framebuffer_multisample_advanced' contains a runtime value, translated to function
pub inline fn GLEW_AMD_framebuffer_multisample_advanced() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_framebuffer_multisample_advanced)) {
    return GLEW_GET_VAR(__GLEW_AMD_framebuffer_multisample_advanced);
}
pub const GL_AMD_framebuffer_sample_positions = @as(c_int, 1);
pub const GL_SUBSAMPLE_DISTANCE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883F, .hex);
pub const GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AE, .hex);
pub const GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AF, .hex);
pub const GL_ALL_PIXELS_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex);
// /usr/include/GL/glew.h:2742:9: warning: macro 'glFramebufferSamplePositionsfvAMD' contains a runtime value, translated to function
pub inline fn glFramebufferSamplePositionsfvAMD() @TypeOf(GLEW_GET_FUN(__glewFramebufferSamplePositionsfvAMD)) {
    return GLEW_GET_FUN(__glewFramebufferSamplePositionsfvAMD);
}
// /usr/include/GL/glew.h:2743:9: warning: macro 'glGetFramebufferParameterfvAMD' contains a runtime value, translated to function
pub inline fn glGetFramebufferParameterfvAMD() @TypeOf(GLEW_GET_FUN(__glewGetFramebufferParameterfvAMD)) {
    return GLEW_GET_FUN(__glewGetFramebufferParameterfvAMD);
}
// /usr/include/GL/glew.h:2744:9: warning: macro 'glGetNamedFramebufferParameterfvAMD' contains a runtime value, translated to function
pub inline fn glGetNamedFramebufferParameterfvAMD() @TypeOf(GLEW_GET_FUN(__glewGetNamedFramebufferParameterfvAMD)) {
    return GLEW_GET_FUN(__glewGetNamedFramebufferParameterfvAMD);
}
// /usr/include/GL/glew.h:2745:9: warning: macro 'glNamedFramebufferSamplePositionsfvAMD' contains a runtime value, translated to function
pub inline fn glNamedFramebufferSamplePositionsfvAMD() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferSamplePositionsfvAMD)) {
    return GLEW_GET_FUN(__glewNamedFramebufferSamplePositionsfvAMD);
}
// /usr/include/GL/glew.h:2747:9: warning: macro 'GLEW_AMD_framebuffer_sample_positions' contains a runtime value, translated to function
pub inline fn GLEW_AMD_framebuffer_sample_positions() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_framebuffer_sample_positions)) {
    return GLEW_GET_VAR(__GLEW_AMD_framebuffer_sample_positions);
}
pub const GL_AMD_gcn_shader = @as(c_int, 1);
// /usr/include/GL/glew.h:2756:9: warning: macro 'GLEW_AMD_gcn_shader' contains a runtime value, translated to function
pub inline fn GLEW_AMD_gcn_shader() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_gcn_shader)) {
    return GLEW_GET_VAR(__GLEW_AMD_gcn_shader);
}
pub const GL_AMD_gpu_shader_half_float = @as(c_int, 1);
pub const GL_FLOAT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF8, .hex);
pub const GL_FLOAT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF9, .hex);
pub const GL_FLOAT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFA, .hex);
pub const GL_FLOAT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFB, .hex);
pub const GL_FLOAT16_MAT2_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C5, .hex);
pub const GL_FLOAT16_MAT3_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C6, .hex);
pub const GL_FLOAT16_MAT4_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C7, .hex);
pub const GL_FLOAT16_MAT2x3_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C8, .hex);
pub const GL_FLOAT16_MAT2x4_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C9, .hex);
pub const GL_FLOAT16_MAT3x2_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CA, .hex);
pub const GL_FLOAT16_MAT3x4_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CB, .hex);
pub const GL_FLOAT16_MAT4x2_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CC, .hex);
pub const GL_FLOAT16_MAT4x3_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CD, .hex);
// /usr/include/GL/glew.h:2779:9: warning: macro 'GLEW_AMD_gpu_shader_half_float' contains a runtime value, translated to function
pub inline fn GLEW_AMD_gpu_shader_half_float() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_gpu_shader_half_float)) {
    return GLEW_GET_VAR(__GLEW_AMD_gpu_shader_half_float);
}
pub const GL_AMD_gpu_shader_half_float_fetch = @as(c_int, 1);
pub const GL_FLOAT16_SAMPLER_1D_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CE, .hex);
pub const GL_FLOAT16_SAMPLER_2D_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CF, .hex);
pub const GL_FLOAT16_SAMPLER_3D_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D0, .hex);
pub const GL_FLOAT16_SAMPLER_CUBE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D1, .hex);
pub const GL_FLOAT16_SAMPLER_2D_RECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D2, .hex);
pub const GL_FLOAT16_SAMPLER_1D_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D3, .hex);
pub const GL_FLOAT16_SAMPLER_2D_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D4, .hex);
pub const GL_FLOAT16_SAMPLER_CUBE_MAP_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D5, .hex);
pub const GL_FLOAT16_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D6, .hex);
pub const GL_FLOAT16_SAMPLER_2D_MULTISAMPLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D7, .hex);
pub const GL_FLOAT16_SAMPLER_2D_MULTISAMPLE_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D8, .hex);
pub const GL_FLOAT16_SAMPLER_1D_SHADOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D9, .hex);
pub const GL_FLOAT16_SAMPLER_2D_SHADOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91DA, .hex);
pub const GL_FLOAT16_SAMPLER_2D_RECT_SHADOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91DB, .hex);
pub const GL_FLOAT16_SAMPLER_1D_ARRAY_SHADOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91DC, .hex);
pub const GL_FLOAT16_SAMPLER_2D_ARRAY_SHADOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91DD, .hex);
pub const GL_FLOAT16_SAMPLER_CUBE_SHADOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91DE, .hex);
pub const GL_FLOAT16_SAMPLER_CUBE_MAP_ARRAY_SHADOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91DF, .hex);
pub const GL_FLOAT16_IMAGE_1D_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E0, .hex);
pub const GL_FLOAT16_IMAGE_2D_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E1, .hex);
pub const GL_FLOAT16_IMAGE_3D_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E2, .hex);
pub const GL_FLOAT16_IMAGE_2D_RECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E3, .hex);
pub const GL_FLOAT16_IMAGE_CUBE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E4, .hex);
pub const GL_FLOAT16_IMAGE_1D_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E5, .hex);
pub const GL_FLOAT16_IMAGE_2D_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E6, .hex);
pub const GL_FLOAT16_IMAGE_CUBE_MAP_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E7, .hex);
pub const GL_FLOAT16_IMAGE_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E8, .hex);
pub const GL_FLOAT16_IMAGE_2D_MULTISAMPLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E9, .hex);
pub const GL_FLOAT16_IMAGE_2D_MULTISAMPLE_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91EA, .hex);
// /usr/include/GL/glew.h:2818:9: warning: macro 'GLEW_AMD_gpu_shader_half_float_fetch' contains a runtime value, translated to function
pub inline fn GLEW_AMD_gpu_shader_half_float_fetch() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_gpu_shader_half_float_fetch)) {
    return GLEW_GET_VAR(__GLEW_AMD_gpu_shader_half_float_fetch);
}
pub const GL_AMD_gpu_shader_int16 = @as(c_int, 1);
// /usr/include/GL/glew.h:2827:9: warning: macro 'GLEW_AMD_gpu_shader_int16' contains a runtime value, translated to function
pub inline fn GLEW_AMD_gpu_shader_int16() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_gpu_shader_int16)) {
    return GLEW_GET_VAR(__GLEW_AMD_gpu_shader_int16);
}
pub const GL_AMD_gpu_shader_int64 = @as(c_int, 1);
// /usr/include/GL/glew.h:2836:9: warning: macro 'GLEW_AMD_gpu_shader_int64' contains a runtime value, translated to function
pub inline fn GLEW_AMD_gpu_shader_int64() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_gpu_shader_int64)) {
    return GLEW_GET_VAR(__GLEW_AMD_gpu_shader_int64);
}
pub const GL_AMD_interleaved_elements = @as(c_int, 1);
pub const GL_RG8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8238, .hex);
pub const GL_RG16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823A, .hex);
pub const GL_VERTEX_ELEMENT_SWIZZLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A4, .hex);
pub const GL_VERTEX_ID_SWIZZLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A5, .hex);
// /usr/include/GL/glew.h:2857:9: warning: macro 'glVertexAttribParameteriAMD' contains a runtime value, translated to function
pub inline fn glVertexAttribParameteriAMD() @TypeOf(GLEW_GET_FUN(__glewVertexAttribParameteriAMD)) {
    return GLEW_GET_FUN(__glewVertexAttribParameteriAMD);
}
// /usr/include/GL/glew.h:2859:9: warning: macro 'GLEW_AMD_interleaved_elements' contains a runtime value, translated to function
pub inline fn GLEW_AMD_interleaved_elements() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_interleaved_elements)) {
    return GLEW_GET_VAR(__GLEW_AMD_interleaved_elements);
}
pub const GL_AMD_multi_draw_indirect = @as(c_int, 1);
// /usr/include/GL/glew.h:2871:9: warning: macro 'glMultiDrawArraysIndirectAMD' contains a runtime value, translated to function
pub inline fn glMultiDrawArraysIndirectAMD() @TypeOf(GLEW_GET_FUN(__glewMultiDrawArraysIndirectAMD)) {
    return GLEW_GET_FUN(__glewMultiDrawArraysIndirectAMD);
}
// /usr/include/GL/glew.h:2872:9: warning: macro 'glMultiDrawElementsIndirectAMD' contains a runtime value, translated to function
pub inline fn glMultiDrawElementsIndirectAMD() @TypeOf(GLEW_GET_FUN(__glewMultiDrawElementsIndirectAMD)) {
    return GLEW_GET_FUN(__glewMultiDrawElementsIndirectAMD);
}
// /usr/include/GL/glew.h:2874:9: warning: macro 'GLEW_AMD_multi_draw_indirect' contains a runtime value, translated to function
pub inline fn GLEW_AMD_multi_draw_indirect() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_multi_draw_indirect)) {
    return GLEW_GET_VAR(__GLEW_AMD_multi_draw_indirect);
}
pub const GL_AMD_name_gen_delete = @as(c_int, 1);
pub const GL_DATA_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9151, .hex);
pub const GL_PERFORMANCE_MONITOR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9152, .hex);
pub const GL_QUERY_OBJECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9153, .hex);
pub const GL_VERTEX_ARRAY_OBJECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9154, .hex);
pub const GL_SAMPLER_OBJECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9155, .hex);
// /usr/include/GL/glew.h:2893:9: warning: macro 'glDeleteNamesAMD' contains a runtime value, translated to function
pub inline fn glDeleteNamesAMD() @TypeOf(GLEW_GET_FUN(__glewDeleteNamesAMD)) {
    return GLEW_GET_FUN(__glewDeleteNamesAMD);
}
// /usr/include/GL/glew.h:2894:9: warning: macro 'glGenNamesAMD' contains a runtime value, translated to function
pub inline fn glGenNamesAMD() @TypeOf(GLEW_GET_FUN(__glewGenNamesAMD)) {
    return GLEW_GET_FUN(__glewGenNamesAMD);
}
// /usr/include/GL/glew.h:2895:9: warning: macro 'glIsNameAMD' contains a runtime value, translated to function
pub inline fn glIsNameAMD() @TypeOf(GLEW_GET_FUN(__glewIsNameAMD)) {
    return GLEW_GET_FUN(__glewIsNameAMD);
}
// /usr/include/GL/glew.h:2897:9: warning: macro 'GLEW_AMD_name_gen_delete' contains a runtime value, translated to function
pub inline fn GLEW_AMD_name_gen_delete() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_name_gen_delete)) {
    return GLEW_GET_VAR(__GLEW_AMD_name_gen_delete);
}
pub const GL_AMD_occlusion_query_event = @as(c_int, 1);
pub const GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = @as(c_int, 0x00000001);
pub const GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = @as(c_int, 0x00000002);
pub const GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = @as(c_int, 0x00000004);
pub const GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = @as(c_int, 0x00000008);
pub const GL_OCCLUSION_QUERY_EVENT_MASK_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874F, .hex);
pub const GL_QUERY_ALL_EVENT_BITS_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex);
// /usr/include/GL/glew.h:2915:9: warning: macro 'glQueryObjectParameteruiAMD' contains a runtime value, translated to function
pub inline fn glQueryObjectParameteruiAMD() @TypeOf(GLEW_GET_FUN(__glewQueryObjectParameteruiAMD)) {
    return GLEW_GET_FUN(__glewQueryObjectParameteruiAMD);
}
// /usr/include/GL/glew.h:2917:9: warning: macro 'GLEW_AMD_occlusion_query_event' contains a runtime value, translated to function
pub inline fn GLEW_AMD_occlusion_query_event() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_occlusion_query_event)) {
    return GLEW_GET_VAR(__GLEW_AMD_occlusion_query_event);
}
pub const GL_AMD_performance_monitor = @as(c_int, 1);
pub const GL_COUNTER_TYPE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC0, .hex);
pub const GL_COUNTER_RANGE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC1, .hex);
pub const GL_UNSIGNED_INT64_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC2, .hex);
pub const GL_PERCENTAGE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC3, .hex);
pub const GL_PERFMON_RESULT_AVAILABLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC4, .hex);
pub const GL_PERFMON_RESULT_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC5, .hex);
pub const GL_PERFMON_RESULT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC6, .hex);
// /usr/include/GL/glew.h:2946:9: warning: macro 'glBeginPerfMonitorAMD' contains a runtime value, translated to function
pub inline fn glBeginPerfMonitorAMD() @TypeOf(GLEW_GET_FUN(__glewBeginPerfMonitorAMD)) {
    return GLEW_GET_FUN(__glewBeginPerfMonitorAMD);
}
// /usr/include/GL/glew.h:2947:9: warning: macro 'glDeletePerfMonitorsAMD' contains a runtime value, translated to function
pub inline fn glDeletePerfMonitorsAMD() @TypeOf(GLEW_GET_FUN(__glewDeletePerfMonitorsAMD)) {
    return GLEW_GET_FUN(__glewDeletePerfMonitorsAMD);
}
// /usr/include/GL/glew.h:2948:9: warning: macro 'glEndPerfMonitorAMD' contains a runtime value, translated to function
pub inline fn glEndPerfMonitorAMD() @TypeOf(GLEW_GET_FUN(__glewEndPerfMonitorAMD)) {
    return GLEW_GET_FUN(__glewEndPerfMonitorAMD);
}
// /usr/include/GL/glew.h:2949:9: warning: macro 'glGenPerfMonitorsAMD' contains a runtime value, translated to function
pub inline fn glGenPerfMonitorsAMD() @TypeOf(GLEW_GET_FUN(__glewGenPerfMonitorsAMD)) {
    return GLEW_GET_FUN(__glewGenPerfMonitorsAMD);
}
// /usr/include/GL/glew.h:2950:9: warning: macro 'glGetPerfMonitorCounterDataAMD' contains a runtime value, translated to function
pub inline fn glGetPerfMonitorCounterDataAMD() @TypeOf(GLEW_GET_FUN(__glewGetPerfMonitorCounterDataAMD)) {
    return GLEW_GET_FUN(__glewGetPerfMonitorCounterDataAMD);
}
// /usr/include/GL/glew.h:2951:9: warning: macro 'glGetPerfMonitorCounterInfoAMD' contains a runtime value, translated to function
pub inline fn glGetPerfMonitorCounterInfoAMD() @TypeOf(GLEW_GET_FUN(__glewGetPerfMonitorCounterInfoAMD)) {
    return GLEW_GET_FUN(__glewGetPerfMonitorCounterInfoAMD);
}
// /usr/include/GL/glew.h:2952:9: warning: macro 'glGetPerfMonitorCounterStringAMD' contains a runtime value, translated to function
pub inline fn glGetPerfMonitorCounterStringAMD() @TypeOf(GLEW_GET_FUN(__glewGetPerfMonitorCounterStringAMD)) {
    return GLEW_GET_FUN(__glewGetPerfMonitorCounterStringAMD);
}
// /usr/include/GL/glew.h:2953:9: warning: macro 'glGetPerfMonitorCountersAMD' contains a runtime value, translated to function
pub inline fn glGetPerfMonitorCountersAMD() @TypeOf(GLEW_GET_FUN(__glewGetPerfMonitorCountersAMD)) {
    return GLEW_GET_FUN(__glewGetPerfMonitorCountersAMD);
}
// /usr/include/GL/glew.h:2954:9: warning: macro 'glGetPerfMonitorGroupStringAMD' contains a runtime value, translated to function
pub inline fn glGetPerfMonitorGroupStringAMD() @TypeOf(GLEW_GET_FUN(__glewGetPerfMonitorGroupStringAMD)) {
    return GLEW_GET_FUN(__glewGetPerfMonitorGroupStringAMD);
}
// /usr/include/GL/glew.h:2955:9: warning: macro 'glGetPerfMonitorGroupsAMD' contains a runtime value, translated to function
pub inline fn glGetPerfMonitorGroupsAMD() @TypeOf(GLEW_GET_FUN(__glewGetPerfMonitorGroupsAMD)) {
    return GLEW_GET_FUN(__glewGetPerfMonitorGroupsAMD);
}
// /usr/include/GL/glew.h:2956:9: warning: macro 'glSelectPerfMonitorCountersAMD' contains a runtime value, translated to function
pub inline fn glSelectPerfMonitorCountersAMD() @TypeOf(GLEW_GET_FUN(__glewSelectPerfMonitorCountersAMD)) {
    return GLEW_GET_FUN(__glewSelectPerfMonitorCountersAMD);
}
// /usr/include/GL/glew.h:2958:9: warning: macro 'GLEW_AMD_performance_monitor' contains a runtime value, translated to function
pub inline fn GLEW_AMD_performance_monitor() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_performance_monitor)) {
    return GLEW_GET_VAR(__GLEW_AMD_performance_monitor);
}
pub const GL_AMD_pinned_memory = @as(c_int, 1);
pub const GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9160, .hex);
// /usr/include/GL/glew.h:2969:9: warning: macro 'GLEW_AMD_pinned_memory' contains a runtime value, translated to function
pub inline fn GLEW_AMD_pinned_memory() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_pinned_memory)) {
    return GLEW_GET_VAR(__GLEW_AMD_pinned_memory);
}
pub const GL_AMD_program_binary_Z400 = @as(c_int, 1);
pub const GL_Z400_BINARY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8740, .hex);
// /usr/include/GL/glew.h:2980:9: warning: macro 'GLEW_AMD_program_binary_Z400' contains a runtime value, translated to function
pub inline fn GLEW_AMD_program_binary_Z400() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_program_binary_Z400)) {
    return GLEW_GET_VAR(__GLEW_AMD_program_binary_Z400);
}
pub const GL_AMD_query_buffer_object = @as(c_int, 1);
pub const GL_QUERY_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9192, .hex);
pub const GL_QUERY_BUFFER_BINDING_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9193, .hex);
pub const GL_QUERY_RESULT_NO_WAIT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9194, .hex);
// /usr/include/GL/glew.h:2993:9: warning: macro 'GLEW_AMD_query_buffer_object' contains a runtime value, translated to function
pub inline fn GLEW_AMD_query_buffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_query_buffer_object)) {
    return GLEW_GET_VAR(__GLEW_AMD_query_buffer_object);
}
pub const GL_AMD_sample_positions = @as(c_int, 1);
// /usr/include/GL/glew.h:3006:9: warning: macro 'glSetMultisamplefvAMD' contains a runtime value, translated to function
pub inline fn glSetMultisamplefvAMD() @TypeOf(GLEW_GET_FUN(__glewSetMultisamplefvAMD)) {
    return GLEW_GET_FUN(__glewSetMultisamplefvAMD);
}
// /usr/include/GL/glew.h:3008:9: warning: macro 'GLEW_AMD_sample_positions' contains a runtime value, translated to function
pub inline fn GLEW_AMD_sample_positions() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_sample_positions)) {
    return GLEW_GET_VAR(__GLEW_AMD_sample_positions);
}
pub const GL_AMD_seamless_cubemap_per_texture = @as(c_int, 1);
pub const GL_TEXTURE_CUBE_MAP_SEAMLESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884F, .hex);
// /usr/include/GL/glew.h:3019:9: warning: macro 'GLEW_AMD_seamless_cubemap_per_texture' contains a runtime value, translated to function
pub inline fn GLEW_AMD_seamless_cubemap_per_texture() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_seamless_cubemap_per_texture)) {
    return GLEW_GET_VAR(__GLEW_AMD_seamless_cubemap_per_texture);
}
pub const GL_AMD_shader_atomic_counter_ops = @as(c_int, 1);
// /usr/include/GL/glew.h:3028:9: warning: macro 'GLEW_AMD_shader_atomic_counter_ops' contains a runtime value, translated to function
pub inline fn GLEW_AMD_shader_atomic_counter_ops() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_shader_atomic_counter_ops)) {
    return GLEW_GET_VAR(__GLEW_AMD_shader_atomic_counter_ops);
}
pub const GL_AMD_shader_ballot = @as(c_int, 1);
// /usr/include/GL/glew.h:3037:9: warning: macro 'GLEW_AMD_shader_ballot' contains a runtime value, translated to function
pub inline fn GLEW_AMD_shader_ballot() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_shader_ballot)) {
    return GLEW_GET_VAR(__GLEW_AMD_shader_ballot);
}
pub const GL_AMD_shader_explicit_vertex_parameter = @as(c_int, 1);
// /usr/include/GL/glew.h:3046:9: warning: macro 'GLEW_AMD_shader_explicit_vertex_parameter' contains a runtime value, translated to function
pub inline fn GLEW_AMD_shader_explicit_vertex_parameter() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_shader_explicit_vertex_parameter)) {
    return GLEW_GET_VAR(__GLEW_AMD_shader_explicit_vertex_parameter);
}
pub const GL_AMD_shader_image_load_store_lod = @as(c_int, 1);
// /usr/include/GL/glew.h:3055:9: warning: macro 'GLEW_AMD_shader_image_load_store_lod' contains a runtime value, translated to function
pub inline fn GLEW_AMD_shader_image_load_store_lod() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_shader_image_load_store_lod)) {
    return GLEW_GET_VAR(__GLEW_AMD_shader_image_load_store_lod);
}
pub const GL_AMD_shader_stencil_export = @as(c_int, 1);
// /usr/include/GL/glew.h:3064:9: warning: macro 'GLEW_AMD_shader_stencil_export' contains a runtime value, translated to function
pub inline fn GLEW_AMD_shader_stencil_export() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_shader_stencil_export)) {
    return GLEW_GET_VAR(__GLEW_AMD_shader_stencil_export);
}
pub const GL_AMD_shader_stencil_value_export = @as(c_int, 1);
// /usr/include/GL/glew.h:3073:9: warning: macro 'GLEW_AMD_shader_stencil_value_export' contains a runtime value, translated to function
pub inline fn GLEW_AMD_shader_stencil_value_export() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_shader_stencil_value_export)) {
    return GLEW_GET_VAR(__GLEW_AMD_shader_stencil_value_export);
}
pub const GL_AMD_shader_trinary_minmax = @as(c_int, 1);
// /usr/include/GL/glew.h:3082:9: warning: macro 'GLEW_AMD_shader_trinary_minmax' contains a runtime value, translated to function
pub inline fn GLEW_AMD_shader_trinary_minmax() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_shader_trinary_minmax)) {
    return GLEW_GET_VAR(__GLEW_AMD_shader_trinary_minmax);
}
pub const GL_AMD_sparse_texture = @as(c_int, 1);
pub const GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = @as(c_int, 0x00000001);
pub const GL_VIRTUAL_PAGE_SIZE_X_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9195, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_Y_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9196, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_Z_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9197, .hex);
pub const GL_MAX_SPARSE_TEXTURE_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9198, .hex);
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9199, .hex);
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919A, .hex);
pub const GL_MIN_SPARSE_LEVEL_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919B, .hex);
pub const GL_MIN_LOD_WARNING_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919C, .hex);
// /usr/include/GL/glew.h:3104:9: warning: macro 'glTexStorageSparseAMD' contains a runtime value, translated to function
pub inline fn glTexStorageSparseAMD() @TypeOf(GLEW_GET_FUN(__glewTexStorageSparseAMD)) {
    return GLEW_GET_FUN(__glewTexStorageSparseAMD);
}
// /usr/include/GL/glew.h:3105:9: warning: macro 'glTextureStorageSparseAMD' contains a runtime value, translated to function
pub inline fn glTextureStorageSparseAMD() @TypeOf(GLEW_GET_FUN(__glewTextureStorageSparseAMD)) {
    return GLEW_GET_FUN(__glewTextureStorageSparseAMD);
}
// /usr/include/GL/glew.h:3107:9: warning: macro 'GLEW_AMD_sparse_texture' contains a runtime value, translated to function
pub inline fn GLEW_AMD_sparse_texture() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_sparse_texture)) {
    return GLEW_GET_VAR(__GLEW_AMD_sparse_texture);
}
pub const GL_AMD_stencil_operation_extended = @as(c_int, 1);
pub const GL_SET_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874A, .hex);
pub const GL_REPLACE_VALUE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874B, .hex);
pub const GL_STENCIL_OP_VALUE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874C, .hex);
pub const GL_STENCIL_BACK_OP_VALUE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874D, .hex);
// /usr/include/GL/glew.h:3123:9: warning: macro 'glStencilOpValueAMD' contains a runtime value, translated to function
pub inline fn glStencilOpValueAMD() @TypeOf(GLEW_GET_FUN(__glewStencilOpValueAMD)) {
    return GLEW_GET_FUN(__glewStencilOpValueAMD);
}
// /usr/include/GL/glew.h:3125:9: warning: macro 'GLEW_AMD_stencil_operation_extended' contains a runtime value, translated to function
pub inline fn GLEW_AMD_stencil_operation_extended() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_stencil_operation_extended)) {
    return GLEW_GET_VAR(__GLEW_AMD_stencil_operation_extended);
}
pub const GL_AMD_texture_gather_bias_lod = @as(c_int, 1);
// /usr/include/GL/glew.h:3134:9: warning: macro 'GLEW_AMD_texture_gather_bias_lod' contains a runtime value, translated to function
pub inline fn GLEW_AMD_texture_gather_bias_lod() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_texture_gather_bias_lod)) {
    return GLEW_GET_VAR(__GLEW_AMD_texture_gather_bias_lod);
}
pub const GL_AMD_texture_texture4 = @as(c_int, 1);
// /usr/include/GL/glew.h:3143:9: warning: macro 'GLEW_AMD_texture_texture4' contains a runtime value, translated to function
pub inline fn GLEW_AMD_texture_texture4() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_texture_texture4)) {
    return GLEW_GET_VAR(__GLEW_AMD_texture_texture4);
}
pub const GL_AMD_transform_feedback3_lines_triangles = @as(c_int, 1);
// /usr/include/GL/glew.h:3152:9: warning: macro 'GLEW_AMD_transform_feedback3_lines_triangles' contains a runtime value, translated to function
pub inline fn GLEW_AMD_transform_feedback3_lines_triangles() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_transform_feedback3_lines_triangles)) {
    return GLEW_GET_VAR(__GLEW_AMD_transform_feedback3_lines_triangles);
}
pub const GL_AMD_transform_feedback4 = @as(c_int, 1);
pub const GL_STREAM_RASTERIZATION_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A0, .hex);
// /usr/include/GL/glew.h:3163:9: warning: macro 'GLEW_AMD_transform_feedback4' contains a runtime value, translated to function
pub inline fn GLEW_AMD_transform_feedback4() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_transform_feedback4)) {
    return GLEW_GET_VAR(__GLEW_AMD_transform_feedback4);
}
pub const GL_AMD_vertex_shader_layer = @as(c_int, 1);
// /usr/include/GL/glew.h:3172:9: warning: macro 'GLEW_AMD_vertex_shader_layer' contains a runtime value, translated to function
pub inline fn GLEW_AMD_vertex_shader_layer() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_vertex_shader_layer)) {
    return GLEW_GET_VAR(__GLEW_AMD_vertex_shader_layer);
}
pub const GL_AMD_vertex_shader_tessellator = @as(c_int, 1);
pub const GL_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9001, .hex);
pub const GL_INT_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9002, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9003, .hex);
pub const GL_TESSELLATION_MODE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9004, .hex);
pub const GL_TESSELLATION_FACTOR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9005, .hex);
pub const GL_DISCRETE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9006, .hex);
pub const GL_CONTINUOUS_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9007, .hex);
// /usr/include/GL/glew.h:3192:9: warning: macro 'glTessellationFactorAMD' contains a runtime value, translated to function
pub inline fn glTessellationFactorAMD() @TypeOf(GLEW_GET_FUN(__glewTessellationFactorAMD)) {
    return GLEW_GET_FUN(__glewTessellationFactorAMD);
}
// /usr/include/GL/glew.h:3193:9: warning: macro 'glTessellationModeAMD' contains a runtime value, translated to function
pub inline fn glTessellationModeAMD() @TypeOf(GLEW_GET_FUN(__glewTessellationModeAMD)) {
    return GLEW_GET_FUN(__glewTessellationModeAMD);
}
// /usr/include/GL/glew.h:3195:9: warning: macro 'GLEW_AMD_vertex_shader_tessellator' contains a runtime value, translated to function
pub inline fn GLEW_AMD_vertex_shader_tessellator() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_vertex_shader_tessellator)) {
    return GLEW_GET_VAR(__GLEW_AMD_vertex_shader_tessellator);
}
pub const GL_AMD_vertex_shader_viewport_index = @as(c_int, 1);
// /usr/include/GL/glew.h:3204:9: warning: macro 'GLEW_AMD_vertex_shader_viewport_index' contains a runtime value, translated to function
pub inline fn GLEW_AMD_vertex_shader_viewport_index() @TypeOf(GLEW_GET_VAR(__GLEW_AMD_vertex_shader_viewport_index)) {
    return GLEW_GET_VAR(__GLEW_AMD_vertex_shader_viewport_index);
}
pub const GL_ANDROID_extension_pack_es31a = @as(c_int, 1);
// /usr/include/GL/glew.h:3213:9: warning: macro 'GLEW_ANDROID_extension_pack_es31a' contains a runtime value, translated to function
pub inline fn GLEW_ANDROID_extension_pack_es31a() @TypeOf(GLEW_GET_VAR(__GLEW_ANDROID_extension_pack_es31a)) {
    return GLEW_GET_VAR(__GLEW_ANDROID_extension_pack_es31a);
}
pub const GL_ANGLE_depth_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:3222:9: warning: macro 'GLEW_ANGLE_depth_texture' contains a runtime value, translated to function
pub inline fn GLEW_ANGLE_depth_texture() @TypeOf(GLEW_GET_VAR(__GLEW_ANGLE_depth_texture)) {
    return GLEW_GET_VAR(__GLEW_ANGLE_depth_texture);
}
pub const GL_ANGLE_framebuffer_blit = @as(c_int, 1);
pub const GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_READ_FRAMEBUFFER_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hex);
pub const GL_DRAW_FRAMEBUFFER_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hex);
pub const GL_READ_FRAMEBUFFER_BINDING_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hex);
// /usr/include/GL/glew.h:3238:9: warning: macro 'glBlitFramebufferANGLE' contains a runtime value, translated to function
pub inline fn glBlitFramebufferANGLE() @TypeOf(GLEW_GET_FUN(__glewBlitFramebufferANGLE)) {
    return GLEW_GET_FUN(__glewBlitFramebufferANGLE);
}
// /usr/include/GL/glew.h:3240:9: warning: macro 'GLEW_ANGLE_framebuffer_blit' contains a runtime value, translated to function
pub inline fn GLEW_ANGLE_framebuffer_blit() @TypeOf(GLEW_GET_VAR(__GLEW_ANGLE_framebuffer_blit)) {
    return GLEW_GET_VAR(__GLEW_ANGLE_framebuffer_blit);
}
pub const GL_ANGLE_framebuffer_multisample = @as(c_int, 1);
pub const GL_RENDERBUFFER_SAMPLES_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hex);
pub const GL_MAX_SAMPLES_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hex);
// /usr/include/GL/glew.h:3255:9: warning: macro 'glRenderbufferStorageMultisampleANGLE' contains a runtime value, translated to function
pub inline fn glRenderbufferStorageMultisampleANGLE() @TypeOf(GLEW_GET_FUN(__glewRenderbufferStorageMultisampleANGLE)) {
    return GLEW_GET_FUN(__glewRenderbufferStorageMultisampleANGLE);
}
// /usr/include/GL/glew.h:3257:9: warning: macro 'GLEW_ANGLE_framebuffer_multisample' contains a runtime value, translated to function
pub inline fn GLEW_ANGLE_framebuffer_multisample() @TypeOf(GLEW_GET_VAR(__GLEW_ANGLE_framebuffer_multisample)) {
    return GLEW_GET_VAR(__GLEW_ANGLE_framebuffer_multisample);
}
pub const GL_ANGLE_instanced_arrays = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hex);
// /usr/include/GL/glew.h:3272:9: warning: macro 'glDrawArraysInstancedANGLE' contains a runtime value, translated to function
pub inline fn glDrawArraysInstancedANGLE() @TypeOf(GLEW_GET_FUN(__glewDrawArraysInstancedANGLE)) {
    return GLEW_GET_FUN(__glewDrawArraysInstancedANGLE);
}
// /usr/include/GL/glew.h:3273:9: warning: macro 'glDrawElementsInstancedANGLE' contains a runtime value, translated to function
pub inline fn glDrawElementsInstancedANGLE() @TypeOf(GLEW_GET_FUN(__glewDrawElementsInstancedANGLE)) {
    return GLEW_GET_FUN(__glewDrawElementsInstancedANGLE);
}
// /usr/include/GL/glew.h:3274:9: warning: macro 'glVertexAttribDivisorANGLE' contains a runtime value, translated to function
pub inline fn glVertexAttribDivisorANGLE() @TypeOf(GLEW_GET_FUN(__glewVertexAttribDivisorANGLE)) {
    return GLEW_GET_FUN(__glewVertexAttribDivisorANGLE);
}
// /usr/include/GL/glew.h:3276:9: warning: macro 'GLEW_ANGLE_instanced_arrays' contains a runtime value, translated to function
pub inline fn GLEW_ANGLE_instanced_arrays() @TypeOf(GLEW_GET_VAR(__GLEW_ANGLE_instanced_arrays)) {
    return GLEW_GET_VAR(__GLEW_ANGLE_instanced_arrays);
}
pub const GL_ANGLE_pack_reverse_row_order = @as(c_int, 1);
pub const GL_PACK_REVERSE_ROW_ORDER_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A4, .hex);
// /usr/include/GL/glew.h:3287:9: warning: macro 'GLEW_ANGLE_pack_reverse_row_order' contains a runtime value, translated to function
pub inline fn GLEW_ANGLE_pack_reverse_row_order() @TypeOf(GLEW_GET_VAR(__GLEW_ANGLE_pack_reverse_row_order)) {
    return GLEW_GET_VAR(__GLEW_ANGLE_pack_reverse_row_order);
}
pub const GL_ANGLE_program_binary = @as(c_int, 1);
pub const GL_PROGRAM_BINARY_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A6, .hex);
// /usr/include/GL/glew.h:3298:9: warning: macro 'GLEW_ANGLE_program_binary' contains a runtime value, translated to function
pub inline fn GLEW_ANGLE_program_binary() @TypeOf(GLEW_GET_VAR(__GLEW_ANGLE_program_binary)) {
    return GLEW_GET_VAR(__GLEW_ANGLE_program_binary);
}
pub const GL_ANGLE_texture_compression_dxt1 = @as(c_int, 1);
pub const GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F0, .hex);
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F1, .hex);
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F2, .hex);
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F3, .hex);
// /usr/include/GL/glew.h:3312:9: warning: macro 'GLEW_ANGLE_texture_compression_dxt1' contains a runtime value, translated to function
pub inline fn GLEW_ANGLE_texture_compression_dxt1() @TypeOf(GLEW_GET_VAR(__GLEW_ANGLE_texture_compression_dxt1)) {
    return GLEW_GET_VAR(__GLEW_ANGLE_texture_compression_dxt1);
}
pub const GL_ANGLE_texture_compression_dxt3 = @as(c_int, 1);
// /usr/include/GL/glew.h:3326:9: warning: macro 'GLEW_ANGLE_texture_compression_dxt3' contains a runtime value, translated to function
pub inline fn GLEW_ANGLE_texture_compression_dxt3() @TypeOf(GLEW_GET_VAR(__GLEW_ANGLE_texture_compression_dxt3)) {
    return GLEW_GET_VAR(__GLEW_ANGLE_texture_compression_dxt3);
}
pub const GL_ANGLE_texture_compression_dxt5 = @as(c_int, 1);
// /usr/include/GL/glew.h:3340:9: warning: macro 'GLEW_ANGLE_texture_compression_dxt5' contains a runtime value, translated to function
pub inline fn GLEW_ANGLE_texture_compression_dxt5() @TypeOf(GLEW_GET_VAR(__GLEW_ANGLE_texture_compression_dxt5)) {
    return GLEW_GET_VAR(__GLEW_ANGLE_texture_compression_dxt5);
}
pub const GL_ANGLE_texture_usage = @as(c_int, 1);
pub const GL_TEXTURE_USAGE_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A2, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A3, .hex);
// /usr/include/GL/glew.h:3352:9: warning: macro 'GLEW_ANGLE_texture_usage' contains a runtime value, translated to function
pub inline fn GLEW_ANGLE_texture_usage() @TypeOf(GLEW_GET_VAR(__GLEW_ANGLE_texture_usage)) {
    return GLEW_GET_VAR(__GLEW_ANGLE_texture_usage);
}
pub const GL_ANGLE_timer_query = @as(c_int, 1);
pub const GL_QUERY_COUNTER_BITS_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hex);
pub const GL_CURRENT_QUERY_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hex);
pub const GL_QUERY_RESULT_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hex);
pub const GL_QUERY_RESULT_AVAILABLE_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hex);
pub const GL_TIME_ELAPSED_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BF, .hex);
pub const GL_TIMESTAMP_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hex);
// /usr/include/GL/glew.h:3380:9: warning: macro 'glBeginQueryANGLE' contains a runtime value, translated to function
pub inline fn glBeginQueryANGLE() @TypeOf(GLEW_GET_FUN(__glewBeginQueryANGLE)) {
    return GLEW_GET_FUN(__glewBeginQueryANGLE);
}
// /usr/include/GL/glew.h:3381:9: warning: macro 'glDeleteQueriesANGLE' contains a runtime value, translated to function
pub inline fn glDeleteQueriesANGLE() @TypeOf(GLEW_GET_FUN(__glewDeleteQueriesANGLE)) {
    return GLEW_GET_FUN(__glewDeleteQueriesANGLE);
}
// /usr/include/GL/glew.h:3382:9: warning: macro 'glEndQueryANGLE' contains a runtime value, translated to function
pub inline fn glEndQueryANGLE() @TypeOf(GLEW_GET_FUN(__glewEndQueryANGLE)) {
    return GLEW_GET_FUN(__glewEndQueryANGLE);
}
// /usr/include/GL/glew.h:3383:9: warning: macro 'glGenQueriesANGLE' contains a runtime value, translated to function
pub inline fn glGenQueriesANGLE() @TypeOf(GLEW_GET_FUN(__glewGenQueriesANGLE)) {
    return GLEW_GET_FUN(__glewGenQueriesANGLE);
}
// /usr/include/GL/glew.h:3384:9: warning: macro 'glGetQueryObjecti64vANGLE' contains a runtime value, translated to function
pub inline fn glGetQueryObjecti64vANGLE() @TypeOf(GLEW_GET_FUN(__glewGetQueryObjecti64vANGLE)) {
    return GLEW_GET_FUN(__glewGetQueryObjecti64vANGLE);
}
// /usr/include/GL/glew.h:3385:9: warning: macro 'glGetQueryObjectivANGLE' contains a runtime value, translated to function
pub inline fn glGetQueryObjectivANGLE() @TypeOf(GLEW_GET_FUN(__glewGetQueryObjectivANGLE)) {
    return GLEW_GET_FUN(__glewGetQueryObjectivANGLE);
}
// /usr/include/GL/glew.h:3386:9: warning: macro 'glGetQueryObjectui64vANGLE' contains a runtime value, translated to function
pub inline fn glGetQueryObjectui64vANGLE() @TypeOf(GLEW_GET_FUN(__glewGetQueryObjectui64vANGLE)) {
    return GLEW_GET_FUN(__glewGetQueryObjectui64vANGLE);
}
// /usr/include/GL/glew.h:3387:9: warning: macro 'glGetQueryObjectuivANGLE' contains a runtime value, translated to function
pub inline fn glGetQueryObjectuivANGLE() @TypeOf(GLEW_GET_FUN(__glewGetQueryObjectuivANGLE)) {
    return GLEW_GET_FUN(__glewGetQueryObjectuivANGLE);
}
// /usr/include/GL/glew.h:3388:9: warning: macro 'glGetQueryivANGLE' contains a runtime value, translated to function
pub inline fn glGetQueryivANGLE() @TypeOf(GLEW_GET_FUN(__glewGetQueryivANGLE)) {
    return GLEW_GET_FUN(__glewGetQueryivANGLE);
}
// /usr/include/GL/glew.h:3389:9: warning: macro 'glIsQueryANGLE' contains a runtime value, translated to function
pub inline fn glIsQueryANGLE() @TypeOf(GLEW_GET_FUN(__glewIsQueryANGLE)) {
    return GLEW_GET_FUN(__glewIsQueryANGLE);
}
// /usr/include/GL/glew.h:3390:9: warning: macro 'glQueryCounterANGLE' contains a runtime value, translated to function
pub inline fn glQueryCounterANGLE() @TypeOf(GLEW_GET_FUN(__glewQueryCounterANGLE)) {
    return GLEW_GET_FUN(__glewQueryCounterANGLE);
}
// /usr/include/GL/glew.h:3392:9: warning: macro 'GLEW_ANGLE_timer_query' contains a runtime value, translated to function
pub inline fn GLEW_ANGLE_timer_query() @TypeOf(GLEW_GET_VAR(__GLEW_ANGLE_timer_query)) {
    return GLEW_GET_VAR(__GLEW_ANGLE_timer_query);
}
pub const GL_ANGLE_translated_shader_source = @as(c_int, 1);
pub const GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A0, .hex);
// /usr/include/GL/glew.h:3405:9: warning: macro 'glGetTranslatedShaderSourceANGLE' contains a runtime value, translated to function
pub inline fn glGetTranslatedShaderSourceANGLE() @TypeOf(GLEW_GET_FUN(__glewGetTranslatedShaderSourceANGLE)) {
    return GLEW_GET_FUN(__glewGetTranslatedShaderSourceANGLE);
}
// /usr/include/GL/glew.h:3407:9: warning: macro 'GLEW_ANGLE_translated_shader_source' contains a runtime value, translated to function
pub inline fn GLEW_ANGLE_translated_shader_source() @TypeOf(GLEW_GET_VAR(__GLEW_ANGLE_translated_shader_source)) {
    return GLEW_GET_VAR(__GLEW_ANGLE_translated_shader_source);
}
pub const GL_APPLE_aux_depth_stencil = @as(c_int, 1);
pub const GL_AUX_DEPTH_STENCIL_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A14, .hex);
// /usr/include/GL/glew.h:3418:9: warning: macro 'GLEW_APPLE_aux_depth_stencil' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_aux_depth_stencil() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_aux_depth_stencil)) {
    return GLEW_GET_VAR(__GLEW_APPLE_aux_depth_stencil);
}
pub const GL_APPLE_client_storage = @as(c_int, 1);
pub const GL_UNPACK_CLIENT_STORAGE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B2, .hex);
// /usr/include/GL/glew.h:3429:9: warning: macro 'GLEW_APPLE_client_storage' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_client_storage() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_client_storage)) {
    return GLEW_GET_VAR(__GLEW_APPLE_client_storage);
}
pub const GL_APPLE_clip_distance = @as(c_int, 1);
pub const GL_MAX_CLIP_DISTANCES_APPLE = @as(c_int, 0x0D32);
pub const GL_CLIP_DISTANCE0_APPLE = @as(c_int, 0x3000);
pub const GL_CLIP_DISTANCE1_APPLE = @as(c_int, 0x3001);
pub const GL_CLIP_DISTANCE2_APPLE = @as(c_int, 0x3002);
pub const GL_CLIP_DISTANCE3_APPLE = @as(c_int, 0x3003);
pub const GL_CLIP_DISTANCE4_APPLE = @as(c_int, 0x3004);
pub const GL_CLIP_DISTANCE5_APPLE = @as(c_int, 0x3005);
pub const GL_CLIP_DISTANCE6_APPLE = @as(c_int, 0x3006);
pub const GL_CLIP_DISTANCE7_APPLE = @as(c_int, 0x3007);
// /usr/include/GL/glew.h:3448:9: warning: macro 'GLEW_APPLE_clip_distance' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_clip_distance() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_clip_distance)) {
    return GLEW_GET_VAR(__GLEW_APPLE_clip_distance);
}
pub const GL_APPLE_color_buffer_packed_float = @as(c_int, 1);
// /usr/include/GL/glew.h:3457:9: warning: macro 'GLEW_APPLE_color_buffer_packed_float' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_color_buffer_packed_float() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_color_buffer_packed_float)) {
    return GLEW_GET_VAR(__GLEW_APPLE_color_buffer_packed_float);
}
pub const GL_APPLE_copy_texture_levels = @as(c_int, 1);
// /usr/include/GL/glew.h:3468:9: warning: macro 'glCopyTextureLevelsAPPLE' contains a runtime value, translated to function
pub inline fn glCopyTextureLevelsAPPLE() @TypeOf(GLEW_GET_FUN(__glewCopyTextureLevelsAPPLE)) {
    return GLEW_GET_FUN(__glewCopyTextureLevelsAPPLE);
}
// /usr/include/GL/glew.h:3470:9: warning: macro 'GLEW_APPLE_copy_texture_levels' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_copy_texture_levels() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_copy_texture_levels)) {
    return GLEW_GET_VAR(__GLEW_APPLE_copy_texture_levels);
}
pub const GL_APPLE_element_array = @as(c_int, 1);
pub const GL_ELEMENT_ARRAY_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0C, .hex);
pub const GL_ELEMENT_ARRAY_TYPE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0D, .hex);
pub const GL_ELEMENT_ARRAY_POINTER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0E, .hex);
// /usr/include/GL/glew.h:3489:9: warning: macro 'glDrawElementArrayAPPLE' contains a runtime value, translated to function
pub inline fn glDrawElementArrayAPPLE() @TypeOf(GLEW_GET_FUN(__glewDrawElementArrayAPPLE)) {
    return GLEW_GET_FUN(__glewDrawElementArrayAPPLE);
}
// /usr/include/GL/glew.h:3490:9: warning: macro 'glDrawRangeElementArrayAPPLE' contains a runtime value, translated to function
pub inline fn glDrawRangeElementArrayAPPLE() @TypeOf(GLEW_GET_FUN(__glewDrawRangeElementArrayAPPLE)) {
    return GLEW_GET_FUN(__glewDrawRangeElementArrayAPPLE);
}
// /usr/include/GL/glew.h:3491:9: warning: macro 'glElementPointerAPPLE' contains a runtime value, translated to function
pub inline fn glElementPointerAPPLE() @TypeOf(GLEW_GET_FUN(__glewElementPointerAPPLE)) {
    return GLEW_GET_FUN(__glewElementPointerAPPLE);
}
// /usr/include/GL/glew.h:3492:9: warning: macro 'glMultiDrawElementArrayAPPLE' contains a runtime value, translated to function
pub inline fn glMultiDrawElementArrayAPPLE() @TypeOf(GLEW_GET_FUN(__glewMultiDrawElementArrayAPPLE)) {
    return GLEW_GET_FUN(__glewMultiDrawElementArrayAPPLE);
}
// /usr/include/GL/glew.h:3493:9: warning: macro 'glMultiDrawRangeElementArrayAPPLE' contains a runtime value, translated to function
pub inline fn glMultiDrawRangeElementArrayAPPLE() @TypeOf(GLEW_GET_FUN(__glewMultiDrawRangeElementArrayAPPLE)) {
    return GLEW_GET_FUN(__glewMultiDrawRangeElementArrayAPPLE);
}
// /usr/include/GL/glew.h:3495:9: warning: macro 'GLEW_APPLE_element_array' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_element_array() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_element_array)) {
    return GLEW_GET_VAR(__GLEW_APPLE_element_array);
}
pub const GL_APPLE_fence = @as(c_int, 1);
pub const GL_DRAW_PIXELS_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0A, .hex);
pub const GL_FENCE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0B, .hex);
// /usr/include/GL/glew.h:3516:9: warning: macro 'glDeleteFencesAPPLE' contains a runtime value, translated to function
pub inline fn glDeleteFencesAPPLE() @TypeOf(GLEW_GET_FUN(__glewDeleteFencesAPPLE)) {
    return GLEW_GET_FUN(__glewDeleteFencesAPPLE);
}
// /usr/include/GL/glew.h:3517:9: warning: macro 'glFinishFenceAPPLE' contains a runtime value, translated to function
pub inline fn glFinishFenceAPPLE() @TypeOf(GLEW_GET_FUN(__glewFinishFenceAPPLE)) {
    return GLEW_GET_FUN(__glewFinishFenceAPPLE);
}
// /usr/include/GL/glew.h:3518:9: warning: macro 'glFinishObjectAPPLE' contains a runtime value, translated to function
pub inline fn glFinishObjectAPPLE() @TypeOf(GLEW_GET_FUN(__glewFinishObjectAPPLE)) {
    return GLEW_GET_FUN(__glewFinishObjectAPPLE);
}
// /usr/include/GL/glew.h:3519:9: warning: macro 'glGenFencesAPPLE' contains a runtime value, translated to function
pub inline fn glGenFencesAPPLE() @TypeOf(GLEW_GET_FUN(__glewGenFencesAPPLE)) {
    return GLEW_GET_FUN(__glewGenFencesAPPLE);
}
// /usr/include/GL/glew.h:3520:9: warning: macro 'glIsFenceAPPLE' contains a runtime value, translated to function
pub inline fn glIsFenceAPPLE() @TypeOf(GLEW_GET_FUN(__glewIsFenceAPPLE)) {
    return GLEW_GET_FUN(__glewIsFenceAPPLE);
}
// /usr/include/GL/glew.h:3521:9: warning: macro 'glSetFenceAPPLE' contains a runtime value, translated to function
pub inline fn glSetFenceAPPLE() @TypeOf(GLEW_GET_FUN(__glewSetFenceAPPLE)) {
    return GLEW_GET_FUN(__glewSetFenceAPPLE);
}
// /usr/include/GL/glew.h:3522:9: warning: macro 'glTestFenceAPPLE' contains a runtime value, translated to function
pub inline fn glTestFenceAPPLE() @TypeOf(GLEW_GET_FUN(__glewTestFenceAPPLE)) {
    return GLEW_GET_FUN(__glewTestFenceAPPLE);
}
// /usr/include/GL/glew.h:3523:9: warning: macro 'glTestObjectAPPLE' contains a runtime value, translated to function
pub inline fn glTestObjectAPPLE() @TypeOf(GLEW_GET_FUN(__glewTestObjectAPPLE)) {
    return GLEW_GET_FUN(__glewTestObjectAPPLE);
}
// /usr/include/GL/glew.h:3525:9: warning: macro 'GLEW_APPLE_fence' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_fence() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_fence)) {
    return GLEW_GET_VAR(__GLEW_APPLE_fence);
}
pub const GL_APPLE_float_pixels = @as(c_int, 1);
pub const GL_HALF_APPLE = @as(c_int, 0x140B);
pub const GL_RGBA_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hex);
pub const GL_RGB_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hex);
pub const GL_ALPHA_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hex);
pub const GL_INTENSITY_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8817, .hex);
pub const GL_LUMINANCE_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hex);
pub const GL_LUMINANCE_ALPHA_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hex);
pub const GL_RGBA_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hex);
pub const GL_RGB_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hex);
pub const GL_ALPHA_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hex);
pub const GL_INTENSITY_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881D, .hex);
pub const GL_LUMINANCE_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hex);
pub const GL_LUMINANCE_ALPHA_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hex);
pub const GL_COLOR_FLOAT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0F, .hex);
// /usr/include/GL/glew.h:3549:9: warning: macro 'GLEW_APPLE_float_pixels' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_float_pixels() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_float_pixels)) {
    return GLEW_GET_VAR(__GLEW_APPLE_float_pixels);
}
pub const GL_APPLE_flush_buffer_range = @as(c_int, 1);
pub const GL_BUFFER_SERIALIZED_MODIFY_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A12, .hex);
pub const GL_BUFFER_FLUSHING_UNMAP_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A13, .hex);
// /usr/include/GL/glew.h:3564:9: warning: macro 'glBufferParameteriAPPLE' contains a runtime value, translated to function
pub inline fn glBufferParameteriAPPLE() @TypeOf(GLEW_GET_FUN(__glewBufferParameteriAPPLE)) {
    return GLEW_GET_FUN(__glewBufferParameteriAPPLE);
}
// /usr/include/GL/glew.h:3565:9: warning: macro 'glFlushMappedBufferRangeAPPLE' contains a runtime value, translated to function
pub inline fn glFlushMappedBufferRangeAPPLE() @TypeOf(GLEW_GET_FUN(__glewFlushMappedBufferRangeAPPLE)) {
    return GLEW_GET_FUN(__glewFlushMappedBufferRangeAPPLE);
}
// /usr/include/GL/glew.h:3567:9: warning: macro 'GLEW_APPLE_flush_buffer_range' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_flush_buffer_range() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_flush_buffer_range)) {
    return GLEW_GET_VAR(__GLEW_APPLE_flush_buffer_range);
}
pub const GL_APPLE_framebuffer_multisample = @as(c_int, 1);
pub const GL_DRAW_FRAMEBUFFER_BINDING_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_READ_FRAMEBUFFER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hex);
pub const GL_DRAW_FRAMEBUFFER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hex);
pub const GL_READ_FRAMEBUFFER_BINDING_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hex);
pub const GL_RENDERBUFFER_SAMPLES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hex);
pub const GL_MAX_SAMPLES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hex);
// /usr/include/GL/glew.h:3587:9: warning: macro 'glRenderbufferStorageMultisampleAPPLE' contains a runtime value, translated to function
pub inline fn glRenderbufferStorageMultisampleAPPLE() @TypeOf(GLEW_GET_FUN(__glewRenderbufferStorageMultisampleAPPLE)) {
    return GLEW_GET_FUN(__glewRenderbufferStorageMultisampleAPPLE);
}
// /usr/include/GL/glew.h:3588:9: warning: macro 'glResolveMultisampleFramebufferAPPLE' contains a runtime value, translated to function
pub inline fn glResolveMultisampleFramebufferAPPLE() @TypeOf(GLEW_GET_FUN(__glewResolveMultisampleFramebufferAPPLE)) {
    return GLEW_GET_FUN(__glewResolveMultisampleFramebufferAPPLE);
}
// /usr/include/GL/glew.h:3590:9: warning: macro 'GLEW_APPLE_framebuffer_multisample' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_framebuffer_multisample() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_framebuffer_multisample)) {
    return GLEW_GET_VAR(__GLEW_APPLE_framebuffer_multisample);
}
pub const GL_APPLE_object_purgeable = @as(c_int, 1);
pub const GL_BUFFER_OBJECT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B3, .hex);
pub const GL_RELEASED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A19, .hex);
pub const GL_VOLATILE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1A, .hex);
pub const GL_RETAINED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1B, .hex);
pub const GL_UNDEFINED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1C, .hex);
pub const GL_PURGEABLE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1D, .hex);
// /usr/include/GL/glew.h:3610:9: warning: macro 'glGetObjectParameterivAPPLE' contains a runtime value, translated to function
pub inline fn glGetObjectParameterivAPPLE() @TypeOf(GLEW_GET_FUN(__glewGetObjectParameterivAPPLE)) {
    return GLEW_GET_FUN(__glewGetObjectParameterivAPPLE);
}
// /usr/include/GL/glew.h:3611:9: warning: macro 'glObjectPurgeableAPPLE' contains a runtime value, translated to function
pub inline fn glObjectPurgeableAPPLE() @TypeOf(GLEW_GET_FUN(__glewObjectPurgeableAPPLE)) {
    return GLEW_GET_FUN(__glewObjectPurgeableAPPLE);
}
// /usr/include/GL/glew.h:3612:9: warning: macro 'glObjectUnpurgeableAPPLE' contains a runtime value, translated to function
pub inline fn glObjectUnpurgeableAPPLE() @TypeOf(GLEW_GET_FUN(__glewObjectUnpurgeableAPPLE)) {
    return GLEW_GET_FUN(__glewObjectUnpurgeableAPPLE);
}
// /usr/include/GL/glew.h:3614:9: warning: macro 'GLEW_APPLE_object_purgeable' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_object_purgeable() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_object_purgeable)) {
    return GLEW_GET_VAR(__GLEW_APPLE_object_purgeable);
}
pub const GL_APPLE_pixel_buffer = @as(c_int, 1);
pub const GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A10, .hex);
// /usr/include/GL/glew.h:3625:9: warning: macro 'GLEW_APPLE_pixel_buffer' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_pixel_buffer() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_pixel_buffer)) {
    return GLEW_GET_VAR(__GLEW_APPLE_pixel_buffer);
}
pub const GL_APPLE_rgb_422 = @as(c_int, 1);
pub const GL_UNSIGNED_SHORT_8_8_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BA, .hex);
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BB, .hex);
pub const GL_RGB_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1F, .hex);
pub const GL_RGB_RAW_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A51, .hex);
// /usr/include/GL/glew.h:3639:9: warning: macro 'GLEW_APPLE_rgb_422' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_rgb_422() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_rgb_422)) {
    return GLEW_GET_VAR(__GLEW_APPLE_rgb_422);
}
pub const GL_APPLE_row_bytes = @as(c_int, 1);
pub const GL_PACK_ROW_BYTES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A15, .hex);
pub const GL_UNPACK_ROW_BYTES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A16, .hex);
// /usr/include/GL/glew.h:3651:9: warning: macro 'GLEW_APPLE_row_bytes' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_row_bytes() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_row_bytes)) {
    return GLEW_GET_VAR(__GLEW_APPLE_row_bytes);
}
pub const GL_APPLE_specular_vector = @as(c_int, 1);
pub const GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B0, .hex);
// /usr/include/GL/glew.h:3662:9: warning: macro 'GLEW_APPLE_specular_vector' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_specular_vector() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_specular_vector)) {
    return GLEW_GET_VAR(__GLEW_APPLE_specular_vector);
}
pub const GL_APPLE_sync = @as(c_int, 1);
pub const GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = @as(c_int, 0x00000001);
pub const GL_SYNC_OBJECT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A53, .hex);
pub const GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9111, .hex);
pub const GL_OBJECT_TYPE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9112, .hex);
pub const GL_SYNC_CONDITION_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9113, .hex);
pub const GL_SYNC_STATUS_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9114, .hex);
pub const GL_SYNC_FLAGS_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9115, .hex);
pub const GL_SYNC_FENCE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9116, .hex);
pub const GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9117, .hex);
pub const GL_UNSIGNALED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9118, .hex);
pub const GL_SIGNALED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9119, .hex);
pub const GL_ALREADY_SIGNALED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911A, .hex);
pub const GL_TIMEOUT_EXPIRED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911B, .hex);
pub const GL_CONDITION_SATISFIED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911C, .hex);
pub const GL_WAIT_FAILED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911D, .hex);
pub const GL_TIMEOUT_IGNORED_APPLE = @as(c_ulonglong, 0xFFFFFFFFFFFFFFFF);
// /usr/include/GL/glew.h:3696:9: warning: macro 'glClientWaitSyncAPPLE' contains a runtime value, translated to function
pub inline fn glClientWaitSyncAPPLE() @TypeOf(GLEW_GET_FUN(__glewClientWaitSyncAPPLE)) {
    return GLEW_GET_FUN(__glewClientWaitSyncAPPLE);
}
// /usr/include/GL/glew.h:3697:9: warning: macro 'glDeleteSyncAPPLE' contains a runtime value, translated to function
pub inline fn glDeleteSyncAPPLE() @TypeOf(GLEW_GET_FUN(__glewDeleteSyncAPPLE)) {
    return GLEW_GET_FUN(__glewDeleteSyncAPPLE);
}
// /usr/include/GL/glew.h:3698:9: warning: macro 'glFenceSyncAPPLE' contains a runtime value, translated to function
pub inline fn glFenceSyncAPPLE() @TypeOf(GLEW_GET_FUN(__glewFenceSyncAPPLE)) {
    return GLEW_GET_FUN(__glewFenceSyncAPPLE);
}
// /usr/include/GL/glew.h:3699:9: warning: macro 'glGetInteger64vAPPLE' contains a runtime value, translated to function
pub inline fn glGetInteger64vAPPLE() @TypeOf(GLEW_GET_FUN(__glewGetInteger64vAPPLE)) {
    return GLEW_GET_FUN(__glewGetInteger64vAPPLE);
}
// /usr/include/GL/glew.h:3700:9: warning: macro 'glGetSyncivAPPLE' contains a runtime value, translated to function
pub inline fn glGetSyncivAPPLE() @TypeOf(GLEW_GET_FUN(__glewGetSyncivAPPLE)) {
    return GLEW_GET_FUN(__glewGetSyncivAPPLE);
}
// /usr/include/GL/glew.h:3701:9: warning: macro 'glIsSyncAPPLE' contains a runtime value, translated to function
pub inline fn glIsSyncAPPLE() @TypeOf(GLEW_GET_FUN(__glewIsSyncAPPLE)) {
    return GLEW_GET_FUN(__glewIsSyncAPPLE);
}
// /usr/include/GL/glew.h:3702:9: warning: macro 'glWaitSyncAPPLE' contains a runtime value, translated to function
pub inline fn glWaitSyncAPPLE() @TypeOf(GLEW_GET_FUN(__glewWaitSyncAPPLE)) {
    return GLEW_GET_FUN(__glewWaitSyncAPPLE);
}
// /usr/include/GL/glew.h:3704:9: warning: macro 'GLEW_APPLE_sync' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_sync() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_sync)) {
    return GLEW_GET_VAR(__GLEW_APPLE_sync);
}
pub const GL_APPLE_texture_2D_limited_npot = @as(c_int, 1);
// /usr/include/GL/glew.h:3713:9: warning: macro 'GLEW_APPLE_texture_2D_limited_npot' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_texture_2D_limited_npot() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_texture_2D_limited_npot)) {
    return GLEW_GET_VAR(__GLEW_APPLE_texture_2D_limited_npot);
}
pub const GL_APPLE_texture_format_BGRA8888 = @as(c_int, 1);
pub const GL_BGRA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hex);
pub const GL_BGRA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A1, .hex);
// /usr/include/GL/glew.h:3725:9: warning: macro 'GLEW_APPLE_texture_format_BGRA8888' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_texture_format_BGRA8888() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_texture_format_BGRA8888)) {
    return GLEW_GET_VAR(__GLEW_APPLE_texture_format_BGRA8888);
}
pub const GL_APPLE_texture_max_level = @as(c_int, 1);
pub const GL_TEXTURE_MAX_LEVEL_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hex);
// /usr/include/GL/glew.h:3736:9: warning: macro 'GLEW_APPLE_texture_max_level' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_texture_max_level() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_texture_max_level)) {
    return GLEW_GET_VAR(__GLEW_APPLE_texture_max_level);
}
pub const GL_APPLE_texture_packed_float = @as(c_int, 1);
pub const GL_R11F_G11F_B10F_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hex);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hex);
pub const GL_RGB9_E5_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3D, .hex);
pub const GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3E, .hex);
// /usr/include/GL/glew.h:3750:9: warning: macro 'GLEW_APPLE_texture_packed_float' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_texture_packed_float() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_texture_packed_float)) {
    return GLEW_GET_VAR(__GLEW_APPLE_texture_packed_float);
}
pub const GL_APPLE_texture_range = @as(c_int, 1);
pub const GL_TEXTURE_RANGE_LENGTH_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B7, .hex);
pub const GL_TEXTURE_RANGE_POINTER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B8, .hex);
pub const GL_TEXTURE_STORAGE_HINT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BC, .hex);
pub const GL_STORAGE_PRIVATE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BD, .hex);
pub const GL_STORAGE_CACHED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BE, .hex);
pub const GL_STORAGE_SHARED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BF, .hex);
// /usr/include/GL/glew.h:3769:9: warning: macro 'glGetTexParameterPointervAPPLE' contains a runtime value, translated to function
pub inline fn glGetTexParameterPointervAPPLE() @TypeOf(GLEW_GET_FUN(__glewGetTexParameterPointervAPPLE)) {
    return GLEW_GET_FUN(__glewGetTexParameterPointervAPPLE);
}
// /usr/include/GL/glew.h:3770:9: warning: macro 'glTextureRangeAPPLE' contains a runtime value, translated to function
pub inline fn glTextureRangeAPPLE() @TypeOf(GLEW_GET_FUN(__glewTextureRangeAPPLE)) {
    return GLEW_GET_FUN(__glewTextureRangeAPPLE);
}
// /usr/include/GL/glew.h:3772:9: warning: macro 'GLEW_APPLE_texture_range' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_texture_range() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_texture_range)) {
    return GLEW_GET_VAR(__GLEW_APPLE_texture_range);
}
pub const GL_APPLE_transform_hint = @as(c_int, 1);
pub const GL_TRANSFORM_HINT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B1, .hex);
// /usr/include/GL/glew.h:3783:9: warning: macro 'GLEW_APPLE_transform_hint' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_transform_hint() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_transform_hint)) {
    return GLEW_GET_VAR(__GLEW_APPLE_transform_hint);
}
pub const GL_APPLE_vertex_array_object = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_BINDING_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B5, .hex);
// /usr/include/GL/glew.h:3799:9: warning: macro 'glBindVertexArrayAPPLE' contains a runtime value, translated to function
pub inline fn glBindVertexArrayAPPLE() @TypeOf(GLEW_GET_FUN(__glewBindVertexArrayAPPLE)) {
    return GLEW_GET_FUN(__glewBindVertexArrayAPPLE);
}
// /usr/include/GL/glew.h:3800:9: warning: macro 'glDeleteVertexArraysAPPLE' contains a runtime value, translated to function
pub inline fn glDeleteVertexArraysAPPLE() @TypeOf(GLEW_GET_FUN(__glewDeleteVertexArraysAPPLE)) {
    return GLEW_GET_FUN(__glewDeleteVertexArraysAPPLE);
}
// /usr/include/GL/glew.h:3801:9: warning: macro 'glGenVertexArraysAPPLE' contains a runtime value, translated to function
pub inline fn glGenVertexArraysAPPLE() @TypeOf(GLEW_GET_FUN(__glewGenVertexArraysAPPLE)) {
    return GLEW_GET_FUN(__glewGenVertexArraysAPPLE);
}
// /usr/include/GL/glew.h:3802:9: warning: macro 'glIsVertexArrayAPPLE' contains a runtime value, translated to function
pub inline fn glIsVertexArrayAPPLE() @TypeOf(GLEW_GET_FUN(__glewIsVertexArrayAPPLE)) {
    return GLEW_GET_FUN(__glewIsVertexArrayAPPLE);
}
// /usr/include/GL/glew.h:3804:9: warning: macro 'GLEW_APPLE_vertex_array_object' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_vertex_array_object() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_vertex_array_object)) {
    return GLEW_GET_VAR(__GLEW_APPLE_vertex_array_object);
}
pub const GL_APPLE_vertex_array_range = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_RANGE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851D, .hex);
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851E, .hex);
pub const GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851F, .hex);
pub const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8520, .hex);
pub const GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8521, .hex);
pub const GL_STORAGE_CLIENT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B4, .hex);
// /usr/include/GL/glew.h:3826:9: warning: macro 'glFlushVertexArrayRangeAPPLE' contains a runtime value, translated to function
pub inline fn glFlushVertexArrayRangeAPPLE() @TypeOf(GLEW_GET_FUN(__glewFlushVertexArrayRangeAPPLE)) {
    return GLEW_GET_FUN(__glewFlushVertexArrayRangeAPPLE);
}
// /usr/include/GL/glew.h:3827:9: warning: macro 'glVertexArrayParameteriAPPLE' contains a runtime value, translated to function
pub inline fn glVertexArrayParameteriAPPLE() @TypeOf(GLEW_GET_FUN(__glewVertexArrayParameteriAPPLE)) {
    return GLEW_GET_FUN(__glewVertexArrayParameteriAPPLE);
}
// /usr/include/GL/glew.h:3828:9: warning: macro 'glVertexArrayRangeAPPLE' contains a runtime value, translated to function
pub inline fn glVertexArrayRangeAPPLE() @TypeOf(GLEW_GET_FUN(__glewVertexArrayRangeAPPLE)) {
    return GLEW_GET_FUN(__glewVertexArrayRangeAPPLE);
}
// /usr/include/GL/glew.h:3830:9: warning: macro 'GLEW_APPLE_vertex_array_range' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_vertex_array_range() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_vertex_array_range)) {
    return GLEW_GET_VAR(__GLEW_APPLE_vertex_array_range);
}
pub const GL_APPLE_vertex_program_evaluators = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_MAP1_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A00, .hex);
pub const GL_VERTEX_ATTRIB_MAP2_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A01, .hex);
pub const GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A02, .hex);
pub const GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A03, .hex);
pub const GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A04, .hex);
pub const GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A05, .hex);
pub const GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A06, .hex);
pub const GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A07, .hex);
pub const GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A08, .hex);
pub const GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A09, .hex);
// /usr/include/GL/glew.h:3858:9: warning: macro 'glDisableVertexAttribAPPLE' contains a runtime value, translated to function
pub inline fn glDisableVertexAttribAPPLE() @TypeOf(GLEW_GET_FUN(__glewDisableVertexAttribAPPLE)) {
    return GLEW_GET_FUN(__glewDisableVertexAttribAPPLE);
}
// /usr/include/GL/glew.h:3859:9: warning: macro 'glEnableVertexAttribAPPLE' contains a runtime value, translated to function
pub inline fn glEnableVertexAttribAPPLE() @TypeOf(GLEW_GET_FUN(__glewEnableVertexAttribAPPLE)) {
    return GLEW_GET_FUN(__glewEnableVertexAttribAPPLE);
}
// /usr/include/GL/glew.h:3860:9: warning: macro 'glIsVertexAttribEnabledAPPLE' contains a runtime value, translated to function
pub inline fn glIsVertexAttribEnabledAPPLE() @TypeOf(GLEW_GET_FUN(__glewIsVertexAttribEnabledAPPLE)) {
    return GLEW_GET_FUN(__glewIsVertexAttribEnabledAPPLE);
}
// /usr/include/GL/glew.h:3861:9: warning: macro 'glMapVertexAttrib1dAPPLE' contains a runtime value, translated to function
pub inline fn glMapVertexAttrib1dAPPLE() @TypeOf(GLEW_GET_FUN(__glewMapVertexAttrib1dAPPLE)) {
    return GLEW_GET_FUN(__glewMapVertexAttrib1dAPPLE);
}
// /usr/include/GL/glew.h:3862:9: warning: macro 'glMapVertexAttrib1fAPPLE' contains a runtime value, translated to function
pub inline fn glMapVertexAttrib1fAPPLE() @TypeOf(GLEW_GET_FUN(__glewMapVertexAttrib1fAPPLE)) {
    return GLEW_GET_FUN(__glewMapVertexAttrib1fAPPLE);
}
// /usr/include/GL/glew.h:3863:9: warning: macro 'glMapVertexAttrib2dAPPLE' contains a runtime value, translated to function
pub inline fn glMapVertexAttrib2dAPPLE() @TypeOf(GLEW_GET_FUN(__glewMapVertexAttrib2dAPPLE)) {
    return GLEW_GET_FUN(__glewMapVertexAttrib2dAPPLE);
}
// /usr/include/GL/glew.h:3864:9: warning: macro 'glMapVertexAttrib2fAPPLE' contains a runtime value, translated to function
pub inline fn glMapVertexAttrib2fAPPLE() @TypeOf(GLEW_GET_FUN(__glewMapVertexAttrib2fAPPLE)) {
    return GLEW_GET_FUN(__glewMapVertexAttrib2fAPPLE);
}
// /usr/include/GL/glew.h:3866:9: warning: macro 'GLEW_APPLE_vertex_program_evaluators' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_vertex_program_evaluators() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_vertex_program_evaluators)) {
    return GLEW_GET_VAR(__GLEW_APPLE_vertex_program_evaluators);
}
pub const GL_APPLE_ycbcr_422 = @as(c_int, 1);
pub const GL_YCBCR_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B9, .hex);
// /usr/include/GL/glew.h:3877:9: warning: macro 'GLEW_APPLE_ycbcr_422' contains a runtime value, translated to function
pub inline fn GLEW_APPLE_ycbcr_422() @TypeOf(GLEW_GET_VAR(__GLEW_APPLE_ycbcr_422)) {
    return GLEW_GET_VAR(__GLEW_APPLE_ycbcr_422);
}
pub const GL_ARB_ES2_compatibility = @as(c_int, 1);
pub const GL_FIXED = @as(c_int, 0x140C);
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9A, .hex);
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9B, .hex);
pub const GL_RGB565 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D62, .hex);
pub const GL_LOW_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF0, .hex);
pub const GL_MEDIUM_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF1, .hex);
pub const GL_HIGH_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF2, .hex);
pub const GL_LOW_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF3, .hex);
pub const GL_MEDIUM_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF4, .hex);
pub const GL_HIGH_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF5, .hex);
pub const GL_SHADER_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF8, .hex);
pub const GL_NUM_SHADER_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF9, .hex);
pub const GL_SHADER_COMPILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFA, .hex);
pub const GL_MAX_VERTEX_UNIFORM_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFB, .hex);
pub const GL_MAX_VARYING_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFC, .hex);
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFD, .hex);
// /usr/include/GL/glew.h:3911:9: warning: macro 'glClearDepthf' contains a runtime value, translated to function
pub inline fn glClearDepthf() @TypeOf(GLEW_GET_FUN(__glewClearDepthf)) {
    return GLEW_GET_FUN(__glewClearDepthf);
}
// /usr/include/GL/glew.h:3912:9: warning: macro 'glDepthRangef' contains a runtime value, translated to function
pub inline fn glDepthRangef() @TypeOf(GLEW_GET_FUN(__glewDepthRangef)) {
    return GLEW_GET_FUN(__glewDepthRangef);
}
// /usr/include/GL/glew.h:3913:9: warning: macro 'glGetShaderPrecisionFormat' contains a runtime value, translated to function
pub inline fn glGetShaderPrecisionFormat() @TypeOf(GLEW_GET_FUN(__glewGetShaderPrecisionFormat)) {
    return GLEW_GET_FUN(__glewGetShaderPrecisionFormat);
}
// /usr/include/GL/glew.h:3914:9: warning: macro 'glReleaseShaderCompiler' contains a runtime value, translated to function
pub inline fn glReleaseShaderCompiler() @TypeOf(GLEW_GET_FUN(__glewReleaseShaderCompiler)) {
    return GLEW_GET_FUN(__glewReleaseShaderCompiler);
}
// /usr/include/GL/glew.h:3915:9: warning: macro 'glShaderBinary' contains a runtime value, translated to function
pub inline fn glShaderBinary() @TypeOf(GLEW_GET_FUN(__glewShaderBinary)) {
    return GLEW_GET_FUN(__glewShaderBinary);
}
// /usr/include/GL/glew.h:3917:9: warning: macro 'GLEW_ARB_ES2_compatibility' contains a runtime value, translated to function
pub inline fn GLEW_ARB_ES2_compatibility() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_ES2_compatibility)) {
    return GLEW_GET_VAR(__GLEW_ARB_ES2_compatibility);
}
pub const GL_ARB_ES3_1_compatibility = @as(c_int, 1);
// /usr/include/GL/glew.h:3928:9: warning: macro 'glMemoryBarrierByRegion' contains a runtime value, translated to function
pub inline fn glMemoryBarrierByRegion() @TypeOf(GLEW_GET_FUN(__glewMemoryBarrierByRegion)) {
    return GLEW_GET_FUN(__glewMemoryBarrierByRegion);
}
// /usr/include/GL/glew.h:3930:9: warning: macro 'GLEW_ARB_ES3_1_compatibility' contains a runtime value, translated to function
pub inline fn GLEW_ARB_ES3_1_compatibility() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_ES3_1_compatibility)) {
    return GLEW_GET_VAR(__GLEW_ARB_ES3_1_compatibility);
}
pub const GL_ARB_ES3_2_compatibility = @as(c_int, 1);
pub const GL_PRIMITIVE_BOUNDING_BOX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BE, .hex);
pub const GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9381, .hex);
pub const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9382, .hex);
// /usr/include/GL/glew.h:3945:9: warning: macro 'glPrimitiveBoundingBoxARB' contains a runtime value, translated to function
pub inline fn glPrimitiveBoundingBoxARB() @TypeOf(GLEW_GET_FUN(__glewPrimitiveBoundingBoxARB)) {
    return GLEW_GET_FUN(__glewPrimitiveBoundingBoxARB);
}
// /usr/include/GL/glew.h:3947:9: warning: macro 'GLEW_ARB_ES3_2_compatibility' contains a runtime value, translated to function
pub inline fn GLEW_ARB_ES3_2_compatibility() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_ES3_2_compatibility)) {
    return GLEW_GET_VAR(__GLEW_ARB_ES3_2_compatibility);
}
pub const GL_ARB_ES3_compatibility = @as(c_int, 1);
pub const GL_TEXTURE_IMMUTABLE_LEVELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DF, .hex);
pub const GL_PRIMITIVE_RESTART_FIXED_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D69, .hex);
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6A, .hex);
pub const GL_MAX_ELEMENT_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6B, .hex);
pub const GL_COMPRESSED_R11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9270, .hex);
pub const GL_COMPRESSED_SIGNED_R11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9271, .hex);
pub const GL_COMPRESSED_RG11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9272, .hex);
pub const GL_COMPRESSED_SIGNED_RG11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9273, .hex);
pub const GL_COMPRESSED_RGB8_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9274, .hex);
pub const GL_COMPRESSED_SRGB8_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9275, .hex);
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9276, .hex);
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9277, .hex);
pub const GL_COMPRESSED_RGBA8_ETC2_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9278, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9279, .hex);
// /usr/include/GL/glew.h:3971:9: warning: macro 'GLEW_ARB_ES3_compatibility' contains a runtime value, translated to function
pub inline fn GLEW_ARB_ES3_compatibility() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_ES3_compatibility)) {
    return GLEW_GET_VAR(__GLEW_ARB_ES3_compatibility);
}
pub const GL_ARB_arrays_of_arrays = @as(c_int, 1);
// /usr/include/GL/glew.h:3980:9: warning: macro 'GLEW_ARB_arrays_of_arrays' contains a runtime value, translated to function
pub inline fn GLEW_ARB_arrays_of_arrays() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_arrays_of_arrays)) {
    return GLEW_GET_VAR(__GLEW_ARB_arrays_of_arrays);
}
pub const GL_ARB_base_instance = @as(c_int, 1);
// /usr/include/GL/glew.h:3993:9: warning: macro 'glDrawArraysInstancedBaseInstance' contains a runtime value, translated to function
pub inline fn glDrawArraysInstancedBaseInstance() @TypeOf(GLEW_GET_FUN(__glewDrawArraysInstancedBaseInstance)) {
    return GLEW_GET_FUN(__glewDrawArraysInstancedBaseInstance);
}
// /usr/include/GL/glew.h:3994:9: warning: macro 'glDrawElementsInstancedBaseInstance' contains a runtime value, translated to function
pub inline fn glDrawElementsInstancedBaseInstance() @TypeOf(GLEW_GET_FUN(__glewDrawElementsInstancedBaseInstance)) {
    return GLEW_GET_FUN(__glewDrawElementsInstancedBaseInstance);
}
// /usr/include/GL/glew.h:3995:9: warning: macro 'glDrawElementsInstancedBaseVertexBaseInstance' contains a runtime value, translated to function
pub inline fn glDrawElementsInstancedBaseVertexBaseInstance() @TypeOf(GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertexBaseInstance)) {
    return GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertexBaseInstance);
}
// /usr/include/GL/glew.h:3997:9: warning: macro 'GLEW_ARB_base_instance' contains a runtime value, translated to function
pub inline fn GLEW_ARB_base_instance() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_base_instance)) {
    return GLEW_GET_VAR(__GLEW_ARB_base_instance);
}
pub const GL_ARB_bindless_texture = @as(c_int, 1);
pub const GL_UNSIGNED_INT64_ARB = @as(c_int, 0x140F);
// /usr/include/GL/glew.h:4025:9: warning: macro 'glGetImageHandleARB' contains a runtime value, translated to function
pub inline fn glGetImageHandleARB() @TypeOf(GLEW_GET_FUN(__glewGetImageHandleARB)) {
    return GLEW_GET_FUN(__glewGetImageHandleARB);
}
// /usr/include/GL/glew.h:4026:9: warning: macro 'glGetTextureHandleARB' contains a runtime value, translated to function
pub inline fn glGetTextureHandleARB() @TypeOf(GLEW_GET_FUN(__glewGetTextureHandleARB)) {
    return GLEW_GET_FUN(__glewGetTextureHandleARB);
}
// /usr/include/GL/glew.h:4027:9: warning: macro 'glGetTextureSamplerHandleARB' contains a runtime value, translated to function
pub inline fn glGetTextureSamplerHandleARB() @TypeOf(GLEW_GET_FUN(__glewGetTextureSamplerHandleARB)) {
    return GLEW_GET_FUN(__glewGetTextureSamplerHandleARB);
}
// /usr/include/GL/glew.h:4028:9: warning: macro 'glGetVertexAttribLui64vARB' contains a runtime value, translated to function
pub inline fn glGetVertexAttribLui64vARB() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribLui64vARB)) {
    return GLEW_GET_FUN(__glewGetVertexAttribLui64vARB);
}
// /usr/include/GL/glew.h:4029:9: warning: macro 'glIsImageHandleResidentARB' contains a runtime value, translated to function
pub inline fn glIsImageHandleResidentARB() @TypeOf(GLEW_GET_FUN(__glewIsImageHandleResidentARB)) {
    return GLEW_GET_FUN(__glewIsImageHandleResidentARB);
}
// /usr/include/GL/glew.h:4030:9: warning: macro 'glIsTextureHandleResidentARB' contains a runtime value, translated to function
pub inline fn glIsTextureHandleResidentARB() @TypeOf(GLEW_GET_FUN(__glewIsTextureHandleResidentARB)) {
    return GLEW_GET_FUN(__glewIsTextureHandleResidentARB);
}
// /usr/include/GL/glew.h:4031:9: warning: macro 'glMakeImageHandleNonResidentARB' contains a runtime value, translated to function
pub inline fn glMakeImageHandleNonResidentARB() @TypeOf(GLEW_GET_FUN(__glewMakeImageHandleNonResidentARB)) {
    return GLEW_GET_FUN(__glewMakeImageHandleNonResidentARB);
}
// /usr/include/GL/glew.h:4032:9: warning: macro 'glMakeImageHandleResidentARB' contains a runtime value, translated to function
pub inline fn glMakeImageHandleResidentARB() @TypeOf(GLEW_GET_FUN(__glewMakeImageHandleResidentARB)) {
    return GLEW_GET_FUN(__glewMakeImageHandleResidentARB);
}
// /usr/include/GL/glew.h:4033:9: warning: macro 'glMakeTextureHandleNonResidentARB' contains a runtime value, translated to function
pub inline fn glMakeTextureHandleNonResidentARB() @TypeOf(GLEW_GET_FUN(__glewMakeTextureHandleNonResidentARB)) {
    return GLEW_GET_FUN(__glewMakeTextureHandleNonResidentARB);
}
// /usr/include/GL/glew.h:4034:9: warning: macro 'glMakeTextureHandleResidentARB' contains a runtime value, translated to function
pub inline fn glMakeTextureHandleResidentARB() @TypeOf(GLEW_GET_FUN(__glewMakeTextureHandleResidentARB)) {
    return GLEW_GET_FUN(__glewMakeTextureHandleResidentARB);
}
// /usr/include/GL/glew.h:4035:9: warning: macro 'glProgramUniformHandleui64ARB' contains a runtime value, translated to function
pub inline fn glProgramUniformHandleui64ARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniformHandleui64ARB)) {
    return GLEW_GET_FUN(__glewProgramUniformHandleui64ARB);
}
// /usr/include/GL/glew.h:4036:9: warning: macro 'glProgramUniformHandleui64vARB' contains a runtime value, translated to function
pub inline fn glProgramUniformHandleui64vARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniformHandleui64vARB)) {
    return GLEW_GET_FUN(__glewProgramUniformHandleui64vARB);
}
// /usr/include/GL/glew.h:4037:9: warning: macro 'glUniformHandleui64ARB' contains a runtime value, translated to function
pub inline fn glUniformHandleui64ARB() @TypeOf(GLEW_GET_FUN(__glewUniformHandleui64ARB)) {
    return GLEW_GET_FUN(__glewUniformHandleui64ARB);
}
// /usr/include/GL/glew.h:4038:9: warning: macro 'glUniformHandleui64vARB' contains a runtime value, translated to function
pub inline fn glUniformHandleui64vARB() @TypeOf(GLEW_GET_FUN(__glewUniformHandleui64vARB)) {
    return GLEW_GET_FUN(__glewUniformHandleui64vARB);
}
// /usr/include/GL/glew.h:4039:9: warning: macro 'glVertexAttribL1ui64ARB' contains a runtime value, translated to function
pub inline fn glVertexAttribL1ui64ARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL1ui64ARB)) {
    return GLEW_GET_FUN(__glewVertexAttribL1ui64ARB);
}
// /usr/include/GL/glew.h:4040:9: warning: macro 'glVertexAttribL1ui64vARB' contains a runtime value, translated to function
pub inline fn glVertexAttribL1ui64vARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL1ui64vARB)) {
    return GLEW_GET_FUN(__glewVertexAttribL1ui64vARB);
}
// /usr/include/GL/glew.h:4042:9: warning: macro 'GLEW_ARB_bindless_texture' contains a runtime value, translated to function
pub inline fn GLEW_ARB_bindless_texture() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_bindless_texture)) {
    return GLEW_GET_VAR(__GLEW_ARB_bindless_texture);
}
pub const GL_ARB_blend_func_extended = @as(c_int, 1);
pub const GL_SRC1_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F9, .hex);
pub const GL_ONE_MINUS_SRC1_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FA, .hex);
pub const GL_ONE_MINUS_SRC1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FB, .hex);
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FC, .hex);
// /usr/include/GL/glew.h:4059:9: warning: macro 'glBindFragDataLocationIndexed' contains a runtime value, translated to function
pub inline fn glBindFragDataLocationIndexed() @TypeOf(GLEW_GET_FUN(__glewBindFragDataLocationIndexed)) {
    return GLEW_GET_FUN(__glewBindFragDataLocationIndexed);
}
// /usr/include/GL/glew.h:4060:9: warning: macro 'glGetFragDataIndex' contains a runtime value, translated to function
pub inline fn glGetFragDataIndex() @TypeOf(GLEW_GET_FUN(__glewGetFragDataIndex)) {
    return GLEW_GET_FUN(__glewGetFragDataIndex);
}
// /usr/include/GL/glew.h:4062:9: warning: macro 'GLEW_ARB_blend_func_extended' contains a runtime value, translated to function
pub inline fn GLEW_ARB_blend_func_extended() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_blend_func_extended)) {
    return GLEW_GET_VAR(__GLEW_ARB_blend_func_extended);
}
pub const GL_ARB_buffer_storage = @as(c_int, 1);
pub const GL_MAP_READ_BIT = @as(c_int, 0x0001);
pub const GL_MAP_WRITE_BIT = @as(c_int, 0x0002);
pub const GL_MAP_PERSISTENT_BIT = @as(c_int, 0x00000040);
pub const GL_MAP_COHERENT_BIT = @as(c_int, 0x00000080);
pub const GL_DYNAMIC_STORAGE_BIT = @as(c_int, 0x0100);
pub const GL_CLIENT_STORAGE_BIT = @as(c_int, 0x0200);
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = @as(c_int, 0x00004000);
pub const GL_BUFFER_IMMUTABLE_STORAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821F, .hex);
pub const GL_BUFFER_STORAGE_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8220, .hex);
// /usr/include/GL/glew.h:4083:9: warning: macro 'glBufferStorage' contains a runtime value, translated to function
pub inline fn glBufferStorage() @TypeOf(GLEW_GET_FUN(__glewBufferStorage)) {
    return GLEW_GET_FUN(__glewBufferStorage);
}
// /usr/include/GL/glew.h:4085:9: warning: macro 'GLEW_ARB_buffer_storage' contains a runtime value, translated to function
pub inline fn GLEW_ARB_buffer_storage() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_buffer_storage)) {
    return GLEW_GET_VAR(__GLEW_ARB_buffer_storage);
}
pub const GL_ARB_cl_event = @as(c_int, 1);
pub const GL_SYNC_CL_EVENT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8240, .hex);
pub const GL_SYNC_CL_EVENT_COMPLETE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8241, .hex);
// /usr/include/GL/glew.h:4102:9: warning: macro 'glCreateSyncFromCLeventARB' contains a runtime value, translated to function
pub inline fn glCreateSyncFromCLeventARB() @TypeOf(GLEW_GET_FUN(__glewCreateSyncFromCLeventARB)) {
    return GLEW_GET_FUN(__glewCreateSyncFromCLeventARB);
}
// /usr/include/GL/glew.h:4104:9: warning: macro 'GLEW_ARB_cl_event' contains a runtime value, translated to function
pub inline fn GLEW_ARB_cl_event() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_cl_event)) {
    return GLEW_GET_VAR(__GLEW_ARB_cl_event);
}
pub const GL_ARB_clear_buffer_object = @as(c_int, 1);
// /usr/include/GL/glew.h:4118:9: warning: macro 'glClearBufferData' contains a runtime value, translated to function
pub inline fn glClearBufferData() @TypeOf(GLEW_GET_FUN(__glewClearBufferData)) {
    return GLEW_GET_FUN(__glewClearBufferData);
}
// /usr/include/GL/glew.h:4119:9: warning: macro 'glClearBufferSubData' contains a runtime value, translated to function
pub inline fn glClearBufferSubData() @TypeOf(GLEW_GET_FUN(__glewClearBufferSubData)) {
    return GLEW_GET_FUN(__glewClearBufferSubData);
}
// /usr/include/GL/glew.h:4120:9: warning: macro 'glClearNamedBufferDataEXT' contains a runtime value, translated to function
pub inline fn glClearNamedBufferDataEXT() @TypeOf(GLEW_GET_FUN(__glewClearNamedBufferDataEXT)) {
    return GLEW_GET_FUN(__glewClearNamedBufferDataEXT);
}
// /usr/include/GL/glew.h:4121:9: warning: macro 'glClearNamedBufferSubDataEXT' contains a runtime value, translated to function
pub inline fn glClearNamedBufferSubDataEXT() @TypeOf(GLEW_GET_FUN(__glewClearNamedBufferSubDataEXT)) {
    return GLEW_GET_FUN(__glewClearNamedBufferSubDataEXT);
}
// /usr/include/GL/glew.h:4123:9: warning: macro 'GLEW_ARB_clear_buffer_object' contains a runtime value, translated to function
pub inline fn GLEW_ARB_clear_buffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_clear_buffer_object)) {
    return GLEW_GET_VAR(__GLEW_ARB_clear_buffer_object);
}
pub const GL_ARB_clear_texture = @as(c_int, 1);
pub const GL_CLEAR_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9365, .hex);
// /usr/include/GL/glew.h:4137:9: warning: macro 'glClearTexImage' contains a runtime value, translated to function
pub inline fn glClearTexImage() @TypeOf(GLEW_GET_FUN(__glewClearTexImage)) {
    return GLEW_GET_FUN(__glewClearTexImage);
}
// /usr/include/GL/glew.h:4138:9: warning: macro 'glClearTexSubImage' contains a runtime value, translated to function
pub inline fn glClearTexSubImage() @TypeOf(GLEW_GET_FUN(__glewClearTexSubImage)) {
    return GLEW_GET_FUN(__glewClearTexSubImage);
}
// /usr/include/GL/glew.h:4140:9: warning: macro 'GLEW_ARB_clear_texture' contains a runtime value, translated to function
pub inline fn GLEW_ARB_clear_texture() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_clear_texture)) {
    return GLEW_GET_VAR(__GLEW_ARB_clear_texture);
}
pub const GL_ARB_clip_control = @as(c_int, 1);
pub const GL_CLIP_ORIGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935C, .hex);
pub const GL_CLIP_DEPTH_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935D, .hex);
pub const GL_NEGATIVE_ONE_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935E, .hex);
pub const GL_ZERO_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935F, .hex);
// /usr/include/GL/glew.h:4158:9: warning: macro 'glClipControl' contains a runtime value, translated to function
pub inline fn glClipControl() @TypeOf(GLEW_GET_FUN(__glewClipControl)) {
    return GLEW_GET_FUN(__glewClipControl);
}
// /usr/include/GL/glew.h:4160:9: warning: macro 'GLEW_ARB_clip_control' contains a runtime value, translated to function
pub inline fn GLEW_ARB_clip_control() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_clip_control)) {
    return GLEW_GET_VAR(__GLEW_ARB_clip_control);
}
pub const GL_ARB_color_buffer_float = @as(c_int, 1);
pub const GL_RGBA_FLOAT_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8820, .hex);
pub const GL_CLAMP_VERTEX_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891A, .hex);
pub const GL_CLAMP_FRAGMENT_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891B, .hex);
pub const GL_CLAMP_READ_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891C, .hex);
pub const GL_FIXED_ONLY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891D, .hex);
// /usr/include/GL/glew.h:4177:9: warning: macro 'glClampColorARB' contains a runtime value, translated to function
pub inline fn glClampColorARB() @TypeOf(GLEW_GET_FUN(__glewClampColorARB)) {
    return GLEW_GET_FUN(__glewClampColorARB);
}
// /usr/include/GL/glew.h:4179:9: warning: macro 'GLEW_ARB_color_buffer_float' contains a runtime value, translated to function
pub inline fn GLEW_ARB_color_buffer_float() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_color_buffer_float)) {
    return GLEW_GET_VAR(__GLEW_ARB_color_buffer_float);
}
pub const GL_ARB_compatibility = @as(c_int, 1);
// /usr/include/GL/glew.h:4188:9: warning: macro 'GLEW_ARB_compatibility' contains a runtime value, translated to function
pub inline fn GLEW_ARB_compatibility() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_compatibility)) {
    return GLEW_GET_VAR(__GLEW_ARB_compatibility);
}
pub const GL_ARB_compressed_texture_pixel_storage = @as(c_int, 1);
pub const GL_UNPACK_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9127, .hex);
pub const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9128, .hex);
pub const GL_UNPACK_COMPRESSED_BLOCK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9129, .hex);
pub const GL_UNPACK_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912A, .hex);
pub const GL_PACK_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912B, .hex);
pub const GL_PACK_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912C, .hex);
pub const GL_PACK_COMPRESSED_BLOCK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912D, .hex);
pub const GL_PACK_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912E, .hex);
// /usr/include/GL/glew.h:4206:9: warning: macro 'GLEW_ARB_compressed_texture_pixel_storage' contains a runtime value, translated to function
pub inline fn GLEW_ARB_compressed_texture_pixel_storage() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_compressed_texture_pixel_storage)) {
    return GLEW_GET_VAR(__GLEW_ARB_compressed_texture_pixel_storage);
}
pub const GL_ARB_compute_shader = @as(c_int, 1);
pub const GL_COMPUTE_SHADER_BIT = @as(c_int, 0x00000020);
pub const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8262, .hex);
pub const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8263, .hex);
pub const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8264, .hex);
pub const GL_MAX_COMPUTE_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8265, .hex);
pub const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8266, .hex);
pub const GL_COMPUTE_WORK_GROUP_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8267, .hex);
pub const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EB, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EC, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90ED, .hex);
pub const GL_DISPATCH_INDIRECT_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EE, .hex);
pub const GL_DISPATCH_INDIRECT_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EF, .hex);
pub const GL_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B9, .hex);
pub const GL_MAX_COMPUTE_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BB, .hex);
pub const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BC, .hex);
pub const GL_MAX_COMPUTE_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BD, .hex);
pub const GL_MAX_COMPUTE_WORK_GROUP_COUNT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BE, .hex);
pub const GL_MAX_COMPUTE_WORK_GROUP_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BF, .hex);
// /usr/include/GL/glew.h:4237:9: warning: macro 'glDispatchCompute' contains a runtime value, translated to function
pub inline fn glDispatchCompute() @TypeOf(GLEW_GET_FUN(__glewDispatchCompute)) {
    return GLEW_GET_FUN(__glewDispatchCompute);
}
// /usr/include/GL/glew.h:4238:9: warning: macro 'glDispatchComputeIndirect' contains a runtime value, translated to function
pub inline fn glDispatchComputeIndirect() @TypeOf(GLEW_GET_FUN(__glewDispatchComputeIndirect)) {
    return GLEW_GET_FUN(__glewDispatchComputeIndirect);
}
// /usr/include/GL/glew.h:4240:9: warning: macro 'GLEW_ARB_compute_shader' contains a runtime value, translated to function
pub inline fn GLEW_ARB_compute_shader() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_compute_shader)) {
    return GLEW_GET_VAR(__GLEW_ARB_compute_shader);
}
pub const GL_ARB_compute_variable_group_size = @as(c_int, 1);
pub const GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EB, .hex);
pub const GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BF, .hex);
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9344, .hex);
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9345, .hex);
// /usr/include/GL/glew.h:4256:9: warning: macro 'glDispatchComputeGroupSizeARB' contains a runtime value, translated to function
pub inline fn glDispatchComputeGroupSizeARB() @TypeOf(GLEW_GET_FUN(__glewDispatchComputeGroupSizeARB)) {
    return GLEW_GET_FUN(__glewDispatchComputeGroupSizeARB);
}
// /usr/include/GL/glew.h:4258:9: warning: macro 'GLEW_ARB_compute_variable_group_size' contains a runtime value, translated to function
pub inline fn GLEW_ARB_compute_variable_group_size() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_compute_variable_group_size)) {
    return GLEW_GET_VAR(__GLEW_ARB_compute_variable_group_size);
}
pub const GL_ARB_conditional_render_inverted = @as(c_int, 1);
pub const GL_QUERY_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E17, .hex);
pub const GL_QUERY_NO_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E18, .hex);
pub const GL_QUERY_BY_REGION_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E19, .hex);
pub const GL_QUERY_BY_REGION_NO_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1A, .hex);
// /usr/include/GL/glew.h:4272:9: warning: macro 'GLEW_ARB_conditional_render_inverted' contains a runtime value, translated to function
pub inline fn GLEW_ARB_conditional_render_inverted() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_conditional_render_inverted)) {
    return GLEW_GET_VAR(__GLEW_ARB_conditional_render_inverted);
}
pub const GL_ARB_conservative_depth = @as(c_int, 1);
// /usr/include/GL/glew.h:4281:9: warning: macro 'GLEW_ARB_conservative_depth' contains a runtime value, translated to function
pub inline fn GLEW_ARB_conservative_depth() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_conservative_depth)) {
    return GLEW_GET_VAR(__GLEW_ARB_conservative_depth);
}
pub const GL_ARB_copy_buffer = @as(c_int, 1);
pub const GL_COPY_READ_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hex);
pub const GL_COPY_WRITE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hex);
// /usr/include/GL/glew.h:4295:9: warning: macro 'glCopyBufferSubData' contains a runtime value, translated to function
pub inline fn glCopyBufferSubData() @TypeOf(GLEW_GET_FUN(__glewCopyBufferSubData)) {
    return GLEW_GET_FUN(__glewCopyBufferSubData);
}
// /usr/include/GL/glew.h:4297:9: warning: macro 'GLEW_ARB_copy_buffer' contains a runtime value, translated to function
pub inline fn GLEW_ARB_copy_buffer() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_copy_buffer)) {
    return GLEW_GET_VAR(__GLEW_ARB_copy_buffer);
}
pub const GL_ARB_copy_image = @as(c_int, 1);
// /usr/include/GL/glew.h:4308:9: warning: macro 'glCopyImageSubData' contains a runtime value, translated to function
pub inline fn glCopyImageSubData() @TypeOf(GLEW_GET_FUN(__glewCopyImageSubData)) {
    return GLEW_GET_FUN(__glewCopyImageSubData);
}
// /usr/include/GL/glew.h:4310:9: warning: macro 'GLEW_ARB_copy_image' contains a runtime value, translated to function
pub inline fn GLEW_ARB_copy_image() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_copy_image)) {
    return GLEW_GET_VAR(__GLEW_ARB_copy_image);
}
pub const GL_ARB_cull_distance = @as(c_int, 1);
pub const GL_MAX_CULL_DISTANCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F9, .hex);
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FA, .hex);
// /usr/include/GL/glew.h:4322:9: warning: macro 'GLEW_ARB_cull_distance' contains a runtime value, translated to function
pub inline fn GLEW_ARB_cull_distance() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_cull_distance)) {
    return GLEW_GET_VAR(__GLEW_ARB_cull_distance);
}
pub const GL_ARB_debug_output = @as(c_int, 1);
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8242, .hex);
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8243, .hex);
pub const GL_DEBUG_CALLBACK_FUNCTION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8244, .hex);
pub const GL_DEBUG_CALLBACK_USER_PARAM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8245, .hex);
pub const GL_DEBUG_SOURCE_API_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8246, .hex);
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8247, .hex);
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8248, .hex);
pub const GL_DEBUG_SOURCE_THIRD_PARTY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8249, .hex);
pub const GL_DEBUG_SOURCE_APPLICATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824A, .hex);
pub const GL_DEBUG_SOURCE_OTHER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824B, .hex);
pub const GL_DEBUG_TYPE_ERROR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824C, .hex);
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824D, .hex);
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824E, .hex);
pub const GL_DEBUG_TYPE_PORTABILITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824F, .hex);
pub const GL_DEBUG_TYPE_PERFORMANCE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8250, .hex);
pub const GL_DEBUG_TYPE_OTHER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8251, .hex);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hex);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hex);
pub const GL_DEBUG_LOGGED_MESSAGES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hex);
pub const GL_DEBUG_SEVERITY_HIGH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hex);
pub const GL_DEBUG_SEVERITY_MEDIUM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hex);
pub const GL_DEBUG_SEVERITY_LOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hex);
// /usr/include/GL/glew.h:4361:9: warning: macro 'glDebugMessageCallbackARB' contains a runtime value, translated to function
pub inline fn glDebugMessageCallbackARB() @TypeOf(GLEW_GET_FUN(__glewDebugMessageCallbackARB)) {
    return GLEW_GET_FUN(__glewDebugMessageCallbackARB);
}
// /usr/include/GL/glew.h:4362:9: warning: macro 'glDebugMessageControlARB' contains a runtime value, translated to function
pub inline fn glDebugMessageControlARB() @TypeOf(GLEW_GET_FUN(__glewDebugMessageControlARB)) {
    return GLEW_GET_FUN(__glewDebugMessageControlARB);
}
// /usr/include/GL/glew.h:4363:9: warning: macro 'glDebugMessageInsertARB' contains a runtime value, translated to function
pub inline fn glDebugMessageInsertARB() @TypeOf(GLEW_GET_FUN(__glewDebugMessageInsertARB)) {
    return GLEW_GET_FUN(__glewDebugMessageInsertARB);
}
// /usr/include/GL/glew.h:4364:9: warning: macro 'glGetDebugMessageLogARB' contains a runtime value, translated to function
pub inline fn glGetDebugMessageLogARB() @TypeOf(GLEW_GET_FUN(__glewGetDebugMessageLogARB)) {
    return GLEW_GET_FUN(__glewGetDebugMessageLogARB);
}
// /usr/include/GL/glew.h:4366:9: warning: macro 'GLEW_ARB_debug_output' contains a runtime value, translated to function
pub inline fn GLEW_ARB_debug_output() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_debug_output)) {
    return GLEW_GET_VAR(__GLEW_ARB_debug_output);
}
pub const GL_ARB_depth_buffer_float = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAC, .hex);
pub const GL_DEPTH32F_STENCIL8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAD, .hex);
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAD, .hex);
// /usr/include/GL/glew.h:4379:9: warning: macro 'GLEW_ARB_depth_buffer_float' contains a runtime value, translated to function
pub inline fn GLEW_ARB_depth_buffer_float() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_depth_buffer_float)) {
    return GLEW_GET_VAR(__GLEW_ARB_depth_buffer_float);
}
pub const GL_ARB_depth_clamp = @as(c_int, 1);
pub const GL_DEPTH_CLAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864F, .hex);
// /usr/include/GL/glew.h:4390:9: warning: macro 'GLEW_ARB_depth_clamp' contains a runtime value, translated to function
pub inline fn GLEW_ARB_depth_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_depth_clamp)) {
    return GLEW_GET_VAR(__GLEW_ARB_depth_clamp);
}
pub const GL_ARB_depth_texture = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hex);
pub const GL_DEPTH_COMPONENT24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hex);
pub const GL_DEPTH_COMPONENT32_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hex);
pub const GL_TEXTURE_DEPTH_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884A, .hex);
pub const GL_DEPTH_TEXTURE_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884B, .hex);
// /usr/include/GL/glew.h:4405:9: warning: macro 'GLEW_ARB_depth_texture' contains a runtime value, translated to function
pub inline fn GLEW_ARB_depth_texture() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_depth_texture)) {
    return GLEW_GET_VAR(__GLEW_ARB_depth_texture);
}
pub const GL_ARB_derivative_control = @as(c_int, 1);
// /usr/include/GL/glew.h:4414:9: warning: macro 'GLEW_ARB_derivative_control' contains a runtime value, translated to function
pub inline fn GLEW_ARB_derivative_control() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_derivative_control)) {
    return GLEW_GET_VAR(__GLEW_ARB_derivative_control);
}
pub const GL_ARB_direct_state_access = @as(c_int, 1);
pub const GL_TEXTURE_TARGET = @as(c_int, 0x1006);
pub const GL_QUERY_TARGET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EA, .hex);
// /usr/include/GL/glew.h:4524:9: warning: macro 'glBindTextureUnit' contains a runtime value, translated to function
pub inline fn glBindTextureUnit() @TypeOf(GLEW_GET_FUN(__glewBindTextureUnit)) {
    return GLEW_GET_FUN(__glewBindTextureUnit);
}
// /usr/include/GL/glew.h:4525:9: warning: macro 'glBlitNamedFramebuffer' contains a runtime value, translated to function
pub inline fn glBlitNamedFramebuffer() @TypeOf(GLEW_GET_FUN(__glewBlitNamedFramebuffer)) {
    return GLEW_GET_FUN(__glewBlitNamedFramebuffer);
}
// /usr/include/GL/glew.h:4526:9: warning: macro 'glCheckNamedFramebufferStatus' contains a runtime value, translated to function
pub inline fn glCheckNamedFramebufferStatus() @TypeOf(GLEW_GET_FUN(__glewCheckNamedFramebufferStatus)) {
    return GLEW_GET_FUN(__glewCheckNamedFramebufferStatus);
}
// /usr/include/GL/glew.h:4527:9: warning: macro 'glClearNamedBufferData' contains a runtime value, translated to function
pub inline fn glClearNamedBufferData() @TypeOf(GLEW_GET_FUN(__glewClearNamedBufferData)) {
    return GLEW_GET_FUN(__glewClearNamedBufferData);
}
// /usr/include/GL/glew.h:4528:9: warning: macro 'glClearNamedBufferSubData' contains a runtime value, translated to function
pub inline fn glClearNamedBufferSubData() @TypeOf(GLEW_GET_FUN(__glewClearNamedBufferSubData)) {
    return GLEW_GET_FUN(__glewClearNamedBufferSubData);
}
// /usr/include/GL/glew.h:4529:9: warning: macro 'glClearNamedFramebufferfi' contains a runtime value, translated to function
pub inline fn glClearNamedFramebufferfi() @TypeOf(GLEW_GET_FUN(__glewClearNamedFramebufferfi)) {
    return GLEW_GET_FUN(__glewClearNamedFramebufferfi);
}
// /usr/include/GL/glew.h:4530:9: warning: macro 'glClearNamedFramebufferfv' contains a runtime value, translated to function
pub inline fn glClearNamedFramebufferfv() @TypeOf(GLEW_GET_FUN(__glewClearNamedFramebufferfv)) {
    return GLEW_GET_FUN(__glewClearNamedFramebufferfv);
}
// /usr/include/GL/glew.h:4531:9: warning: macro 'glClearNamedFramebufferiv' contains a runtime value, translated to function
pub inline fn glClearNamedFramebufferiv() @TypeOf(GLEW_GET_FUN(__glewClearNamedFramebufferiv)) {
    return GLEW_GET_FUN(__glewClearNamedFramebufferiv);
}
// /usr/include/GL/glew.h:4532:9: warning: macro 'glClearNamedFramebufferuiv' contains a runtime value, translated to function
pub inline fn glClearNamedFramebufferuiv() @TypeOf(GLEW_GET_FUN(__glewClearNamedFramebufferuiv)) {
    return GLEW_GET_FUN(__glewClearNamedFramebufferuiv);
}
// /usr/include/GL/glew.h:4533:9: warning: macro 'glCompressedTextureSubImage1D' contains a runtime value, translated to function
pub inline fn glCompressedTextureSubImage1D() @TypeOf(GLEW_GET_FUN(__glewCompressedTextureSubImage1D)) {
    return GLEW_GET_FUN(__glewCompressedTextureSubImage1D);
}
// /usr/include/GL/glew.h:4534:9: warning: macro 'glCompressedTextureSubImage2D' contains a runtime value, translated to function
pub inline fn glCompressedTextureSubImage2D() @TypeOf(GLEW_GET_FUN(__glewCompressedTextureSubImage2D)) {
    return GLEW_GET_FUN(__glewCompressedTextureSubImage2D);
}
// /usr/include/GL/glew.h:4535:9: warning: macro 'glCompressedTextureSubImage3D' contains a runtime value, translated to function
pub inline fn glCompressedTextureSubImage3D() @TypeOf(GLEW_GET_FUN(__glewCompressedTextureSubImage3D)) {
    return GLEW_GET_FUN(__glewCompressedTextureSubImage3D);
}
// /usr/include/GL/glew.h:4536:9: warning: macro 'glCopyNamedBufferSubData' contains a runtime value, translated to function
pub inline fn glCopyNamedBufferSubData() @TypeOf(GLEW_GET_FUN(__glewCopyNamedBufferSubData)) {
    return GLEW_GET_FUN(__glewCopyNamedBufferSubData);
}
// /usr/include/GL/glew.h:4537:9: warning: macro 'glCopyTextureSubImage1D' contains a runtime value, translated to function
pub inline fn glCopyTextureSubImage1D() @TypeOf(GLEW_GET_FUN(__glewCopyTextureSubImage1D)) {
    return GLEW_GET_FUN(__glewCopyTextureSubImage1D);
}
// /usr/include/GL/glew.h:4538:9: warning: macro 'glCopyTextureSubImage2D' contains a runtime value, translated to function
pub inline fn glCopyTextureSubImage2D() @TypeOf(GLEW_GET_FUN(__glewCopyTextureSubImage2D)) {
    return GLEW_GET_FUN(__glewCopyTextureSubImage2D);
}
// /usr/include/GL/glew.h:4539:9: warning: macro 'glCopyTextureSubImage3D' contains a runtime value, translated to function
pub inline fn glCopyTextureSubImage3D() @TypeOf(GLEW_GET_FUN(__glewCopyTextureSubImage3D)) {
    return GLEW_GET_FUN(__glewCopyTextureSubImage3D);
}
// /usr/include/GL/glew.h:4540:9: warning: macro 'glCreateBuffers' contains a runtime value, translated to function
pub inline fn glCreateBuffers() @TypeOf(GLEW_GET_FUN(__glewCreateBuffers)) {
    return GLEW_GET_FUN(__glewCreateBuffers);
}
// /usr/include/GL/glew.h:4541:9: warning: macro 'glCreateFramebuffers' contains a runtime value, translated to function
pub inline fn glCreateFramebuffers() @TypeOf(GLEW_GET_FUN(__glewCreateFramebuffers)) {
    return GLEW_GET_FUN(__glewCreateFramebuffers);
}
// /usr/include/GL/glew.h:4542:9: warning: macro 'glCreateProgramPipelines' contains a runtime value, translated to function
pub inline fn glCreateProgramPipelines() @TypeOf(GLEW_GET_FUN(__glewCreateProgramPipelines)) {
    return GLEW_GET_FUN(__glewCreateProgramPipelines);
}
// /usr/include/GL/glew.h:4543:9: warning: macro 'glCreateQueries' contains a runtime value, translated to function
pub inline fn glCreateQueries() @TypeOf(GLEW_GET_FUN(__glewCreateQueries)) {
    return GLEW_GET_FUN(__glewCreateQueries);
}
// /usr/include/GL/glew.h:4544:9: warning: macro 'glCreateRenderbuffers' contains a runtime value, translated to function
pub inline fn glCreateRenderbuffers() @TypeOf(GLEW_GET_FUN(__glewCreateRenderbuffers)) {
    return GLEW_GET_FUN(__glewCreateRenderbuffers);
}
// /usr/include/GL/glew.h:4545:9: warning: macro 'glCreateSamplers' contains a runtime value, translated to function
pub inline fn glCreateSamplers() @TypeOf(GLEW_GET_FUN(__glewCreateSamplers)) {
    return GLEW_GET_FUN(__glewCreateSamplers);
}
// /usr/include/GL/glew.h:4546:9: warning: macro 'glCreateTextures' contains a runtime value, translated to function
pub inline fn glCreateTextures() @TypeOf(GLEW_GET_FUN(__glewCreateTextures)) {
    return GLEW_GET_FUN(__glewCreateTextures);
}
// /usr/include/GL/glew.h:4547:9: warning: macro 'glCreateTransformFeedbacks' contains a runtime value, translated to function
pub inline fn glCreateTransformFeedbacks() @TypeOf(GLEW_GET_FUN(__glewCreateTransformFeedbacks)) {
    return GLEW_GET_FUN(__glewCreateTransformFeedbacks);
}
// /usr/include/GL/glew.h:4548:9: warning: macro 'glCreateVertexArrays' contains a runtime value, translated to function
pub inline fn glCreateVertexArrays() @TypeOf(GLEW_GET_FUN(__glewCreateVertexArrays)) {
    return GLEW_GET_FUN(__glewCreateVertexArrays);
}
// /usr/include/GL/glew.h:4549:9: warning: macro 'glDisableVertexArrayAttrib' contains a runtime value, translated to function
pub inline fn glDisableVertexArrayAttrib() @TypeOf(GLEW_GET_FUN(__glewDisableVertexArrayAttrib)) {
    return GLEW_GET_FUN(__glewDisableVertexArrayAttrib);
}
// /usr/include/GL/glew.h:4550:9: warning: macro 'glEnableVertexArrayAttrib' contains a runtime value, translated to function
pub inline fn glEnableVertexArrayAttrib() @TypeOf(GLEW_GET_FUN(__glewEnableVertexArrayAttrib)) {
    return GLEW_GET_FUN(__glewEnableVertexArrayAttrib);
}
// /usr/include/GL/glew.h:4551:9: warning: macro 'glFlushMappedNamedBufferRange' contains a runtime value, translated to function
pub inline fn glFlushMappedNamedBufferRange() @TypeOf(GLEW_GET_FUN(__glewFlushMappedNamedBufferRange)) {
    return GLEW_GET_FUN(__glewFlushMappedNamedBufferRange);
}
// /usr/include/GL/glew.h:4552:9: warning: macro 'glGenerateTextureMipmap' contains a runtime value, translated to function
pub inline fn glGenerateTextureMipmap() @TypeOf(GLEW_GET_FUN(__glewGenerateTextureMipmap)) {
    return GLEW_GET_FUN(__glewGenerateTextureMipmap);
}
// /usr/include/GL/glew.h:4553:9: warning: macro 'glGetCompressedTextureImage' contains a runtime value, translated to function
pub inline fn glGetCompressedTextureImage() @TypeOf(GLEW_GET_FUN(__glewGetCompressedTextureImage)) {
    return GLEW_GET_FUN(__glewGetCompressedTextureImage);
}
// /usr/include/GL/glew.h:4554:9: warning: macro 'glGetNamedBufferParameteri64v' contains a runtime value, translated to function
pub inline fn glGetNamedBufferParameteri64v() @TypeOf(GLEW_GET_FUN(__glewGetNamedBufferParameteri64v)) {
    return GLEW_GET_FUN(__glewGetNamedBufferParameteri64v);
}
// /usr/include/GL/glew.h:4555:9: warning: macro 'glGetNamedBufferParameteriv' contains a runtime value, translated to function
pub inline fn glGetNamedBufferParameteriv() @TypeOf(GLEW_GET_FUN(__glewGetNamedBufferParameteriv)) {
    return GLEW_GET_FUN(__glewGetNamedBufferParameteriv);
}
// /usr/include/GL/glew.h:4556:9: warning: macro 'glGetNamedBufferPointerv' contains a runtime value, translated to function
pub inline fn glGetNamedBufferPointerv() @TypeOf(GLEW_GET_FUN(__glewGetNamedBufferPointerv)) {
    return GLEW_GET_FUN(__glewGetNamedBufferPointerv);
}
// /usr/include/GL/glew.h:4557:9: warning: macro 'glGetNamedBufferSubData' contains a runtime value, translated to function
pub inline fn glGetNamedBufferSubData() @TypeOf(GLEW_GET_FUN(__glewGetNamedBufferSubData)) {
    return GLEW_GET_FUN(__glewGetNamedBufferSubData);
}
// /usr/include/GL/glew.h:4558:9: warning: macro 'glGetNamedFramebufferAttachmentParameteriv' contains a runtime value, translated to function
pub inline fn glGetNamedFramebufferAttachmentParameteriv() @TypeOf(GLEW_GET_FUN(__glewGetNamedFramebufferAttachmentParameteriv)) {
    return GLEW_GET_FUN(__glewGetNamedFramebufferAttachmentParameteriv);
}
// /usr/include/GL/glew.h:4559:9: warning: macro 'glGetNamedFramebufferParameteriv' contains a runtime value, translated to function
pub inline fn glGetNamedFramebufferParameteriv() @TypeOf(GLEW_GET_FUN(__glewGetNamedFramebufferParameteriv)) {
    return GLEW_GET_FUN(__glewGetNamedFramebufferParameteriv);
}
// /usr/include/GL/glew.h:4560:9: warning: macro 'glGetNamedRenderbufferParameteriv' contains a runtime value, translated to function
pub inline fn glGetNamedRenderbufferParameteriv() @TypeOf(GLEW_GET_FUN(__glewGetNamedRenderbufferParameteriv)) {
    return GLEW_GET_FUN(__glewGetNamedRenderbufferParameteriv);
}
// /usr/include/GL/glew.h:4561:9: warning: macro 'glGetQueryBufferObjecti64v' contains a runtime value, translated to function
pub inline fn glGetQueryBufferObjecti64v() @TypeOf(GLEW_GET_FUN(__glewGetQueryBufferObjecti64v)) {
    return GLEW_GET_FUN(__glewGetQueryBufferObjecti64v);
}
// /usr/include/GL/glew.h:4562:9: warning: macro 'glGetQueryBufferObjectiv' contains a runtime value, translated to function
pub inline fn glGetQueryBufferObjectiv() @TypeOf(GLEW_GET_FUN(__glewGetQueryBufferObjectiv)) {
    return GLEW_GET_FUN(__glewGetQueryBufferObjectiv);
}
// /usr/include/GL/glew.h:4563:9: warning: macro 'glGetQueryBufferObjectui64v' contains a runtime value, translated to function
pub inline fn glGetQueryBufferObjectui64v() @TypeOf(GLEW_GET_FUN(__glewGetQueryBufferObjectui64v)) {
    return GLEW_GET_FUN(__glewGetQueryBufferObjectui64v);
}
// /usr/include/GL/glew.h:4564:9: warning: macro 'glGetQueryBufferObjectuiv' contains a runtime value, translated to function
pub inline fn glGetQueryBufferObjectuiv() @TypeOf(GLEW_GET_FUN(__glewGetQueryBufferObjectuiv)) {
    return GLEW_GET_FUN(__glewGetQueryBufferObjectuiv);
}
// /usr/include/GL/glew.h:4565:9: warning: macro 'glGetTextureImage' contains a runtime value, translated to function
pub inline fn glGetTextureImage() @TypeOf(GLEW_GET_FUN(__glewGetTextureImage)) {
    return GLEW_GET_FUN(__glewGetTextureImage);
}
// /usr/include/GL/glew.h:4566:9: warning: macro 'glGetTextureLevelParameterfv' contains a runtime value, translated to function
pub inline fn glGetTextureLevelParameterfv() @TypeOf(GLEW_GET_FUN(__glewGetTextureLevelParameterfv)) {
    return GLEW_GET_FUN(__glewGetTextureLevelParameterfv);
}
// /usr/include/GL/glew.h:4567:9: warning: macro 'glGetTextureLevelParameteriv' contains a runtime value, translated to function
pub inline fn glGetTextureLevelParameteriv() @TypeOf(GLEW_GET_FUN(__glewGetTextureLevelParameteriv)) {
    return GLEW_GET_FUN(__glewGetTextureLevelParameteriv);
}
// /usr/include/GL/glew.h:4568:9: warning: macro 'glGetTextureParameterIiv' contains a runtime value, translated to function
pub inline fn glGetTextureParameterIiv() @TypeOf(GLEW_GET_FUN(__glewGetTextureParameterIiv)) {
    return GLEW_GET_FUN(__glewGetTextureParameterIiv);
}
// /usr/include/GL/glew.h:4569:9: warning: macro 'glGetTextureParameterIuiv' contains a runtime value, translated to function
pub inline fn glGetTextureParameterIuiv() @TypeOf(GLEW_GET_FUN(__glewGetTextureParameterIuiv)) {
    return GLEW_GET_FUN(__glewGetTextureParameterIuiv);
}
// /usr/include/GL/glew.h:4570:9: warning: macro 'glGetTextureParameterfv' contains a runtime value, translated to function
pub inline fn glGetTextureParameterfv() @TypeOf(GLEW_GET_FUN(__glewGetTextureParameterfv)) {
    return GLEW_GET_FUN(__glewGetTextureParameterfv);
}
// /usr/include/GL/glew.h:4571:9: warning: macro 'glGetTextureParameteriv' contains a runtime value, translated to function
pub inline fn glGetTextureParameteriv() @TypeOf(GLEW_GET_FUN(__glewGetTextureParameteriv)) {
    return GLEW_GET_FUN(__glewGetTextureParameteriv);
}
// /usr/include/GL/glew.h:4572:9: warning: macro 'glGetTransformFeedbacki64_v' contains a runtime value, translated to function
pub inline fn glGetTransformFeedbacki64_v() @TypeOf(GLEW_GET_FUN(__glewGetTransformFeedbacki64_v)) {
    return GLEW_GET_FUN(__glewGetTransformFeedbacki64_v);
}
// /usr/include/GL/glew.h:4573:9: warning: macro 'glGetTransformFeedbacki_v' contains a runtime value, translated to function
pub inline fn glGetTransformFeedbacki_v() @TypeOf(GLEW_GET_FUN(__glewGetTransformFeedbacki_v)) {
    return GLEW_GET_FUN(__glewGetTransformFeedbacki_v);
}
// /usr/include/GL/glew.h:4574:9: warning: macro 'glGetTransformFeedbackiv' contains a runtime value, translated to function
pub inline fn glGetTransformFeedbackiv() @TypeOf(GLEW_GET_FUN(__glewGetTransformFeedbackiv)) {
    return GLEW_GET_FUN(__glewGetTransformFeedbackiv);
}
// /usr/include/GL/glew.h:4575:9: warning: macro 'glGetVertexArrayIndexed64iv' contains a runtime value, translated to function
pub inline fn glGetVertexArrayIndexed64iv() @TypeOf(GLEW_GET_FUN(__glewGetVertexArrayIndexed64iv)) {
    return GLEW_GET_FUN(__glewGetVertexArrayIndexed64iv);
}
// /usr/include/GL/glew.h:4576:9: warning: macro 'glGetVertexArrayIndexediv' contains a runtime value, translated to function
pub inline fn glGetVertexArrayIndexediv() @TypeOf(GLEW_GET_FUN(__glewGetVertexArrayIndexediv)) {
    return GLEW_GET_FUN(__glewGetVertexArrayIndexediv);
}
// /usr/include/GL/glew.h:4577:9: warning: macro 'glGetVertexArrayiv' contains a runtime value, translated to function
pub inline fn glGetVertexArrayiv() @TypeOf(GLEW_GET_FUN(__glewGetVertexArrayiv)) {
    return GLEW_GET_FUN(__glewGetVertexArrayiv);
}
// /usr/include/GL/glew.h:4578:9: warning: macro 'glInvalidateNamedFramebufferData' contains a runtime value, translated to function
pub inline fn glInvalidateNamedFramebufferData() @TypeOf(GLEW_GET_FUN(__glewInvalidateNamedFramebufferData)) {
    return GLEW_GET_FUN(__glewInvalidateNamedFramebufferData);
}
// /usr/include/GL/glew.h:4579:9: warning: macro 'glInvalidateNamedFramebufferSubData' contains a runtime value, translated to function
pub inline fn glInvalidateNamedFramebufferSubData() @TypeOf(GLEW_GET_FUN(__glewInvalidateNamedFramebufferSubData)) {
    return GLEW_GET_FUN(__glewInvalidateNamedFramebufferSubData);
}
// /usr/include/GL/glew.h:4580:9: warning: macro 'glMapNamedBuffer' contains a runtime value, translated to function
pub inline fn glMapNamedBuffer() @TypeOf(GLEW_GET_FUN(__glewMapNamedBuffer)) {
    return GLEW_GET_FUN(__glewMapNamedBuffer);
}
// /usr/include/GL/glew.h:4581:9: warning: macro 'glMapNamedBufferRange' contains a runtime value, translated to function
pub inline fn glMapNamedBufferRange() @TypeOf(GLEW_GET_FUN(__glewMapNamedBufferRange)) {
    return GLEW_GET_FUN(__glewMapNamedBufferRange);
}
// /usr/include/GL/glew.h:4582:9: warning: macro 'glNamedBufferData' contains a runtime value, translated to function
pub inline fn glNamedBufferData() @TypeOf(GLEW_GET_FUN(__glewNamedBufferData)) {
    return GLEW_GET_FUN(__glewNamedBufferData);
}
// /usr/include/GL/glew.h:4583:9: warning: macro 'glNamedBufferStorage' contains a runtime value, translated to function
pub inline fn glNamedBufferStorage() @TypeOf(GLEW_GET_FUN(__glewNamedBufferStorage)) {
    return GLEW_GET_FUN(__glewNamedBufferStorage);
}
// /usr/include/GL/glew.h:4584:9: warning: macro 'glNamedBufferSubData' contains a runtime value, translated to function
pub inline fn glNamedBufferSubData() @TypeOf(GLEW_GET_FUN(__glewNamedBufferSubData)) {
    return GLEW_GET_FUN(__glewNamedBufferSubData);
}
// /usr/include/GL/glew.h:4585:9: warning: macro 'glNamedFramebufferDrawBuffer' contains a runtime value, translated to function
pub inline fn glNamedFramebufferDrawBuffer() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferDrawBuffer)) {
    return GLEW_GET_FUN(__glewNamedFramebufferDrawBuffer);
}
// /usr/include/GL/glew.h:4586:9: warning: macro 'glNamedFramebufferDrawBuffers' contains a runtime value, translated to function
pub inline fn glNamedFramebufferDrawBuffers() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferDrawBuffers)) {
    return GLEW_GET_FUN(__glewNamedFramebufferDrawBuffers);
}
// /usr/include/GL/glew.h:4587:9: warning: macro 'glNamedFramebufferParameteri' contains a runtime value, translated to function
pub inline fn glNamedFramebufferParameteri() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferParameteri)) {
    return GLEW_GET_FUN(__glewNamedFramebufferParameteri);
}
// /usr/include/GL/glew.h:4588:9: warning: macro 'glNamedFramebufferReadBuffer' contains a runtime value, translated to function
pub inline fn glNamedFramebufferReadBuffer() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferReadBuffer)) {
    return GLEW_GET_FUN(__glewNamedFramebufferReadBuffer);
}
// /usr/include/GL/glew.h:4589:9: warning: macro 'glNamedFramebufferRenderbuffer' contains a runtime value, translated to function
pub inline fn glNamedFramebufferRenderbuffer() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferRenderbuffer)) {
    return GLEW_GET_FUN(__glewNamedFramebufferRenderbuffer);
}
// /usr/include/GL/glew.h:4590:9: warning: macro 'glNamedFramebufferTexture' contains a runtime value, translated to function
pub inline fn glNamedFramebufferTexture() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferTexture)) {
    return GLEW_GET_FUN(__glewNamedFramebufferTexture);
}
// /usr/include/GL/glew.h:4591:9: warning: macro 'glNamedFramebufferTextureLayer' contains a runtime value, translated to function
pub inline fn glNamedFramebufferTextureLayer() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferTextureLayer)) {
    return GLEW_GET_FUN(__glewNamedFramebufferTextureLayer);
}
// /usr/include/GL/glew.h:4592:9: warning: macro 'glNamedRenderbufferStorage' contains a runtime value, translated to function
pub inline fn glNamedRenderbufferStorage() @TypeOf(GLEW_GET_FUN(__glewNamedRenderbufferStorage)) {
    return GLEW_GET_FUN(__glewNamedRenderbufferStorage);
}
// /usr/include/GL/glew.h:4593:9: warning: macro 'glNamedRenderbufferStorageMultisample' contains a runtime value, translated to function
pub inline fn glNamedRenderbufferStorageMultisample() @TypeOf(GLEW_GET_FUN(__glewNamedRenderbufferStorageMultisample)) {
    return GLEW_GET_FUN(__glewNamedRenderbufferStorageMultisample);
}
// /usr/include/GL/glew.h:4594:9: warning: macro 'glTextureBuffer' contains a runtime value, translated to function
pub inline fn glTextureBuffer() @TypeOf(GLEW_GET_FUN(__glewTextureBuffer)) {
    return GLEW_GET_FUN(__glewTextureBuffer);
}
// /usr/include/GL/glew.h:4595:9: warning: macro 'glTextureBufferRange' contains a runtime value, translated to function
pub inline fn glTextureBufferRange() @TypeOf(GLEW_GET_FUN(__glewTextureBufferRange)) {
    return GLEW_GET_FUN(__glewTextureBufferRange);
}
// /usr/include/GL/glew.h:4596:9: warning: macro 'glTextureParameterIiv' contains a runtime value, translated to function
pub inline fn glTextureParameterIiv() @TypeOf(GLEW_GET_FUN(__glewTextureParameterIiv)) {
    return GLEW_GET_FUN(__glewTextureParameterIiv);
}
// /usr/include/GL/glew.h:4597:9: warning: macro 'glTextureParameterIuiv' contains a runtime value, translated to function
pub inline fn glTextureParameterIuiv() @TypeOf(GLEW_GET_FUN(__glewTextureParameterIuiv)) {
    return GLEW_GET_FUN(__glewTextureParameterIuiv);
}
// /usr/include/GL/glew.h:4598:9: warning: macro 'glTextureParameterf' contains a runtime value, translated to function
pub inline fn glTextureParameterf() @TypeOf(GLEW_GET_FUN(__glewTextureParameterf)) {
    return GLEW_GET_FUN(__glewTextureParameterf);
}
// /usr/include/GL/glew.h:4599:9: warning: macro 'glTextureParameterfv' contains a runtime value, translated to function
pub inline fn glTextureParameterfv() @TypeOf(GLEW_GET_FUN(__glewTextureParameterfv)) {
    return GLEW_GET_FUN(__glewTextureParameterfv);
}
// /usr/include/GL/glew.h:4600:9: warning: macro 'glTextureParameteri' contains a runtime value, translated to function
pub inline fn glTextureParameteri() @TypeOf(GLEW_GET_FUN(__glewTextureParameteri)) {
    return GLEW_GET_FUN(__glewTextureParameteri);
}
// /usr/include/GL/glew.h:4601:9: warning: macro 'glTextureParameteriv' contains a runtime value, translated to function
pub inline fn glTextureParameteriv() @TypeOf(GLEW_GET_FUN(__glewTextureParameteriv)) {
    return GLEW_GET_FUN(__glewTextureParameteriv);
}
// /usr/include/GL/glew.h:4602:9: warning: macro 'glTextureStorage1D' contains a runtime value, translated to function
pub inline fn glTextureStorage1D() @TypeOf(GLEW_GET_FUN(__glewTextureStorage1D)) {
    return GLEW_GET_FUN(__glewTextureStorage1D);
}
// /usr/include/GL/glew.h:4603:9: warning: macro 'glTextureStorage2D' contains a runtime value, translated to function
pub inline fn glTextureStorage2D() @TypeOf(GLEW_GET_FUN(__glewTextureStorage2D)) {
    return GLEW_GET_FUN(__glewTextureStorage2D);
}
// /usr/include/GL/glew.h:4604:9: warning: macro 'glTextureStorage2DMultisample' contains a runtime value, translated to function
pub inline fn glTextureStorage2DMultisample() @TypeOf(GLEW_GET_FUN(__glewTextureStorage2DMultisample)) {
    return GLEW_GET_FUN(__glewTextureStorage2DMultisample);
}
// /usr/include/GL/glew.h:4605:9: warning: macro 'glTextureStorage3D' contains a runtime value, translated to function
pub inline fn glTextureStorage3D() @TypeOf(GLEW_GET_FUN(__glewTextureStorage3D)) {
    return GLEW_GET_FUN(__glewTextureStorage3D);
}
// /usr/include/GL/glew.h:4606:9: warning: macro 'glTextureStorage3DMultisample' contains a runtime value, translated to function
pub inline fn glTextureStorage3DMultisample() @TypeOf(GLEW_GET_FUN(__glewTextureStorage3DMultisample)) {
    return GLEW_GET_FUN(__glewTextureStorage3DMultisample);
}
// /usr/include/GL/glew.h:4607:9: warning: macro 'glTextureSubImage1D' contains a runtime value, translated to function
pub inline fn glTextureSubImage1D() @TypeOf(GLEW_GET_FUN(__glewTextureSubImage1D)) {
    return GLEW_GET_FUN(__glewTextureSubImage1D);
}
// /usr/include/GL/glew.h:4608:9: warning: macro 'glTextureSubImage2D' contains a runtime value, translated to function
pub inline fn glTextureSubImage2D() @TypeOf(GLEW_GET_FUN(__glewTextureSubImage2D)) {
    return GLEW_GET_FUN(__glewTextureSubImage2D);
}
// /usr/include/GL/glew.h:4609:9: warning: macro 'glTextureSubImage3D' contains a runtime value, translated to function
pub inline fn glTextureSubImage3D() @TypeOf(GLEW_GET_FUN(__glewTextureSubImage3D)) {
    return GLEW_GET_FUN(__glewTextureSubImage3D);
}
// /usr/include/GL/glew.h:4610:9: warning: macro 'glTransformFeedbackBufferBase' contains a runtime value, translated to function
pub inline fn glTransformFeedbackBufferBase() @TypeOf(GLEW_GET_FUN(__glewTransformFeedbackBufferBase)) {
    return GLEW_GET_FUN(__glewTransformFeedbackBufferBase);
}
// /usr/include/GL/glew.h:4611:9: warning: macro 'glTransformFeedbackBufferRange' contains a runtime value, translated to function
pub inline fn glTransformFeedbackBufferRange() @TypeOf(GLEW_GET_FUN(__glewTransformFeedbackBufferRange)) {
    return GLEW_GET_FUN(__glewTransformFeedbackBufferRange);
}
// /usr/include/GL/glew.h:4612:9: warning: macro 'glUnmapNamedBuffer' contains a runtime value, translated to function
pub inline fn glUnmapNamedBuffer() @TypeOf(GLEW_GET_FUN(__glewUnmapNamedBuffer)) {
    return GLEW_GET_FUN(__glewUnmapNamedBuffer);
}
// /usr/include/GL/glew.h:4613:9: warning: macro 'glVertexArrayAttribBinding' contains a runtime value, translated to function
pub inline fn glVertexArrayAttribBinding() @TypeOf(GLEW_GET_FUN(__glewVertexArrayAttribBinding)) {
    return GLEW_GET_FUN(__glewVertexArrayAttribBinding);
}
// /usr/include/GL/glew.h:4614:9: warning: macro 'glVertexArrayAttribFormat' contains a runtime value, translated to function
pub inline fn glVertexArrayAttribFormat() @TypeOf(GLEW_GET_FUN(__glewVertexArrayAttribFormat)) {
    return GLEW_GET_FUN(__glewVertexArrayAttribFormat);
}
// /usr/include/GL/glew.h:4615:9: warning: macro 'glVertexArrayAttribIFormat' contains a runtime value, translated to function
pub inline fn glVertexArrayAttribIFormat() @TypeOf(GLEW_GET_FUN(__glewVertexArrayAttribIFormat)) {
    return GLEW_GET_FUN(__glewVertexArrayAttribIFormat);
}
// /usr/include/GL/glew.h:4616:9: warning: macro 'glVertexArrayAttribLFormat' contains a runtime value, translated to function
pub inline fn glVertexArrayAttribLFormat() @TypeOf(GLEW_GET_FUN(__glewVertexArrayAttribLFormat)) {
    return GLEW_GET_FUN(__glewVertexArrayAttribLFormat);
}
// /usr/include/GL/glew.h:4617:9: warning: macro 'glVertexArrayBindingDivisor' contains a runtime value, translated to function
pub inline fn glVertexArrayBindingDivisor() @TypeOf(GLEW_GET_FUN(__glewVertexArrayBindingDivisor)) {
    return GLEW_GET_FUN(__glewVertexArrayBindingDivisor);
}
// /usr/include/GL/glew.h:4618:9: warning: macro 'glVertexArrayElementBuffer' contains a runtime value, translated to function
pub inline fn glVertexArrayElementBuffer() @TypeOf(GLEW_GET_FUN(__glewVertexArrayElementBuffer)) {
    return GLEW_GET_FUN(__glewVertexArrayElementBuffer);
}
// /usr/include/GL/glew.h:4619:9: warning: macro 'glVertexArrayVertexBuffer' contains a runtime value, translated to function
pub inline fn glVertexArrayVertexBuffer() @TypeOf(GLEW_GET_FUN(__glewVertexArrayVertexBuffer)) {
    return GLEW_GET_FUN(__glewVertexArrayVertexBuffer);
}
// /usr/include/GL/glew.h:4620:9: warning: macro 'glVertexArrayVertexBuffers' contains a runtime value, translated to function
pub inline fn glVertexArrayVertexBuffers() @TypeOf(GLEW_GET_FUN(__glewVertexArrayVertexBuffers)) {
    return GLEW_GET_FUN(__glewVertexArrayVertexBuffers);
}
// /usr/include/GL/glew.h:4622:9: warning: macro 'GLEW_ARB_direct_state_access' contains a runtime value, translated to function
pub inline fn GLEW_ARB_direct_state_access() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_direct_state_access)) {
    return GLEW_GET_VAR(__GLEW_ARB_direct_state_access);
}
pub const GL_ARB_draw_buffers = @as(c_int, 1);
pub const GL_MAX_DRAW_BUFFERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hex);
pub const GL_DRAW_BUFFER0_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hex);
pub const GL_DRAW_BUFFER1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hex);
pub const GL_DRAW_BUFFER2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hex);
pub const GL_DRAW_BUFFER3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hex);
pub const GL_DRAW_BUFFER4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hex);
pub const GL_DRAW_BUFFER5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hex);
pub const GL_DRAW_BUFFER6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hex);
pub const GL_DRAW_BUFFER7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hex);
pub const GL_DRAW_BUFFER8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hex);
pub const GL_DRAW_BUFFER9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hex);
pub const GL_DRAW_BUFFER10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hex);
pub const GL_DRAW_BUFFER11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hex);
pub const GL_DRAW_BUFFER12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hex);
pub const GL_DRAW_BUFFER13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hex);
pub const GL_DRAW_BUFFER14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hex);
pub const GL_DRAW_BUFFER15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hex);
// /usr/include/GL/glew.h:4651:9: warning: macro 'glDrawBuffersARB' contains a runtime value, translated to function
pub inline fn glDrawBuffersARB() @TypeOf(GLEW_GET_FUN(__glewDrawBuffersARB)) {
    return GLEW_GET_FUN(__glewDrawBuffersARB);
}
// /usr/include/GL/glew.h:4653:9: warning: macro 'GLEW_ARB_draw_buffers' contains a runtime value, translated to function
pub inline fn GLEW_ARB_draw_buffers() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_draw_buffers)) {
    return GLEW_GET_VAR(__GLEW_ARB_draw_buffers);
}
pub const GL_ARB_draw_buffers_blend = @as(c_int, 1);
// /usr/include/GL/glew.h:4667:9: warning: macro 'glBlendEquationSeparateiARB' contains a runtime value, translated to function
pub inline fn glBlendEquationSeparateiARB() @TypeOf(GLEW_GET_FUN(__glewBlendEquationSeparateiARB)) {
    return GLEW_GET_FUN(__glewBlendEquationSeparateiARB);
}
// /usr/include/GL/glew.h:4668:9: warning: macro 'glBlendEquationiARB' contains a runtime value, translated to function
pub inline fn glBlendEquationiARB() @TypeOf(GLEW_GET_FUN(__glewBlendEquationiARB)) {
    return GLEW_GET_FUN(__glewBlendEquationiARB);
}
// /usr/include/GL/glew.h:4669:9: warning: macro 'glBlendFuncSeparateiARB' contains a runtime value, translated to function
pub inline fn glBlendFuncSeparateiARB() @TypeOf(GLEW_GET_FUN(__glewBlendFuncSeparateiARB)) {
    return GLEW_GET_FUN(__glewBlendFuncSeparateiARB);
}
// /usr/include/GL/glew.h:4670:9: warning: macro 'glBlendFunciARB' contains a runtime value, translated to function
pub inline fn glBlendFunciARB() @TypeOf(GLEW_GET_FUN(__glewBlendFunciARB)) {
    return GLEW_GET_FUN(__glewBlendFunciARB);
}
// /usr/include/GL/glew.h:4672:9: warning: macro 'GLEW_ARB_draw_buffers_blend' contains a runtime value, translated to function
pub inline fn GLEW_ARB_draw_buffers_blend() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_draw_buffers_blend)) {
    return GLEW_GET_VAR(__GLEW_ARB_draw_buffers_blend);
}
pub const GL_ARB_draw_elements_base_vertex = @as(c_int, 1);
// /usr/include/GL/glew.h:4686:9: warning: macro 'glDrawElementsBaseVertex' contains a runtime value, translated to function
pub inline fn glDrawElementsBaseVertex() @TypeOf(GLEW_GET_FUN(__glewDrawElementsBaseVertex)) {
    return GLEW_GET_FUN(__glewDrawElementsBaseVertex);
}
// /usr/include/GL/glew.h:4687:9: warning: macro 'glDrawElementsInstancedBaseVertex' contains a runtime value, translated to function
pub inline fn glDrawElementsInstancedBaseVertex() @TypeOf(GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertex)) {
    return GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertex);
}
// /usr/include/GL/glew.h:4688:9: warning: macro 'glDrawRangeElementsBaseVertex' contains a runtime value, translated to function
pub inline fn glDrawRangeElementsBaseVertex() @TypeOf(GLEW_GET_FUN(__glewDrawRangeElementsBaseVertex)) {
    return GLEW_GET_FUN(__glewDrawRangeElementsBaseVertex);
}
// /usr/include/GL/glew.h:4689:9: warning: macro 'glMultiDrawElementsBaseVertex' contains a runtime value, translated to function
pub inline fn glMultiDrawElementsBaseVertex() @TypeOf(GLEW_GET_FUN(__glewMultiDrawElementsBaseVertex)) {
    return GLEW_GET_FUN(__glewMultiDrawElementsBaseVertex);
}
// /usr/include/GL/glew.h:4691:9: warning: macro 'GLEW_ARB_draw_elements_base_vertex' contains a runtime value, translated to function
pub inline fn GLEW_ARB_draw_elements_base_vertex() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_draw_elements_base_vertex)) {
    return GLEW_GET_VAR(__GLEW_ARB_draw_elements_base_vertex);
}
pub const GL_ARB_draw_indirect = @as(c_int, 1);
pub const GL_DRAW_INDIRECT_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3F, .hex);
pub const GL_DRAW_INDIRECT_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F43, .hex);
// /usr/include/GL/glew.h:4706:9: warning: macro 'glDrawArraysIndirect' contains a runtime value, translated to function
pub inline fn glDrawArraysIndirect() @TypeOf(GLEW_GET_FUN(__glewDrawArraysIndirect)) {
    return GLEW_GET_FUN(__glewDrawArraysIndirect);
}
// /usr/include/GL/glew.h:4707:9: warning: macro 'glDrawElementsIndirect' contains a runtime value, translated to function
pub inline fn glDrawElementsIndirect() @TypeOf(GLEW_GET_FUN(__glewDrawElementsIndirect)) {
    return GLEW_GET_FUN(__glewDrawElementsIndirect);
}
// /usr/include/GL/glew.h:4709:9: warning: macro 'GLEW_ARB_draw_indirect' contains a runtime value, translated to function
pub inline fn GLEW_ARB_draw_indirect() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_draw_indirect)) {
    return GLEW_GET_VAR(__GLEW_ARB_draw_indirect);
}
pub const GL_ARB_draw_instanced = @as(c_int, 1);
// /usr/include/GL/glew.h:4718:9: warning: macro 'GLEW_ARB_draw_instanced' contains a runtime value, translated to function
pub inline fn GLEW_ARB_draw_instanced() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_draw_instanced)) {
    return GLEW_GET_VAR(__GLEW_ARB_draw_instanced);
}
pub const GL_ARB_enhanced_layouts = @as(c_int, 1);
pub const GL_LOCATION_COMPONENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934A, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934B, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934C, .hex);
// /usr/include/GL/glew.h:4731:9: warning: macro 'GLEW_ARB_enhanced_layouts' contains a runtime value, translated to function
pub inline fn GLEW_ARB_enhanced_layouts() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_enhanced_layouts)) {
    return GLEW_GET_VAR(__GLEW_ARB_enhanced_layouts);
}
pub const GL_ARB_explicit_attrib_location = @as(c_int, 1);
// /usr/include/GL/glew.h:4740:9: warning: macro 'GLEW_ARB_explicit_attrib_location' contains a runtime value, translated to function
pub inline fn GLEW_ARB_explicit_attrib_location() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_explicit_attrib_location)) {
    return GLEW_GET_VAR(__GLEW_ARB_explicit_attrib_location);
}
pub const GL_ARB_explicit_uniform_location = @as(c_int, 1);
pub const GL_MAX_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826E, .hex);
// /usr/include/GL/glew.h:4751:9: warning: macro 'GLEW_ARB_explicit_uniform_location' contains a runtime value, translated to function
pub inline fn GLEW_ARB_explicit_uniform_location() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_explicit_uniform_location)) {
    return GLEW_GET_VAR(__GLEW_ARB_explicit_uniform_location);
}
pub const GL_ARB_fragment_coord_conventions = @as(c_int, 1);
// /usr/include/GL/glew.h:4760:9: warning: macro 'GLEW_ARB_fragment_coord_conventions' contains a runtime value, translated to function
pub inline fn GLEW_ARB_fragment_coord_conventions() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_fragment_coord_conventions)) {
    return GLEW_GET_VAR(__GLEW_ARB_fragment_coord_conventions);
}
pub const GL_ARB_fragment_layer_viewport = @as(c_int, 1);
// /usr/include/GL/glew.h:4769:9: warning: macro 'GLEW_ARB_fragment_layer_viewport' contains a runtime value, translated to function
pub inline fn GLEW_ARB_fragment_layer_viewport() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_fragment_layer_viewport)) {
    return GLEW_GET_VAR(__GLEW_ARB_fragment_layer_viewport);
}
pub const GL_ARB_fragment_program = @as(c_int, 1);
pub const GL_FRAGMENT_PROGRAM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8804, .hex);
pub const GL_PROGRAM_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8805, .hex);
pub const GL_PROGRAM_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8806, .hex);
pub const GL_PROGRAM_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8807, .hex);
pub const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8808, .hex);
pub const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8809, .hex);
pub const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880A, .hex);
pub const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880B, .hex);
pub const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880C, .hex);
pub const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880D, .hex);
pub const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880E, .hex);
pub const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880F, .hex);
pub const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8810, .hex);
pub const GL_MAX_TEXTURE_COORDS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hex);
pub const GL_MAX_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hex);
// /usr/include/GL/glew.h:4794:9: warning: macro 'GLEW_ARB_fragment_program' contains a runtime value, translated to function
pub inline fn GLEW_ARB_fragment_program() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_fragment_program)) {
    return GLEW_GET_VAR(__GLEW_ARB_fragment_program);
}
pub const GL_ARB_fragment_program_shadow = @as(c_int, 1);
// /usr/include/GL/glew.h:4803:9: warning: macro 'GLEW_ARB_fragment_program_shadow' contains a runtime value, translated to function
pub inline fn GLEW_ARB_fragment_program_shadow() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_fragment_program_shadow)) {
    return GLEW_GET_VAR(__GLEW_ARB_fragment_program_shadow);
}
pub const GL_ARB_fragment_shader = @as(c_int, 1);
pub const GL_FRAGMENT_SHADER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B30, .hex);
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B49, .hex);
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hex);
// /usr/include/GL/glew.h:4816:9: warning: macro 'GLEW_ARB_fragment_shader' contains a runtime value, translated to function
pub inline fn GLEW_ARB_fragment_shader() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_fragment_shader)) {
    return GLEW_GET_VAR(__GLEW_ARB_fragment_shader);
}
pub const GL_ARB_fragment_shader_interlock = @as(c_int, 1);
// /usr/include/GL/glew.h:4825:9: warning: macro 'GLEW_ARB_fragment_shader_interlock' contains a runtime value, translated to function
pub inline fn GLEW_ARB_fragment_shader_interlock() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_fragment_shader_interlock)) {
    return GLEW_GET_VAR(__GLEW_ARB_fragment_shader_interlock);
}
pub const GL_ARB_framebuffer_no_attachments = @as(c_int, 1);
pub const GL_FRAMEBUFFER_DEFAULT_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9310, .hex);
pub const GL_FRAMEBUFFER_DEFAULT_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9311, .hex);
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9312, .hex);
pub const GL_FRAMEBUFFER_DEFAULT_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9313, .hex);
pub const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9314, .hex);
pub const GL_MAX_FRAMEBUFFER_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9315, .hex);
pub const GL_MAX_FRAMEBUFFER_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9316, .hex);
pub const GL_MAX_FRAMEBUFFER_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9317, .hex);
pub const GL_MAX_FRAMEBUFFER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9318, .hex);
// /usr/include/GL/glew.h:4849:9: warning: macro 'glFramebufferParameteri' contains a runtime value, translated to function
pub inline fn glFramebufferParameteri() @TypeOf(GLEW_GET_FUN(__glewFramebufferParameteri)) {
    return GLEW_GET_FUN(__glewFramebufferParameteri);
}
// /usr/include/GL/glew.h:4850:9: warning: macro 'glGetFramebufferParameteriv' contains a runtime value, translated to function
pub inline fn glGetFramebufferParameteriv() @TypeOf(GLEW_GET_FUN(__glewGetFramebufferParameteriv)) {
    return GLEW_GET_FUN(__glewGetFramebufferParameteriv);
}
// /usr/include/GL/glew.h:4851:9: warning: macro 'glGetNamedFramebufferParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetNamedFramebufferParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetNamedFramebufferParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetNamedFramebufferParameterivEXT);
}
// /usr/include/GL/glew.h:4852:9: warning: macro 'glNamedFramebufferParameteriEXT' contains a runtime value, translated to function
pub inline fn glNamedFramebufferParameteriEXT() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferParameteriEXT)) {
    return GLEW_GET_FUN(__glewNamedFramebufferParameteriEXT);
}
// /usr/include/GL/glew.h:4854:9: warning: macro 'GLEW_ARB_framebuffer_no_attachments' contains a runtime value, translated to function
pub inline fn GLEW_ARB_framebuffer_no_attachments() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_framebuffer_no_attachments)) {
    return GLEW_GET_VAR(__GLEW_ARB_framebuffer_no_attachments);
}
pub const GL_ARB_framebuffer_object = @as(c_int, 1);
pub const GL_INVALID_FRAMEBUFFER_OPERATION = @as(c_int, 0x0506);
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8210, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8211, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8212, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8213, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8214, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8215, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8216, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8217, .hex);
pub const GL_FRAMEBUFFER_DEFAULT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8218, .hex);
pub const GL_FRAMEBUFFER_UNDEFINED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8219, .hex);
pub const GL_DEPTH_STENCIL_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821A, .hex);
pub const GL_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8222, .hex);
pub const GL_MAX_RENDERBUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E8, .hex);
pub const GL_DEPTH_STENCIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hex);
pub const GL_UNSIGNED_INT_24_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hex);
pub const GL_DEPTH24_STENCIL8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F0, .hex);
pub const GL_TEXTURE_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F1, .hex);
pub const GL_UNSIGNED_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C17, .hex);
pub const GL_DRAW_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_RENDERBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hex);
pub const GL_READ_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hex);
pub const GL_DRAW_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hex);
pub const GL_READ_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hex);
pub const GL_RENDERBUFFER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD0, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD1, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD2, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD3, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hex);
pub const GL_FRAMEBUFFER_COMPLETE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD5, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD6, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD7, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDB, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDC, .hex);
pub const GL_FRAMEBUFFER_UNSUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDD, .hex);
pub const GL_MAX_COLOR_ATTACHMENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hex);
pub const GL_COLOR_ATTACHMENT0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hex);
pub const GL_COLOR_ATTACHMENT1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hex);
pub const GL_COLOR_ATTACHMENT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hex);
pub const GL_COLOR_ATTACHMENT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hex);
pub const GL_COLOR_ATTACHMENT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hex);
pub const GL_COLOR_ATTACHMENT5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hex);
pub const GL_COLOR_ATTACHMENT6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hex);
pub const GL_COLOR_ATTACHMENT7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hex);
pub const GL_COLOR_ATTACHMENT8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hex);
pub const GL_COLOR_ATTACHMENT9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hex);
pub const GL_COLOR_ATTACHMENT10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hex);
pub const GL_COLOR_ATTACHMENT11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hex);
pub const GL_COLOR_ATTACHMENT12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hex);
pub const GL_COLOR_ATTACHMENT13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hex);
pub const GL_COLOR_ATTACHMENT14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hex);
pub const GL_COLOR_ATTACHMENT15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hex);
pub const GL_DEPTH_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D00, .hex);
pub const GL_STENCIL_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D20, .hex);
pub const GL_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D40, .hex);
pub const GL_RENDERBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D41, .hex);
pub const GL_RENDERBUFFER_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D42, .hex);
pub const GL_RENDERBUFFER_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D43, .hex);
pub const GL_RENDERBUFFER_INTERNAL_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D44, .hex);
pub const GL_STENCIL_INDEX1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D46, .hex);
pub const GL_STENCIL_INDEX4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D47, .hex);
pub const GL_STENCIL_INDEX8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hex);
pub const GL_STENCIL_INDEX16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D49, .hex);
pub const GL_RENDERBUFFER_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D50, .hex);
pub const GL_RENDERBUFFER_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D51, .hex);
pub const GL_RENDERBUFFER_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D52, .hex);
pub const GL_RENDERBUFFER_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D53, .hex);
pub const GL_RENDERBUFFER_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D54, .hex);
pub const GL_RENDERBUFFER_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D55, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hex);
pub const GL_MAX_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hex);
// /usr/include/GL/glew.h:4959:9: warning: macro 'glBindFramebuffer' contains a runtime value, translated to function
pub inline fn glBindFramebuffer() @TypeOf(GLEW_GET_FUN(__glewBindFramebuffer)) {
    return GLEW_GET_FUN(__glewBindFramebuffer);
}
// /usr/include/GL/glew.h:4960:9: warning: macro 'glBindRenderbuffer' contains a runtime value, translated to function
pub inline fn glBindRenderbuffer() @TypeOf(GLEW_GET_FUN(__glewBindRenderbuffer)) {
    return GLEW_GET_FUN(__glewBindRenderbuffer);
}
// /usr/include/GL/glew.h:4961:9: warning: macro 'glBlitFramebuffer' contains a runtime value, translated to function
pub inline fn glBlitFramebuffer() @TypeOf(GLEW_GET_FUN(__glewBlitFramebuffer)) {
    return GLEW_GET_FUN(__glewBlitFramebuffer);
}
// /usr/include/GL/glew.h:4962:9: warning: macro 'glCheckFramebufferStatus' contains a runtime value, translated to function
pub inline fn glCheckFramebufferStatus() @TypeOf(GLEW_GET_FUN(__glewCheckFramebufferStatus)) {
    return GLEW_GET_FUN(__glewCheckFramebufferStatus);
}
// /usr/include/GL/glew.h:4963:9: warning: macro 'glDeleteFramebuffers' contains a runtime value, translated to function
pub inline fn glDeleteFramebuffers() @TypeOf(GLEW_GET_FUN(__glewDeleteFramebuffers)) {
    return GLEW_GET_FUN(__glewDeleteFramebuffers);
}
// /usr/include/GL/glew.h:4964:9: warning: macro 'glDeleteRenderbuffers' contains a runtime value, translated to function
pub inline fn glDeleteRenderbuffers() @TypeOf(GLEW_GET_FUN(__glewDeleteRenderbuffers)) {
    return GLEW_GET_FUN(__glewDeleteRenderbuffers);
}
// /usr/include/GL/glew.h:4965:9: warning: macro 'glFramebufferRenderbuffer' contains a runtime value, translated to function
pub inline fn glFramebufferRenderbuffer() @TypeOf(GLEW_GET_FUN(__glewFramebufferRenderbuffer)) {
    return GLEW_GET_FUN(__glewFramebufferRenderbuffer);
}
// /usr/include/GL/glew.h:4966:9: warning: macro 'glFramebufferTexture1D' contains a runtime value, translated to function
pub inline fn glFramebufferTexture1D() @TypeOf(GLEW_GET_FUN(__glewFramebufferTexture1D)) {
    return GLEW_GET_FUN(__glewFramebufferTexture1D);
}
// /usr/include/GL/glew.h:4967:9: warning: macro 'glFramebufferTexture2D' contains a runtime value, translated to function
pub inline fn glFramebufferTexture2D() @TypeOf(GLEW_GET_FUN(__glewFramebufferTexture2D)) {
    return GLEW_GET_FUN(__glewFramebufferTexture2D);
}
// /usr/include/GL/glew.h:4968:9: warning: macro 'glFramebufferTexture3D' contains a runtime value, translated to function
pub inline fn glFramebufferTexture3D() @TypeOf(GLEW_GET_FUN(__glewFramebufferTexture3D)) {
    return GLEW_GET_FUN(__glewFramebufferTexture3D);
}
// /usr/include/GL/glew.h:4969:9: warning: macro 'glFramebufferTextureLayer' contains a runtime value, translated to function
pub inline fn glFramebufferTextureLayer() @TypeOf(GLEW_GET_FUN(__glewFramebufferTextureLayer)) {
    return GLEW_GET_FUN(__glewFramebufferTextureLayer);
}
// /usr/include/GL/glew.h:4970:9: warning: macro 'glGenFramebuffers' contains a runtime value, translated to function
pub inline fn glGenFramebuffers() @TypeOf(GLEW_GET_FUN(__glewGenFramebuffers)) {
    return GLEW_GET_FUN(__glewGenFramebuffers);
}
// /usr/include/GL/glew.h:4971:9: warning: macro 'glGenRenderbuffers' contains a runtime value, translated to function
pub inline fn glGenRenderbuffers() @TypeOf(GLEW_GET_FUN(__glewGenRenderbuffers)) {
    return GLEW_GET_FUN(__glewGenRenderbuffers);
}
// /usr/include/GL/glew.h:4972:9: warning: macro 'glGenerateMipmap' contains a runtime value, translated to function
pub inline fn glGenerateMipmap() @TypeOf(GLEW_GET_FUN(__glewGenerateMipmap)) {
    return GLEW_GET_FUN(__glewGenerateMipmap);
}
// /usr/include/GL/glew.h:4973:9: warning: macro 'glGetFramebufferAttachmentParameteriv' contains a runtime value, translated to function
pub inline fn glGetFramebufferAttachmentParameteriv() @TypeOf(GLEW_GET_FUN(__glewGetFramebufferAttachmentParameteriv)) {
    return GLEW_GET_FUN(__glewGetFramebufferAttachmentParameteriv);
}
// /usr/include/GL/glew.h:4974:9: warning: macro 'glGetRenderbufferParameteriv' contains a runtime value, translated to function
pub inline fn glGetRenderbufferParameteriv() @TypeOf(GLEW_GET_FUN(__glewGetRenderbufferParameteriv)) {
    return GLEW_GET_FUN(__glewGetRenderbufferParameteriv);
}
// /usr/include/GL/glew.h:4975:9: warning: macro 'glIsFramebuffer' contains a runtime value, translated to function
pub inline fn glIsFramebuffer() @TypeOf(GLEW_GET_FUN(__glewIsFramebuffer)) {
    return GLEW_GET_FUN(__glewIsFramebuffer);
}
// /usr/include/GL/glew.h:4976:9: warning: macro 'glIsRenderbuffer' contains a runtime value, translated to function
pub inline fn glIsRenderbuffer() @TypeOf(GLEW_GET_FUN(__glewIsRenderbuffer)) {
    return GLEW_GET_FUN(__glewIsRenderbuffer);
}
// /usr/include/GL/glew.h:4977:9: warning: macro 'glRenderbufferStorage' contains a runtime value, translated to function
pub inline fn glRenderbufferStorage() @TypeOf(GLEW_GET_FUN(__glewRenderbufferStorage)) {
    return GLEW_GET_FUN(__glewRenderbufferStorage);
}
// /usr/include/GL/glew.h:4978:9: warning: macro 'glRenderbufferStorageMultisample' contains a runtime value, translated to function
pub inline fn glRenderbufferStorageMultisample() @TypeOf(GLEW_GET_FUN(__glewRenderbufferStorageMultisample)) {
    return GLEW_GET_FUN(__glewRenderbufferStorageMultisample);
}
// /usr/include/GL/glew.h:4980:9: warning: macro 'GLEW_ARB_framebuffer_object' contains a runtime value, translated to function
pub inline fn GLEW_ARB_framebuffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_framebuffer_object)) {
    return GLEW_GET_VAR(__GLEW_ARB_framebuffer_object);
}
pub const GL_ARB_framebuffer_sRGB = @as(c_int, 1);
pub const GL_FRAMEBUFFER_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DB9, .hex);
// /usr/include/GL/glew.h:4991:9: warning: macro 'GLEW_ARB_framebuffer_sRGB' contains a runtime value, translated to function
pub inline fn GLEW_ARB_framebuffer_sRGB() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_framebuffer_sRGB)) {
    return GLEW_GET_VAR(__GLEW_ARB_framebuffer_sRGB);
}
pub const GL_ARB_geometry_shader4 = @as(c_int, 1);
pub const GL_LINES_ADJACENCY_ARB = @as(c_int, 0xA);
pub const GL_LINE_STRIP_ADJACENCY_ARB = @as(c_int, 0xB);
pub const GL_TRIANGLES_ADJACENCY_ARB = @as(c_int, 0xC);
pub const GL_TRIANGLE_STRIP_ADJACENCY_ARB = @as(c_int, 0xD);
pub const GL_PROGRAM_POINT_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hex);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA9, .hex);
pub const GL_GEOMETRY_SHADER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hex);
pub const GL_GEOMETRY_VERTICES_OUT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDA, .hex);
pub const GL_GEOMETRY_INPUT_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDB, .hex);
pub const GL_GEOMETRY_OUTPUT_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDC, .hex);
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDD, .hex);
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDE, .hex);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hex);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hex);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hex);
// /usr/include/GL/glew.h:5025:9: warning: macro 'glFramebufferTextureARB' contains a runtime value, translated to function
pub inline fn glFramebufferTextureARB() @TypeOf(GLEW_GET_FUN(__glewFramebufferTextureARB)) {
    return GLEW_GET_FUN(__glewFramebufferTextureARB);
}
// /usr/include/GL/glew.h:5026:9: warning: macro 'glFramebufferTextureFaceARB' contains a runtime value, translated to function
pub inline fn glFramebufferTextureFaceARB() @TypeOf(GLEW_GET_FUN(__glewFramebufferTextureFaceARB)) {
    return GLEW_GET_FUN(__glewFramebufferTextureFaceARB);
}
// /usr/include/GL/glew.h:5027:9: warning: macro 'glFramebufferTextureLayerARB' contains a runtime value, translated to function
pub inline fn glFramebufferTextureLayerARB() @TypeOf(GLEW_GET_FUN(__glewFramebufferTextureLayerARB)) {
    return GLEW_GET_FUN(__glewFramebufferTextureLayerARB);
}
// /usr/include/GL/glew.h:5028:9: warning: macro 'glProgramParameteriARB' contains a runtime value, translated to function
pub inline fn glProgramParameteriARB() @TypeOf(GLEW_GET_FUN(__glewProgramParameteriARB)) {
    return GLEW_GET_FUN(__glewProgramParameteriARB);
}
// /usr/include/GL/glew.h:5030:9: warning: macro 'GLEW_ARB_geometry_shader4' contains a runtime value, translated to function
pub inline fn GLEW_ARB_geometry_shader4() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_geometry_shader4)) {
    return GLEW_GET_VAR(__GLEW_ARB_geometry_shader4);
}
pub const GL_ARB_get_program_binary = @as(c_int, 1);
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8257, .hex);
pub const GL_PROGRAM_BINARY_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8741, .hex);
pub const GL_NUM_PROGRAM_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FE, .hex);
pub const GL_PROGRAM_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FF, .hex);
// /usr/include/GL/glew.h:5048:9: warning: macro 'glGetProgramBinary' contains a runtime value, translated to function
pub inline fn glGetProgramBinary() @TypeOf(GLEW_GET_FUN(__glewGetProgramBinary)) {
    return GLEW_GET_FUN(__glewGetProgramBinary);
}
// /usr/include/GL/glew.h:5049:9: warning: macro 'glProgramBinary' contains a runtime value, translated to function
pub inline fn glProgramBinary() @TypeOf(GLEW_GET_FUN(__glewProgramBinary)) {
    return GLEW_GET_FUN(__glewProgramBinary);
}
// /usr/include/GL/glew.h:5050:9: warning: macro 'glProgramParameteri' contains a runtime value, translated to function
pub inline fn glProgramParameteri() @TypeOf(GLEW_GET_FUN(__glewProgramParameteri)) {
    return GLEW_GET_FUN(__glewProgramParameteri);
}
// /usr/include/GL/glew.h:5052:9: warning: macro 'GLEW_ARB_get_program_binary' contains a runtime value, translated to function
pub inline fn GLEW_ARB_get_program_binary() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_get_program_binary)) {
    return GLEW_GET_VAR(__GLEW_ARB_get_program_binary);
}
pub const GL_ARB_get_texture_sub_image = @as(c_int, 1);
// /usr/include/GL/glew.h:5064:9: warning: macro 'glGetCompressedTextureSubImage' contains a runtime value, translated to function
pub inline fn glGetCompressedTextureSubImage() @TypeOf(GLEW_GET_FUN(__glewGetCompressedTextureSubImage)) {
    return GLEW_GET_FUN(__glewGetCompressedTextureSubImage);
}
// /usr/include/GL/glew.h:5065:9: warning: macro 'glGetTextureSubImage' contains a runtime value, translated to function
pub inline fn glGetTextureSubImage() @TypeOf(GLEW_GET_FUN(__glewGetTextureSubImage)) {
    return GLEW_GET_FUN(__glewGetTextureSubImage);
}
// /usr/include/GL/glew.h:5067:9: warning: macro 'GLEW_ARB_get_texture_sub_image' contains a runtime value, translated to function
pub inline fn GLEW_ARB_get_texture_sub_image() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_get_texture_sub_image)) {
    return GLEW_GET_VAR(__GLEW_ARB_get_texture_sub_image);
}
pub const GL_ARB_gl_spirv = @as(c_int, 1);
pub const GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9551, .hex);
pub const GL_SPIR_V_BINARY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9552, .hex);
// /usr/include/GL/glew.h:5081:9: warning: macro 'glSpecializeShaderARB' contains a runtime value, translated to function
pub inline fn glSpecializeShaderARB() @TypeOf(GLEW_GET_FUN(__glewSpecializeShaderARB)) {
    return GLEW_GET_FUN(__glewSpecializeShaderARB);
}
// /usr/include/GL/glew.h:5083:9: warning: macro 'GLEW_ARB_gl_spirv' contains a runtime value, translated to function
pub inline fn GLEW_ARB_gl_spirv() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_gl_spirv)) {
    return GLEW_GET_VAR(__GLEW_ARB_gl_spirv);
}
pub const GL_ARB_gpu_shader5 = @as(c_int, 1);
pub const GL_GEOMETRY_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887F, .hex);
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hex);
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5B, .hex);
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5C, .hex);
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5D, .hex);
pub const GL_MAX_VERTEX_STREAMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E71, .hex);
// /usr/include/GL/glew.h:5099:9: warning: macro 'GLEW_ARB_gpu_shader5' contains a runtime value, translated to function
pub inline fn GLEW_ARB_gpu_shader5() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_gpu_shader5)) {
    return GLEW_GET_VAR(__GLEW_ARB_gpu_shader5);
}
pub const GL_ARB_gpu_shader_fp64 = @as(c_int, 1);
pub const GL_DOUBLE_MAT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F46, .hex);
pub const GL_DOUBLE_MAT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F47, .hex);
pub const GL_DOUBLE_MAT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F48, .hex);
pub const GL_DOUBLE_MAT2x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F49, .hex);
pub const GL_DOUBLE_MAT2x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4A, .hex);
pub const GL_DOUBLE_MAT3x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4B, .hex);
pub const GL_DOUBLE_MAT3x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4C, .hex);
pub const GL_DOUBLE_MAT4x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4D, .hex);
pub const GL_DOUBLE_MAT4x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4E, .hex);
pub const GL_DOUBLE_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFC, .hex);
pub const GL_DOUBLE_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFD, .hex);
pub const GL_DOUBLE_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFE, .hex);
// /usr/include/GL/glew.h:5140:9: warning: macro 'glGetUniformdv' contains a runtime value, translated to function
pub inline fn glGetUniformdv() @TypeOf(GLEW_GET_FUN(__glewGetUniformdv)) {
    return GLEW_GET_FUN(__glewGetUniformdv);
}
// /usr/include/GL/glew.h:5141:9: warning: macro 'glUniform1d' contains a runtime value, translated to function
pub inline fn glUniform1d() @TypeOf(GLEW_GET_FUN(__glewUniform1d)) {
    return GLEW_GET_FUN(__glewUniform1d);
}
// /usr/include/GL/glew.h:5142:9: warning: macro 'glUniform1dv' contains a runtime value, translated to function
pub inline fn glUniform1dv() @TypeOf(GLEW_GET_FUN(__glewUniform1dv)) {
    return GLEW_GET_FUN(__glewUniform1dv);
}
// /usr/include/GL/glew.h:5143:9: warning: macro 'glUniform2d' contains a runtime value, translated to function
pub inline fn glUniform2d() @TypeOf(GLEW_GET_FUN(__glewUniform2d)) {
    return GLEW_GET_FUN(__glewUniform2d);
}
// /usr/include/GL/glew.h:5144:9: warning: macro 'glUniform2dv' contains a runtime value, translated to function
pub inline fn glUniform2dv() @TypeOf(GLEW_GET_FUN(__glewUniform2dv)) {
    return GLEW_GET_FUN(__glewUniform2dv);
}
// /usr/include/GL/glew.h:5145:9: warning: macro 'glUniform3d' contains a runtime value, translated to function
pub inline fn glUniform3d() @TypeOf(GLEW_GET_FUN(__glewUniform3d)) {
    return GLEW_GET_FUN(__glewUniform3d);
}
// /usr/include/GL/glew.h:5146:9: warning: macro 'glUniform3dv' contains a runtime value, translated to function
pub inline fn glUniform3dv() @TypeOf(GLEW_GET_FUN(__glewUniform3dv)) {
    return GLEW_GET_FUN(__glewUniform3dv);
}
// /usr/include/GL/glew.h:5147:9: warning: macro 'glUniform4d' contains a runtime value, translated to function
pub inline fn glUniform4d() @TypeOf(GLEW_GET_FUN(__glewUniform4d)) {
    return GLEW_GET_FUN(__glewUniform4d);
}
// /usr/include/GL/glew.h:5148:9: warning: macro 'glUniform4dv' contains a runtime value, translated to function
pub inline fn glUniform4dv() @TypeOf(GLEW_GET_FUN(__glewUniform4dv)) {
    return GLEW_GET_FUN(__glewUniform4dv);
}
// /usr/include/GL/glew.h:5149:9: warning: macro 'glUniformMatrix2dv' contains a runtime value, translated to function
pub inline fn glUniformMatrix2dv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix2dv)) {
    return GLEW_GET_FUN(__glewUniformMatrix2dv);
}
// /usr/include/GL/glew.h:5150:9: warning: macro 'glUniformMatrix2x3dv' contains a runtime value, translated to function
pub inline fn glUniformMatrix2x3dv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix2x3dv)) {
    return GLEW_GET_FUN(__glewUniformMatrix2x3dv);
}
// /usr/include/GL/glew.h:5151:9: warning: macro 'glUniformMatrix2x4dv' contains a runtime value, translated to function
pub inline fn glUniformMatrix2x4dv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix2x4dv)) {
    return GLEW_GET_FUN(__glewUniformMatrix2x4dv);
}
// /usr/include/GL/glew.h:5152:9: warning: macro 'glUniformMatrix3dv' contains a runtime value, translated to function
pub inline fn glUniformMatrix3dv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix3dv)) {
    return GLEW_GET_FUN(__glewUniformMatrix3dv);
}
// /usr/include/GL/glew.h:5153:9: warning: macro 'glUniformMatrix3x2dv' contains a runtime value, translated to function
pub inline fn glUniformMatrix3x2dv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix3x2dv)) {
    return GLEW_GET_FUN(__glewUniformMatrix3x2dv);
}
// /usr/include/GL/glew.h:5154:9: warning: macro 'glUniformMatrix3x4dv' contains a runtime value, translated to function
pub inline fn glUniformMatrix3x4dv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix3x4dv)) {
    return GLEW_GET_FUN(__glewUniformMatrix3x4dv);
}
// /usr/include/GL/glew.h:5155:9: warning: macro 'glUniformMatrix4dv' contains a runtime value, translated to function
pub inline fn glUniformMatrix4dv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix4dv)) {
    return GLEW_GET_FUN(__glewUniformMatrix4dv);
}
// /usr/include/GL/glew.h:5156:9: warning: macro 'glUniformMatrix4x2dv' contains a runtime value, translated to function
pub inline fn glUniformMatrix4x2dv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix4x2dv)) {
    return GLEW_GET_FUN(__glewUniformMatrix4x2dv);
}
// /usr/include/GL/glew.h:5157:9: warning: macro 'glUniformMatrix4x3dv' contains a runtime value, translated to function
pub inline fn glUniformMatrix4x3dv() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix4x3dv)) {
    return GLEW_GET_FUN(__glewUniformMatrix4x3dv);
}
// /usr/include/GL/glew.h:5159:9: warning: macro 'GLEW_ARB_gpu_shader_fp64' contains a runtime value, translated to function
pub inline fn GLEW_ARB_gpu_shader_fp64() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_gpu_shader_fp64)) {
    return GLEW_GET_VAR(__GLEW_ARB_gpu_shader_fp64);
}
pub const GL_ARB_gpu_shader_int64 = @as(c_int, 1);
pub const GL_INT64_ARB = @as(c_int, 0x140E);
pub const GL_INT64_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE9, .hex);
pub const GL_INT64_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEA, .hex);
pub const GL_INT64_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEB, .hex);
pub const GL_UNSIGNED_INT64_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF5, .hex);
pub const GL_UNSIGNED_INT64_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF6, .hex);
pub const GL_UNSIGNED_INT64_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF7, .hex);
// /usr/include/GL/glew.h:5214:9: warning: macro 'glGetUniformi64vARB' contains a runtime value, translated to function
pub inline fn glGetUniformi64vARB() @TypeOf(GLEW_GET_FUN(__glewGetUniformi64vARB)) {
    return GLEW_GET_FUN(__glewGetUniformi64vARB);
}
// /usr/include/GL/glew.h:5215:9: warning: macro 'glGetUniformui64vARB' contains a runtime value, translated to function
pub inline fn glGetUniformui64vARB() @TypeOf(GLEW_GET_FUN(__glewGetUniformui64vARB)) {
    return GLEW_GET_FUN(__glewGetUniformui64vARB);
}
// /usr/include/GL/glew.h:5216:9: warning: macro 'glGetnUniformi64vARB' contains a runtime value, translated to function
pub inline fn glGetnUniformi64vARB() @TypeOf(GLEW_GET_FUN(__glewGetnUniformi64vARB)) {
    return GLEW_GET_FUN(__glewGetnUniformi64vARB);
}
// /usr/include/GL/glew.h:5217:9: warning: macro 'glGetnUniformui64vARB' contains a runtime value, translated to function
pub inline fn glGetnUniformui64vARB() @TypeOf(GLEW_GET_FUN(__glewGetnUniformui64vARB)) {
    return GLEW_GET_FUN(__glewGetnUniformui64vARB);
}
// /usr/include/GL/glew.h:5218:9: warning: macro 'glProgramUniform1i64ARB' contains a runtime value, translated to function
pub inline fn glProgramUniform1i64ARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1i64ARB)) {
    return GLEW_GET_FUN(__glewProgramUniform1i64ARB);
}
// /usr/include/GL/glew.h:5219:9: warning: macro 'glProgramUniform1i64vARB' contains a runtime value, translated to function
pub inline fn glProgramUniform1i64vARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1i64vARB)) {
    return GLEW_GET_FUN(__glewProgramUniform1i64vARB);
}
// /usr/include/GL/glew.h:5220:9: warning: macro 'glProgramUniform1ui64ARB' contains a runtime value, translated to function
pub inline fn glProgramUniform1ui64ARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1ui64ARB)) {
    return GLEW_GET_FUN(__glewProgramUniform1ui64ARB);
}
// /usr/include/GL/glew.h:5221:9: warning: macro 'glProgramUniform1ui64vARB' contains a runtime value, translated to function
pub inline fn glProgramUniform1ui64vARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1ui64vARB)) {
    return GLEW_GET_FUN(__glewProgramUniform1ui64vARB);
}
// /usr/include/GL/glew.h:5222:9: warning: macro 'glProgramUniform2i64ARB' contains a runtime value, translated to function
pub inline fn glProgramUniform2i64ARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2i64ARB)) {
    return GLEW_GET_FUN(__glewProgramUniform2i64ARB);
}
// /usr/include/GL/glew.h:5223:9: warning: macro 'glProgramUniform2i64vARB' contains a runtime value, translated to function
pub inline fn glProgramUniform2i64vARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2i64vARB)) {
    return GLEW_GET_FUN(__glewProgramUniform2i64vARB);
}
// /usr/include/GL/glew.h:5224:9: warning: macro 'glProgramUniform2ui64ARB' contains a runtime value, translated to function
pub inline fn glProgramUniform2ui64ARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2ui64ARB)) {
    return GLEW_GET_FUN(__glewProgramUniform2ui64ARB);
}
// /usr/include/GL/glew.h:5225:9: warning: macro 'glProgramUniform2ui64vARB' contains a runtime value, translated to function
pub inline fn glProgramUniform2ui64vARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2ui64vARB)) {
    return GLEW_GET_FUN(__glewProgramUniform2ui64vARB);
}
// /usr/include/GL/glew.h:5226:9: warning: macro 'glProgramUniform3i64ARB' contains a runtime value, translated to function
pub inline fn glProgramUniform3i64ARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3i64ARB)) {
    return GLEW_GET_FUN(__glewProgramUniform3i64ARB);
}
// /usr/include/GL/glew.h:5227:9: warning: macro 'glProgramUniform3i64vARB' contains a runtime value, translated to function
pub inline fn glProgramUniform3i64vARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3i64vARB)) {
    return GLEW_GET_FUN(__glewProgramUniform3i64vARB);
}
// /usr/include/GL/glew.h:5228:9: warning: macro 'glProgramUniform3ui64ARB' contains a runtime value, translated to function
pub inline fn glProgramUniform3ui64ARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3ui64ARB)) {
    return GLEW_GET_FUN(__glewProgramUniform3ui64ARB);
}
// /usr/include/GL/glew.h:5229:9: warning: macro 'glProgramUniform3ui64vARB' contains a runtime value, translated to function
pub inline fn glProgramUniform3ui64vARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3ui64vARB)) {
    return GLEW_GET_FUN(__glewProgramUniform3ui64vARB);
}
// /usr/include/GL/glew.h:5230:9: warning: macro 'glProgramUniform4i64ARB' contains a runtime value, translated to function
pub inline fn glProgramUniform4i64ARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4i64ARB)) {
    return GLEW_GET_FUN(__glewProgramUniform4i64ARB);
}
// /usr/include/GL/glew.h:5231:9: warning: macro 'glProgramUniform4i64vARB' contains a runtime value, translated to function
pub inline fn glProgramUniform4i64vARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4i64vARB)) {
    return GLEW_GET_FUN(__glewProgramUniform4i64vARB);
}
// /usr/include/GL/glew.h:5232:9: warning: macro 'glProgramUniform4ui64ARB' contains a runtime value, translated to function
pub inline fn glProgramUniform4ui64ARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4ui64ARB)) {
    return GLEW_GET_FUN(__glewProgramUniform4ui64ARB);
}
// /usr/include/GL/glew.h:5233:9: warning: macro 'glProgramUniform4ui64vARB' contains a runtime value, translated to function
pub inline fn glProgramUniform4ui64vARB() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4ui64vARB)) {
    return GLEW_GET_FUN(__glewProgramUniform4ui64vARB);
}
// /usr/include/GL/glew.h:5234:9: warning: macro 'glUniform1i64ARB' contains a runtime value, translated to function
pub inline fn glUniform1i64ARB() @TypeOf(GLEW_GET_FUN(__glewUniform1i64ARB)) {
    return GLEW_GET_FUN(__glewUniform1i64ARB);
}
// /usr/include/GL/glew.h:5235:9: warning: macro 'glUniform1i64vARB' contains a runtime value, translated to function
pub inline fn glUniform1i64vARB() @TypeOf(GLEW_GET_FUN(__glewUniform1i64vARB)) {
    return GLEW_GET_FUN(__glewUniform1i64vARB);
}
// /usr/include/GL/glew.h:5236:9: warning: macro 'glUniform1ui64ARB' contains a runtime value, translated to function
pub inline fn glUniform1ui64ARB() @TypeOf(GLEW_GET_FUN(__glewUniform1ui64ARB)) {
    return GLEW_GET_FUN(__glewUniform1ui64ARB);
}
// /usr/include/GL/glew.h:5237:9: warning: macro 'glUniform1ui64vARB' contains a runtime value, translated to function
pub inline fn glUniform1ui64vARB() @TypeOf(GLEW_GET_FUN(__glewUniform1ui64vARB)) {
    return GLEW_GET_FUN(__glewUniform1ui64vARB);
}
// /usr/include/GL/glew.h:5238:9: warning: macro 'glUniform2i64ARB' contains a runtime value, translated to function
pub inline fn glUniform2i64ARB() @TypeOf(GLEW_GET_FUN(__glewUniform2i64ARB)) {
    return GLEW_GET_FUN(__glewUniform2i64ARB);
}
// /usr/include/GL/glew.h:5239:9: warning: macro 'glUniform2i64vARB' contains a runtime value, translated to function
pub inline fn glUniform2i64vARB() @TypeOf(GLEW_GET_FUN(__glewUniform2i64vARB)) {
    return GLEW_GET_FUN(__glewUniform2i64vARB);
}
// /usr/include/GL/glew.h:5240:9: warning: macro 'glUniform2ui64ARB' contains a runtime value, translated to function
pub inline fn glUniform2ui64ARB() @TypeOf(GLEW_GET_FUN(__glewUniform2ui64ARB)) {
    return GLEW_GET_FUN(__glewUniform2ui64ARB);
}
// /usr/include/GL/glew.h:5241:9: warning: macro 'glUniform2ui64vARB' contains a runtime value, translated to function
pub inline fn glUniform2ui64vARB() @TypeOf(GLEW_GET_FUN(__glewUniform2ui64vARB)) {
    return GLEW_GET_FUN(__glewUniform2ui64vARB);
}
// /usr/include/GL/glew.h:5242:9: warning: macro 'glUniform3i64ARB' contains a runtime value, translated to function
pub inline fn glUniform3i64ARB() @TypeOf(GLEW_GET_FUN(__glewUniform3i64ARB)) {
    return GLEW_GET_FUN(__glewUniform3i64ARB);
}
// /usr/include/GL/glew.h:5243:9: warning: macro 'glUniform3i64vARB' contains a runtime value, translated to function
pub inline fn glUniform3i64vARB() @TypeOf(GLEW_GET_FUN(__glewUniform3i64vARB)) {
    return GLEW_GET_FUN(__glewUniform3i64vARB);
}
// /usr/include/GL/glew.h:5244:9: warning: macro 'glUniform3ui64ARB' contains a runtime value, translated to function
pub inline fn glUniform3ui64ARB() @TypeOf(GLEW_GET_FUN(__glewUniform3ui64ARB)) {
    return GLEW_GET_FUN(__glewUniform3ui64ARB);
}
// /usr/include/GL/glew.h:5245:9: warning: macro 'glUniform3ui64vARB' contains a runtime value, translated to function
pub inline fn glUniform3ui64vARB() @TypeOf(GLEW_GET_FUN(__glewUniform3ui64vARB)) {
    return GLEW_GET_FUN(__glewUniform3ui64vARB);
}
// /usr/include/GL/glew.h:5246:9: warning: macro 'glUniform4i64ARB' contains a runtime value, translated to function
pub inline fn glUniform4i64ARB() @TypeOf(GLEW_GET_FUN(__glewUniform4i64ARB)) {
    return GLEW_GET_FUN(__glewUniform4i64ARB);
}
// /usr/include/GL/glew.h:5247:9: warning: macro 'glUniform4i64vARB' contains a runtime value, translated to function
pub inline fn glUniform4i64vARB() @TypeOf(GLEW_GET_FUN(__glewUniform4i64vARB)) {
    return GLEW_GET_FUN(__glewUniform4i64vARB);
}
// /usr/include/GL/glew.h:5248:9: warning: macro 'glUniform4ui64ARB' contains a runtime value, translated to function
pub inline fn glUniform4ui64ARB() @TypeOf(GLEW_GET_FUN(__glewUniform4ui64ARB)) {
    return GLEW_GET_FUN(__glewUniform4ui64ARB);
}
// /usr/include/GL/glew.h:5249:9: warning: macro 'glUniform4ui64vARB' contains a runtime value, translated to function
pub inline fn glUniform4ui64vARB() @TypeOf(GLEW_GET_FUN(__glewUniform4ui64vARB)) {
    return GLEW_GET_FUN(__glewUniform4ui64vARB);
}
// /usr/include/GL/glew.h:5251:9: warning: macro 'GLEW_ARB_gpu_shader_int64' contains a runtime value, translated to function
pub inline fn GLEW_ARB_gpu_shader_int64() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_gpu_shader_int64)) {
    return GLEW_GET_VAR(__GLEW_ARB_gpu_shader_int64);
}
pub const GL_ARB_half_float_pixel = @as(c_int, 1);
pub const GL_HALF_FLOAT_ARB = @as(c_int, 0x140B);
// /usr/include/GL/glew.h:5262:9: warning: macro 'GLEW_ARB_half_float_pixel' contains a runtime value, translated to function
pub inline fn GLEW_ARB_half_float_pixel() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_half_float_pixel)) {
    return GLEW_GET_VAR(__GLEW_ARB_half_float_pixel);
}
pub const GL_ARB_half_float_vertex = @as(c_int, 1);
pub const GL_HALF_FLOAT = @as(c_int, 0x140B);
// /usr/include/GL/glew.h:5273:9: warning: macro 'GLEW_ARB_half_float_vertex' contains a runtime value, translated to function
pub inline fn GLEW_ARB_half_float_vertex() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_half_float_vertex)) {
    return GLEW_GET_VAR(__GLEW_ARB_half_float_vertex);
}
pub const GL_ARB_imaging = @as(c_int, 1);
pub const GL_CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8001, .hex);
pub const GL_ONE_MINUS_CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8002, .hex);
pub const GL_CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8003, .hex);
pub const GL_ONE_MINUS_CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8004, .hex);
pub const GL_BLEND_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8005, .hex);
pub const GL_FUNC_ADD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hex);
pub const GL_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8007, .hex);
pub const GL_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8008, .hex);
pub const GL_BLEND_EQUATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hex);
pub const GL_FUNC_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hex);
pub const GL_FUNC_REVERSE_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hex);
pub const GL_CONVOLUTION_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8010, .hex);
pub const GL_CONVOLUTION_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8011, .hex);
pub const GL_SEPARABLE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8012, .hex);
pub const GL_CONVOLUTION_BORDER_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8013, .hex);
pub const GL_CONVOLUTION_FILTER_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8014, .hex);
pub const GL_CONVOLUTION_FILTER_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8015, .hex);
pub const GL_REDUCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8016, .hex);
pub const GL_CONVOLUTION_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8017, .hex);
pub const GL_CONVOLUTION_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8018, .hex);
pub const GL_CONVOLUTION_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8019, .hex);
pub const GL_MAX_CONVOLUTION_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801A, .hex);
pub const GL_MAX_CONVOLUTION_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801B, .hex);
pub const GL_POST_CONVOLUTION_RED_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801C, .hex);
pub const GL_POST_CONVOLUTION_GREEN_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801D, .hex);
pub const GL_POST_CONVOLUTION_BLUE_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801E, .hex);
pub const GL_POST_CONVOLUTION_ALPHA_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801F, .hex);
pub const GL_POST_CONVOLUTION_RED_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8020, .hex);
pub const GL_POST_CONVOLUTION_GREEN_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8021, .hex);
pub const GL_POST_CONVOLUTION_BLUE_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8022, .hex);
pub const GL_POST_CONVOLUTION_ALPHA_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8023, .hex);
pub const GL_HISTOGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8024, .hex);
pub const GL_PROXY_HISTOGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8025, .hex);
pub const GL_HISTOGRAM_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8026, .hex);
pub const GL_HISTOGRAM_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8027, .hex);
pub const GL_HISTOGRAM_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8028, .hex);
pub const GL_HISTOGRAM_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8029, .hex);
pub const GL_HISTOGRAM_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802A, .hex);
pub const GL_HISTOGRAM_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802B, .hex);
pub const GL_HISTOGRAM_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802C, .hex);
pub const GL_HISTOGRAM_SINK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802D, .hex);
pub const GL_MINMAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802E, .hex);
pub const GL_MINMAX_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802F, .hex);
pub const GL_MINMAX_SINK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8030, .hex);
pub const GL_TABLE_TOO_LARGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8031, .hex);
pub const GL_COLOR_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B1, .hex);
pub const GL_COLOR_MATRIX_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B2, .hex);
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B3, .hex);
pub const GL_POST_COLOR_MATRIX_RED_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B4, .hex);
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B5, .hex);
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B6, .hex);
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B7, .hex);
pub const GL_POST_COLOR_MATRIX_RED_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B8, .hex);
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B9, .hex);
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BA, .hex);
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BB, .hex);
pub const GL_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D0, .hex);
pub const GL_POST_CONVOLUTION_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D1, .hex);
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D2, .hex);
pub const GL_PROXY_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D3, .hex);
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D4, .hex);
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D5, .hex);
pub const GL_COLOR_TABLE_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D6, .hex);
pub const GL_COLOR_TABLE_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D7, .hex);
pub const GL_COLOR_TABLE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D8, .hex);
pub const GL_COLOR_TABLE_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D9, .hex);
pub const GL_COLOR_TABLE_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DA, .hex);
pub const GL_COLOR_TABLE_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DB, .hex);
pub const GL_COLOR_TABLE_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DC, .hex);
pub const GL_COLOR_TABLE_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DD, .hex);
pub const GL_COLOR_TABLE_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DE, .hex);
pub const GL_COLOR_TABLE_INTENSITY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DF, .hex);
pub const GL_IGNORE_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8150, .hex);
pub const GL_CONSTANT_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8151, .hex);
pub const GL_WRAP_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8152, .hex);
pub const GL_REPLICATE_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8153, .hex);
pub const GL_CONVOLUTION_BORDER_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8154, .hex);
// /usr/include/GL/glew.h:5393:9: warning: macro 'glColorSubTable' contains a runtime value, translated to function
pub inline fn glColorSubTable() @TypeOf(GLEW_GET_FUN(__glewColorSubTable)) {
    return GLEW_GET_FUN(__glewColorSubTable);
}
// /usr/include/GL/glew.h:5394:9: warning: macro 'glColorTable' contains a runtime value, translated to function
pub inline fn glColorTable() @TypeOf(GLEW_GET_FUN(__glewColorTable)) {
    return GLEW_GET_FUN(__glewColorTable);
}
// /usr/include/GL/glew.h:5395:9: warning: macro 'glColorTableParameterfv' contains a runtime value, translated to function
pub inline fn glColorTableParameterfv() @TypeOf(GLEW_GET_FUN(__glewColorTableParameterfv)) {
    return GLEW_GET_FUN(__glewColorTableParameterfv);
}
// /usr/include/GL/glew.h:5396:9: warning: macro 'glColorTableParameteriv' contains a runtime value, translated to function
pub inline fn glColorTableParameteriv() @TypeOf(GLEW_GET_FUN(__glewColorTableParameteriv)) {
    return GLEW_GET_FUN(__glewColorTableParameteriv);
}
// /usr/include/GL/glew.h:5397:9: warning: macro 'glConvolutionFilter1D' contains a runtime value, translated to function
pub inline fn glConvolutionFilter1D() @TypeOf(GLEW_GET_FUN(__glewConvolutionFilter1D)) {
    return GLEW_GET_FUN(__glewConvolutionFilter1D);
}
// /usr/include/GL/glew.h:5398:9: warning: macro 'glConvolutionFilter2D' contains a runtime value, translated to function
pub inline fn glConvolutionFilter2D() @TypeOf(GLEW_GET_FUN(__glewConvolutionFilter2D)) {
    return GLEW_GET_FUN(__glewConvolutionFilter2D);
}
// /usr/include/GL/glew.h:5399:9: warning: macro 'glConvolutionParameterf' contains a runtime value, translated to function
pub inline fn glConvolutionParameterf() @TypeOf(GLEW_GET_FUN(__glewConvolutionParameterf)) {
    return GLEW_GET_FUN(__glewConvolutionParameterf);
}
// /usr/include/GL/glew.h:5400:9: warning: macro 'glConvolutionParameterfv' contains a runtime value, translated to function
pub inline fn glConvolutionParameterfv() @TypeOf(GLEW_GET_FUN(__glewConvolutionParameterfv)) {
    return GLEW_GET_FUN(__glewConvolutionParameterfv);
}
// /usr/include/GL/glew.h:5401:9: warning: macro 'glConvolutionParameteri' contains a runtime value, translated to function
pub inline fn glConvolutionParameteri() @TypeOf(GLEW_GET_FUN(__glewConvolutionParameteri)) {
    return GLEW_GET_FUN(__glewConvolutionParameteri);
}
// /usr/include/GL/glew.h:5402:9: warning: macro 'glConvolutionParameteriv' contains a runtime value, translated to function
pub inline fn glConvolutionParameteriv() @TypeOf(GLEW_GET_FUN(__glewConvolutionParameteriv)) {
    return GLEW_GET_FUN(__glewConvolutionParameteriv);
}
// /usr/include/GL/glew.h:5403:9: warning: macro 'glCopyColorSubTable' contains a runtime value, translated to function
pub inline fn glCopyColorSubTable() @TypeOf(GLEW_GET_FUN(__glewCopyColorSubTable)) {
    return GLEW_GET_FUN(__glewCopyColorSubTable);
}
// /usr/include/GL/glew.h:5404:9: warning: macro 'glCopyColorTable' contains a runtime value, translated to function
pub inline fn glCopyColorTable() @TypeOf(GLEW_GET_FUN(__glewCopyColorTable)) {
    return GLEW_GET_FUN(__glewCopyColorTable);
}
// /usr/include/GL/glew.h:5405:9: warning: macro 'glCopyConvolutionFilter1D' contains a runtime value, translated to function
pub inline fn glCopyConvolutionFilter1D() @TypeOf(GLEW_GET_FUN(__glewCopyConvolutionFilter1D)) {
    return GLEW_GET_FUN(__glewCopyConvolutionFilter1D);
}
// /usr/include/GL/glew.h:5406:9: warning: macro 'glCopyConvolutionFilter2D' contains a runtime value, translated to function
pub inline fn glCopyConvolutionFilter2D() @TypeOf(GLEW_GET_FUN(__glewCopyConvolutionFilter2D)) {
    return GLEW_GET_FUN(__glewCopyConvolutionFilter2D);
}
// /usr/include/GL/glew.h:5407:9: warning: macro 'glGetColorTable' contains a runtime value, translated to function
pub inline fn glGetColorTable() @TypeOf(GLEW_GET_FUN(__glewGetColorTable)) {
    return GLEW_GET_FUN(__glewGetColorTable);
}
// /usr/include/GL/glew.h:5408:9: warning: macro 'glGetColorTableParameterfv' contains a runtime value, translated to function
pub inline fn glGetColorTableParameterfv() @TypeOf(GLEW_GET_FUN(__glewGetColorTableParameterfv)) {
    return GLEW_GET_FUN(__glewGetColorTableParameterfv);
}
// /usr/include/GL/glew.h:5409:9: warning: macro 'glGetColorTableParameteriv' contains a runtime value, translated to function
pub inline fn glGetColorTableParameteriv() @TypeOf(GLEW_GET_FUN(__glewGetColorTableParameteriv)) {
    return GLEW_GET_FUN(__glewGetColorTableParameteriv);
}
// /usr/include/GL/glew.h:5410:9: warning: macro 'glGetConvolutionFilter' contains a runtime value, translated to function
pub inline fn glGetConvolutionFilter() @TypeOf(GLEW_GET_FUN(__glewGetConvolutionFilter)) {
    return GLEW_GET_FUN(__glewGetConvolutionFilter);
}
// /usr/include/GL/glew.h:5411:9: warning: macro 'glGetConvolutionParameterfv' contains a runtime value, translated to function
pub inline fn glGetConvolutionParameterfv() @TypeOf(GLEW_GET_FUN(__glewGetConvolutionParameterfv)) {
    return GLEW_GET_FUN(__glewGetConvolutionParameterfv);
}
// /usr/include/GL/glew.h:5412:9: warning: macro 'glGetConvolutionParameteriv' contains a runtime value, translated to function
pub inline fn glGetConvolutionParameteriv() @TypeOf(GLEW_GET_FUN(__glewGetConvolutionParameteriv)) {
    return GLEW_GET_FUN(__glewGetConvolutionParameteriv);
}
// /usr/include/GL/glew.h:5413:9: warning: macro 'glGetHistogram' contains a runtime value, translated to function
pub inline fn glGetHistogram() @TypeOf(GLEW_GET_FUN(__glewGetHistogram)) {
    return GLEW_GET_FUN(__glewGetHistogram);
}
// /usr/include/GL/glew.h:5414:9: warning: macro 'glGetHistogramParameterfv' contains a runtime value, translated to function
pub inline fn glGetHistogramParameterfv() @TypeOf(GLEW_GET_FUN(__glewGetHistogramParameterfv)) {
    return GLEW_GET_FUN(__glewGetHistogramParameterfv);
}
// /usr/include/GL/glew.h:5415:9: warning: macro 'glGetHistogramParameteriv' contains a runtime value, translated to function
pub inline fn glGetHistogramParameteriv() @TypeOf(GLEW_GET_FUN(__glewGetHistogramParameteriv)) {
    return GLEW_GET_FUN(__glewGetHistogramParameteriv);
}
// /usr/include/GL/glew.h:5416:9: warning: macro 'glGetMinmax' contains a runtime value, translated to function
pub inline fn glGetMinmax() @TypeOf(GLEW_GET_FUN(__glewGetMinmax)) {
    return GLEW_GET_FUN(__glewGetMinmax);
}
// /usr/include/GL/glew.h:5417:9: warning: macro 'glGetMinmaxParameterfv' contains a runtime value, translated to function
pub inline fn glGetMinmaxParameterfv() @TypeOf(GLEW_GET_FUN(__glewGetMinmaxParameterfv)) {
    return GLEW_GET_FUN(__glewGetMinmaxParameterfv);
}
// /usr/include/GL/glew.h:5418:9: warning: macro 'glGetMinmaxParameteriv' contains a runtime value, translated to function
pub inline fn glGetMinmaxParameteriv() @TypeOf(GLEW_GET_FUN(__glewGetMinmaxParameteriv)) {
    return GLEW_GET_FUN(__glewGetMinmaxParameteriv);
}
// /usr/include/GL/glew.h:5419:9: warning: macro 'glGetSeparableFilter' contains a runtime value, translated to function
pub inline fn glGetSeparableFilter() @TypeOf(GLEW_GET_FUN(__glewGetSeparableFilter)) {
    return GLEW_GET_FUN(__glewGetSeparableFilter);
}
// /usr/include/GL/glew.h:5420:9: warning: macro 'glHistogram' contains a runtime value, translated to function
pub inline fn glHistogram() @TypeOf(GLEW_GET_FUN(__glewHistogram)) {
    return GLEW_GET_FUN(__glewHistogram);
}
// /usr/include/GL/glew.h:5421:9: warning: macro 'glMinmax' contains a runtime value, translated to function
pub inline fn glMinmax() @TypeOf(GLEW_GET_FUN(__glewMinmax)) {
    return GLEW_GET_FUN(__glewMinmax);
}
// /usr/include/GL/glew.h:5422:9: warning: macro 'glResetHistogram' contains a runtime value, translated to function
pub inline fn glResetHistogram() @TypeOf(GLEW_GET_FUN(__glewResetHistogram)) {
    return GLEW_GET_FUN(__glewResetHistogram);
}
// /usr/include/GL/glew.h:5423:9: warning: macro 'glResetMinmax' contains a runtime value, translated to function
pub inline fn glResetMinmax() @TypeOf(GLEW_GET_FUN(__glewResetMinmax)) {
    return GLEW_GET_FUN(__glewResetMinmax);
}
// /usr/include/GL/glew.h:5424:9: warning: macro 'glSeparableFilter2D' contains a runtime value, translated to function
pub inline fn glSeparableFilter2D() @TypeOf(GLEW_GET_FUN(__glewSeparableFilter2D)) {
    return GLEW_GET_FUN(__glewSeparableFilter2D);
}
// /usr/include/GL/glew.h:5426:9: warning: macro 'GLEW_ARB_imaging' contains a runtime value, translated to function
pub inline fn GLEW_ARB_imaging() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_imaging)) {
    return GLEW_GET_VAR(__GLEW_ARB_imaging);
}
pub const GL_ARB_indirect_parameters = @as(c_int, 1);
pub const GL_PARAMETER_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EE, .hex);
pub const GL_PARAMETER_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EF, .hex);
// /usr/include/GL/glew.h:5441:9: warning: macro 'glMultiDrawArraysIndirectCountARB' contains a runtime value, translated to function
pub inline fn glMultiDrawArraysIndirectCountARB() @TypeOf(GLEW_GET_FUN(__glewMultiDrawArraysIndirectCountARB)) {
    return GLEW_GET_FUN(__glewMultiDrawArraysIndirectCountARB);
}
// /usr/include/GL/glew.h:5442:9: warning: macro 'glMultiDrawElementsIndirectCountARB' contains a runtime value, translated to function
pub inline fn glMultiDrawElementsIndirectCountARB() @TypeOf(GLEW_GET_FUN(__glewMultiDrawElementsIndirectCountARB)) {
    return GLEW_GET_FUN(__glewMultiDrawElementsIndirectCountARB);
}
// /usr/include/GL/glew.h:5444:9: warning: macro 'GLEW_ARB_indirect_parameters' contains a runtime value, translated to function
pub inline fn GLEW_ARB_indirect_parameters() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_indirect_parameters)) {
    return GLEW_GET_VAR(__GLEW_ARB_indirect_parameters);
}
pub const GL_ARB_instanced_arrays = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hex);
// /usr/include/GL/glew.h:5459:9: warning: macro 'glDrawArraysInstancedARB' contains a runtime value, translated to function
pub inline fn glDrawArraysInstancedARB() @TypeOf(GLEW_GET_FUN(__glewDrawArraysInstancedARB)) {
    return GLEW_GET_FUN(__glewDrawArraysInstancedARB);
}
// /usr/include/GL/glew.h:5460:9: warning: macro 'glDrawElementsInstancedARB' contains a runtime value, translated to function
pub inline fn glDrawElementsInstancedARB() @TypeOf(GLEW_GET_FUN(__glewDrawElementsInstancedARB)) {
    return GLEW_GET_FUN(__glewDrawElementsInstancedARB);
}
// /usr/include/GL/glew.h:5461:9: warning: macro 'glVertexAttribDivisorARB' contains a runtime value, translated to function
pub inline fn glVertexAttribDivisorARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttribDivisorARB)) {
    return GLEW_GET_FUN(__glewVertexAttribDivisorARB);
}
// /usr/include/GL/glew.h:5463:9: warning: macro 'GLEW_ARB_instanced_arrays' contains a runtime value, translated to function
pub inline fn GLEW_ARB_instanced_arrays() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_instanced_arrays)) {
    return GLEW_GET_VAR(__GLEW_ARB_instanced_arrays);
}
pub const GL_ARB_internalformat_query = @as(c_int, 1);
pub const GL_NUM_SAMPLE_COUNTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9380, .hex);
// /usr/include/GL/glew.h:5476:9: warning: macro 'glGetInternalformativ' contains a runtime value, translated to function
pub inline fn glGetInternalformativ() @TypeOf(GLEW_GET_FUN(__glewGetInternalformativ)) {
    return GLEW_GET_FUN(__glewGetInternalformativ);
}
// /usr/include/GL/glew.h:5478:9: warning: macro 'GLEW_ARB_internalformat_query' contains a runtime value, translated to function
pub inline fn GLEW_ARB_internalformat_query() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_internalformat_query)) {
    return GLEW_GET_VAR(__GLEW_ARB_internalformat_query);
}
pub const GL_ARB_internalformat_query2 = @as(c_int, 1);
pub const GL_INTERNALFORMAT_SUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826F, .hex);
pub const GL_INTERNALFORMAT_PREFERRED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8270, .hex);
pub const GL_INTERNALFORMAT_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8271, .hex);
pub const GL_INTERNALFORMAT_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8272, .hex);
pub const GL_INTERNALFORMAT_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8273, .hex);
pub const GL_INTERNALFORMAT_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8274, .hex);
pub const GL_INTERNALFORMAT_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8275, .hex);
pub const GL_INTERNALFORMAT_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8276, .hex);
pub const GL_INTERNALFORMAT_SHARED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8277, .hex);
pub const GL_INTERNALFORMAT_RED_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8278, .hex);
pub const GL_INTERNALFORMAT_GREEN_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8279, .hex);
pub const GL_INTERNALFORMAT_BLUE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827A, .hex);
pub const GL_INTERNALFORMAT_ALPHA_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827B, .hex);
pub const GL_INTERNALFORMAT_DEPTH_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827C, .hex);
pub const GL_INTERNALFORMAT_STENCIL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827D, .hex);
pub const GL_MAX_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827E, .hex);
pub const GL_MAX_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827F, .hex);
pub const GL_MAX_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8280, .hex);
pub const GL_MAX_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8281, .hex);
pub const GL_MAX_COMBINED_DIMENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8282, .hex);
pub const GL_COLOR_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8283, .hex);
pub const GL_DEPTH_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8284, .hex);
pub const GL_STENCIL_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8285, .hex);
pub const GL_COLOR_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8286, .hex);
pub const GL_DEPTH_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8287, .hex);
pub const GL_STENCIL_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8288, .hex);
pub const GL_FRAMEBUFFER_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8289, .hex);
pub const GL_FRAMEBUFFER_RENDERABLE_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828A, .hex);
pub const GL_FRAMEBUFFER_BLEND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828B, .hex);
pub const GL_READ_PIXELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828C, .hex);
pub const GL_READ_PIXELS_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828D, .hex);
pub const GL_READ_PIXELS_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828E, .hex);
pub const GL_TEXTURE_IMAGE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828F, .hex);
pub const GL_TEXTURE_IMAGE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8290, .hex);
pub const GL_GET_TEXTURE_IMAGE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8291, .hex);
pub const GL_GET_TEXTURE_IMAGE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8292, .hex);
pub const GL_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8293, .hex);
pub const GL_MANUAL_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8294, .hex);
pub const GL_AUTO_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8295, .hex);
pub const GL_COLOR_ENCODING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8296, .hex);
pub const GL_SRGB_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8297, .hex);
pub const GL_SRGB_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8298, .hex);
pub const GL_SRGB_DECODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8299, .hex);
pub const GL_FILTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829A, .hex);
pub const GL_VERTEX_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829B, .hex);
pub const GL_TESS_CONTROL_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829C, .hex);
pub const GL_TESS_EVALUATION_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829D, .hex);
pub const GL_GEOMETRY_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829E, .hex);
pub const GL_FRAGMENT_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829F, .hex);
pub const GL_COMPUTE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A0, .hex);
pub const GL_TEXTURE_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A1, .hex);
pub const GL_TEXTURE_GATHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A2, .hex);
pub const GL_TEXTURE_GATHER_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A3, .hex);
pub const GL_SHADER_IMAGE_LOAD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A4, .hex);
pub const GL_SHADER_IMAGE_STORE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A5, .hex);
pub const GL_SHADER_IMAGE_ATOMIC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A6, .hex);
pub const GL_IMAGE_TEXEL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A7, .hex);
pub const GL_IMAGE_COMPATIBILITY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A8, .hex);
pub const GL_IMAGE_PIXEL_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A9, .hex);
pub const GL_IMAGE_PIXEL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AA, .hex);
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AC, .hex);
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AD, .hex);
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AE, .hex);
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AF, .hex);
pub const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B1, .hex);
pub const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B2, .hex);
pub const GL_TEXTURE_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B3, .hex);
pub const GL_CLEAR_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B4, .hex);
pub const GL_TEXTURE_VIEW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B5, .hex);
pub const GL_VIEW_COMPATIBILITY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B6, .hex);
pub const GL_FULL_SUPPORT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B7, .hex);
pub const GL_CAVEAT_SUPPORT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B8, .hex);
pub const GL_IMAGE_CLASS_4_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B9, .hex);
pub const GL_IMAGE_CLASS_2_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BA, .hex);
pub const GL_IMAGE_CLASS_1_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BB, .hex);
pub const GL_IMAGE_CLASS_4_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BC, .hex);
pub const GL_IMAGE_CLASS_2_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BD, .hex);
pub const GL_IMAGE_CLASS_1_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BE, .hex);
pub const GL_IMAGE_CLASS_4_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BF, .hex);
pub const GL_IMAGE_CLASS_2_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C0, .hex);
pub const GL_IMAGE_CLASS_1_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C1, .hex);
pub const GL_IMAGE_CLASS_11_11_10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C2, .hex);
pub const GL_IMAGE_CLASS_10_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C3, .hex);
pub const GL_VIEW_CLASS_128_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C4, .hex);
pub const GL_VIEW_CLASS_96_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C5, .hex);
pub const GL_VIEW_CLASS_64_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C6, .hex);
pub const GL_VIEW_CLASS_48_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C7, .hex);
pub const GL_VIEW_CLASS_32_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C8, .hex);
pub const GL_VIEW_CLASS_24_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C9, .hex);
pub const GL_VIEW_CLASS_16_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CA, .hex);
pub const GL_VIEW_CLASS_8_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CB, .hex);
pub const GL_VIEW_CLASS_S3TC_DXT1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CC, .hex);
pub const GL_VIEW_CLASS_S3TC_DXT1_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CD, .hex);
pub const GL_VIEW_CLASS_S3TC_DXT3_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CE, .hex);
pub const GL_VIEW_CLASS_S3TC_DXT5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CF, .hex);
pub const GL_VIEW_CLASS_RGTC1_RED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D0, .hex);
pub const GL_VIEW_CLASS_RGTC2_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D1, .hex);
pub const GL_VIEW_CLASS_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D2, .hex);
pub const GL_VIEW_CLASS_BPTC_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D3, .hex);
// /usr/include/GL/glew.h:5589:9: warning: macro 'glGetInternalformati64v' contains a runtime value, translated to function
pub inline fn glGetInternalformati64v() @TypeOf(GLEW_GET_FUN(__glewGetInternalformati64v)) {
    return GLEW_GET_FUN(__glewGetInternalformati64v);
}
// /usr/include/GL/glew.h:5591:9: warning: macro 'GLEW_ARB_internalformat_query2' contains a runtime value, translated to function
pub inline fn GLEW_ARB_internalformat_query2() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_internalformat_query2)) {
    return GLEW_GET_VAR(__GLEW_ARB_internalformat_query2);
}
pub const GL_ARB_invalidate_subdata = @as(c_int, 1);
// /usr/include/GL/glew.h:5607:9: warning: macro 'glInvalidateBufferData' contains a runtime value, translated to function
pub inline fn glInvalidateBufferData() @TypeOf(GLEW_GET_FUN(__glewInvalidateBufferData)) {
    return GLEW_GET_FUN(__glewInvalidateBufferData);
}
// /usr/include/GL/glew.h:5608:9: warning: macro 'glInvalidateBufferSubData' contains a runtime value, translated to function
pub inline fn glInvalidateBufferSubData() @TypeOf(GLEW_GET_FUN(__glewInvalidateBufferSubData)) {
    return GLEW_GET_FUN(__glewInvalidateBufferSubData);
}
// /usr/include/GL/glew.h:5609:9: warning: macro 'glInvalidateFramebuffer' contains a runtime value, translated to function
pub inline fn glInvalidateFramebuffer() @TypeOf(GLEW_GET_FUN(__glewInvalidateFramebuffer)) {
    return GLEW_GET_FUN(__glewInvalidateFramebuffer);
}
// /usr/include/GL/glew.h:5610:9: warning: macro 'glInvalidateSubFramebuffer' contains a runtime value, translated to function
pub inline fn glInvalidateSubFramebuffer() @TypeOf(GLEW_GET_FUN(__glewInvalidateSubFramebuffer)) {
    return GLEW_GET_FUN(__glewInvalidateSubFramebuffer);
}
// /usr/include/GL/glew.h:5611:9: warning: macro 'glInvalidateTexImage' contains a runtime value, translated to function
pub inline fn glInvalidateTexImage() @TypeOf(GLEW_GET_FUN(__glewInvalidateTexImage)) {
    return GLEW_GET_FUN(__glewInvalidateTexImage);
}
// /usr/include/GL/glew.h:5612:9: warning: macro 'glInvalidateTexSubImage' contains a runtime value, translated to function
pub inline fn glInvalidateTexSubImage() @TypeOf(GLEW_GET_FUN(__glewInvalidateTexSubImage)) {
    return GLEW_GET_FUN(__glewInvalidateTexSubImage);
}
// /usr/include/GL/glew.h:5614:9: warning: macro 'GLEW_ARB_invalidate_subdata' contains a runtime value, translated to function
pub inline fn GLEW_ARB_invalidate_subdata() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_invalidate_subdata)) {
    return GLEW_GET_VAR(__GLEW_ARB_invalidate_subdata);
}
pub const GL_ARB_map_buffer_alignment = @as(c_int, 1);
pub const GL_MIN_MAP_BUFFER_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BC, .hex);
// /usr/include/GL/glew.h:5625:9: warning: macro 'GLEW_ARB_map_buffer_alignment' contains a runtime value, translated to function
pub inline fn GLEW_ARB_map_buffer_alignment() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_map_buffer_alignment)) {
    return GLEW_GET_VAR(__GLEW_ARB_map_buffer_alignment);
}
pub const GL_ARB_map_buffer_range = @as(c_int, 1);
pub const GL_MAP_INVALIDATE_RANGE_BIT = @as(c_int, 0x0004);
pub const GL_MAP_INVALIDATE_BUFFER_BIT = @as(c_int, 0x0008);
pub const GL_MAP_FLUSH_EXPLICIT_BIT = @as(c_int, 0x0010);
pub const GL_MAP_UNSYNCHRONIZED_BIT = @as(c_int, 0x0020);
// /usr/include/GL/glew.h:5644:9: warning: macro 'glFlushMappedBufferRange' contains a runtime value, translated to function
pub inline fn glFlushMappedBufferRange() @TypeOf(GLEW_GET_FUN(__glewFlushMappedBufferRange)) {
    return GLEW_GET_FUN(__glewFlushMappedBufferRange);
}
// /usr/include/GL/glew.h:5645:9: warning: macro 'glMapBufferRange' contains a runtime value, translated to function
pub inline fn glMapBufferRange() @TypeOf(GLEW_GET_FUN(__glewMapBufferRange)) {
    return GLEW_GET_FUN(__glewMapBufferRange);
}
// /usr/include/GL/glew.h:5647:9: warning: macro 'GLEW_ARB_map_buffer_range' contains a runtime value, translated to function
pub inline fn GLEW_ARB_map_buffer_range() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_map_buffer_range)) {
    return GLEW_GET_VAR(__GLEW_ARB_map_buffer_range);
}
pub const GL_ARB_matrix_palette = @as(c_int, 1);
pub const GL_MATRIX_PALETTE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8840, .hex);
pub const GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8841, .hex);
pub const GL_MAX_PALETTE_MATRICES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8842, .hex);
pub const GL_CURRENT_PALETTE_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8843, .hex);
pub const GL_MATRIX_INDEX_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8844, .hex);
pub const GL_CURRENT_MATRIX_INDEX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8845, .hex);
pub const GL_MATRIX_INDEX_ARRAY_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8846, .hex);
pub const GL_MATRIX_INDEX_ARRAY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8847, .hex);
pub const GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8848, .hex);
pub const GL_MATRIX_INDEX_ARRAY_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8849, .hex);
// /usr/include/GL/glew.h:5673:9: warning: macro 'glCurrentPaletteMatrixARB' contains a runtime value, translated to function
pub inline fn glCurrentPaletteMatrixARB() @TypeOf(GLEW_GET_FUN(__glewCurrentPaletteMatrixARB)) {
    return GLEW_GET_FUN(__glewCurrentPaletteMatrixARB);
}
// /usr/include/GL/glew.h:5674:9: warning: macro 'glMatrixIndexPointerARB' contains a runtime value, translated to function
pub inline fn glMatrixIndexPointerARB() @TypeOf(GLEW_GET_FUN(__glewMatrixIndexPointerARB)) {
    return GLEW_GET_FUN(__glewMatrixIndexPointerARB);
}
// /usr/include/GL/glew.h:5675:9: warning: macro 'glMatrixIndexubvARB' contains a runtime value, translated to function
pub inline fn glMatrixIndexubvARB() @TypeOf(GLEW_GET_FUN(__glewMatrixIndexubvARB)) {
    return GLEW_GET_FUN(__glewMatrixIndexubvARB);
}
// /usr/include/GL/glew.h:5676:9: warning: macro 'glMatrixIndexuivARB' contains a runtime value, translated to function
pub inline fn glMatrixIndexuivARB() @TypeOf(GLEW_GET_FUN(__glewMatrixIndexuivARB)) {
    return GLEW_GET_FUN(__glewMatrixIndexuivARB);
}
// /usr/include/GL/glew.h:5677:9: warning: macro 'glMatrixIndexusvARB' contains a runtime value, translated to function
pub inline fn glMatrixIndexusvARB() @TypeOf(GLEW_GET_FUN(__glewMatrixIndexusvARB)) {
    return GLEW_GET_FUN(__glewMatrixIndexusvARB);
}
// /usr/include/GL/glew.h:5679:9: warning: macro 'GLEW_ARB_matrix_palette' contains a runtime value, translated to function
pub inline fn GLEW_ARB_matrix_palette() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_matrix_palette)) {
    return GLEW_GET_VAR(__GLEW_ARB_matrix_palette);
}
pub const GL_ARB_multi_bind = @as(c_int, 1);
// /usr/include/GL/glew.h:5695:9: warning: macro 'glBindBuffersBase' contains a runtime value, translated to function
pub inline fn glBindBuffersBase() @TypeOf(GLEW_GET_FUN(__glewBindBuffersBase)) {
    return GLEW_GET_FUN(__glewBindBuffersBase);
}
// /usr/include/GL/glew.h:5696:9: warning: macro 'glBindBuffersRange' contains a runtime value, translated to function
pub inline fn glBindBuffersRange() @TypeOf(GLEW_GET_FUN(__glewBindBuffersRange)) {
    return GLEW_GET_FUN(__glewBindBuffersRange);
}
// /usr/include/GL/glew.h:5697:9: warning: macro 'glBindImageTextures' contains a runtime value, translated to function
pub inline fn glBindImageTextures() @TypeOf(GLEW_GET_FUN(__glewBindImageTextures)) {
    return GLEW_GET_FUN(__glewBindImageTextures);
}
// /usr/include/GL/glew.h:5698:9: warning: macro 'glBindSamplers' contains a runtime value, translated to function
pub inline fn glBindSamplers() @TypeOf(GLEW_GET_FUN(__glewBindSamplers)) {
    return GLEW_GET_FUN(__glewBindSamplers);
}
// /usr/include/GL/glew.h:5699:9: warning: macro 'glBindTextures' contains a runtime value, translated to function
pub inline fn glBindTextures() @TypeOf(GLEW_GET_FUN(__glewBindTextures)) {
    return GLEW_GET_FUN(__glewBindTextures);
}
// /usr/include/GL/glew.h:5700:9: warning: macro 'glBindVertexBuffers' contains a runtime value, translated to function
pub inline fn glBindVertexBuffers() @TypeOf(GLEW_GET_FUN(__glewBindVertexBuffers)) {
    return GLEW_GET_FUN(__glewBindVertexBuffers);
}
// /usr/include/GL/glew.h:5702:9: warning: macro 'GLEW_ARB_multi_bind' contains a runtime value, translated to function
pub inline fn GLEW_ARB_multi_bind() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_multi_bind)) {
    return GLEW_GET_VAR(__GLEW_ARB_multi_bind);
}
pub const GL_ARB_multi_draw_indirect = @as(c_int, 1);
// /usr/include/GL/glew.h:5714:9: warning: macro 'glMultiDrawArraysIndirect' contains a runtime value, translated to function
pub inline fn glMultiDrawArraysIndirect() @TypeOf(GLEW_GET_FUN(__glewMultiDrawArraysIndirect)) {
    return GLEW_GET_FUN(__glewMultiDrawArraysIndirect);
}
// /usr/include/GL/glew.h:5715:9: warning: macro 'glMultiDrawElementsIndirect' contains a runtime value, translated to function
pub inline fn glMultiDrawElementsIndirect() @TypeOf(GLEW_GET_FUN(__glewMultiDrawElementsIndirect)) {
    return GLEW_GET_FUN(__glewMultiDrawElementsIndirect);
}
// /usr/include/GL/glew.h:5717:9: warning: macro 'GLEW_ARB_multi_draw_indirect' contains a runtime value, translated to function
pub inline fn GLEW_ARB_multi_draw_indirect() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_multi_draw_indirect)) {
    return GLEW_GET_VAR(__GLEW_ARB_multi_draw_indirect);
}
pub const GL_ARB_multisample = @as(c_int, 1);
pub const GL_MULTISAMPLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hex);
pub const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hex);
pub const GL_SAMPLE_ALPHA_TO_ONE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hex);
pub const GL_SAMPLE_COVERAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hex);
pub const GL_SAMPLE_BUFFERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hex);
pub const GL_SAMPLES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hex);
pub const GL_SAMPLE_COVERAGE_VALUE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hex);
pub const GL_SAMPLE_COVERAGE_INVERT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hex);
pub const GL_MULTISAMPLE_BIT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
// /usr/include/GL/glew.h:5738:9: warning: macro 'glSampleCoverageARB' contains a runtime value, translated to function
pub inline fn glSampleCoverageARB() @TypeOf(GLEW_GET_FUN(__glewSampleCoverageARB)) {
    return GLEW_GET_FUN(__glewSampleCoverageARB);
}
// /usr/include/GL/glew.h:5740:9: warning: macro 'GLEW_ARB_multisample' contains a runtime value, translated to function
pub inline fn GLEW_ARB_multisample() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_multisample)) {
    return GLEW_GET_VAR(__GLEW_ARB_multisample);
}
pub const GL_ARB_multitexture = @as(c_int, 1);
pub const GL_TEXTURE0_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C0, .hex);
pub const GL_TEXTURE1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C1, .hex);
pub const GL_TEXTURE2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C2, .hex);
pub const GL_TEXTURE3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C3, .hex);
pub const GL_TEXTURE4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C4, .hex);
pub const GL_TEXTURE5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C5, .hex);
pub const GL_TEXTURE6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C6, .hex);
pub const GL_TEXTURE7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C7, .hex);
pub const GL_TEXTURE8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C8, .hex);
pub const GL_TEXTURE9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C9, .hex);
pub const GL_TEXTURE10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CA, .hex);
pub const GL_TEXTURE11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CB, .hex);
pub const GL_TEXTURE12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CC, .hex);
pub const GL_TEXTURE13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CD, .hex);
pub const GL_TEXTURE14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CE, .hex);
pub const GL_TEXTURE15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CF, .hex);
pub const GL_TEXTURE16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D0, .hex);
pub const GL_TEXTURE17_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D1, .hex);
pub const GL_TEXTURE18_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D2, .hex);
pub const GL_TEXTURE19_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D3, .hex);
pub const GL_TEXTURE20_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D4, .hex);
pub const GL_TEXTURE21_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D5, .hex);
pub const GL_TEXTURE22_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D6, .hex);
pub const GL_TEXTURE23_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D7, .hex);
pub const GL_TEXTURE24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D8, .hex);
pub const GL_TEXTURE25_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D9, .hex);
pub const GL_TEXTURE26_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DA, .hex);
pub const GL_TEXTURE27_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DB, .hex);
pub const GL_TEXTURE28_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DC, .hex);
pub const GL_TEXTURE29_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DD, .hex);
pub const GL_TEXTURE30_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DE, .hex);
pub const GL_TEXTURE31_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DF, .hex);
pub const GL_ACTIVE_TEXTURE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E0, .hex);
pub const GL_CLIENT_ACTIVE_TEXTURE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E1, .hex);
pub const GL_MAX_TEXTURE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E2, .hex);
// /usr/include/GL/glew.h:5820:9: warning: macro 'glActiveTextureARB' contains a runtime value, translated to function
pub inline fn glActiveTextureARB() @TypeOf(GLEW_GET_FUN(__glewActiveTextureARB)) {
    return GLEW_GET_FUN(__glewActiveTextureARB);
}
// /usr/include/GL/glew.h:5821:9: warning: macro 'glClientActiveTextureARB' contains a runtime value, translated to function
pub inline fn glClientActiveTextureARB() @TypeOf(GLEW_GET_FUN(__glewClientActiveTextureARB)) {
    return GLEW_GET_FUN(__glewClientActiveTextureARB);
}
// /usr/include/GL/glew.h:5822:9: warning: macro 'glMultiTexCoord1dARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1dARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1dARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1dARB);
}
// /usr/include/GL/glew.h:5823:9: warning: macro 'glMultiTexCoord1dvARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1dvARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1dvARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1dvARB);
}
// /usr/include/GL/glew.h:5824:9: warning: macro 'glMultiTexCoord1fARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1fARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1fARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1fARB);
}
// /usr/include/GL/glew.h:5825:9: warning: macro 'glMultiTexCoord1fvARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1fvARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1fvARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1fvARB);
}
// /usr/include/GL/glew.h:5826:9: warning: macro 'glMultiTexCoord1iARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1iARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1iARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1iARB);
}
// /usr/include/GL/glew.h:5827:9: warning: macro 'glMultiTexCoord1ivARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1ivARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1ivARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1ivARB);
}
// /usr/include/GL/glew.h:5828:9: warning: macro 'glMultiTexCoord1sARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1sARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1sARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1sARB);
}
// /usr/include/GL/glew.h:5829:9: warning: macro 'glMultiTexCoord1svARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1svARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1svARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1svARB);
}
// /usr/include/GL/glew.h:5830:9: warning: macro 'glMultiTexCoord2dARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2dARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2dARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2dARB);
}
// /usr/include/GL/glew.h:5831:9: warning: macro 'glMultiTexCoord2dvARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2dvARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2dvARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2dvARB);
}
// /usr/include/GL/glew.h:5832:9: warning: macro 'glMultiTexCoord2fARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2fARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2fARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2fARB);
}
// /usr/include/GL/glew.h:5833:9: warning: macro 'glMultiTexCoord2fvARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2fvARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2fvARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2fvARB);
}
// /usr/include/GL/glew.h:5834:9: warning: macro 'glMultiTexCoord2iARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2iARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2iARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2iARB);
}
// /usr/include/GL/glew.h:5835:9: warning: macro 'glMultiTexCoord2ivARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2ivARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2ivARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2ivARB);
}
// /usr/include/GL/glew.h:5836:9: warning: macro 'glMultiTexCoord2sARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2sARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2sARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2sARB);
}
// /usr/include/GL/glew.h:5837:9: warning: macro 'glMultiTexCoord2svARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2svARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2svARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2svARB);
}
// /usr/include/GL/glew.h:5838:9: warning: macro 'glMultiTexCoord3dARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3dARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3dARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3dARB);
}
// /usr/include/GL/glew.h:5839:9: warning: macro 'glMultiTexCoord3dvARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3dvARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3dvARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3dvARB);
}
// /usr/include/GL/glew.h:5840:9: warning: macro 'glMultiTexCoord3fARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3fARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3fARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3fARB);
}
// /usr/include/GL/glew.h:5841:9: warning: macro 'glMultiTexCoord3fvARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3fvARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3fvARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3fvARB);
}
// /usr/include/GL/glew.h:5842:9: warning: macro 'glMultiTexCoord3iARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3iARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3iARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3iARB);
}
// /usr/include/GL/glew.h:5843:9: warning: macro 'glMultiTexCoord3ivARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3ivARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3ivARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3ivARB);
}
// /usr/include/GL/glew.h:5844:9: warning: macro 'glMultiTexCoord3sARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3sARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3sARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3sARB);
}
// /usr/include/GL/glew.h:5845:9: warning: macro 'glMultiTexCoord3svARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3svARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3svARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3svARB);
}
// /usr/include/GL/glew.h:5846:9: warning: macro 'glMultiTexCoord4dARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4dARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4dARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4dARB);
}
// /usr/include/GL/glew.h:5847:9: warning: macro 'glMultiTexCoord4dvARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4dvARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4dvARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4dvARB);
}
// /usr/include/GL/glew.h:5848:9: warning: macro 'glMultiTexCoord4fARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4fARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4fARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4fARB);
}
// /usr/include/GL/glew.h:5849:9: warning: macro 'glMultiTexCoord4fvARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4fvARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4fvARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4fvARB);
}
// /usr/include/GL/glew.h:5850:9: warning: macro 'glMultiTexCoord4iARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4iARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4iARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4iARB);
}
// /usr/include/GL/glew.h:5851:9: warning: macro 'glMultiTexCoord4ivARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4ivARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4ivARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4ivARB);
}
// /usr/include/GL/glew.h:5852:9: warning: macro 'glMultiTexCoord4sARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4sARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4sARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4sARB);
}
// /usr/include/GL/glew.h:5853:9: warning: macro 'glMultiTexCoord4svARB' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4svARB() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4svARB)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4svARB);
}
// /usr/include/GL/glew.h:5855:9: warning: macro 'GLEW_ARB_multitexture' contains a runtime value, translated to function
pub inline fn GLEW_ARB_multitexture() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_multitexture)) {
    return GLEW_GET_VAR(__GLEW_ARB_multitexture);
}
pub const GL_ARB_occlusion_query = @as(c_int, 1);
pub const GL_QUERY_COUNTER_BITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hex);
pub const GL_CURRENT_QUERY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hex);
pub const GL_QUERY_RESULT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hex);
pub const GL_QUERY_RESULT_AVAILABLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hex);
pub const GL_SAMPLES_PASSED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8914, .hex);
// /usr/include/GL/glew.h:5879:9: warning: macro 'glBeginQueryARB' contains a runtime value, translated to function
pub inline fn glBeginQueryARB() @TypeOf(GLEW_GET_FUN(__glewBeginQueryARB)) {
    return GLEW_GET_FUN(__glewBeginQueryARB);
}
// /usr/include/GL/glew.h:5880:9: warning: macro 'glDeleteQueriesARB' contains a runtime value, translated to function
pub inline fn glDeleteQueriesARB() @TypeOf(GLEW_GET_FUN(__glewDeleteQueriesARB)) {
    return GLEW_GET_FUN(__glewDeleteQueriesARB);
}
// /usr/include/GL/glew.h:5881:9: warning: macro 'glEndQueryARB' contains a runtime value, translated to function
pub inline fn glEndQueryARB() @TypeOf(GLEW_GET_FUN(__glewEndQueryARB)) {
    return GLEW_GET_FUN(__glewEndQueryARB);
}
// /usr/include/GL/glew.h:5882:9: warning: macro 'glGenQueriesARB' contains a runtime value, translated to function
pub inline fn glGenQueriesARB() @TypeOf(GLEW_GET_FUN(__glewGenQueriesARB)) {
    return GLEW_GET_FUN(__glewGenQueriesARB);
}
// /usr/include/GL/glew.h:5883:9: warning: macro 'glGetQueryObjectivARB' contains a runtime value, translated to function
pub inline fn glGetQueryObjectivARB() @TypeOf(GLEW_GET_FUN(__glewGetQueryObjectivARB)) {
    return GLEW_GET_FUN(__glewGetQueryObjectivARB);
}
// /usr/include/GL/glew.h:5884:9: warning: macro 'glGetQueryObjectuivARB' contains a runtime value, translated to function
pub inline fn glGetQueryObjectuivARB() @TypeOf(GLEW_GET_FUN(__glewGetQueryObjectuivARB)) {
    return GLEW_GET_FUN(__glewGetQueryObjectuivARB);
}
// /usr/include/GL/glew.h:5885:9: warning: macro 'glGetQueryivARB' contains a runtime value, translated to function
pub inline fn glGetQueryivARB() @TypeOf(GLEW_GET_FUN(__glewGetQueryivARB)) {
    return GLEW_GET_FUN(__glewGetQueryivARB);
}
// /usr/include/GL/glew.h:5886:9: warning: macro 'glIsQueryARB' contains a runtime value, translated to function
pub inline fn glIsQueryARB() @TypeOf(GLEW_GET_FUN(__glewIsQueryARB)) {
    return GLEW_GET_FUN(__glewIsQueryARB);
}
// /usr/include/GL/glew.h:5888:9: warning: macro 'GLEW_ARB_occlusion_query' contains a runtime value, translated to function
pub inline fn GLEW_ARB_occlusion_query() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_occlusion_query)) {
    return GLEW_GET_VAR(__GLEW_ARB_occlusion_query);
}
pub const GL_ARB_occlusion_query2 = @as(c_int, 1);
pub const GL_ANY_SAMPLES_PASSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2F, .hex);
// /usr/include/GL/glew.h:5899:9: warning: macro 'GLEW_ARB_occlusion_query2' contains a runtime value, translated to function
pub inline fn GLEW_ARB_occlusion_query2() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_occlusion_query2)) {
    return GLEW_GET_VAR(__GLEW_ARB_occlusion_query2);
}
pub const GL_ARB_parallel_shader_compile = @as(c_int, 1);
pub const GL_MAX_SHADER_COMPILER_THREADS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B0, .hex);
pub const GL_COMPLETION_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B1, .hex);
// /usr/include/GL/glew.h:5913:9: warning: macro 'glMaxShaderCompilerThreadsARB' contains a runtime value, translated to function
pub inline fn glMaxShaderCompilerThreadsARB() @TypeOf(GLEW_GET_FUN(__glewMaxShaderCompilerThreadsARB)) {
    return GLEW_GET_FUN(__glewMaxShaderCompilerThreadsARB);
}
// /usr/include/GL/glew.h:5915:9: warning: macro 'GLEW_ARB_parallel_shader_compile' contains a runtime value, translated to function
pub inline fn GLEW_ARB_parallel_shader_compile() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_parallel_shader_compile)) {
    return GLEW_GET_VAR(__GLEW_ARB_parallel_shader_compile);
}
pub const GL_ARB_pipeline_statistics_query = @as(c_int, 1);
pub const GL_VERTICES_SUBMITTED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EE, .hex);
pub const GL_PRIMITIVES_SUBMITTED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EF, .hex);
pub const GL_VERTEX_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F0, .hex);
pub const GL_TESS_CONTROL_SHADER_PATCHES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F1, .hex);
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F2, .hex);
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F3, .hex);
pub const GL_FRAGMENT_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F4, .hex);
pub const GL_COMPUTE_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F5, .hex);
pub const GL_CLIPPING_INPUT_PRIMITIVES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F6, .hex);
pub const GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F7, .hex);
// /usr/include/GL/glew.h:5936:9: warning: macro 'GLEW_ARB_pipeline_statistics_query' contains a runtime value, translated to function
pub inline fn GLEW_ARB_pipeline_statistics_query() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_pipeline_statistics_query)) {
    return GLEW_GET_VAR(__GLEW_ARB_pipeline_statistics_query);
}
pub const GL_ARB_pixel_buffer_object = @as(c_int, 1);
pub const GL_PIXEL_PACK_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hex);
pub const GL_PIXEL_UNPACK_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hex);
pub const GL_PIXEL_PACK_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hex);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hex);
// /usr/include/GL/glew.h:5950:9: warning: macro 'GLEW_ARB_pixel_buffer_object' contains a runtime value, translated to function
pub inline fn GLEW_ARB_pixel_buffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_pixel_buffer_object)) {
    return GLEW_GET_VAR(__GLEW_ARB_pixel_buffer_object);
}
pub const GL_ARB_point_parameters = @as(c_int, 1);
pub const GL_POINT_SIZE_MIN_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hex);
pub const GL_POINT_SIZE_MAX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hex);
pub const GL_POINT_FADE_THRESHOLD_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hex);
pub const GL_POINT_DISTANCE_ATTENUATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hex);
// /usr/include/GL/glew.h:5967:9: warning: macro 'glPointParameterfARB' contains a runtime value, translated to function
pub inline fn glPointParameterfARB() @TypeOf(GLEW_GET_FUN(__glewPointParameterfARB)) {
    return GLEW_GET_FUN(__glewPointParameterfARB);
}
// /usr/include/GL/glew.h:5968:9: warning: macro 'glPointParameterfvARB' contains a runtime value, translated to function
pub inline fn glPointParameterfvARB() @TypeOf(GLEW_GET_FUN(__glewPointParameterfvARB)) {
    return GLEW_GET_FUN(__glewPointParameterfvARB);
}
// /usr/include/GL/glew.h:5970:9: warning: macro 'GLEW_ARB_point_parameters' contains a runtime value, translated to function
pub inline fn GLEW_ARB_point_parameters() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_point_parameters)) {
    return GLEW_GET_VAR(__GLEW_ARB_point_parameters);
}
pub const GL_ARB_point_sprite = @as(c_int, 1);
pub const GL_POINT_SPRITE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hex);
pub const GL_COORD_REPLACE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hex);
// /usr/include/GL/glew.h:5982:9: warning: macro 'GLEW_ARB_point_sprite' contains a runtime value, translated to function
pub inline fn GLEW_ARB_point_sprite() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_point_sprite)) {
    return GLEW_GET_VAR(__GLEW_ARB_point_sprite);
}
pub const GL_ARB_polygon_offset_clamp = @as(c_int, 1);
// /usr/include/GL/glew.h:5995:9: warning: macro 'glPolygonOffsetClamp' contains a runtime value, translated to function
pub inline fn glPolygonOffsetClamp() @TypeOf(GLEW_GET_FUN(__glewPolygonOffsetClamp)) {
    return GLEW_GET_FUN(__glewPolygonOffsetClamp);
}
// /usr/include/GL/glew.h:5997:9: warning: macro 'GLEW_ARB_polygon_offset_clamp' contains a runtime value, translated to function
pub inline fn GLEW_ARB_polygon_offset_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_polygon_offset_clamp)) {
    return GLEW_GET_VAR(__GLEW_ARB_polygon_offset_clamp);
}
pub const GL_ARB_post_depth_coverage = @as(c_int, 1);
// /usr/include/GL/glew.h:6006:9: warning: macro 'GLEW_ARB_post_depth_coverage' contains a runtime value, translated to function
pub inline fn GLEW_ARB_post_depth_coverage() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_post_depth_coverage)) {
    return GLEW_GET_VAR(__GLEW_ARB_post_depth_coverage);
}
pub const GL_ARB_program_interface_query = @as(c_int, 1);
pub const GL_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E1, .hex);
pub const GL_UNIFORM_BLOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E2, .hex);
pub const GL_PROGRAM_INPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E3, .hex);
pub const GL_PROGRAM_OUTPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E4, .hex);
pub const GL_BUFFER_VARIABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E5, .hex);
pub const GL_SHADER_STORAGE_BLOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E6, .hex);
pub const GL_IS_PER_PATCH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E7, .hex);
pub const GL_VERTEX_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E8, .hex);
pub const GL_TESS_CONTROL_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E9, .hex);
pub const GL_TESS_EVALUATION_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EA, .hex);
pub const GL_GEOMETRY_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EB, .hex);
pub const GL_FRAGMENT_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EC, .hex);
pub const GL_COMPUTE_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92ED, .hex);
pub const GL_VERTEX_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EE, .hex);
pub const GL_TESS_CONTROL_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EF, .hex);
pub const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F0, .hex);
pub const GL_GEOMETRY_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F1, .hex);
pub const GL_FRAGMENT_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F2, .hex);
pub const GL_COMPUTE_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F3, .hex);
pub const GL_TRANSFORM_FEEDBACK_VARYING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F4, .hex);
pub const GL_ACTIVE_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F5, .hex);
pub const GL_MAX_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F6, .hex);
pub const GL_MAX_NUM_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F7, .hex);
pub const GL_MAX_NUM_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F8, .hex);
pub const GL_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F9, .hex);
pub const GL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FA, .hex);
pub const GL_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FB, .hex);
pub const GL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FC, .hex);
pub const GL_BLOCK_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FD, .hex);
pub const GL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FE, .hex);
pub const GL_MATRIX_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FF, .hex);
pub const GL_IS_ROW_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9300, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9301, .hex);
pub const GL_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9302, .hex);
pub const GL_BUFFER_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9303, .hex);
pub const GL_NUM_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9304, .hex);
pub const GL_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9305, .hex);
pub const GL_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9306, .hex);
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9307, .hex);
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9308, .hex);
pub const GL_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9309, .hex);
pub const GL_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930A, .hex);
pub const GL_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930B, .hex);
pub const GL_TOP_LEVEL_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930C, .hex);
pub const GL_TOP_LEVEL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930D, .hex);
pub const GL_LOCATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930E, .hex);
pub const GL_LOCATION_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930F, .hex);
// /usr/include/GL/glew.h:6070:9: warning: macro 'glGetProgramInterfaceiv' contains a runtime value, translated to function
pub inline fn glGetProgramInterfaceiv() @TypeOf(GLEW_GET_FUN(__glewGetProgramInterfaceiv)) {
    return GLEW_GET_FUN(__glewGetProgramInterfaceiv);
}
// /usr/include/GL/glew.h:6071:9: warning: macro 'glGetProgramResourceIndex' contains a runtime value, translated to function
pub inline fn glGetProgramResourceIndex() @TypeOf(GLEW_GET_FUN(__glewGetProgramResourceIndex)) {
    return GLEW_GET_FUN(__glewGetProgramResourceIndex);
}
// /usr/include/GL/glew.h:6072:9: warning: macro 'glGetProgramResourceLocation' contains a runtime value, translated to function
pub inline fn glGetProgramResourceLocation() @TypeOf(GLEW_GET_FUN(__glewGetProgramResourceLocation)) {
    return GLEW_GET_FUN(__glewGetProgramResourceLocation);
}
// /usr/include/GL/glew.h:6073:9: warning: macro 'glGetProgramResourceLocationIndex' contains a runtime value, translated to function
pub inline fn glGetProgramResourceLocationIndex() @TypeOf(GLEW_GET_FUN(__glewGetProgramResourceLocationIndex)) {
    return GLEW_GET_FUN(__glewGetProgramResourceLocationIndex);
}
// /usr/include/GL/glew.h:6074:9: warning: macro 'glGetProgramResourceName' contains a runtime value, translated to function
pub inline fn glGetProgramResourceName() @TypeOf(GLEW_GET_FUN(__glewGetProgramResourceName)) {
    return GLEW_GET_FUN(__glewGetProgramResourceName);
}
// /usr/include/GL/glew.h:6075:9: warning: macro 'glGetProgramResourceiv' contains a runtime value, translated to function
pub inline fn glGetProgramResourceiv() @TypeOf(GLEW_GET_FUN(__glewGetProgramResourceiv)) {
    return GLEW_GET_FUN(__glewGetProgramResourceiv);
}
// /usr/include/GL/glew.h:6077:9: warning: macro 'GLEW_ARB_program_interface_query' contains a runtime value, translated to function
pub inline fn GLEW_ARB_program_interface_query() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_program_interface_query)) {
    return GLEW_GET_VAR(__GLEW_ARB_program_interface_query);
}
pub const GL_ARB_provoking_vertex = @as(c_int, 1);
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4C, .hex);
pub const GL_FIRST_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hex);
pub const GL_LAST_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hex);
pub const GL_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4F, .hex);
// /usr/include/GL/glew.h:6093:9: warning: macro 'glProvokingVertex' contains a runtime value, translated to function
pub inline fn glProvokingVertex() @TypeOf(GLEW_GET_FUN(__glewProvokingVertex)) {
    return GLEW_GET_FUN(__glewProvokingVertex);
}
// /usr/include/GL/glew.h:6095:9: warning: macro 'GLEW_ARB_provoking_vertex' contains a runtime value, translated to function
pub inline fn GLEW_ARB_provoking_vertex() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_provoking_vertex)) {
    return GLEW_GET_VAR(__GLEW_ARB_provoking_vertex);
}
pub const GL_ARB_query_buffer_object = @as(c_int, 1);
pub const GL_QUERY_BUFFER_BARRIER_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex);
pub const GL_QUERY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9192, .hex);
pub const GL_QUERY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9193, .hex);
pub const GL_QUERY_RESULT_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9194, .hex);
// /usr/include/GL/glew.h:6109:9: warning: macro 'GLEW_ARB_query_buffer_object' contains a runtime value, translated to function
pub inline fn GLEW_ARB_query_buffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_query_buffer_object)) {
    return GLEW_GET_VAR(__GLEW_ARB_query_buffer_object);
}
pub const GL_ARB_robust_buffer_access_behavior = @as(c_int, 1);
// /usr/include/GL/glew.h:6118:9: warning: macro 'GLEW_ARB_robust_buffer_access_behavior' contains a runtime value, translated to function
pub inline fn GLEW_ARB_robust_buffer_access_behavior() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_robust_buffer_access_behavior)) {
    return GLEW_GET_VAR(__GLEW_ARB_robust_buffer_access_behavior);
}
pub const GL_ARB_robustness = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = @as(c_int, 0x00000004);
pub const GL_LOSE_CONTEXT_ON_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hex);
pub const GL_GUILTY_CONTEXT_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hex);
pub const GL_INNOCENT_CONTEXT_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hex);
pub const GL_UNKNOWN_CONTEXT_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hex);
pub const GL_RESET_NOTIFICATION_STRATEGY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hex);
pub const GL_NO_RESET_NOTIFICATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hex);
// /usr/include/GL/glew.h:6156:9: warning: macro 'glGetGraphicsResetStatusARB' contains a runtime value, translated to function
pub inline fn glGetGraphicsResetStatusARB() @TypeOf(GLEW_GET_FUN(__glewGetGraphicsResetStatusARB)) {
    return GLEW_GET_FUN(__glewGetGraphicsResetStatusARB);
}
// /usr/include/GL/glew.h:6157:9: warning: macro 'glGetnColorTableARB' contains a runtime value, translated to function
pub inline fn glGetnColorTableARB() @TypeOf(GLEW_GET_FUN(__glewGetnColorTableARB)) {
    return GLEW_GET_FUN(__glewGetnColorTableARB);
}
// /usr/include/GL/glew.h:6158:9: warning: macro 'glGetnCompressedTexImageARB' contains a runtime value, translated to function
pub inline fn glGetnCompressedTexImageARB() @TypeOf(GLEW_GET_FUN(__glewGetnCompressedTexImageARB)) {
    return GLEW_GET_FUN(__glewGetnCompressedTexImageARB);
}
// /usr/include/GL/glew.h:6159:9: warning: macro 'glGetnConvolutionFilterARB' contains a runtime value, translated to function
pub inline fn glGetnConvolutionFilterARB() @TypeOf(GLEW_GET_FUN(__glewGetnConvolutionFilterARB)) {
    return GLEW_GET_FUN(__glewGetnConvolutionFilterARB);
}
// /usr/include/GL/glew.h:6160:9: warning: macro 'glGetnHistogramARB' contains a runtime value, translated to function
pub inline fn glGetnHistogramARB() @TypeOf(GLEW_GET_FUN(__glewGetnHistogramARB)) {
    return GLEW_GET_FUN(__glewGetnHistogramARB);
}
// /usr/include/GL/glew.h:6161:9: warning: macro 'glGetnMapdvARB' contains a runtime value, translated to function
pub inline fn glGetnMapdvARB() @TypeOf(GLEW_GET_FUN(__glewGetnMapdvARB)) {
    return GLEW_GET_FUN(__glewGetnMapdvARB);
}
// /usr/include/GL/glew.h:6162:9: warning: macro 'glGetnMapfvARB' contains a runtime value, translated to function
pub inline fn glGetnMapfvARB() @TypeOf(GLEW_GET_FUN(__glewGetnMapfvARB)) {
    return GLEW_GET_FUN(__glewGetnMapfvARB);
}
// /usr/include/GL/glew.h:6163:9: warning: macro 'glGetnMapivARB' contains a runtime value, translated to function
pub inline fn glGetnMapivARB() @TypeOf(GLEW_GET_FUN(__glewGetnMapivARB)) {
    return GLEW_GET_FUN(__glewGetnMapivARB);
}
// /usr/include/GL/glew.h:6164:9: warning: macro 'glGetnMinmaxARB' contains a runtime value, translated to function
pub inline fn glGetnMinmaxARB() @TypeOf(GLEW_GET_FUN(__glewGetnMinmaxARB)) {
    return GLEW_GET_FUN(__glewGetnMinmaxARB);
}
// /usr/include/GL/glew.h:6165:9: warning: macro 'glGetnPixelMapfvARB' contains a runtime value, translated to function
pub inline fn glGetnPixelMapfvARB() @TypeOf(GLEW_GET_FUN(__glewGetnPixelMapfvARB)) {
    return GLEW_GET_FUN(__glewGetnPixelMapfvARB);
}
// /usr/include/GL/glew.h:6166:9: warning: macro 'glGetnPixelMapuivARB' contains a runtime value, translated to function
pub inline fn glGetnPixelMapuivARB() @TypeOf(GLEW_GET_FUN(__glewGetnPixelMapuivARB)) {
    return GLEW_GET_FUN(__glewGetnPixelMapuivARB);
}
// /usr/include/GL/glew.h:6167:9: warning: macro 'glGetnPixelMapusvARB' contains a runtime value, translated to function
pub inline fn glGetnPixelMapusvARB() @TypeOf(GLEW_GET_FUN(__glewGetnPixelMapusvARB)) {
    return GLEW_GET_FUN(__glewGetnPixelMapusvARB);
}
// /usr/include/GL/glew.h:6168:9: warning: macro 'glGetnPolygonStippleARB' contains a runtime value, translated to function
pub inline fn glGetnPolygonStippleARB() @TypeOf(GLEW_GET_FUN(__glewGetnPolygonStippleARB)) {
    return GLEW_GET_FUN(__glewGetnPolygonStippleARB);
}
// /usr/include/GL/glew.h:6169:9: warning: macro 'glGetnSeparableFilterARB' contains a runtime value, translated to function
pub inline fn glGetnSeparableFilterARB() @TypeOf(GLEW_GET_FUN(__glewGetnSeparableFilterARB)) {
    return GLEW_GET_FUN(__glewGetnSeparableFilterARB);
}
// /usr/include/GL/glew.h:6170:9: warning: macro 'glGetnTexImageARB' contains a runtime value, translated to function
pub inline fn glGetnTexImageARB() @TypeOf(GLEW_GET_FUN(__glewGetnTexImageARB)) {
    return GLEW_GET_FUN(__glewGetnTexImageARB);
}
// /usr/include/GL/glew.h:6171:9: warning: macro 'glGetnUniformdvARB' contains a runtime value, translated to function
pub inline fn glGetnUniformdvARB() @TypeOf(GLEW_GET_FUN(__glewGetnUniformdvARB)) {
    return GLEW_GET_FUN(__glewGetnUniformdvARB);
}
// /usr/include/GL/glew.h:6172:9: warning: macro 'glGetnUniformfvARB' contains a runtime value, translated to function
pub inline fn glGetnUniformfvARB() @TypeOf(GLEW_GET_FUN(__glewGetnUniformfvARB)) {
    return GLEW_GET_FUN(__glewGetnUniformfvARB);
}
// /usr/include/GL/glew.h:6173:9: warning: macro 'glGetnUniformivARB' contains a runtime value, translated to function
pub inline fn glGetnUniformivARB() @TypeOf(GLEW_GET_FUN(__glewGetnUniformivARB)) {
    return GLEW_GET_FUN(__glewGetnUniformivARB);
}
// /usr/include/GL/glew.h:6174:9: warning: macro 'glGetnUniformuivARB' contains a runtime value, translated to function
pub inline fn glGetnUniformuivARB() @TypeOf(GLEW_GET_FUN(__glewGetnUniformuivARB)) {
    return GLEW_GET_FUN(__glewGetnUniformuivARB);
}
// /usr/include/GL/glew.h:6175:9: warning: macro 'glReadnPixelsARB' contains a runtime value, translated to function
pub inline fn glReadnPixelsARB() @TypeOf(GLEW_GET_FUN(__glewReadnPixelsARB)) {
    return GLEW_GET_FUN(__glewReadnPixelsARB);
}
// /usr/include/GL/glew.h:6177:9: warning: macro 'GLEW_ARB_robustness' contains a runtime value, translated to function
pub inline fn GLEW_ARB_robustness() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_robustness)) {
    return GLEW_GET_VAR(__GLEW_ARB_robustness);
}
pub const GL_ARB_robustness_application_isolation = @as(c_int, 1);
// /usr/include/GL/glew.h:6186:9: warning: macro 'GLEW_ARB_robustness_application_isolation' contains a runtime value, translated to function
pub inline fn GLEW_ARB_robustness_application_isolation() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_robustness_application_isolation)) {
    return GLEW_GET_VAR(__GLEW_ARB_robustness_application_isolation);
}
pub const GL_ARB_robustness_share_group_isolation = @as(c_int, 1);
// /usr/include/GL/glew.h:6195:9: warning: macro 'GLEW_ARB_robustness_share_group_isolation' contains a runtime value, translated to function
pub inline fn GLEW_ARB_robustness_share_group_isolation() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_robustness_share_group_isolation)) {
    return GLEW_GET_VAR(__GLEW_ARB_robustness_share_group_isolation);
}
pub const GL_ARB_sample_locations = @as(c_int, 1);
pub const GL_SAMPLE_LOCATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hex);
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933D, .hex);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933E, .hex);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933F, .hex);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9340, .hex);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9341, .hex);
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9342, .hex);
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9343, .hex);
// /usr/include/GL/glew.h:6216:9: warning: macro 'glFramebufferSampleLocationsfvARB' contains a runtime value, translated to function
pub inline fn glFramebufferSampleLocationsfvARB() @TypeOf(GLEW_GET_FUN(__glewFramebufferSampleLocationsfvARB)) {
    return GLEW_GET_FUN(__glewFramebufferSampleLocationsfvARB);
}
// /usr/include/GL/glew.h:6217:9: warning: macro 'glNamedFramebufferSampleLocationsfvARB' contains a runtime value, translated to function
pub inline fn glNamedFramebufferSampleLocationsfvARB() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferSampleLocationsfvARB)) {
    return GLEW_GET_FUN(__glewNamedFramebufferSampleLocationsfvARB);
}
// /usr/include/GL/glew.h:6219:9: warning: macro 'GLEW_ARB_sample_locations' contains a runtime value, translated to function
pub inline fn GLEW_ARB_sample_locations() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_sample_locations)) {
    return GLEW_GET_VAR(__GLEW_ARB_sample_locations);
}
pub const GL_ARB_sample_shading = @as(c_int, 1);
pub const GL_SAMPLE_SHADING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C36, .hex);
pub const GL_MIN_SAMPLE_SHADING_VALUE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C37, .hex);
// /usr/include/GL/glew.h:6233:9: warning: macro 'glMinSampleShadingARB' contains a runtime value, translated to function
pub inline fn glMinSampleShadingARB() @TypeOf(GLEW_GET_FUN(__glewMinSampleShadingARB)) {
    return GLEW_GET_FUN(__glewMinSampleShadingARB);
}
// /usr/include/GL/glew.h:6235:9: warning: macro 'GLEW_ARB_sample_shading' contains a runtime value, translated to function
pub inline fn GLEW_ARB_sample_shading() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_sample_shading)) {
    return GLEW_GET_VAR(__GLEW_ARB_sample_shading);
}
pub const GL_ARB_sampler_objects = @as(c_int, 1);
pub const GL_SAMPLER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8919, .hex);
// /usr/include/GL/glew.h:6261:9: warning: macro 'glBindSampler' contains a runtime value, translated to function
pub inline fn glBindSampler() @TypeOf(GLEW_GET_FUN(__glewBindSampler)) {
    return GLEW_GET_FUN(__glewBindSampler);
}
// /usr/include/GL/glew.h:6262:9: warning: macro 'glDeleteSamplers' contains a runtime value, translated to function
pub inline fn glDeleteSamplers() @TypeOf(GLEW_GET_FUN(__glewDeleteSamplers)) {
    return GLEW_GET_FUN(__glewDeleteSamplers);
}
// /usr/include/GL/glew.h:6263:9: warning: macro 'glGenSamplers' contains a runtime value, translated to function
pub inline fn glGenSamplers() @TypeOf(GLEW_GET_FUN(__glewGenSamplers)) {
    return GLEW_GET_FUN(__glewGenSamplers);
}
// /usr/include/GL/glew.h:6264:9: warning: macro 'glGetSamplerParameterIiv' contains a runtime value, translated to function
pub inline fn glGetSamplerParameterIiv() @TypeOf(GLEW_GET_FUN(__glewGetSamplerParameterIiv)) {
    return GLEW_GET_FUN(__glewGetSamplerParameterIiv);
}
// /usr/include/GL/glew.h:6265:9: warning: macro 'glGetSamplerParameterIuiv' contains a runtime value, translated to function
pub inline fn glGetSamplerParameterIuiv() @TypeOf(GLEW_GET_FUN(__glewGetSamplerParameterIuiv)) {
    return GLEW_GET_FUN(__glewGetSamplerParameterIuiv);
}
// /usr/include/GL/glew.h:6266:9: warning: macro 'glGetSamplerParameterfv' contains a runtime value, translated to function
pub inline fn glGetSamplerParameterfv() @TypeOf(GLEW_GET_FUN(__glewGetSamplerParameterfv)) {
    return GLEW_GET_FUN(__glewGetSamplerParameterfv);
}
// /usr/include/GL/glew.h:6267:9: warning: macro 'glGetSamplerParameteriv' contains a runtime value, translated to function
pub inline fn glGetSamplerParameteriv() @TypeOf(GLEW_GET_FUN(__glewGetSamplerParameteriv)) {
    return GLEW_GET_FUN(__glewGetSamplerParameteriv);
}
// /usr/include/GL/glew.h:6268:9: warning: macro 'glIsSampler' contains a runtime value, translated to function
pub inline fn glIsSampler() @TypeOf(GLEW_GET_FUN(__glewIsSampler)) {
    return GLEW_GET_FUN(__glewIsSampler);
}
// /usr/include/GL/glew.h:6269:9: warning: macro 'glSamplerParameterIiv' contains a runtime value, translated to function
pub inline fn glSamplerParameterIiv() @TypeOf(GLEW_GET_FUN(__glewSamplerParameterIiv)) {
    return GLEW_GET_FUN(__glewSamplerParameterIiv);
}
// /usr/include/GL/glew.h:6270:9: warning: macro 'glSamplerParameterIuiv' contains a runtime value, translated to function
pub inline fn glSamplerParameterIuiv() @TypeOf(GLEW_GET_FUN(__glewSamplerParameterIuiv)) {
    return GLEW_GET_FUN(__glewSamplerParameterIuiv);
}
// /usr/include/GL/glew.h:6271:9: warning: macro 'glSamplerParameterf' contains a runtime value, translated to function
pub inline fn glSamplerParameterf() @TypeOf(GLEW_GET_FUN(__glewSamplerParameterf)) {
    return GLEW_GET_FUN(__glewSamplerParameterf);
}
// /usr/include/GL/glew.h:6272:9: warning: macro 'glSamplerParameterfv' contains a runtime value, translated to function
pub inline fn glSamplerParameterfv() @TypeOf(GLEW_GET_FUN(__glewSamplerParameterfv)) {
    return GLEW_GET_FUN(__glewSamplerParameterfv);
}
// /usr/include/GL/glew.h:6273:9: warning: macro 'glSamplerParameteri' contains a runtime value, translated to function
pub inline fn glSamplerParameteri() @TypeOf(GLEW_GET_FUN(__glewSamplerParameteri)) {
    return GLEW_GET_FUN(__glewSamplerParameteri);
}
// /usr/include/GL/glew.h:6274:9: warning: macro 'glSamplerParameteriv' contains a runtime value, translated to function
pub inline fn glSamplerParameteriv() @TypeOf(GLEW_GET_FUN(__glewSamplerParameteriv)) {
    return GLEW_GET_FUN(__glewSamplerParameteriv);
}
// /usr/include/GL/glew.h:6276:9: warning: macro 'GLEW_ARB_sampler_objects' contains a runtime value, translated to function
pub inline fn GLEW_ARB_sampler_objects() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_sampler_objects)) {
    return GLEW_GET_VAR(__GLEW_ARB_sampler_objects);
}
pub const GL_ARB_seamless_cube_map = @as(c_int, 1);
// /usr/include/GL/glew.h:6287:9: warning: macro 'GLEW_ARB_seamless_cube_map' contains a runtime value, translated to function
pub inline fn GLEW_ARB_seamless_cube_map() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_seamless_cube_map)) {
    return GLEW_GET_VAR(__GLEW_ARB_seamless_cube_map);
}
pub const GL_ARB_seamless_cubemap_per_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:6298:9: warning: macro 'GLEW_ARB_seamless_cubemap_per_texture' contains a runtime value, translated to function
pub inline fn GLEW_ARB_seamless_cubemap_per_texture() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_seamless_cubemap_per_texture)) {
    return GLEW_GET_VAR(__GLEW_ARB_seamless_cubemap_per_texture);
}
pub const GL_ARB_separate_shader_objects = @as(c_int, 1);
pub const GL_VERTEX_SHADER_BIT = @as(c_int, 0x00000001);
pub const GL_FRAGMENT_SHADER_BIT = @as(c_int, 0x00000002);
pub const GL_GEOMETRY_SHADER_BIT = @as(c_int, 0x00000004);
pub const GL_TESS_CONTROL_SHADER_BIT = @as(c_int, 0x00000008);
pub const GL_TESS_EVALUATION_SHADER_BIT = @as(c_int, 0x00000010);
pub const GL_PROGRAM_SEPARABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8258, .hex);
pub const GL_ACTIVE_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8259, .hex);
pub const GL_PROGRAM_PIPELINE_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825A, .hex);
pub const GL_ALL_SHADER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex);
// /usr/include/GL/glew.h:6378:9: warning: macro 'glActiveShaderProgram' contains a runtime value, translated to function
pub inline fn glActiveShaderProgram() @TypeOf(GLEW_GET_FUN(__glewActiveShaderProgram)) {
    return GLEW_GET_FUN(__glewActiveShaderProgram);
}
// /usr/include/GL/glew.h:6379:9: warning: macro 'glBindProgramPipeline' contains a runtime value, translated to function
pub inline fn glBindProgramPipeline() @TypeOf(GLEW_GET_FUN(__glewBindProgramPipeline)) {
    return GLEW_GET_FUN(__glewBindProgramPipeline);
}
// /usr/include/GL/glew.h:6380:9: warning: macro 'glCreateShaderProgramv' contains a runtime value, translated to function
pub inline fn glCreateShaderProgramv() @TypeOf(GLEW_GET_FUN(__glewCreateShaderProgramv)) {
    return GLEW_GET_FUN(__glewCreateShaderProgramv);
}
// /usr/include/GL/glew.h:6381:9: warning: macro 'glDeleteProgramPipelines' contains a runtime value, translated to function
pub inline fn glDeleteProgramPipelines() @TypeOf(GLEW_GET_FUN(__glewDeleteProgramPipelines)) {
    return GLEW_GET_FUN(__glewDeleteProgramPipelines);
}
// /usr/include/GL/glew.h:6382:9: warning: macro 'glGenProgramPipelines' contains a runtime value, translated to function
pub inline fn glGenProgramPipelines() @TypeOf(GLEW_GET_FUN(__glewGenProgramPipelines)) {
    return GLEW_GET_FUN(__glewGenProgramPipelines);
}
// /usr/include/GL/glew.h:6383:9: warning: macro 'glGetProgramPipelineInfoLog' contains a runtime value, translated to function
pub inline fn glGetProgramPipelineInfoLog() @TypeOf(GLEW_GET_FUN(__glewGetProgramPipelineInfoLog)) {
    return GLEW_GET_FUN(__glewGetProgramPipelineInfoLog);
}
// /usr/include/GL/glew.h:6384:9: warning: macro 'glGetProgramPipelineiv' contains a runtime value, translated to function
pub inline fn glGetProgramPipelineiv() @TypeOf(GLEW_GET_FUN(__glewGetProgramPipelineiv)) {
    return GLEW_GET_FUN(__glewGetProgramPipelineiv);
}
// /usr/include/GL/glew.h:6385:9: warning: macro 'glIsProgramPipeline' contains a runtime value, translated to function
pub inline fn glIsProgramPipeline() @TypeOf(GLEW_GET_FUN(__glewIsProgramPipeline)) {
    return GLEW_GET_FUN(__glewIsProgramPipeline);
}
// /usr/include/GL/glew.h:6386:9: warning: macro 'glProgramUniform1d' contains a runtime value, translated to function
pub inline fn glProgramUniform1d() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1d)) {
    return GLEW_GET_FUN(__glewProgramUniform1d);
}
// /usr/include/GL/glew.h:6387:9: warning: macro 'glProgramUniform1dv' contains a runtime value, translated to function
pub inline fn glProgramUniform1dv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1dv)) {
    return GLEW_GET_FUN(__glewProgramUniform1dv);
}
// /usr/include/GL/glew.h:6388:9: warning: macro 'glProgramUniform1f' contains a runtime value, translated to function
pub inline fn glProgramUniform1f() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1f)) {
    return GLEW_GET_FUN(__glewProgramUniform1f);
}
// /usr/include/GL/glew.h:6389:9: warning: macro 'glProgramUniform1fv' contains a runtime value, translated to function
pub inline fn glProgramUniform1fv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1fv)) {
    return GLEW_GET_FUN(__glewProgramUniform1fv);
}
// /usr/include/GL/glew.h:6390:9: warning: macro 'glProgramUniform1i' contains a runtime value, translated to function
pub inline fn glProgramUniform1i() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1i)) {
    return GLEW_GET_FUN(__glewProgramUniform1i);
}
// /usr/include/GL/glew.h:6391:9: warning: macro 'glProgramUniform1iv' contains a runtime value, translated to function
pub inline fn glProgramUniform1iv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1iv)) {
    return GLEW_GET_FUN(__glewProgramUniform1iv);
}
// /usr/include/GL/glew.h:6392:9: warning: macro 'glProgramUniform1ui' contains a runtime value, translated to function
pub inline fn glProgramUniform1ui() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1ui)) {
    return GLEW_GET_FUN(__glewProgramUniform1ui);
}
// /usr/include/GL/glew.h:6393:9: warning: macro 'glProgramUniform1uiv' contains a runtime value, translated to function
pub inline fn glProgramUniform1uiv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1uiv)) {
    return GLEW_GET_FUN(__glewProgramUniform1uiv);
}
// /usr/include/GL/glew.h:6394:9: warning: macro 'glProgramUniform2d' contains a runtime value, translated to function
pub inline fn glProgramUniform2d() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2d)) {
    return GLEW_GET_FUN(__glewProgramUniform2d);
}
// /usr/include/GL/glew.h:6395:9: warning: macro 'glProgramUniform2dv' contains a runtime value, translated to function
pub inline fn glProgramUniform2dv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2dv)) {
    return GLEW_GET_FUN(__glewProgramUniform2dv);
}
// /usr/include/GL/glew.h:6396:9: warning: macro 'glProgramUniform2f' contains a runtime value, translated to function
pub inline fn glProgramUniform2f() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2f)) {
    return GLEW_GET_FUN(__glewProgramUniform2f);
}
// /usr/include/GL/glew.h:6397:9: warning: macro 'glProgramUniform2fv' contains a runtime value, translated to function
pub inline fn glProgramUniform2fv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2fv)) {
    return GLEW_GET_FUN(__glewProgramUniform2fv);
}
// /usr/include/GL/glew.h:6398:9: warning: macro 'glProgramUniform2i' contains a runtime value, translated to function
pub inline fn glProgramUniform2i() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2i)) {
    return GLEW_GET_FUN(__glewProgramUniform2i);
}
// /usr/include/GL/glew.h:6399:9: warning: macro 'glProgramUniform2iv' contains a runtime value, translated to function
pub inline fn glProgramUniform2iv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2iv)) {
    return GLEW_GET_FUN(__glewProgramUniform2iv);
}
// /usr/include/GL/glew.h:6400:9: warning: macro 'glProgramUniform2ui' contains a runtime value, translated to function
pub inline fn glProgramUniform2ui() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2ui)) {
    return GLEW_GET_FUN(__glewProgramUniform2ui);
}
// /usr/include/GL/glew.h:6401:9: warning: macro 'glProgramUniform2uiv' contains a runtime value, translated to function
pub inline fn glProgramUniform2uiv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2uiv)) {
    return GLEW_GET_FUN(__glewProgramUniform2uiv);
}
// /usr/include/GL/glew.h:6402:9: warning: macro 'glProgramUniform3d' contains a runtime value, translated to function
pub inline fn glProgramUniform3d() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3d)) {
    return GLEW_GET_FUN(__glewProgramUniform3d);
}
// /usr/include/GL/glew.h:6403:9: warning: macro 'glProgramUniform3dv' contains a runtime value, translated to function
pub inline fn glProgramUniform3dv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3dv)) {
    return GLEW_GET_FUN(__glewProgramUniform3dv);
}
// /usr/include/GL/glew.h:6404:9: warning: macro 'glProgramUniform3f' contains a runtime value, translated to function
pub inline fn glProgramUniform3f() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3f)) {
    return GLEW_GET_FUN(__glewProgramUniform3f);
}
// /usr/include/GL/glew.h:6405:9: warning: macro 'glProgramUniform3fv' contains a runtime value, translated to function
pub inline fn glProgramUniform3fv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3fv)) {
    return GLEW_GET_FUN(__glewProgramUniform3fv);
}
// /usr/include/GL/glew.h:6406:9: warning: macro 'glProgramUniform3i' contains a runtime value, translated to function
pub inline fn glProgramUniform3i() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3i)) {
    return GLEW_GET_FUN(__glewProgramUniform3i);
}
// /usr/include/GL/glew.h:6407:9: warning: macro 'glProgramUniform3iv' contains a runtime value, translated to function
pub inline fn glProgramUniform3iv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3iv)) {
    return GLEW_GET_FUN(__glewProgramUniform3iv);
}
// /usr/include/GL/glew.h:6408:9: warning: macro 'glProgramUniform3ui' contains a runtime value, translated to function
pub inline fn glProgramUniform3ui() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3ui)) {
    return GLEW_GET_FUN(__glewProgramUniform3ui);
}
// /usr/include/GL/glew.h:6409:9: warning: macro 'glProgramUniform3uiv' contains a runtime value, translated to function
pub inline fn glProgramUniform3uiv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3uiv)) {
    return GLEW_GET_FUN(__glewProgramUniform3uiv);
}
// /usr/include/GL/glew.h:6410:9: warning: macro 'glProgramUniform4d' contains a runtime value, translated to function
pub inline fn glProgramUniform4d() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4d)) {
    return GLEW_GET_FUN(__glewProgramUniform4d);
}
// /usr/include/GL/glew.h:6411:9: warning: macro 'glProgramUniform4dv' contains a runtime value, translated to function
pub inline fn glProgramUniform4dv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4dv)) {
    return GLEW_GET_FUN(__glewProgramUniform4dv);
}
// /usr/include/GL/glew.h:6412:9: warning: macro 'glProgramUniform4f' contains a runtime value, translated to function
pub inline fn glProgramUniform4f() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4f)) {
    return GLEW_GET_FUN(__glewProgramUniform4f);
}
// /usr/include/GL/glew.h:6413:9: warning: macro 'glProgramUniform4fv' contains a runtime value, translated to function
pub inline fn glProgramUniform4fv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4fv)) {
    return GLEW_GET_FUN(__glewProgramUniform4fv);
}
// /usr/include/GL/glew.h:6414:9: warning: macro 'glProgramUniform4i' contains a runtime value, translated to function
pub inline fn glProgramUniform4i() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4i)) {
    return GLEW_GET_FUN(__glewProgramUniform4i);
}
// /usr/include/GL/glew.h:6415:9: warning: macro 'glProgramUniform4iv' contains a runtime value, translated to function
pub inline fn glProgramUniform4iv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4iv)) {
    return GLEW_GET_FUN(__glewProgramUniform4iv);
}
// /usr/include/GL/glew.h:6416:9: warning: macro 'glProgramUniform4ui' contains a runtime value, translated to function
pub inline fn glProgramUniform4ui() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4ui)) {
    return GLEW_GET_FUN(__glewProgramUniform4ui);
}
// /usr/include/GL/glew.h:6417:9: warning: macro 'glProgramUniform4uiv' contains a runtime value, translated to function
pub inline fn glProgramUniform4uiv() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4uiv)) {
    return GLEW_GET_FUN(__glewProgramUniform4uiv);
}
// /usr/include/GL/glew.h:6418:9: warning: macro 'glProgramUniformMatrix2dv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix2dv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix2dv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix2dv);
}
// /usr/include/GL/glew.h:6419:9: warning: macro 'glProgramUniformMatrix2fv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix2fv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix2fv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix2fv);
}
// /usr/include/GL/glew.h:6420:9: warning: macro 'glProgramUniformMatrix2x3dv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix2x3dv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix2x3dv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix2x3dv);
}
// /usr/include/GL/glew.h:6421:9: warning: macro 'glProgramUniformMatrix2x3fv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix2x3fv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix2x3fv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix2x3fv);
}
// /usr/include/GL/glew.h:6422:9: warning: macro 'glProgramUniformMatrix2x4dv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix2x4dv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix2x4dv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix2x4dv);
}
// /usr/include/GL/glew.h:6423:9: warning: macro 'glProgramUniformMatrix2x4fv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix2x4fv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix2x4fv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix2x4fv);
}
// /usr/include/GL/glew.h:6424:9: warning: macro 'glProgramUniformMatrix3dv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix3dv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix3dv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix3dv);
}
// /usr/include/GL/glew.h:6425:9: warning: macro 'glProgramUniformMatrix3fv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix3fv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix3fv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix3fv);
}
// /usr/include/GL/glew.h:6426:9: warning: macro 'glProgramUniformMatrix3x2dv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix3x2dv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix3x2dv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix3x2dv);
}
// /usr/include/GL/glew.h:6427:9: warning: macro 'glProgramUniformMatrix3x2fv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix3x2fv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix3x2fv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix3x2fv);
}
// /usr/include/GL/glew.h:6428:9: warning: macro 'glProgramUniformMatrix3x4dv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix3x4dv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix3x4dv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix3x4dv);
}
// /usr/include/GL/glew.h:6429:9: warning: macro 'glProgramUniformMatrix3x4fv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix3x4fv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix3x4fv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix3x4fv);
}
// /usr/include/GL/glew.h:6430:9: warning: macro 'glProgramUniformMatrix4dv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix4dv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix4dv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix4dv);
}
// /usr/include/GL/glew.h:6431:9: warning: macro 'glProgramUniformMatrix4fv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix4fv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix4fv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix4fv);
}
// /usr/include/GL/glew.h:6432:9: warning: macro 'glProgramUniformMatrix4x2dv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix4x2dv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix4x2dv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix4x2dv);
}
// /usr/include/GL/glew.h:6433:9: warning: macro 'glProgramUniformMatrix4x2fv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix4x2fv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix4x2fv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix4x2fv);
}
// /usr/include/GL/glew.h:6434:9: warning: macro 'glProgramUniformMatrix4x3dv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix4x3dv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix4x3dv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix4x3dv);
}
// /usr/include/GL/glew.h:6435:9: warning: macro 'glProgramUniformMatrix4x3fv' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix4x3fv() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix4x3fv)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix4x3fv);
}
// /usr/include/GL/glew.h:6436:9: warning: macro 'glUseProgramStages' contains a runtime value, translated to function
pub inline fn glUseProgramStages() @TypeOf(GLEW_GET_FUN(__glewUseProgramStages)) {
    return GLEW_GET_FUN(__glewUseProgramStages);
}
// /usr/include/GL/glew.h:6437:9: warning: macro 'glValidateProgramPipeline' contains a runtime value, translated to function
pub inline fn glValidateProgramPipeline() @TypeOf(GLEW_GET_FUN(__glewValidateProgramPipeline)) {
    return GLEW_GET_FUN(__glewValidateProgramPipeline);
}
// /usr/include/GL/glew.h:6439:9: warning: macro 'GLEW_ARB_separate_shader_objects' contains a runtime value, translated to function
pub inline fn GLEW_ARB_separate_shader_objects() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_separate_shader_objects)) {
    return GLEW_GET_VAR(__GLEW_ARB_separate_shader_objects);
}
pub const GL_ARB_shader_atomic_counter_ops = @as(c_int, 1);
// /usr/include/GL/glew.h:6448:9: warning: macro 'GLEW_ARB_shader_atomic_counter_ops' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_atomic_counter_ops() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_atomic_counter_ops)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_atomic_counter_ops);
}
pub const GL_ARB_shader_atomic_counters = @as(c_int, 1);
pub const GL_ATOMIC_COUNTER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C0, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C1, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C2, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C3, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C4, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C5, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C6, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C7, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C8, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C9, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CA, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CB, .hex);
pub const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CC, .hex);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CD, .hex);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CE, .hex);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CF, .hex);
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D0, .hex);
pub const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D1, .hex);
pub const GL_MAX_VERTEX_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D2, .hex);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D3, .hex);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D4, .hex);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D5, .hex);
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D6, .hex);
pub const GL_MAX_COMBINED_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D7, .hex);
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D8, .hex);
pub const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D9, .hex);
pub const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DA, .hex);
pub const GL_UNSIGNED_INT_ATOMIC_COUNTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DB, .hex);
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DC, .hex);
// /usr/include/GL/glew.h:6489:9: warning: macro 'glGetActiveAtomicCounterBufferiv' contains a runtime value, translated to function
pub inline fn glGetActiveAtomicCounterBufferiv() @TypeOf(GLEW_GET_FUN(__glewGetActiveAtomicCounterBufferiv)) {
    return GLEW_GET_FUN(__glewGetActiveAtomicCounterBufferiv);
}
// /usr/include/GL/glew.h:6491:9: warning: macro 'GLEW_ARB_shader_atomic_counters' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_atomic_counters() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_atomic_counters)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_atomic_counters);
}
pub const GL_ARB_shader_ballot = @as(c_int, 1);
// /usr/include/GL/glew.h:6500:9: warning: macro 'GLEW_ARB_shader_ballot' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_ballot() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_ballot)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_ballot);
}
pub const GL_ARB_shader_bit_encoding = @as(c_int, 1);
// /usr/include/GL/glew.h:6509:9: warning: macro 'GLEW_ARB_shader_bit_encoding' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_bit_encoding() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_bit_encoding)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_bit_encoding);
}
pub const GL_ARB_shader_clock = @as(c_int, 1);
// /usr/include/GL/glew.h:6518:9: warning: macro 'GLEW_ARB_shader_clock' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_clock() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_clock)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_clock);
}
pub const GL_ARB_shader_draw_parameters = @as(c_int, 1);
// /usr/include/GL/glew.h:6527:9: warning: macro 'GLEW_ARB_shader_draw_parameters' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_draw_parameters() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_draw_parameters)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_draw_parameters);
}
pub const GL_ARB_shader_group_vote = @as(c_int, 1);
// /usr/include/GL/glew.h:6536:9: warning: macro 'GLEW_ARB_shader_group_vote' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_group_vote() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_group_vote)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_group_vote);
}
pub const GL_ARB_shader_image_load_store = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = @as(c_int, 0x00000001);
pub const GL_ELEMENT_ARRAY_BARRIER_BIT = @as(c_int, 0x00000002);
pub const GL_UNIFORM_BARRIER_BIT = @as(c_int, 0x00000004);
pub const GL_TEXTURE_FETCH_BARRIER_BIT = @as(c_int, 0x00000008);
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = @as(c_int, 0x00000020);
pub const GL_COMMAND_BARRIER_BIT = @as(c_int, 0x00000040);
pub const GL_PIXEL_BUFFER_BARRIER_BIT = @as(c_int, 0x00000080);
pub const GL_TEXTURE_UPDATE_BARRIER_BIT = @as(c_int, 0x00000100);
pub const GL_BUFFER_UPDATE_BARRIER_BIT = @as(c_int, 0x00000200);
pub const GL_FRAMEBUFFER_BARRIER_BIT = @as(c_int, 0x00000400);
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = @as(c_int, 0x00000800);
pub const GL_ATOMIC_COUNTER_BARRIER_BIT = @as(c_int, 0x00001000);
pub const GL_MAX_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F38, .hex);
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hex);
pub const GL_IMAGE_BINDING_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3A, .hex);
pub const GL_IMAGE_BINDING_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3B, .hex);
pub const GL_IMAGE_BINDING_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3C, .hex);
pub const GL_IMAGE_BINDING_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3D, .hex);
pub const GL_IMAGE_BINDING_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3E, .hex);
pub const GL_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904C, .hex);
pub const GL_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904D, .hex);
pub const GL_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904E, .hex);
pub const GL_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904F, .hex);
pub const GL_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9050, .hex);
pub const GL_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hex);
pub const GL_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9052, .hex);
pub const GL_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9053, .hex);
pub const GL_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hex);
pub const GL_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9055, .hex);
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9056, .hex);
pub const GL_INT_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9057, .hex);
pub const GL_INT_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9058, .hex);
pub const GL_INT_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9059, .hex);
pub const GL_INT_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905A, .hex);
pub const GL_INT_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905B, .hex);
pub const GL_INT_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hex);
pub const GL_INT_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905D, .hex);
pub const GL_INT_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905E, .hex);
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hex);
pub const GL_INT_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9060, .hex);
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9061, .hex);
pub const GL_UNSIGNED_INT_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9062, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9063, .hex);
pub const GL_UNSIGNED_INT_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9064, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9065, .hex);
pub const GL_UNSIGNED_INT_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9066, .hex);
pub const GL_UNSIGNED_INT_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hex);
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9068, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9069, .hex);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906B, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906C, .hex);
pub const GL_MAX_IMAGE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906D, .hex);
pub const GL_IMAGE_BINDING_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906E, .hex);
pub const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C7, .hex);
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C8, .hex);
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C9, .hex);
pub const GL_MAX_VERTEX_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CA, .hex);
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CB, .hex);
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CC, .hex);
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CD, .hex);
pub const GL_MAX_FRAGMENT_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CE, .hex);
pub const GL_MAX_COMBINED_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CF, .hex);
pub const GL_ALL_BARRIER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex);
// /usr/include/GL/glew.h:6613:9: warning: macro 'glBindImageTexture' contains a runtime value, translated to function
pub inline fn glBindImageTexture() @TypeOf(GLEW_GET_FUN(__glewBindImageTexture)) {
    return GLEW_GET_FUN(__glewBindImageTexture);
}
// /usr/include/GL/glew.h:6614:9: warning: macro 'glMemoryBarrier' contains a runtime value, translated to function
pub inline fn glMemoryBarrier() @TypeOf(GLEW_GET_FUN(__glewMemoryBarrier)) {
    return GLEW_GET_FUN(__glewMemoryBarrier);
}
// /usr/include/GL/glew.h:6616:9: warning: macro 'GLEW_ARB_shader_image_load_store' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_image_load_store() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_image_load_store)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_image_load_store);
}
pub const GL_ARB_shader_image_size = @as(c_int, 1);
// /usr/include/GL/glew.h:6625:9: warning: macro 'GLEW_ARB_shader_image_size' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_image_size() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_image_size)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_image_size);
}
pub const GL_ARB_shader_objects = @as(c_int, 1);
pub const GL_PROGRAM_OBJECT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B40, .hex);
pub const GL_SHADER_OBJECT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B48, .hex);
pub const GL_OBJECT_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4E, .hex);
pub const GL_OBJECT_SUBTYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4F, .hex);
pub const GL_FLOAT_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B50, .hex);
pub const GL_FLOAT_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B51, .hex);
pub const GL_FLOAT_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B52, .hex);
pub const GL_INT_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B53, .hex);
pub const GL_INT_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B54, .hex);
pub const GL_INT_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B55, .hex);
pub const GL_BOOL_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B56, .hex);
pub const GL_BOOL_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B57, .hex);
pub const GL_BOOL_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B58, .hex);
pub const GL_BOOL_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B59, .hex);
pub const GL_FLOAT_MAT2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5A, .hex);
pub const GL_FLOAT_MAT3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5B, .hex);
pub const GL_FLOAT_MAT4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5C, .hex);
pub const GL_SAMPLER_1D_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5D, .hex);
pub const GL_SAMPLER_2D_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5E, .hex);
pub const GL_SAMPLER_3D_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5F, .hex);
pub const GL_SAMPLER_CUBE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B60, .hex);
pub const GL_SAMPLER_1D_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B61, .hex);
pub const GL_SAMPLER_2D_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hex);
pub const GL_SAMPLER_2D_RECT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B63, .hex);
pub const GL_SAMPLER_2D_RECT_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B64, .hex);
pub const GL_OBJECT_DELETE_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B80, .hex);
pub const GL_OBJECT_COMPILE_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B81, .hex);
pub const GL_OBJECT_LINK_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B82, .hex);
pub const GL_OBJECT_VALIDATE_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B83, .hex);
pub const GL_OBJECT_INFO_LOG_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B84, .hex);
pub const GL_OBJECT_ATTACHED_OBJECTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B85, .hex);
pub const GL_OBJECT_ACTIVE_UNIFORMS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B86, .hex);
pub const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B87, .hex);
pub const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B88, .hex);
// /usr/include/GL/glew.h:6712:9: warning: macro 'glAttachObjectARB' contains a runtime value, translated to function
pub inline fn glAttachObjectARB() @TypeOf(GLEW_GET_FUN(__glewAttachObjectARB)) {
    return GLEW_GET_FUN(__glewAttachObjectARB);
}
// /usr/include/GL/glew.h:6713:9: warning: macro 'glCompileShaderARB' contains a runtime value, translated to function
pub inline fn glCompileShaderARB() @TypeOf(GLEW_GET_FUN(__glewCompileShaderARB)) {
    return GLEW_GET_FUN(__glewCompileShaderARB);
}
// /usr/include/GL/glew.h:6714:9: warning: macro 'glCreateProgramObjectARB' contains a runtime value, translated to function
pub inline fn glCreateProgramObjectARB() @TypeOf(GLEW_GET_FUN(__glewCreateProgramObjectARB)) {
    return GLEW_GET_FUN(__glewCreateProgramObjectARB);
}
// /usr/include/GL/glew.h:6715:9: warning: macro 'glCreateShaderObjectARB' contains a runtime value, translated to function
pub inline fn glCreateShaderObjectARB() @TypeOf(GLEW_GET_FUN(__glewCreateShaderObjectARB)) {
    return GLEW_GET_FUN(__glewCreateShaderObjectARB);
}
// /usr/include/GL/glew.h:6716:9: warning: macro 'glDeleteObjectARB' contains a runtime value, translated to function
pub inline fn glDeleteObjectARB() @TypeOf(GLEW_GET_FUN(__glewDeleteObjectARB)) {
    return GLEW_GET_FUN(__glewDeleteObjectARB);
}
// /usr/include/GL/glew.h:6717:9: warning: macro 'glDetachObjectARB' contains a runtime value, translated to function
pub inline fn glDetachObjectARB() @TypeOf(GLEW_GET_FUN(__glewDetachObjectARB)) {
    return GLEW_GET_FUN(__glewDetachObjectARB);
}
// /usr/include/GL/glew.h:6718:9: warning: macro 'glGetActiveUniformARB' contains a runtime value, translated to function
pub inline fn glGetActiveUniformARB() @TypeOf(GLEW_GET_FUN(__glewGetActiveUniformARB)) {
    return GLEW_GET_FUN(__glewGetActiveUniformARB);
}
// /usr/include/GL/glew.h:6719:9: warning: macro 'glGetAttachedObjectsARB' contains a runtime value, translated to function
pub inline fn glGetAttachedObjectsARB() @TypeOf(GLEW_GET_FUN(__glewGetAttachedObjectsARB)) {
    return GLEW_GET_FUN(__glewGetAttachedObjectsARB);
}
// /usr/include/GL/glew.h:6720:9: warning: macro 'glGetHandleARB' contains a runtime value, translated to function
pub inline fn glGetHandleARB() @TypeOf(GLEW_GET_FUN(__glewGetHandleARB)) {
    return GLEW_GET_FUN(__glewGetHandleARB);
}
// /usr/include/GL/glew.h:6721:9: warning: macro 'glGetInfoLogARB' contains a runtime value, translated to function
pub inline fn glGetInfoLogARB() @TypeOf(GLEW_GET_FUN(__glewGetInfoLogARB)) {
    return GLEW_GET_FUN(__glewGetInfoLogARB);
}
// /usr/include/GL/glew.h:6722:9: warning: macro 'glGetObjectParameterfvARB' contains a runtime value, translated to function
pub inline fn glGetObjectParameterfvARB() @TypeOf(GLEW_GET_FUN(__glewGetObjectParameterfvARB)) {
    return GLEW_GET_FUN(__glewGetObjectParameterfvARB);
}
// /usr/include/GL/glew.h:6723:9: warning: macro 'glGetObjectParameterivARB' contains a runtime value, translated to function
pub inline fn glGetObjectParameterivARB() @TypeOf(GLEW_GET_FUN(__glewGetObjectParameterivARB)) {
    return GLEW_GET_FUN(__glewGetObjectParameterivARB);
}
// /usr/include/GL/glew.h:6724:9: warning: macro 'glGetShaderSourceARB' contains a runtime value, translated to function
pub inline fn glGetShaderSourceARB() @TypeOf(GLEW_GET_FUN(__glewGetShaderSourceARB)) {
    return GLEW_GET_FUN(__glewGetShaderSourceARB);
}
// /usr/include/GL/glew.h:6725:9: warning: macro 'glGetUniformLocationARB' contains a runtime value, translated to function
pub inline fn glGetUniformLocationARB() @TypeOf(GLEW_GET_FUN(__glewGetUniformLocationARB)) {
    return GLEW_GET_FUN(__glewGetUniformLocationARB);
}
// /usr/include/GL/glew.h:6726:9: warning: macro 'glGetUniformfvARB' contains a runtime value, translated to function
pub inline fn glGetUniformfvARB() @TypeOf(GLEW_GET_FUN(__glewGetUniformfvARB)) {
    return GLEW_GET_FUN(__glewGetUniformfvARB);
}
// /usr/include/GL/glew.h:6727:9: warning: macro 'glGetUniformivARB' contains a runtime value, translated to function
pub inline fn glGetUniformivARB() @TypeOf(GLEW_GET_FUN(__glewGetUniformivARB)) {
    return GLEW_GET_FUN(__glewGetUniformivARB);
}
// /usr/include/GL/glew.h:6728:9: warning: macro 'glLinkProgramARB' contains a runtime value, translated to function
pub inline fn glLinkProgramARB() @TypeOf(GLEW_GET_FUN(__glewLinkProgramARB)) {
    return GLEW_GET_FUN(__glewLinkProgramARB);
}
// /usr/include/GL/glew.h:6729:9: warning: macro 'glShaderSourceARB' contains a runtime value, translated to function
pub inline fn glShaderSourceARB() @TypeOf(GLEW_GET_FUN(__glewShaderSourceARB)) {
    return GLEW_GET_FUN(__glewShaderSourceARB);
}
// /usr/include/GL/glew.h:6730:9: warning: macro 'glUniform1fARB' contains a runtime value, translated to function
pub inline fn glUniform1fARB() @TypeOf(GLEW_GET_FUN(__glewUniform1fARB)) {
    return GLEW_GET_FUN(__glewUniform1fARB);
}
// /usr/include/GL/glew.h:6731:9: warning: macro 'glUniform1fvARB' contains a runtime value, translated to function
pub inline fn glUniform1fvARB() @TypeOf(GLEW_GET_FUN(__glewUniform1fvARB)) {
    return GLEW_GET_FUN(__glewUniform1fvARB);
}
// /usr/include/GL/glew.h:6732:9: warning: macro 'glUniform1iARB' contains a runtime value, translated to function
pub inline fn glUniform1iARB() @TypeOf(GLEW_GET_FUN(__glewUniform1iARB)) {
    return GLEW_GET_FUN(__glewUniform1iARB);
}
// /usr/include/GL/glew.h:6733:9: warning: macro 'glUniform1ivARB' contains a runtime value, translated to function
pub inline fn glUniform1ivARB() @TypeOf(GLEW_GET_FUN(__glewUniform1ivARB)) {
    return GLEW_GET_FUN(__glewUniform1ivARB);
}
// /usr/include/GL/glew.h:6734:9: warning: macro 'glUniform2fARB' contains a runtime value, translated to function
pub inline fn glUniform2fARB() @TypeOf(GLEW_GET_FUN(__glewUniform2fARB)) {
    return GLEW_GET_FUN(__glewUniform2fARB);
}
// /usr/include/GL/glew.h:6735:9: warning: macro 'glUniform2fvARB' contains a runtime value, translated to function
pub inline fn glUniform2fvARB() @TypeOf(GLEW_GET_FUN(__glewUniform2fvARB)) {
    return GLEW_GET_FUN(__glewUniform2fvARB);
}
// /usr/include/GL/glew.h:6736:9: warning: macro 'glUniform2iARB' contains a runtime value, translated to function
pub inline fn glUniform2iARB() @TypeOf(GLEW_GET_FUN(__glewUniform2iARB)) {
    return GLEW_GET_FUN(__glewUniform2iARB);
}
// /usr/include/GL/glew.h:6737:9: warning: macro 'glUniform2ivARB' contains a runtime value, translated to function
pub inline fn glUniform2ivARB() @TypeOf(GLEW_GET_FUN(__glewUniform2ivARB)) {
    return GLEW_GET_FUN(__glewUniform2ivARB);
}
// /usr/include/GL/glew.h:6738:9: warning: macro 'glUniform3fARB' contains a runtime value, translated to function
pub inline fn glUniform3fARB() @TypeOf(GLEW_GET_FUN(__glewUniform3fARB)) {
    return GLEW_GET_FUN(__glewUniform3fARB);
}
// /usr/include/GL/glew.h:6739:9: warning: macro 'glUniform3fvARB' contains a runtime value, translated to function
pub inline fn glUniform3fvARB() @TypeOf(GLEW_GET_FUN(__glewUniform3fvARB)) {
    return GLEW_GET_FUN(__glewUniform3fvARB);
}
// /usr/include/GL/glew.h:6740:9: warning: macro 'glUniform3iARB' contains a runtime value, translated to function
pub inline fn glUniform3iARB() @TypeOf(GLEW_GET_FUN(__glewUniform3iARB)) {
    return GLEW_GET_FUN(__glewUniform3iARB);
}
// /usr/include/GL/glew.h:6741:9: warning: macro 'glUniform3ivARB' contains a runtime value, translated to function
pub inline fn glUniform3ivARB() @TypeOf(GLEW_GET_FUN(__glewUniform3ivARB)) {
    return GLEW_GET_FUN(__glewUniform3ivARB);
}
// /usr/include/GL/glew.h:6742:9: warning: macro 'glUniform4fARB' contains a runtime value, translated to function
pub inline fn glUniform4fARB() @TypeOf(GLEW_GET_FUN(__glewUniform4fARB)) {
    return GLEW_GET_FUN(__glewUniform4fARB);
}
// /usr/include/GL/glew.h:6743:9: warning: macro 'glUniform4fvARB' contains a runtime value, translated to function
pub inline fn glUniform4fvARB() @TypeOf(GLEW_GET_FUN(__glewUniform4fvARB)) {
    return GLEW_GET_FUN(__glewUniform4fvARB);
}
// /usr/include/GL/glew.h:6744:9: warning: macro 'glUniform4iARB' contains a runtime value, translated to function
pub inline fn glUniform4iARB() @TypeOf(GLEW_GET_FUN(__glewUniform4iARB)) {
    return GLEW_GET_FUN(__glewUniform4iARB);
}
// /usr/include/GL/glew.h:6745:9: warning: macro 'glUniform4ivARB' contains a runtime value, translated to function
pub inline fn glUniform4ivARB() @TypeOf(GLEW_GET_FUN(__glewUniform4ivARB)) {
    return GLEW_GET_FUN(__glewUniform4ivARB);
}
// /usr/include/GL/glew.h:6746:9: warning: macro 'glUniformMatrix2fvARB' contains a runtime value, translated to function
pub inline fn glUniformMatrix2fvARB() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix2fvARB)) {
    return GLEW_GET_FUN(__glewUniformMatrix2fvARB);
}
// /usr/include/GL/glew.h:6747:9: warning: macro 'glUniformMatrix3fvARB' contains a runtime value, translated to function
pub inline fn glUniformMatrix3fvARB() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix3fvARB)) {
    return GLEW_GET_FUN(__glewUniformMatrix3fvARB);
}
// /usr/include/GL/glew.h:6748:9: warning: macro 'glUniformMatrix4fvARB' contains a runtime value, translated to function
pub inline fn glUniformMatrix4fvARB() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix4fvARB)) {
    return GLEW_GET_FUN(__glewUniformMatrix4fvARB);
}
// /usr/include/GL/glew.h:6749:9: warning: macro 'glUseProgramObjectARB' contains a runtime value, translated to function
pub inline fn glUseProgramObjectARB() @TypeOf(GLEW_GET_FUN(__glewUseProgramObjectARB)) {
    return GLEW_GET_FUN(__glewUseProgramObjectARB);
}
// /usr/include/GL/glew.h:6750:9: warning: macro 'glValidateProgramARB' contains a runtime value, translated to function
pub inline fn glValidateProgramARB() @TypeOf(GLEW_GET_FUN(__glewValidateProgramARB)) {
    return GLEW_GET_FUN(__glewValidateProgramARB);
}
// /usr/include/GL/glew.h:6752:9: warning: macro 'GLEW_ARB_shader_objects' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_objects() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_objects)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_objects);
}
pub const GL_ARB_shader_precision = @as(c_int, 1);
// /usr/include/GL/glew.h:6761:9: warning: macro 'GLEW_ARB_shader_precision' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_precision() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_precision)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_precision);
}
pub const GL_ARB_shader_stencil_export = @as(c_int, 1);
// /usr/include/GL/glew.h:6770:9: warning: macro 'GLEW_ARB_shader_stencil_export' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_stencil_export() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_stencil_export)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_stencil_export);
}
pub const GL_ARB_shader_storage_buffer_object = @as(c_int, 1);
pub const GL_SHADER_STORAGE_BARRIER_BIT = @as(c_int, 0x2000);
pub const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hex);
pub const GL_SHADER_STORAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D2, .hex);
pub const GL_SHADER_STORAGE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D3, .hex);
pub const GL_SHADER_STORAGE_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D4, .hex);
pub const GL_SHADER_STORAGE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D5, .hex);
pub const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D6, .hex);
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D7, .hex);
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D8, .hex);
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D9, .hex);
pub const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DA, .hex);
pub const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DB, .hex);
pub const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DC, .hex);
pub const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DD, .hex);
pub const GL_MAX_SHADER_STORAGE_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DE, .hex);
pub const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DF, .hex);
// /usr/include/GL/glew.h:6798:9: warning: macro 'glShaderStorageBlockBinding' contains a runtime value, translated to function
pub inline fn glShaderStorageBlockBinding() @TypeOf(GLEW_GET_FUN(__glewShaderStorageBlockBinding)) {
    return GLEW_GET_FUN(__glewShaderStorageBlockBinding);
}
// /usr/include/GL/glew.h:6800:9: warning: macro 'GLEW_ARB_shader_storage_buffer_object' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_storage_buffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_storage_buffer_object)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_storage_buffer_object);
}
pub const GL_ARB_shader_subroutine = @as(c_int, 1);
pub const GL_ACTIVE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE5, .hex);
pub const GL_ACTIVE_SUBROUTINE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE6, .hex);
pub const GL_MAX_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE7, .hex);
pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE8, .hex);
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E47, .hex);
pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E48, .hex);
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E49, .hex);
pub const GL_NUM_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4A, .hex);
pub const GL_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4B, .hex);
// /usr/include/GL/glew.h:6828:9: warning: macro 'glGetActiveSubroutineName' contains a runtime value, translated to function
pub inline fn glGetActiveSubroutineName() @TypeOf(GLEW_GET_FUN(__glewGetActiveSubroutineName)) {
    return GLEW_GET_FUN(__glewGetActiveSubroutineName);
}
// /usr/include/GL/glew.h:6829:9: warning: macro 'glGetActiveSubroutineUniformName' contains a runtime value, translated to function
pub inline fn glGetActiveSubroutineUniformName() @TypeOf(GLEW_GET_FUN(__glewGetActiveSubroutineUniformName)) {
    return GLEW_GET_FUN(__glewGetActiveSubroutineUniformName);
}
// /usr/include/GL/glew.h:6830:9: warning: macro 'glGetActiveSubroutineUniformiv' contains a runtime value, translated to function
pub inline fn glGetActiveSubroutineUniformiv() @TypeOf(GLEW_GET_FUN(__glewGetActiveSubroutineUniformiv)) {
    return GLEW_GET_FUN(__glewGetActiveSubroutineUniformiv);
}
// /usr/include/GL/glew.h:6831:9: warning: macro 'glGetProgramStageiv' contains a runtime value, translated to function
pub inline fn glGetProgramStageiv() @TypeOf(GLEW_GET_FUN(__glewGetProgramStageiv)) {
    return GLEW_GET_FUN(__glewGetProgramStageiv);
}
// /usr/include/GL/glew.h:6832:9: warning: macro 'glGetSubroutineIndex' contains a runtime value, translated to function
pub inline fn glGetSubroutineIndex() @TypeOf(GLEW_GET_FUN(__glewGetSubroutineIndex)) {
    return GLEW_GET_FUN(__glewGetSubroutineIndex);
}
// /usr/include/GL/glew.h:6833:9: warning: macro 'glGetSubroutineUniformLocation' contains a runtime value, translated to function
pub inline fn glGetSubroutineUniformLocation() @TypeOf(GLEW_GET_FUN(__glewGetSubroutineUniformLocation)) {
    return GLEW_GET_FUN(__glewGetSubroutineUniformLocation);
}
// /usr/include/GL/glew.h:6834:9: warning: macro 'glGetUniformSubroutineuiv' contains a runtime value, translated to function
pub inline fn glGetUniformSubroutineuiv() @TypeOf(GLEW_GET_FUN(__glewGetUniformSubroutineuiv)) {
    return GLEW_GET_FUN(__glewGetUniformSubroutineuiv);
}
// /usr/include/GL/glew.h:6835:9: warning: macro 'glUniformSubroutinesuiv' contains a runtime value, translated to function
pub inline fn glUniformSubroutinesuiv() @TypeOf(GLEW_GET_FUN(__glewUniformSubroutinesuiv)) {
    return GLEW_GET_FUN(__glewUniformSubroutinesuiv);
}
// /usr/include/GL/glew.h:6837:9: warning: macro 'GLEW_ARB_shader_subroutine' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_subroutine() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_subroutine)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_subroutine);
}
pub const GL_ARB_shader_texture_image_samples = @as(c_int, 1);
// /usr/include/GL/glew.h:6846:9: warning: macro 'GLEW_ARB_shader_texture_image_samples' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_texture_image_samples() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_texture_image_samples)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_texture_image_samples);
}
pub const GL_ARB_shader_texture_lod = @as(c_int, 1);
// /usr/include/GL/glew.h:6855:9: warning: macro 'GLEW_ARB_shader_texture_lod' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_texture_lod() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_texture_lod)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_texture_lod);
}
pub const GL_ARB_shader_viewport_layer_array = @as(c_int, 1);
// /usr/include/GL/glew.h:6864:9: warning: macro 'GLEW_ARB_shader_viewport_layer_array' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shader_viewport_layer_array() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shader_viewport_layer_array)) {
    return GLEW_GET_VAR(__GLEW_ARB_shader_viewport_layer_array);
}
pub const GL_ARB_shading_language_100 = @as(c_int, 1);
pub const GL_SHADING_LANGUAGE_VERSION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8C, .hex);
// /usr/include/GL/glew.h:6875:9: warning: macro 'GLEW_ARB_shading_language_100' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shading_language_100() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shading_language_100)) {
    return GLEW_GET_VAR(__GLEW_ARB_shading_language_100);
}
pub const GL_ARB_shading_language_420pack = @as(c_int, 1);
// /usr/include/GL/glew.h:6884:9: warning: macro 'GLEW_ARB_shading_language_420pack' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shading_language_420pack() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shading_language_420pack)) {
    return GLEW_GET_VAR(__GLEW_ARB_shading_language_420pack);
}
pub const GL_ARB_shading_language_include = @as(c_int, 1);
pub const GL_SHADER_INCLUDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAE, .hex);
pub const GL_NAMED_STRING_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE9, .hex);
pub const GL_NAMED_STRING_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DEA, .hex);
// /usr/include/GL/glew.h:6904:9: warning: macro 'glCompileShaderIncludeARB' contains a runtime value, translated to function
pub inline fn glCompileShaderIncludeARB() @TypeOf(GLEW_GET_FUN(__glewCompileShaderIncludeARB)) {
    return GLEW_GET_FUN(__glewCompileShaderIncludeARB);
}
// /usr/include/GL/glew.h:6905:9: warning: macro 'glDeleteNamedStringARB' contains a runtime value, translated to function
pub inline fn glDeleteNamedStringARB() @TypeOf(GLEW_GET_FUN(__glewDeleteNamedStringARB)) {
    return GLEW_GET_FUN(__glewDeleteNamedStringARB);
}
// /usr/include/GL/glew.h:6906:9: warning: macro 'glGetNamedStringARB' contains a runtime value, translated to function
pub inline fn glGetNamedStringARB() @TypeOf(GLEW_GET_FUN(__glewGetNamedStringARB)) {
    return GLEW_GET_FUN(__glewGetNamedStringARB);
}
// /usr/include/GL/glew.h:6907:9: warning: macro 'glGetNamedStringivARB' contains a runtime value, translated to function
pub inline fn glGetNamedStringivARB() @TypeOf(GLEW_GET_FUN(__glewGetNamedStringivARB)) {
    return GLEW_GET_FUN(__glewGetNamedStringivARB);
}
// /usr/include/GL/glew.h:6908:9: warning: macro 'glIsNamedStringARB' contains a runtime value, translated to function
pub inline fn glIsNamedStringARB() @TypeOf(GLEW_GET_FUN(__glewIsNamedStringARB)) {
    return GLEW_GET_FUN(__glewIsNamedStringARB);
}
// /usr/include/GL/glew.h:6909:9: warning: macro 'glNamedStringARB' contains a runtime value, translated to function
pub inline fn glNamedStringARB() @TypeOf(GLEW_GET_FUN(__glewNamedStringARB)) {
    return GLEW_GET_FUN(__glewNamedStringARB);
}
// /usr/include/GL/glew.h:6911:9: warning: macro 'GLEW_ARB_shading_language_include' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shading_language_include() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shading_language_include)) {
    return GLEW_GET_VAR(__GLEW_ARB_shading_language_include);
}
pub const GL_ARB_shading_language_packing = @as(c_int, 1);
// /usr/include/GL/glew.h:6920:9: warning: macro 'GLEW_ARB_shading_language_packing' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shading_language_packing() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shading_language_packing)) {
    return GLEW_GET_VAR(__GLEW_ARB_shading_language_packing);
}
pub const GL_ARB_shadow = @as(c_int, 1);
pub const GL_TEXTURE_COMPARE_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hex);
pub const GL_TEXTURE_COMPARE_FUNC_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hex);
pub const GL_COMPARE_R_TO_TEXTURE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hex);
// /usr/include/GL/glew.h:6933:9: warning: macro 'GLEW_ARB_shadow' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shadow() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shadow)) {
    return GLEW_GET_VAR(__GLEW_ARB_shadow);
}
pub const GL_ARB_shadow_ambient = @as(c_int, 1);
pub const GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BF, .hex);
// /usr/include/GL/glew.h:6944:9: warning: macro 'GLEW_ARB_shadow_ambient' contains a runtime value, translated to function
pub inline fn GLEW_ARB_shadow_ambient() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_shadow_ambient)) {
    return GLEW_GET_VAR(__GLEW_ARB_shadow_ambient);
}
pub const GL_ARB_sparse_buffer = @as(c_int, 1);
pub const GL_SPARSE_STORAGE_BIT_ARB = @as(c_int, 0x0400);
pub const GL_SPARSE_BUFFER_PAGE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F8, .hex);
// /usr/include/GL/glew.h:6958:9: warning: macro 'glBufferPageCommitmentARB' contains a runtime value, translated to function
pub inline fn glBufferPageCommitmentARB() @TypeOf(GLEW_GET_FUN(__glewBufferPageCommitmentARB)) {
    return GLEW_GET_FUN(__glewBufferPageCommitmentARB);
}
// /usr/include/GL/glew.h:6960:9: warning: macro 'GLEW_ARB_sparse_buffer' contains a runtime value, translated to function
pub inline fn GLEW_ARB_sparse_buffer() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_sparse_buffer)) {
    return GLEW_GET_VAR(__GLEW_ARB_sparse_buffer);
}
pub const GL_ARB_sparse_texture = @as(c_int, 1);
pub const GL_VIRTUAL_PAGE_SIZE_X_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9195, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_Y_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9196, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_Z_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9197, .hex);
pub const GL_MAX_SPARSE_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9198, .hex);
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9199, .hex);
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919A, .hex);
pub const GL_TEXTURE_SPARSE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A6, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A7, .hex);
pub const GL_NUM_VIRTUAL_PAGE_SIZES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A8, .hex);
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A9, .hex);
pub const GL_NUM_SPARSE_LEVELS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AA, .hex);
// /usr/include/GL/glew.h:6983:9: warning: macro 'glTexPageCommitmentARB' contains a runtime value, translated to function
pub inline fn glTexPageCommitmentARB() @TypeOf(GLEW_GET_FUN(__glewTexPageCommitmentARB)) {
    return GLEW_GET_FUN(__glewTexPageCommitmentARB);
}
// /usr/include/GL/glew.h:6985:9: warning: macro 'GLEW_ARB_sparse_texture' contains a runtime value, translated to function
pub inline fn GLEW_ARB_sparse_texture() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_sparse_texture)) {
    return GLEW_GET_VAR(__GLEW_ARB_sparse_texture);
}
pub const GL_ARB_sparse_texture2 = @as(c_int, 1);
// /usr/include/GL/glew.h:6994:9: warning: macro 'GLEW_ARB_sparse_texture2' contains a runtime value, translated to function
pub inline fn GLEW_ARB_sparse_texture2() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_sparse_texture2)) {
    return GLEW_GET_VAR(__GLEW_ARB_sparse_texture2);
}
pub const GL_ARB_sparse_texture_clamp = @as(c_int, 1);
// /usr/include/GL/glew.h:7003:9: warning: macro 'GLEW_ARB_sparse_texture_clamp' contains a runtime value, translated to function
pub inline fn GLEW_ARB_sparse_texture_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_sparse_texture_clamp)) {
    return GLEW_GET_VAR(__GLEW_ARB_sparse_texture_clamp);
}
pub const GL_ARB_spirv_extensions = @as(c_int, 1);
// /usr/include/GL/glew.h:7015:9: warning: macro 'GLEW_ARB_spirv_extensions' contains a runtime value, translated to function
pub inline fn GLEW_ARB_spirv_extensions() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_spirv_extensions)) {
    return GLEW_GET_VAR(__GLEW_ARB_spirv_extensions);
}
pub const GL_ARB_stencil_texturing = @as(c_int, 1);
pub const GL_DEPTH_STENCIL_TEXTURE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EA, .hex);
// /usr/include/GL/glew.h:7026:9: warning: macro 'GLEW_ARB_stencil_texturing' contains a runtime value, translated to function
pub inline fn GLEW_ARB_stencil_texturing() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_stencil_texturing)) {
    return GLEW_GET_VAR(__GLEW_ARB_stencil_texturing);
}
pub const GL_ARB_sync = @as(c_int, 1);
pub const GL_SYNC_FLUSH_COMMANDS_BIT = @as(c_int, 0x00000001);
pub const GL_MAX_SERVER_WAIT_TIMEOUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9111, .hex);
pub const GL_OBJECT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9112, .hex);
pub const GL_SYNC_CONDITION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9113, .hex);
pub const GL_SYNC_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9114, .hex);
pub const GL_SYNC_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9115, .hex);
pub const GL_SYNC_FENCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9116, .hex);
pub const GL_SYNC_GPU_COMMANDS_COMPLETE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9117, .hex);
pub const GL_UNSIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9118, .hex);
pub const GL_SIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9119, .hex);
pub const GL_ALREADY_SIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911A, .hex);
pub const GL_TIMEOUT_EXPIRED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911B, .hex);
pub const GL_CONDITION_SATISFIED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911C, .hex);
pub const GL_WAIT_FAILED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911D, .hex);
pub const GL_TIMEOUT_IGNORED = @as(c_ulonglong, 0xFFFFFFFFFFFFFFFF);
// /usr/include/GL/glew.h:7059:9: warning: macro 'glClientWaitSync' contains a runtime value, translated to function
pub inline fn glClientWaitSync() @TypeOf(GLEW_GET_FUN(__glewClientWaitSync)) {
    return GLEW_GET_FUN(__glewClientWaitSync);
}
// /usr/include/GL/glew.h:7060:9: warning: macro 'glDeleteSync' contains a runtime value, translated to function
pub inline fn glDeleteSync() @TypeOf(GLEW_GET_FUN(__glewDeleteSync)) {
    return GLEW_GET_FUN(__glewDeleteSync);
}
// /usr/include/GL/glew.h:7061:9: warning: macro 'glFenceSync' contains a runtime value, translated to function
pub inline fn glFenceSync() @TypeOf(GLEW_GET_FUN(__glewFenceSync)) {
    return GLEW_GET_FUN(__glewFenceSync);
}
// /usr/include/GL/glew.h:7062:9: warning: macro 'glGetInteger64v' contains a runtime value, translated to function
pub inline fn glGetInteger64v() @TypeOf(GLEW_GET_FUN(__glewGetInteger64v)) {
    return GLEW_GET_FUN(__glewGetInteger64v);
}
// /usr/include/GL/glew.h:7063:9: warning: macro 'glGetSynciv' contains a runtime value, translated to function
pub inline fn glGetSynciv() @TypeOf(GLEW_GET_FUN(__glewGetSynciv)) {
    return GLEW_GET_FUN(__glewGetSynciv);
}
// /usr/include/GL/glew.h:7064:9: warning: macro 'glIsSync' contains a runtime value, translated to function
pub inline fn glIsSync() @TypeOf(GLEW_GET_FUN(__glewIsSync)) {
    return GLEW_GET_FUN(__glewIsSync);
}
// /usr/include/GL/glew.h:7065:9: warning: macro 'glWaitSync' contains a runtime value, translated to function
pub inline fn glWaitSync() @TypeOf(GLEW_GET_FUN(__glewWaitSync)) {
    return GLEW_GET_FUN(__glewWaitSync);
}
// /usr/include/GL/glew.h:7067:9: warning: macro 'GLEW_ARB_sync' contains a runtime value, translated to function
pub inline fn GLEW_ARB_sync() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_sync)) {
    return GLEW_GET_VAR(__GLEW_ARB_sync);
}
pub const GL_ARB_tessellation_shader = @as(c_int, 1);
pub const GL_PATCHES = @as(c_int, 0xE);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F0, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F1, .hex);
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886C, .hex);
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886D, .hex);
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1E, .hex);
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1F, .hex);
pub const GL_PATCH_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E72, .hex);
pub const GL_PATCH_DEFAULT_INNER_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E73, .hex);
pub const GL_PATCH_DEFAULT_OUTER_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E74, .hex);
pub const GL_TESS_CONTROL_OUTPUT_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E75, .hex);
pub const GL_TESS_GEN_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E76, .hex);
pub const GL_TESS_GEN_SPACING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E77, .hex);
pub const GL_TESS_GEN_VERTEX_ORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E78, .hex);
pub const GL_TESS_GEN_POINT_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E79, .hex);
pub const GL_ISOLINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7A, .hex);
pub const GL_FRACTIONAL_ODD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7B, .hex);
pub const GL_FRACTIONAL_EVEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7C, .hex);
pub const GL_MAX_PATCH_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7D, .hex);
pub const GL_MAX_TESS_GEN_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7E, .hex);
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7F, .hex);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E80, .hex);
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E81, .hex);
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E82, .hex);
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E83, .hex);
pub const GL_MAX_TESS_PATCH_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E84, .hex);
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E85, .hex);
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E86, .hex);
pub const GL_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E87, .hex);
pub const GL_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E88, .hex);
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E89, .hex);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8A, .hex);
// /usr/include/GL/glew.h:7112:9: warning: macro 'glPatchParameterfv' contains a runtime value, translated to function
pub inline fn glPatchParameterfv() @TypeOf(GLEW_GET_FUN(__glewPatchParameterfv)) {
    return GLEW_GET_FUN(__glewPatchParameterfv);
}
// /usr/include/GL/glew.h:7113:9: warning: macro 'glPatchParameteri' contains a runtime value, translated to function
pub inline fn glPatchParameteri() @TypeOf(GLEW_GET_FUN(__glewPatchParameteri)) {
    return GLEW_GET_FUN(__glewPatchParameteri);
}
// /usr/include/GL/glew.h:7115:9: warning: macro 'GLEW_ARB_tessellation_shader' contains a runtime value, translated to function
pub inline fn GLEW_ARB_tessellation_shader() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_tessellation_shader)) {
    return GLEW_GET_VAR(__GLEW_ARB_tessellation_shader);
}
pub const GL_ARB_texture_barrier = @as(c_int, 1);
// /usr/include/GL/glew.h:7126:9: warning: macro 'glTextureBarrier' contains a runtime value, translated to function
pub inline fn glTextureBarrier() @TypeOf(GLEW_GET_FUN(__glewTextureBarrier)) {
    return GLEW_GET_FUN(__glewTextureBarrier);
}
// /usr/include/GL/glew.h:7128:9: warning: macro 'GLEW_ARB_texture_barrier' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_barrier() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_barrier)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_barrier);
}
pub const GL_ARB_texture_border_clamp = @as(c_int, 1);
pub const GL_CLAMP_TO_BORDER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hex);
// /usr/include/GL/glew.h:7139:9: warning: macro 'GLEW_ARB_texture_border_clamp' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_border_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_border_clamp)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_border_clamp);
}
pub const GL_ARB_texture_buffer_object = @as(c_int, 1);
pub const GL_TEXTURE_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hex);
pub const GL_MAX_TEXTURE_BUFFER_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hex);
pub const GL_TEXTURE_BINDING_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hex);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hex);
pub const GL_TEXTURE_BUFFER_FORMAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2E, .hex);
// /usr/include/GL/glew.h:7156:9: warning: macro 'glTexBufferARB' contains a runtime value, translated to function
pub inline fn glTexBufferARB() @TypeOf(GLEW_GET_FUN(__glewTexBufferARB)) {
    return GLEW_GET_FUN(__glewTexBufferARB);
}
// /usr/include/GL/glew.h:7158:9: warning: macro 'GLEW_ARB_texture_buffer_object' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_buffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_buffer_object)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_buffer_object);
}
pub const GL_ARB_texture_buffer_object_rgb32 = @as(c_int, 1);
// /usr/include/GL/glew.h:7167:9: warning: macro 'GLEW_ARB_texture_buffer_object_rgb32' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_buffer_object_rgb32() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_buffer_object_rgb32)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_buffer_object_rgb32);
}
pub const GL_ARB_texture_buffer_range = @as(c_int, 1);
pub const GL_TEXTURE_BUFFER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919D, .hex);
pub const GL_TEXTURE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919E, .hex);
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919F, .hex);
// /usr/include/GL/glew.h:7183:9: warning: macro 'glTexBufferRange' contains a runtime value, translated to function
pub inline fn glTexBufferRange() @TypeOf(GLEW_GET_FUN(__glewTexBufferRange)) {
    return GLEW_GET_FUN(__glewTexBufferRange);
}
// /usr/include/GL/glew.h:7184:9: warning: macro 'glTextureBufferRangeEXT' contains a runtime value, translated to function
pub inline fn glTextureBufferRangeEXT() @TypeOf(GLEW_GET_FUN(__glewTextureBufferRangeEXT)) {
    return GLEW_GET_FUN(__glewTextureBufferRangeEXT);
}
// /usr/include/GL/glew.h:7186:9: warning: macro 'GLEW_ARB_texture_buffer_range' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_buffer_range() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_buffer_range)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_buffer_range);
}
pub const GL_ARB_texture_compression = @as(c_int, 1);
pub const GL_COMPRESSED_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E9, .hex);
pub const GL_COMPRESSED_LUMINANCE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EA, .hex);
pub const GL_COMPRESSED_LUMINANCE_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EB, .hex);
pub const GL_COMPRESSED_INTENSITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EC, .hex);
pub const GL_COMPRESSED_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84ED, .hex);
pub const GL_COMPRESSED_RGBA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EE, .hex);
pub const GL_TEXTURE_COMPRESSION_HINT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EF, .hex);
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A0, .hex);
pub const GL_TEXTURE_COMPRESSED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A1, .hex);
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A2, .hex);
pub const GL_COMPRESSED_TEXTURE_FORMATS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A3, .hex);
// /usr/include/GL/glew.h:7215:9: warning: macro 'glCompressedTexImage1DARB' contains a runtime value, translated to function
pub inline fn glCompressedTexImage1DARB() @TypeOf(GLEW_GET_FUN(__glewCompressedTexImage1DARB)) {
    return GLEW_GET_FUN(__glewCompressedTexImage1DARB);
}
// /usr/include/GL/glew.h:7216:9: warning: macro 'glCompressedTexImage2DARB' contains a runtime value, translated to function
pub inline fn glCompressedTexImage2DARB() @TypeOf(GLEW_GET_FUN(__glewCompressedTexImage2DARB)) {
    return GLEW_GET_FUN(__glewCompressedTexImage2DARB);
}
// /usr/include/GL/glew.h:7217:9: warning: macro 'glCompressedTexImage3DARB' contains a runtime value, translated to function
pub inline fn glCompressedTexImage3DARB() @TypeOf(GLEW_GET_FUN(__glewCompressedTexImage3DARB)) {
    return GLEW_GET_FUN(__glewCompressedTexImage3DARB);
}
// /usr/include/GL/glew.h:7218:9: warning: macro 'glCompressedTexSubImage1DARB' contains a runtime value, translated to function
pub inline fn glCompressedTexSubImage1DARB() @TypeOf(GLEW_GET_FUN(__glewCompressedTexSubImage1DARB)) {
    return GLEW_GET_FUN(__glewCompressedTexSubImage1DARB);
}
// /usr/include/GL/glew.h:7219:9: warning: macro 'glCompressedTexSubImage2DARB' contains a runtime value, translated to function
pub inline fn glCompressedTexSubImage2DARB() @TypeOf(GLEW_GET_FUN(__glewCompressedTexSubImage2DARB)) {
    return GLEW_GET_FUN(__glewCompressedTexSubImage2DARB);
}
// /usr/include/GL/glew.h:7220:9: warning: macro 'glCompressedTexSubImage3DARB' contains a runtime value, translated to function
pub inline fn glCompressedTexSubImage3DARB() @TypeOf(GLEW_GET_FUN(__glewCompressedTexSubImage3DARB)) {
    return GLEW_GET_FUN(__glewCompressedTexSubImage3DARB);
}
// /usr/include/GL/glew.h:7221:9: warning: macro 'glGetCompressedTexImageARB' contains a runtime value, translated to function
pub inline fn glGetCompressedTexImageARB() @TypeOf(GLEW_GET_FUN(__glewGetCompressedTexImageARB)) {
    return GLEW_GET_FUN(__glewGetCompressedTexImageARB);
}
// /usr/include/GL/glew.h:7223:9: warning: macro 'GLEW_ARB_texture_compression' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_compression() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_compression)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_compression);
}
pub const GL_ARB_texture_compression_bptc = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8C, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8D, .hex);
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8E, .hex);
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8F, .hex);
// /usr/include/GL/glew.h:7237:9: warning: macro 'GLEW_ARB_texture_compression_bptc' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_compression_bptc() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_compression_bptc)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_compression_bptc);
}
pub const GL_ARB_texture_compression_rgtc = @as(c_int, 1);
pub const GL_COMPRESSED_RED_RGTC1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBB, .hex);
pub const GL_COMPRESSED_SIGNED_RED_RGTC1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBC, .hex);
pub const GL_COMPRESSED_RG_RGTC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBD, .hex);
pub const GL_COMPRESSED_SIGNED_RG_RGTC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBE, .hex);
// /usr/include/GL/glew.h:7251:9: warning: macro 'GLEW_ARB_texture_compression_rgtc' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_compression_rgtc() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_compression_rgtc)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_compression_rgtc);
}
pub const GL_ARB_texture_cube_map = @as(c_int, 1);
pub const GL_NORMAL_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hex);
pub const GL_REFLECTION_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hex);
pub const GL_TEXTURE_CUBE_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hex);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hex);
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hex);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hex);
// /usr/include/GL/glew.h:7273:9: warning: macro 'GLEW_ARB_texture_cube_map' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_cube_map() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_cube_map)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_cube_map);
}
pub const GL_ARB_texture_cube_map_array = @as(c_int, 1);
pub const GL_TEXTURE_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hex);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hex);
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900B, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hex);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hex);
// /usr/include/GL/glew.h:7290:9: warning: macro 'GLEW_ARB_texture_cube_map_array' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_cube_map_array() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_cube_map_array)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_cube_map_array);
}
pub const GL_ARB_texture_env_add = @as(c_int, 1);
// /usr/include/GL/glew.h:7299:9: warning: macro 'GLEW_ARB_texture_env_add' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_env_add() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_env_add)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_env_add);
}
pub const GL_ARB_texture_env_combine = @as(c_int, 1);
pub const GL_SUBTRACT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E7, .hex);
pub const GL_COMBINE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hex);
pub const GL_COMBINE_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hex);
pub const GL_COMBINE_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hex);
pub const GL_RGB_SCALE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hex);
pub const GL_ADD_SIGNED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hex);
pub const GL_INTERPOLATE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hex);
pub const GL_CONSTANT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hex);
pub const GL_PRIMARY_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hex);
pub const GL_PREVIOUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hex);
pub const GL_SOURCE0_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hex);
pub const GL_SOURCE1_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hex);
pub const GL_SOURCE2_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hex);
pub const GL_SOURCE0_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hex);
pub const GL_SOURCE1_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hex);
pub const GL_SOURCE2_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hex);
pub const GL_OPERAND0_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hex);
pub const GL_OPERAND1_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hex);
pub const GL_OPERAND2_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hex);
pub const GL_OPERAND0_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hex);
pub const GL_OPERAND1_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hex);
pub const GL_OPERAND2_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hex);
// /usr/include/GL/glew.h:7331:9: warning: macro 'GLEW_ARB_texture_env_combine' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_env_combine() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_env_combine)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_env_combine);
}
pub const GL_ARB_texture_env_crossbar = @as(c_int, 1);
// /usr/include/GL/glew.h:7340:9: warning: macro 'GLEW_ARB_texture_env_crossbar' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_env_crossbar() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_env_crossbar)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_env_crossbar);
}
pub const GL_ARB_texture_env_dot3 = @as(c_int, 1);
pub const GL_DOT3_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AE, .hex);
pub const GL_DOT3_RGBA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AF, .hex);
// /usr/include/GL/glew.h:7352:9: warning: macro 'GLEW_ARB_texture_env_dot3' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_env_dot3() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_env_dot3)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_env_dot3);
}
pub const GL_ARB_texture_filter_anisotropic = @as(c_int, 1);
// /usr/include/GL/glew.h:7364:9: warning: macro 'GLEW_ARB_texture_filter_anisotropic' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_filter_anisotropic() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_filter_anisotropic)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_filter_anisotropic);
}
pub const GL_ARB_texture_filter_minmax = @as(c_int, 1);
pub const GL_TEXTURE_REDUCTION_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9366, .hex);
pub const GL_WEIGHTED_AVERAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9367, .hex);
// /usr/include/GL/glew.h:7376:9: warning: macro 'GLEW_ARB_texture_filter_minmax' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_filter_minmax() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_filter_minmax)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_filter_minmax);
}
pub const GL_ARB_texture_float = @as(c_int, 1);
pub const GL_RGBA32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hex);
pub const GL_RGB32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hex);
pub const GL_ALPHA32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hex);
pub const GL_INTENSITY32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8817, .hex);
pub const GL_LUMINANCE32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hex);
pub const GL_LUMINANCE_ALPHA32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hex);
pub const GL_RGBA16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hex);
pub const GL_RGB16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hex);
pub const GL_ALPHA16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hex);
pub const GL_INTENSITY16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881D, .hex);
pub const GL_LUMINANCE16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hex);
pub const GL_LUMINANCE_ALPHA16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hex);
pub const GL_TEXTURE_RED_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C10, .hex);
pub const GL_TEXTURE_GREEN_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C11, .hex);
pub const GL_TEXTURE_BLUE_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C12, .hex);
pub const GL_TEXTURE_ALPHA_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C13, .hex);
pub const GL_TEXTURE_LUMINANCE_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C14, .hex);
pub const GL_TEXTURE_INTENSITY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C15, .hex);
pub const GL_TEXTURE_DEPTH_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C16, .hex);
pub const GL_UNSIGNED_NORMALIZED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C17, .hex);
// /usr/include/GL/glew.h:7406:9: warning: macro 'GLEW_ARB_texture_float' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_float() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_float)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_float);
}
pub const GL_ARB_texture_gather = @as(c_int, 1);
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hex);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hex);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9F, .hex);
// /usr/include/GL/glew.h:7419:9: warning: macro 'GLEW_ARB_texture_gather' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_gather() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_gather)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_gather);
}
pub const GL_ARB_texture_mirror_clamp_to_edge = @as(c_int, 1);
pub const GL_MIRROR_CLAMP_TO_EDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hex);
// /usr/include/GL/glew.h:7430:9: warning: macro 'GLEW_ARB_texture_mirror_clamp_to_edge' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_mirror_clamp_to_edge() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_mirror_clamp_to_edge)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_mirror_clamp_to_edge);
}
pub const GL_ARB_texture_mirrored_repeat = @as(c_int, 1);
pub const GL_MIRRORED_REPEAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hex);
// /usr/include/GL/glew.h:7441:9: warning: macro 'GLEW_ARB_texture_mirrored_repeat' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_mirrored_repeat() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_mirrored_repeat)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_mirrored_repeat);
}
pub const GL_ARB_texture_multisample = @as(c_int, 1);
pub const GL_SAMPLE_POSITION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hex);
pub const GL_SAMPLE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E51, .hex);
pub const GL_SAMPLE_MASK_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E52, .hex);
pub const GL_MAX_SAMPLE_MASK_WORDS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E59, .hex);
pub const GL_TEXTURE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9100, .hex);
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9101, .hex);
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9102, .hex);
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9103, .hex);
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9104, .hex);
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9105, .hex);
pub const GL_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9106, .hex);
pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9107, .hex);
pub const GL_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9108, .hex);
pub const GL_INT_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9109, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910A, .hex);
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910B, .hex);
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910C, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910D, .hex);
pub const GL_MAX_COLOR_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910E, .hex);
pub const GL_MAX_DEPTH_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910F, .hex);
pub const GL_MAX_INTEGER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9110, .hex);
// /usr/include/GL/glew.h:7477:9: warning: macro 'glGetMultisamplefv' contains a runtime value, translated to function
pub inline fn glGetMultisamplefv() @TypeOf(GLEW_GET_FUN(__glewGetMultisamplefv)) {
    return GLEW_GET_FUN(__glewGetMultisamplefv);
}
// /usr/include/GL/glew.h:7478:9: warning: macro 'glSampleMaski' contains a runtime value, translated to function
pub inline fn glSampleMaski() @TypeOf(GLEW_GET_FUN(__glewSampleMaski)) {
    return GLEW_GET_FUN(__glewSampleMaski);
}
// /usr/include/GL/glew.h:7479:9: warning: macro 'glTexImage2DMultisample' contains a runtime value, translated to function
pub inline fn glTexImage2DMultisample() @TypeOf(GLEW_GET_FUN(__glewTexImage2DMultisample)) {
    return GLEW_GET_FUN(__glewTexImage2DMultisample);
}
// /usr/include/GL/glew.h:7480:9: warning: macro 'glTexImage3DMultisample' contains a runtime value, translated to function
pub inline fn glTexImage3DMultisample() @TypeOf(GLEW_GET_FUN(__glewTexImage3DMultisample)) {
    return GLEW_GET_FUN(__glewTexImage3DMultisample);
}
// /usr/include/GL/glew.h:7482:9: warning: macro 'GLEW_ARB_texture_multisample' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_multisample() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_multisample)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_multisample);
}
pub const GL_ARB_texture_non_power_of_two = @as(c_int, 1);
// /usr/include/GL/glew.h:7491:9: warning: macro 'GLEW_ARB_texture_non_power_of_two' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_non_power_of_two() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_non_power_of_two)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_non_power_of_two);
}
pub const GL_ARB_texture_query_levels = @as(c_int, 1);
// /usr/include/GL/glew.h:7500:9: warning: macro 'GLEW_ARB_texture_query_levels' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_query_levels() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_query_levels)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_query_levels);
}
pub const GL_ARB_texture_query_lod = @as(c_int, 1);
// /usr/include/GL/glew.h:7509:9: warning: macro 'GLEW_ARB_texture_query_lod' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_query_lod() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_query_lod)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_query_lod);
}
pub const GL_ARB_texture_rectangle = @as(c_int, 1);
pub const GL_TEXTURE_RECTANGLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hex);
pub const GL_TEXTURE_BINDING_RECTANGLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hex);
pub const GL_PROXY_TEXTURE_RECTANGLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hex);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hex);
// /usr/include/GL/glew.h:7525:9: warning: macro 'GLEW_ARB_texture_rectangle' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_rectangle() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_rectangle)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_rectangle);
}
pub const GL_ARB_texture_rg = @as(c_int, 1);
pub const GL_COMPRESSED_RED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8225, .hex);
pub const GL_COMPRESSED_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8226, .hex);
pub const GL_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8227, .hex);
pub const GL_RG_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8228, .hex);
pub const GL_R8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8229, .hex);
pub const GL_R16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822A, .hex);
pub const GL_RG8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822B, .hex);
pub const GL_RG16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822C, .hex);
pub const GL_R16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822D, .hex);
pub const GL_R32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822E, .hex);
pub const GL_RG16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822F, .hex);
pub const GL_RG32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8230, .hex);
pub const GL_R8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8231, .hex);
pub const GL_R8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8232, .hex);
pub const GL_R16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8233, .hex);
pub const GL_R16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8234, .hex);
pub const GL_R32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8235, .hex);
pub const GL_R32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8236, .hex);
pub const GL_RG8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8237, .hex);
pub const GL_RG16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8239, .hex);
pub const GL_RG32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823B, .hex);
pub const GL_RG32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823C, .hex);
// /usr/include/GL/glew.h:7559:9: warning: macro 'GLEW_ARB_texture_rg' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_rg() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_rg)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_rg);
}
pub const GL_ARB_texture_rgb10_a2ui = @as(c_int, 1);
// /usr/include/GL/glew.h:7570:9: warning: macro 'GLEW_ARB_texture_rgb10_a2ui' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_rgb10_a2ui() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_rgb10_a2ui)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_rgb10_a2ui);
}
pub const GL_ARB_texture_stencil8 = @as(c_int, 1);
// /usr/include/GL/glew.h:7582:9: warning: macro 'GLEW_ARB_texture_stencil8' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_stencil8() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_stencil8)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_stencil8);
}
pub const GL_ARB_texture_storage = @as(c_int, 1);
pub const GL_TEXTURE_IMMUTABLE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912F, .hex);
// /usr/include/GL/glew.h:7597:9: warning: macro 'glTexStorage1D' contains a runtime value, translated to function
pub inline fn glTexStorage1D() @TypeOf(GLEW_GET_FUN(__glewTexStorage1D)) {
    return GLEW_GET_FUN(__glewTexStorage1D);
}
// /usr/include/GL/glew.h:7598:9: warning: macro 'glTexStorage2D' contains a runtime value, translated to function
pub inline fn glTexStorage2D() @TypeOf(GLEW_GET_FUN(__glewTexStorage2D)) {
    return GLEW_GET_FUN(__glewTexStorage2D);
}
// /usr/include/GL/glew.h:7599:9: warning: macro 'glTexStorage3D' contains a runtime value, translated to function
pub inline fn glTexStorage3D() @TypeOf(GLEW_GET_FUN(__glewTexStorage3D)) {
    return GLEW_GET_FUN(__glewTexStorage3D);
}
// /usr/include/GL/glew.h:7601:9: warning: macro 'GLEW_ARB_texture_storage' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_storage() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_storage)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_storage);
}
pub const GL_ARB_texture_storage_multisample = @as(c_int, 1);
// /usr/include/GL/glew.h:7615:9: warning: macro 'glTexStorage2DMultisample' contains a runtime value, translated to function
pub inline fn glTexStorage2DMultisample() @TypeOf(GLEW_GET_FUN(__glewTexStorage2DMultisample)) {
    return GLEW_GET_FUN(__glewTexStorage2DMultisample);
}
// /usr/include/GL/glew.h:7616:9: warning: macro 'glTexStorage3DMultisample' contains a runtime value, translated to function
pub inline fn glTexStorage3DMultisample() @TypeOf(GLEW_GET_FUN(__glewTexStorage3DMultisample)) {
    return GLEW_GET_FUN(__glewTexStorage3DMultisample);
}
// /usr/include/GL/glew.h:7617:9: warning: macro 'glTextureStorage2DMultisampleEXT' contains a runtime value, translated to function
pub inline fn glTextureStorage2DMultisampleEXT() @TypeOf(GLEW_GET_FUN(__glewTextureStorage2DMultisampleEXT)) {
    return GLEW_GET_FUN(__glewTextureStorage2DMultisampleEXT);
}
// /usr/include/GL/glew.h:7618:9: warning: macro 'glTextureStorage3DMultisampleEXT' contains a runtime value, translated to function
pub inline fn glTextureStorage3DMultisampleEXT() @TypeOf(GLEW_GET_FUN(__glewTextureStorage3DMultisampleEXT)) {
    return GLEW_GET_FUN(__glewTextureStorage3DMultisampleEXT);
}
// /usr/include/GL/glew.h:7620:9: warning: macro 'GLEW_ARB_texture_storage_multisample' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_storage_multisample() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_storage_multisample)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_storage_multisample);
}
pub const GL_ARB_texture_swizzle = @as(c_int, 1);
pub const GL_TEXTURE_SWIZZLE_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E42, .hex);
pub const GL_TEXTURE_SWIZZLE_G = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E43, .hex);
pub const GL_TEXTURE_SWIZZLE_B = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E44, .hex);
pub const GL_TEXTURE_SWIZZLE_A = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E45, .hex);
pub const GL_TEXTURE_SWIZZLE_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E46, .hex);
// /usr/include/GL/glew.h:7635:9: warning: macro 'GLEW_ARB_texture_swizzle' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_swizzle() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_swizzle)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_swizzle);
}
pub const GL_ARB_texture_view = @as(c_int, 1);
pub const GL_TEXTURE_VIEW_MIN_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DB, .hex);
pub const GL_TEXTURE_VIEW_NUM_LEVELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DC, .hex);
pub const GL_TEXTURE_VIEW_MIN_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DD, .hex);
pub const GL_TEXTURE_VIEW_NUM_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DE, .hex);
// /usr/include/GL/glew.h:7652:9: warning: macro 'glTextureView' contains a runtime value, translated to function
pub inline fn glTextureView() @TypeOf(GLEW_GET_FUN(__glewTextureView)) {
    return GLEW_GET_FUN(__glewTextureView);
}
// /usr/include/GL/glew.h:7654:9: warning: macro 'GLEW_ARB_texture_view' contains a runtime value, translated to function
pub inline fn GLEW_ARB_texture_view() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_texture_view)) {
    return GLEW_GET_VAR(__GLEW_ARB_texture_view);
}
pub const GL_ARB_timer_query = @as(c_int, 1);
pub const GL_TIME_ELAPSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BF, .hex);
pub const GL_TIMESTAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hex);
// /usr/include/GL/glew.h:7670:9: warning: macro 'glGetQueryObjecti64v' contains a runtime value, translated to function
pub inline fn glGetQueryObjecti64v() @TypeOf(GLEW_GET_FUN(__glewGetQueryObjecti64v)) {
    return GLEW_GET_FUN(__glewGetQueryObjecti64v);
}
// /usr/include/GL/glew.h:7671:9: warning: macro 'glGetQueryObjectui64v' contains a runtime value, translated to function
pub inline fn glGetQueryObjectui64v() @TypeOf(GLEW_GET_FUN(__glewGetQueryObjectui64v)) {
    return GLEW_GET_FUN(__glewGetQueryObjectui64v);
}
// /usr/include/GL/glew.h:7672:9: warning: macro 'glQueryCounter' contains a runtime value, translated to function
pub inline fn glQueryCounter() @TypeOf(GLEW_GET_FUN(__glewQueryCounter)) {
    return GLEW_GET_FUN(__glewQueryCounter);
}
// /usr/include/GL/glew.h:7674:9: warning: macro 'GLEW_ARB_timer_query' contains a runtime value, translated to function
pub inline fn GLEW_ARB_timer_query() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_timer_query)) {
    return GLEW_GET_VAR(__GLEW_ARB_timer_query);
}
pub const GL_ARB_transform_feedback2 = @as(c_int, 1);
pub const GL_TRANSFORM_FEEDBACK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E22, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hex);
pub const GL_TRANSFORM_FEEDBACK_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E25, .hex);
// /usr/include/GL/glew.h:7696:9: warning: macro 'glBindTransformFeedback' contains a runtime value, translated to function
pub inline fn glBindTransformFeedback() @TypeOf(GLEW_GET_FUN(__glewBindTransformFeedback)) {
    return GLEW_GET_FUN(__glewBindTransformFeedback);
}
// /usr/include/GL/glew.h:7697:9: warning: macro 'glDeleteTransformFeedbacks' contains a runtime value, translated to function
pub inline fn glDeleteTransformFeedbacks() @TypeOf(GLEW_GET_FUN(__glewDeleteTransformFeedbacks)) {
    return GLEW_GET_FUN(__glewDeleteTransformFeedbacks);
}
// /usr/include/GL/glew.h:7698:9: warning: macro 'glDrawTransformFeedback' contains a runtime value, translated to function
pub inline fn glDrawTransformFeedback() @TypeOf(GLEW_GET_FUN(__glewDrawTransformFeedback)) {
    return GLEW_GET_FUN(__glewDrawTransformFeedback);
}
// /usr/include/GL/glew.h:7699:9: warning: macro 'glGenTransformFeedbacks' contains a runtime value, translated to function
pub inline fn glGenTransformFeedbacks() @TypeOf(GLEW_GET_FUN(__glewGenTransformFeedbacks)) {
    return GLEW_GET_FUN(__glewGenTransformFeedbacks);
}
// /usr/include/GL/glew.h:7700:9: warning: macro 'glIsTransformFeedback' contains a runtime value, translated to function
pub inline fn glIsTransformFeedback() @TypeOf(GLEW_GET_FUN(__glewIsTransformFeedback)) {
    return GLEW_GET_FUN(__glewIsTransformFeedback);
}
// /usr/include/GL/glew.h:7701:9: warning: macro 'glPauseTransformFeedback' contains a runtime value, translated to function
pub inline fn glPauseTransformFeedback() @TypeOf(GLEW_GET_FUN(__glewPauseTransformFeedback)) {
    return GLEW_GET_FUN(__glewPauseTransformFeedback);
}
// /usr/include/GL/glew.h:7702:9: warning: macro 'glResumeTransformFeedback' contains a runtime value, translated to function
pub inline fn glResumeTransformFeedback() @TypeOf(GLEW_GET_FUN(__glewResumeTransformFeedback)) {
    return GLEW_GET_FUN(__glewResumeTransformFeedback);
}
// /usr/include/GL/glew.h:7704:9: warning: macro 'GLEW_ARB_transform_feedback2' contains a runtime value, translated to function
pub inline fn GLEW_ARB_transform_feedback2() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_transform_feedback2)) {
    return GLEW_GET_VAR(__GLEW_ARB_transform_feedback2);
}
pub const GL_ARB_transform_feedback3 = @as(c_int, 1);
pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E70, .hex);
// /usr/include/GL/glew.h:7721:9: warning: macro 'glBeginQueryIndexed' contains a runtime value, translated to function
pub inline fn glBeginQueryIndexed() @TypeOf(GLEW_GET_FUN(__glewBeginQueryIndexed)) {
    return GLEW_GET_FUN(__glewBeginQueryIndexed);
}
// /usr/include/GL/glew.h:7722:9: warning: macro 'glDrawTransformFeedbackStream' contains a runtime value, translated to function
pub inline fn glDrawTransformFeedbackStream() @TypeOf(GLEW_GET_FUN(__glewDrawTransformFeedbackStream)) {
    return GLEW_GET_FUN(__glewDrawTransformFeedbackStream);
}
// /usr/include/GL/glew.h:7723:9: warning: macro 'glEndQueryIndexed' contains a runtime value, translated to function
pub inline fn glEndQueryIndexed() @TypeOf(GLEW_GET_FUN(__glewEndQueryIndexed)) {
    return GLEW_GET_FUN(__glewEndQueryIndexed);
}
// /usr/include/GL/glew.h:7724:9: warning: macro 'glGetQueryIndexediv' contains a runtime value, translated to function
pub inline fn glGetQueryIndexediv() @TypeOf(GLEW_GET_FUN(__glewGetQueryIndexediv)) {
    return GLEW_GET_FUN(__glewGetQueryIndexediv);
}
// /usr/include/GL/glew.h:7726:9: warning: macro 'GLEW_ARB_transform_feedback3' contains a runtime value, translated to function
pub inline fn GLEW_ARB_transform_feedback3() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_transform_feedback3)) {
    return GLEW_GET_VAR(__GLEW_ARB_transform_feedback3);
}
pub const GL_ARB_transform_feedback_instanced = @as(c_int, 1);
// /usr/include/GL/glew.h:7738:9: warning: macro 'glDrawTransformFeedbackInstanced' contains a runtime value, translated to function
pub inline fn glDrawTransformFeedbackInstanced() @TypeOf(GLEW_GET_FUN(__glewDrawTransformFeedbackInstanced)) {
    return GLEW_GET_FUN(__glewDrawTransformFeedbackInstanced);
}
// /usr/include/GL/glew.h:7739:9: warning: macro 'glDrawTransformFeedbackStreamInstanced' contains a runtime value, translated to function
pub inline fn glDrawTransformFeedbackStreamInstanced() @TypeOf(GLEW_GET_FUN(__glewDrawTransformFeedbackStreamInstanced)) {
    return GLEW_GET_FUN(__glewDrawTransformFeedbackStreamInstanced);
}
// /usr/include/GL/glew.h:7741:9: warning: macro 'GLEW_ARB_transform_feedback_instanced' contains a runtime value, translated to function
pub inline fn GLEW_ARB_transform_feedback_instanced() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_transform_feedback_instanced)) {
    return GLEW_GET_VAR(__GLEW_ARB_transform_feedback_instanced);
}
pub const GL_ARB_transform_feedback_overflow_query = @as(c_int, 1);
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EC, .hex);
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82ED, .hex);
// /usr/include/GL/glew.h:7753:9: warning: macro 'GLEW_ARB_transform_feedback_overflow_query' contains a runtime value, translated to function
pub inline fn GLEW_ARB_transform_feedback_overflow_query() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_transform_feedback_overflow_query)) {
    return GLEW_GET_VAR(__GLEW_ARB_transform_feedback_overflow_query);
}
pub const GL_ARB_transpose_matrix = @as(c_int, 1);
pub const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E3, .hex);
pub const GL_TRANSPOSE_PROJECTION_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E4, .hex);
pub const GL_TRANSPOSE_TEXTURE_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E5, .hex);
pub const GL_TRANSPOSE_COLOR_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E6, .hex);
// /usr/include/GL/glew.h:7772:9: warning: macro 'glLoadTransposeMatrixdARB' contains a runtime value, translated to function
pub inline fn glLoadTransposeMatrixdARB() @TypeOf(GLEW_GET_FUN(__glewLoadTransposeMatrixdARB)) {
    return GLEW_GET_FUN(__glewLoadTransposeMatrixdARB);
}
// /usr/include/GL/glew.h:7773:9: warning: macro 'glLoadTransposeMatrixfARB' contains a runtime value, translated to function
pub inline fn glLoadTransposeMatrixfARB() @TypeOf(GLEW_GET_FUN(__glewLoadTransposeMatrixfARB)) {
    return GLEW_GET_FUN(__glewLoadTransposeMatrixfARB);
}
// /usr/include/GL/glew.h:7774:9: warning: macro 'glMultTransposeMatrixdARB' contains a runtime value, translated to function
pub inline fn glMultTransposeMatrixdARB() @TypeOf(GLEW_GET_FUN(__glewMultTransposeMatrixdARB)) {
    return GLEW_GET_FUN(__glewMultTransposeMatrixdARB);
}
// /usr/include/GL/glew.h:7775:9: warning: macro 'glMultTransposeMatrixfARB' contains a runtime value, translated to function
pub inline fn glMultTransposeMatrixfARB() @TypeOf(GLEW_GET_FUN(__glewMultTransposeMatrixfARB)) {
    return GLEW_GET_FUN(__glewMultTransposeMatrixfARB);
}
// /usr/include/GL/glew.h:7777:9: warning: macro 'GLEW_ARB_transpose_matrix' contains a runtime value, translated to function
pub inline fn GLEW_ARB_transpose_matrix() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_transpose_matrix)) {
    return GLEW_GET_VAR(__GLEW_ARB_transpose_matrix);
}
pub const GL_ARB_uniform_buffer_object = @as(c_int, 1);
pub const GL_UNIFORM_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A11, .hex);
pub const GL_UNIFORM_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A28, .hex);
pub const GL_UNIFORM_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A29, .hex);
pub const GL_UNIFORM_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2A, .hex);
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2B, .hex);
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2C, .hex);
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2D, .hex);
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2E, .hex);
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2F, .hex);
pub const GL_MAX_UNIFORM_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A30, .hex);
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A31, .hex);
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A32, .hex);
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A33, .hex);
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A34, .hex);
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A35, .hex);
pub const GL_ACTIVE_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A36, .hex);
pub const GL_UNIFORM_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A37, .hex);
pub const GL_UNIFORM_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A38, .hex);
pub const GL_UNIFORM_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A39, .hex);
pub const GL_UNIFORM_BLOCK_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3A, .hex);
pub const GL_UNIFORM_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3B, .hex);
pub const GL_UNIFORM_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3C, .hex);
pub const GL_UNIFORM_MATRIX_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3D, .hex);
pub const GL_UNIFORM_IS_ROW_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3E, .hex);
pub const GL_UNIFORM_BLOCK_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3F, .hex);
pub const GL_UNIFORM_BLOCK_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A40, .hex);
pub const GL_UNIFORM_BLOCK_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A41, .hex);
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A42, .hex);
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A43, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A44, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A45, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A46, .hex);
pub const GL_INVALID_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
// /usr/include/GL/glew.h:7831:9: warning: macro 'glBindBufferBase' contains a runtime value, translated to function
pub inline fn glBindBufferBase() @TypeOf(GLEW_GET_FUN(__glewBindBufferBase)) {
    return GLEW_GET_FUN(__glewBindBufferBase);
}
// /usr/include/GL/glew.h:7832:9: warning: macro 'glBindBufferRange' contains a runtime value, translated to function
pub inline fn glBindBufferRange() @TypeOf(GLEW_GET_FUN(__glewBindBufferRange)) {
    return GLEW_GET_FUN(__glewBindBufferRange);
}
// /usr/include/GL/glew.h:7833:9: warning: macro 'glGetActiveUniformBlockName' contains a runtime value, translated to function
pub inline fn glGetActiveUniformBlockName() @TypeOf(GLEW_GET_FUN(__glewGetActiveUniformBlockName)) {
    return GLEW_GET_FUN(__glewGetActiveUniformBlockName);
}
// /usr/include/GL/glew.h:7834:9: warning: macro 'glGetActiveUniformBlockiv' contains a runtime value, translated to function
pub inline fn glGetActiveUniformBlockiv() @TypeOf(GLEW_GET_FUN(__glewGetActiveUniformBlockiv)) {
    return GLEW_GET_FUN(__glewGetActiveUniformBlockiv);
}
// /usr/include/GL/glew.h:7835:9: warning: macro 'glGetActiveUniformName' contains a runtime value, translated to function
pub inline fn glGetActiveUniformName() @TypeOf(GLEW_GET_FUN(__glewGetActiveUniformName)) {
    return GLEW_GET_FUN(__glewGetActiveUniformName);
}
// /usr/include/GL/glew.h:7836:9: warning: macro 'glGetActiveUniformsiv' contains a runtime value, translated to function
pub inline fn glGetActiveUniformsiv() @TypeOf(GLEW_GET_FUN(__glewGetActiveUniformsiv)) {
    return GLEW_GET_FUN(__glewGetActiveUniformsiv);
}
// /usr/include/GL/glew.h:7837:9: warning: macro 'glGetIntegeri_v' contains a runtime value, translated to function
pub inline fn glGetIntegeri_v() @TypeOf(GLEW_GET_FUN(__glewGetIntegeri_v)) {
    return GLEW_GET_FUN(__glewGetIntegeri_v);
}
// /usr/include/GL/glew.h:7838:9: warning: macro 'glGetUniformBlockIndex' contains a runtime value, translated to function
pub inline fn glGetUniformBlockIndex() @TypeOf(GLEW_GET_FUN(__glewGetUniformBlockIndex)) {
    return GLEW_GET_FUN(__glewGetUniformBlockIndex);
}
// /usr/include/GL/glew.h:7839:9: warning: macro 'glGetUniformIndices' contains a runtime value, translated to function
pub inline fn glGetUniformIndices() @TypeOf(GLEW_GET_FUN(__glewGetUniformIndices)) {
    return GLEW_GET_FUN(__glewGetUniformIndices);
}
// /usr/include/GL/glew.h:7840:9: warning: macro 'glUniformBlockBinding' contains a runtime value, translated to function
pub inline fn glUniformBlockBinding() @TypeOf(GLEW_GET_FUN(__glewUniformBlockBinding)) {
    return GLEW_GET_FUN(__glewUniformBlockBinding);
}
// /usr/include/GL/glew.h:7842:9: warning: macro 'GLEW_ARB_uniform_buffer_object' contains a runtime value, translated to function
pub inline fn GLEW_ARB_uniform_buffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_uniform_buffer_object)) {
    return GLEW_GET_VAR(__GLEW_ARB_uniform_buffer_object);
}
pub const GL_ARB_vertex_array_bgra = @as(c_int, 1);
// /usr/include/GL/glew.h:7853:9: warning: macro 'GLEW_ARB_vertex_array_bgra' contains a runtime value, translated to function
pub inline fn GLEW_ARB_vertex_array_bgra() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_vertex_array_bgra)) {
    return GLEW_GET_VAR(__GLEW_ARB_vertex_array_bgra);
}
pub const GL_ARB_vertex_array_object = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B5, .hex);
// /usr/include/GL/glew.h:7869:9: warning: macro 'glBindVertexArray' contains a runtime value, translated to function
pub inline fn glBindVertexArray() @TypeOf(GLEW_GET_FUN(__glewBindVertexArray)) {
    return GLEW_GET_FUN(__glewBindVertexArray);
}
// /usr/include/GL/glew.h:7870:9: warning: macro 'glDeleteVertexArrays' contains a runtime value, translated to function
pub inline fn glDeleteVertexArrays() @TypeOf(GLEW_GET_FUN(__glewDeleteVertexArrays)) {
    return GLEW_GET_FUN(__glewDeleteVertexArrays);
}
// /usr/include/GL/glew.h:7871:9: warning: macro 'glGenVertexArrays' contains a runtime value, translated to function
pub inline fn glGenVertexArrays() @TypeOf(GLEW_GET_FUN(__glewGenVertexArrays)) {
    return GLEW_GET_FUN(__glewGenVertexArrays);
}
// /usr/include/GL/glew.h:7872:9: warning: macro 'glIsVertexArray' contains a runtime value, translated to function
pub inline fn glIsVertexArray() @TypeOf(GLEW_GET_FUN(__glewIsVertexArray)) {
    return GLEW_GET_FUN(__glewIsVertexArray);
}
// /usr/include/GL/glew.h:7874:9: warning: macro 'GLEW_ARB_vertex_array_object' contains a runtime value, translated to function
pub inline fn GLEW_ARB_vertex_array_object() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_vertex_array_object)) {
    return GLEW_GET_VAR(__GLEW_ARB_vertex_array_object);
}
pub const GL_ARB_vertex_attrib_64bit = @as(c_int, 1);
// /usr/include/GL/glew.h:7894:9: warning: macro 'glGetVertexAttribLdv' contains a runtime value, translated to function
pub inline fn glGetVertexAttribLdv() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribLdv)) {
    return GLEW_GET_FUN(__glewGetVertexAttribLdv);
}
// /usr/include/GL/glew.h:7895:9: warning: macro 'glVertexAttribL1d' contains a runtime value, translated to function
pub inline fn glVertexAttribL1d() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL1d)) {
    return GLEW_GET_FUN(__glewVertexAttribL1d);
}
// /usr/include/GL/glew.h:7896:9: warning: macro 'glVertexAttribL1dv' contains a runtime value, translated to function
pub inline fn glVertexAttribL1dv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL1dv)) {
    return GLEW_GET_FUN(__glewVertexAttribL1dv);
}
// /usr/include/GL/glew.h:7897:9: warning: macro 'glVertexAttribL2d' contains a runtime value, translated to function
pub inline fn glVertexAttribL2d() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL2d)) {
    return GLEW_GET_FUN(__glewVertexAttribL2d);
}
// /usr/include/GL/glew.h:7898:9: warning: macro 'glVertexAttribL2dv' contains a runtime value, translated to function
pub inline fn glVertexAttribL2dv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL2dv)) {
    return GLEW_GET_FUN(__glewVertexAttribL2dv);
}
// /usr/include/GL/glew.h:7899:9: warning: macro 'glVertexAttribL3d' contains a runtime value, translated to function
pub inline fn glVertexAttribL3d() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL3d)) {
    return GLEW_GET_FUN(__glewVertexAttribL3d);
}
// /usr/include/GL/glew.h:7900:9: warning: macro 'glVertexAttribL3dv' contains a runtime value, translated to function
pub inline fn glVertexAttribL3dv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL3dv)) {
    return GLEW_GET_FUN(__glewVertexAttribL3dv);
}
// /usr/include/GL/glew.h:7901:9: warning: macro 'glVertexAttribL4d' contains a runtime value, translated to function
pub inline fn glVertexAttribL4d() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL4d)) {
    return GLEW_GET_FUN(__glewVertexAttribL4d);
}
// /usr/include/GL/glew.h:7902:9: warning: macro 'glVertexAttribL4dv' contains a runtime value, translated to function
pub inline fn glVertexAttribL4dv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL4dv)) {
    return GLEW_GET_FUN(__glewVertexAttribL4dv);
}
// /usr/include/GL/glew.h:7903:9: warning: macro 'glVertexAttribLPointer' contains a runtime value, translated to function
pub inline fn glVertexAttribLPointer() @TypeOf(GLEW_GET_FUN(__glewVertexAttribLPointer)) {
    return GLEW_GET_FUN(__glewVertexAttribLPointer);
}
// /usr/include/GL/glew.h:7905:9: warning: macro 'GLEW_ARB_vertex_attrib_64bit' contains a runtime value, translated to function
pub inline fn GLEW_ARB_vertex_attrib_64bit() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_vertex_attrib_64bit)) {
    return GLEW_GET_VAR(__GLEW_ARB_vertex_attrib_64bit);
}
pub const GL_ARB_vertex_attrib_binding = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D4, .hex);
pub const GL_VERTEX_ATTRIB_RELATIVE_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D5, .hex);
pub const GL_VERTEX_BINDING_DIVISOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D6, .hex);
pub const GL_VERTEX_BINDING_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D7, .hex);
pub const GL_VERTEX_BINDING_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D8, .hex);
pub const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D9, .hex);
pub const GL_MAX_VERTEX_ATTRIB_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DA, .hex);
pub const GL_VERTEX_BINDING_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4F, .hex);
// /usr/include/GL/glew.h:7936:9: warning: macro 'glBindVertexBuffer' contains a runtime value, translated to function
pub inline fn glBindVertexBuffer() @TypeOf(GLEW_GET_FUN(__glewBindVertexBuffer)) {
    return GLEW_GET_FUN(__glewBindVertexBuffer);
}
// /usr/include/GL/glew.h:7937:9: warning: macro 'glVertexArrayBindVertexBufferEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayBindVertexBufferEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayBindVertexBufferEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayBindVertexBufferEXT);
}
// /usr/include/GL/glew.h:7938:9: warning: macro 'glVertexArrayVertexAttribBindingEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayVertexAttribBindingEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayVertexAttribBindingEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayVertexAttribBindingEXT);
}
// /usr/include/GL/glew.h:7939:9: warning: macro 'glVertexArrayVertexAttribFormatEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayVertexAttribFormatEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayVertexAttribFormatEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayVertexAttribFormatEXT);
}
// /usr/include/GL/glew.h:7940:9: warning: macro 'glVertexArrayVertexAttribIFormatEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayVertexAttribIFormatEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayVertexAttribIFormatEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayVertexAttribIFormatEXT);
}
// /usr/include/GL/glew.h:7941:9: warning: macro 'glVertexArrayVertexAttribLFormatEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayVertexAttribLFormatEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayVertexAttribLFormatEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayVertexAttribLFormatEXT);
}
// /usr/include/GL/glew.h:7942:9: warning: macro 'glVertexArrayVertexBindingDivisorEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayVertexBindingDivisorEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayVertexBindingDivisorEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayVertexBindingDivisorEXT);
}
// /usr/include/GL/glew.h:7943:9: warning: macro 'glVertexAttribBinding' contains a runtime value, translated to function
pub inline fn glVertexAttribBinding() @TypeOf(GLEW_GET_FUN(__glewVertexAttribBinding)) {
    return GLEW_GET_FUN(__glewVertexAttribBinding);
}
// /usr/include/GL/glew.h:7944:9: warning: macro 'glVertexAttribFormat' contains a runtime value, translated to function
pub inline fn glVertexAttribFormat() @TypeOf(GLEW_GET_FUN(__glewVertexAttribFormat)) {
    return GLEW_GET_FUN(__glewVertexAttribFormat);
}
// /usr/include/GL/glew.h:7945:9: warning: macro 'glVertexAttribIFormat' contains a runtime value, translated to function
pub inline fn glVertexAttribIFormat() @TypeOf(GLEW_GET_FUN(__glewVertexAttribIFormat)) {
    return GLEW_GET_FUN(__glewVertexAttribIFormat);
}
// /usr/include/GL/glew.h:7946:9: warning: macro 'glVertexAttribLFormat' contains a runtime value, translated to function
pub inline fn glVertexAttribLFormat() @TypeOf(GLEW_GET_FUN(__glewVertexAttribLFormat)) {
    return GLEW_GET_FUN(__glewVertexAttribLFormat);
}
// /usr/include/GL/glew.h:7947:9: warning: macro 'glVertexBindingDivisor' contains a runtime value, translated to function
pub inline fn glVertexBindingDivisor() @TypeOf(GLEW_GET_FUN(__glewVertexBindingDivisor)) {
    return GLEW_GET_FUN(__glewVertexBindingDivisor);
}
// /usr/include/GL/glew.h:7949:9: warning: macro 'GLEW_ARB_vertex_attrib_binding' contains a runtime value, translated to function
pub inline fn GLEW_ARB_vertex_attrib_binding() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_vertex_attrib_binding)) {
    return GLEW_GET_VAR(__GLEW_ARB_vertex_attrib_binding);
}
pub const GL_ARB_vertex_blend = @as(c_int, 1);
pub const GL_MODELVIEW0_ARB = @as(c_int, 0x1700);
pub const GL_MODELVIEW1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850A, .hex);
pub const GL_MAX_VERTEX_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A4, .hex);
pub const GL_ACTIVE_VERTEX_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A5, .hex);
pub const GL_WEIGHT_SUM_UNITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A6, .hex);
pub const GL_VERTEX_BLEND_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A7, .hex);
pub const GL_CURRENT_WEIGHT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A8, .hex);
pub const GL_WEIGHT_ARRAY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A9, .hex);
pub const GL_WEIGHT_ARRAY_STRIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AA, .hex);
pub const GL_WEIGHT_ARRAY_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AB, .hex);
pub const GL_WEIGHT_ARRAY_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AC, .hex);
pub const GL_WEIGHT_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AD, .hex);
pub const GL_MODELVIEW2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8722, .hex);
pub const GL_MODELVIEW3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8723, .hex);
pub const GL_MODELVIEW4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8724, .hex);
pub const GL_MODELVIEW5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8725, .hex);
pub const GL_MODELVIEW6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8726, .hex);
pub const GL_MODELVIEW7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8727, .hex);
pub const GL_MODELVIEW8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8728, .hex);
pub const GL_MODELVIEW9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8729, .hex);
pub const GL_MODELVIEW10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872A, .hex);
pub const GL_MODELVIEW11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872B, .hex);
pub const GL_MODELVIEW12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872C, .hex);
pub const GL_MODELVIEW13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872D, .hex);
pub const GL_MODELVIEW14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872E, .hex);
pub const GL_MODELVIEW15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872F, .hex);
pub const GL_MODELVIEW16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8730, .hex);
pub const GL_MODELVIEW17_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8731, .hex);
pub const GL_MODELVIEW18_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8732, .hex);
pub const GL_MODELVIEW19_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8733, .hex);
pub const GL_MODELVIEW20_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8734, .hex);
pub const GL_MODELVIEW21_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8735, .hex);
pub const GL_MODELVIEW22_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8736, .hex);
pub const GL_MODELVIEW23_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8737, .hex);
pub const GL_MODELVIEW24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8738, .hex);
pub const GL_MODELVIEW25_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8739, .hex);
pub const GL_MODELVIEW26_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873A, .hex);
pub const GL_MODELVIEW27_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873B, .hex);
pub const GL_MODELVIEW28_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873C, .hex);
pub const GL_MODELVIEW29_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873D, .hex);
pub const GL_MODELVIEW30_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873E, .hex);
pub const GL_MODELVIEW31_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873F, .hex);
// /usr/include/GL/glew.h:8012:9: warning: macro 'glVertexBlendARB' contains a runtime value, translated to function
pub inline fn glVertexBlendARB() @TypeOf(GLEW_GET_FUN(__glewVertexBlendARB)) {
    return GLEW_GET_FUN(__glewVertexBlendARB);
}
// /usr/include/GL/glew.h:8013:9: warning: macro 'glWeightPointerARB' contains a runtime value, translated to function
pub inline fn glWeightPointerARB() @TypeOf(GLEW_GET_FUN(__glewWeightPointerARB)) {
    return GLEW_GET_FUN(__glewWeightPointerARB);
}
// /usr/include/GL/glew.h:8014:9: warning: macro 'glWeightbvARB' contains a runtime value, translated to function
pub inline fn glWeightbvARB() @TypeOf(GLEW_GET_FUN(__glewWeightbvARB)) {
    return GLEW_GET_FUN(__glewWeightbvARB);
}
// /usr/include/GL/glew.h:8015:9: warning: macro 'glWeightdvARB' contains a runtime value, translated to function
pub inline fn glWeightdvARB() @TypeOf(GLEW_GET_FUN(__glewWeightdvARB)) {
    return GLEW_GET_FUN(__glewWeightdvARB);
}
// /usr/include/GL/glew.h:8016:9: warning: macro 'glWeightfvARB' contains a runtime value, translated to function
pub inline fn glWeightfvARB() @TypeOf(GLEW_GET_FUN(__glewWeightfvARB)) {
    return GLEW_GET_FUN(__glewWeightfvARB);
}
// /usr/include/GL/glew.h:8017:9: warning: macro 'glWeightivARB' contains a runtime value, translated to function
pub inline fn glWeightivARB() @TypeOf(GLEW_GET_FUN(__glewWeightivARB)) {
    return GLEW_GET_FUN(__glewWeightivARB);
}
// /usr/include/GL/glew.h:8018:9: warning: macro 'glWeightsvARB' contains a runtime value, translated to function
pub inline fn glWeightsvARB() @TypeOf(GLEW_GET_FUN(__glewWeightsvARB)) {
    return GLEW_GET_FUN(__glewWeightsvARB);
}
// /usr/include/GL/glew.h:8019:9: warning: macro 'glWeightubvARB' contains a runtime value, translated to function
pub inline fn glWeightubvARB() @TypeOf(GLEW_GET_FUN(__glewWeightubvARB)) {
    return GLEW_GET_FUN(__glewWeightubvARB);
}
// /usr/include/GL/glew.h:8020:9: warning: macro 'glWeightuivARB' contains a runtime value, translated to function
pub inline fn glWeightuivARB() @TypeOf(GLEW_GET_FUN(__glewWeightuivARB)) {
    return GLEW_GET_FUN(__glewWeightuivARB);
}
// /usr/include/GL/glew.h:8021:9: warning: macro 'glWeightusvARB' contains a runtime value, translated to function
pub inline fn glWeightusvARB() @TypeOf(GLEW_GET_FUN(__glewWeightusvARB)) {
    return GLEW_GET_FUN(__glewWeightusvARB);
}
// /usr/include/GL/glew.h:8023:9: warning: macro 'GLEW_ARB_vertex_blend' contains a runtime value, translated to function
pub inline fn GLEW_ARB_vertex_blend() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_vertex_blend)) {
    return GLEW_GET_VAR(__GLEW_ARB_vertex_blend);
}
pub const GL_ARB_vertex_buffer_object = @as(c_int, 1);
pub const GL_BUFFER_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hex);
pub const GL_BUFFER_USAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hex);
pub const GL_ARRAY_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8892, .hex);
pub const GL_ELEMENT_ARRAY_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8893, .hex);
pub const GL_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8894, .hex);
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8895, .hex);
pub const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8896, .hex);
pub const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8897, .hex);
pub const GL_COLOR_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8898, .hex);
pub const GL_INDEX_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8899, .hex);
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889A, .hex);
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889B, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889C, .hex);
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889D, .hex);
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889E, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889F, .hex);
pub const GL_READ_ONLY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B8, .hex);
pub const GL_WRITE_ONLY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hex);
pub const GL_READ_WRITE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BA, .hex);
pub const GL_BUFFER_ACCESS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hex);
pub const GL_BUFFER_MAPPED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hex);
pub const GL_BUFFER_MAP_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hex);
pub const GL_STREAM_DRAW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E0, .hex);
pub const GL_STREAM_READ_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E1, .hex);
pub const GL_STREAM_COPY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E2, .hex);
pub const GL_STATIC_DRAW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E4, .hex);
pub const GL_STATIC_READ_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E5, .hex);
pub const GL_STATIC_COPY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E6, .hex);
pub const GL_DYNAMIC_DRAW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E8, .hex);
pub const GL_DYNAMIC_READ_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E9, .hex);
pub const GL_DYNAMIC_COPY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EA, .hex);
// /usr/include/GL/glew.h:8079:9: warning: macro 'glBindBufferARB' contains a runtime value, translated to function
pub inline fn glBindBufferARB() @TypeOf(GLEW_GET_FUN(__glewBindBufferARB)) {
    return GLEW_GET_FUN(__glewBindBufferARB);
}
// /usr/include/GL/glew.h:8080:9: warning: macro 'glBufferDataARB' contains a runtime value, translated to function
pub inline fn glBufferDataARB() @TypeOf(GLEW_GET_FUN(__glewBufferDataARB)) {
    return GLEW_GET_FUN(__glewBufferDataARB);
}
// /usr/include/GL/glew.h:8081:9: warning: macro 'glBufferSubDataARB' contains a runtime value, translated to function
pub inline fn glBufferSubDataARB() @TypeOf(GLEW_GET_FUN(__glewBufferSubDataARB)) {
    return GLEW_GET_FUN(__glewBufferSubDataARB);
}
// /usr/include/GL/glew.h:8082:9: warning: macro 'glDeleteBuffersARB' contains a runtime value, translated to function
pub inline fn glDeleteBuffersARB() @TypeOf(GLEW_GET_FUN(__glewDeleteBuffersARB)) {
    return GLEW_GET_FUN(__glewDeleteBuffersARB);
}
// /usr/include/GL/glew.h:8083:9: warning: macro 'glGenBuffersARB' contains a runtime value, translated to function
pub inline fn glGenBuffersARB() @TypeOf(GLEW_GET_FUN(__glewGenBuffersARB)) {
    return GLEW_GET_FUN(__glewGenBuffersARB);
}
// /usr/include/GL/glew.h:8084:9: warning: macro 'glGetBufferParameterivARB' contains a runtime value, translated to function
pub inline fn glGetBufferParameterivARB() @TypeOf(GLEW_GET_FUN(__glewGetBufferParameterivARB)) {
    return GLEW_GET_FUN(__glewGetBufferParameterivARB);
}
// /usr/include/GL/glew.h:8085:9: warning: macro 'glGetBufferPointervARB' contains a runtime value, translated to function
pub inline fn glGetBufferPointervARB() @TypeOf(GLEW_GET_FUN(__glewGetBufferPointervARB)) {
    return GLEW_GET_FUN(__glewGetBufferPointervARB);
}
// /usr/include/GL/glew.h:8086:9: warning: macro 'glGetBufferSubDataARB' contains a runtime value, translated to function
pub inline fn glGetBufferSubDataARB() @TypeOf(GLEW_GET_FUN(__glewGetBufferSubDataARB)) {
    return GLEW_GET_FUN(__glewGetBufferSubDataARB);
}
// /usr/include/GL/glew.h:8087:9: warning: macro 'glIsBufferARB' contains a runtime value, translated to function
pub inline fn glIsBufferARB() @TypeOf(GLEW_GET_FUN(__glewIsBufferARB)) {
    return GLEW_GET_FUN(__glewIsBufferARB);
}
// /usr/include/GL/glew.h:8088:9: warning: macro 'glMapBufferARB' contains a runtime value, translated to function
pub inline fn glMapBufferARB() @TypeOf(GLEW_GET_FUN(__glewMapBufferARB)) {
    return GLEW_GET_FUN(__glewMapBufferARB);
}
// /usr/include/GL/glew.h:8089:9: warning: macro 'glUnmapBufferARB' contains a runtime value, translated to function
pub inline fn glUnmapBufferARB() @TypeOf(GLEW_GET_FUN(__glewUnmapBufferARB)) {
    return GLEW_GET_FUN(__glewUnmapBufferARB);
}
// /usr/include/GL/glew.h:8091:9: warning: macro 'GLEW_ARB_vertex_buffer_object' contains a runtime value, translated to function
pub inline fn GLEW_ARB_vertex_buffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_vertex_buffer_object)) {
    return GLEW_GET_VAR(__GLEW_ARB_vertex_buffer_object);
}
pub const GL_ARB_vertex_program = @as(c_int, 1);
pub const GL_COLOR_SUM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hex);
pub const GL_VERTEX_PROGRAM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8620, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8622, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hex);
pub const GL_CURRENT_VERTEX_ATTRIB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hex);
pub const GL_PROGRAM_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8627, .hex);
pub const GL_PROGRAM_STRING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8628, .hex);
pub const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862E, .hex);
pub const GL_MAX_PROGRAM_MATRICES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862F, .hex);
pub const GL_CURRENT_MATRIX_STACK_DEPTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8640, .hex);
pub const GL_CURRENT_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8641, .hex);
pub const GL_VERTEX_PROGRAM_POINT_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hex);
pub const GL_VERTEX_PROGRAM_TWO_SIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hex);
pub const GL_PROGRAM_ERROR_POSITION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864B, .hex);
pub const GL_PROGRAM_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8677, .hex);
pub const GL_MAX_VERTEX_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8869, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886A, .hex);
pub const GL_PROGRAM_ERROR_STRING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8874, .hex);
pub const GL_PROGRAM_FORMAT_ASCII_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8875, .hex);
pub const GL_PROGRAM_FORMAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8876, .hex);
pub const GL_PROGRAM_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A0, .hex);
pub const GL_MAX_PROGRAM_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A1, .hex);
pub const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A2, .hex);
pub const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A3, .hex);
pub const GL_PROGRAM_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A4, .hex);
pub const GL_MAX_PROGRAM_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A5, .hex);
pub const GL_PROGRAM_NATIVE_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A6, .hex);
pub const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A7, .hex);
pub const GL_PROGRAM_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A8, .hex);
pub const GL_MAX_PROGRAM_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A9, .hex);
pub const GL_PROGRAM_NATIVE_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AA, .hex);
pub const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AB, .hex);
pub const GL_PROGRAM_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AC, .hex);
pub const GL_MAX_PROGRAM_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AD, .hex);
pub const GL_PROGRAM_NATIVE_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AE, .hex);
pub const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AF, .hex);
pub const GL_PROGRAM_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B0, .hex);
pub const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B1, .hex);
pub const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B2, .hex);
pub const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B3, .hex);
pub const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B4, .hex);
pub const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B5, .hex);
pub const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B6, .hex);
pub const GL_TRANSPOSE_CURRENT_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B7, .hex);
pub const GL_MATRIX0_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C0, .hex);
pub const GL_MATRIX1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C1, .hex);
pub const GL_MATRIX2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C2, .hex);
pub const GL_MATRIX3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C3, .hex);
pub const GL_MATRIX4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C4, .hex);
pub const GL_MATRIX5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C5, .hex);
pub const GL_MATRIX6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C6, .hex);
pub const GL_MATRIX7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C7, .hex);
pub const GL_MATRIX8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C8, .hex);
pub const GL_MATRIX9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C9, .hex);
pub const GL_MATRIX10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CA, .hex);
pub const GL_MATRIX11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CB, .hex);
pub const GL_MATRIX12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CC, .hex);
pub const GL_MATRIX13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CD, .hex);
pub const GL_MATRIX14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CE, .hex);
pub const GL_MATRIX15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CF, .hex);
pub const GL_MATRIX16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D0, .hex);
pub const GL_MATRIX17_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D1, .hex);
pub const GL_MATRIX18_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D2, .hex);
pub const GL_MATRIX19_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D3, .hex);
pub const GL_MATRIX20_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D4, .hex);
pub const GL_MATRIX21_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D5, .hex);
pub const GL_MATRIX22_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D6, .hex);
pub const GL_MATRIX23_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D7, .hex);
pub const GL_MATRIX24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D8, .hex);
pub const GL_MATRIX25_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D9, .hex);
pub const GL_MATRIX26_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DA, .hex);
pub const GL_MATRIX27_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DB, .hex);
pub const GL_MATRIX28_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DC, .hex);
pub const GL_MATRIX29_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DD, .hex);
pub const GL_MATRIX30_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DE, .hex);
pub const GL_MATRIX31_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DF, .hex);
// /usr/include/GL/glew.h:8243:9: warning: macro 'glBindProgramARB' contains a runtime value, translated to function
pub inline fn glBindProgramARB() @TypeOf(GLEW_GET_FUN(__glewBindProgramARB)) {
    return GLEW_GET_FUN(__glewBindProgramARB);
}
// /usr/include/GL/glew.h:8244:9: warning: macro 'glDeleteProgramsARB' contains a runtime value, translated to function
pub inline fn glDeleteProgramsARB() @TypeOf(GLEW_GET_FUN(__glewDeleteProgramsARB)) {
    return GLEW_GET_FUN(__glewDeleteProgramsARB);
}
// /usr/include/GL/glew.h:8245:9: warning: macro 'glDisableVertexAttribArrayARB' contains a runtime value, translated to function
pub inline fn glDisableVertexAttribArrayARB() @TypeOf(GLEW_GET_FUN(__glewDisableVertexAttribArrayARB)) {
    return GLEW_GET_FUN(__glewDisableVertexAttribArrayARB);
}
// /usr/include/GL/glew.h:8246:9: warning: macro 'glEnableVertexAttribArrayARB' contains a runtime value, translated to function
pub inline fn glEnableVertexAttribArrayARB() @TypeOf(GLEW_GET_FUN(__glewEnableVertexAttribArrayARB)) {
    return GLEW_GET_FUN(__glewEnableVertexAttribArrayARB);
}
// /usr/include/GL/glew.h:8247:9: warning: macro 'glGenProgramsARB' contains a runtime value, translated to function
pub inline fn glGenProgramsARB() @TypeOf(GLEW_GET_FUN(__glewGenProgramsARB)) {
    return GLEW_GET_FUN(__glewGenProgramsARB);
}
// /usr/include/GL/glew.h:8248:9: warning: macro 'glGetProgramEnvParameterdvARB' contains a runtime value, translated to function
pub inline fn glGetProgramEnvParameterdvARB() @TypeOf(GLEW_GET_FUN(__glewGetProgramEnvParameterdvARB)) {
    return GLEW_GET_FUN(__glewGetProgramEnvParameterdvARB);
}
// /usr/include/GL/glew.h:8249:9: warning: macro 'glGetProgramEnvParameterfvARB' contains a runtime value, translated to function
pub inline fn glGetProgramEnvParameterfvARB() @TypeOf(GLEW_GET_FUN(__glewGetProgramEnvParameterfvARB)) {
    return GLEW_GET_FUN(__glewGetProgramEnvParameterfvARB);
}
// /usr/include/GL/glew.h:8250:9: warning: macro 'glGetProgramLocalParameterdvARB' contains a runtime value, translated to function
pub inline fn glGetProgramLocalParameterdvARB() @TypeOf(GLEW_GET_FUN(__glewGetProgramLocalParameterdvARB)) {
    return GLEW_GET_FUN(__glewGetProgramLocalParameterdvARB);
}
// /usr/include/GL/glew.h:8251:9: warning: macro 'glGetProgramLocalParameterfvARB' contains a runtime value, translated to function
pub inline fn glGetProgramLocalParameterfvARB() @TypeOf(GLEW_GET_FUN(__glewGetProgramLocalParameterfvARB)) {
    return GLEW_GET_FUN(__glewGetProgramLocalParameterfvARB);
}
// /usr/include/GL/glew.h:8252:9: warning: macro 'glGetProgramStringARB' contains a runtime value, translated to function
pub inline fn glGetProgramStringARB() @TypeOf(GLEW_GET_FUN(__glewGetProgramStringARB)) {
    return GLEW_GET_FUN(__glewGetProgramStringARB);
}
// /usr/include/GL/glew.h:8253:9: warning: macro 'glGetProgramivARB' contains a runtime value, translated to function
pub inline fn glGetProgramivARB() @TypeOf(GLEW_GET_FUN(__glewGetProgramivARB)) {
    return GLEW_GET_FUN(__glewGetProgramivARB);
}
// /usr/include/GL/glew.h:8254:9: warning: macro 'glGetVertexAttribPointervARB' contains a runtime value, translated to function
pub inline fn glGetVertexAttribPointervARB() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribPointervARB)) {
    return GLEW_GET_FUN(__glewGetVertexAttribPointervARB);
}
// /usr/include/GL/glew.h:8255:9: warning: macro 'glGetVertexAttribdvARB' contains a runtime value, translated to function
pub inline fn glGetVertexAttribdvARB() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribdvARB)) {
    return GLEW_GET_FUN(__glewGetVertexAttribdvARB);
}
// /usr/include/GL/glew.h:8256:9: warning: macro 'glGetVertexAttribfvARB' contains a runtime value, translated to function
pub inline fn glGetVertexAttribfvARB() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribfvARB)) {
    return GLEW_GET_FUN(__glewGetVertexAttribfvARB);
}
// /usr/include/GL/glew.h:8257:9: warning: macro 'glGetVertexAttribivARB' contains a runtime value, translated to function
pub inline fn glGetVertexAttribivARB() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribivARB)) {
    return GLEW_GET_FUN(__glewGetVertexAttribivARB);
}
// /usr/include/GL/glew.h:8258:9: warning: macro 'glIsProgramARB' contains a runtime value, translated to function
pub inline fn glIsProgramARB() @TypeOf(GLEW_GET_FUN(__glewIsProgramARB)) {
    return GLEW_GET_FUN(__glewIsProgramARB);
}
// /usr/include/GL/glew.h:8259:9: warning: macro 'glProgramEnvParameter4dARB' contains a runtime value, translated to function
pub inline fn glProgramEnvParameter4dARB() @TypeOf(GLEW_GET_FUN(__glewProgramEnvParameter4dARB)) {
    return GLEW_GET_FUN(__glewProgramEnvParameter4dARB);
}
// /usr/include/GL/glew.h:8260:9: warning: macro 'glProgramEnvParameter4dvARB' contains a runtime value, translated to function
pub inline fn glProgramEnvParameter4dvARB() @TypeOf(GLEW_GET_FUN(__glewProgramEnvParameter4dvARB)) {
    return GLEW_GET_FUN(__glewProgramEnvParameter4dvARB);
}
// /usr/include/GL/glew.h:8261:9: warning: macro 'glProgramEnvParameter4fARB' contains a runtime value, translated to function
pub inline fn glProgramEnvParameter4fARB() @TypeOf(GLEW_GET_FUN(__glewProgramEnvParameter4fARB)) {
    return GLEW_GET_FUN(__glewProgramEnvParameter4fARB);
}
// /usr/include/GL/glew.h:8262:9: warning: macro 'glProgramEnvParameter4fvARB' contains a runtime value, translated to function
pub inline fn glProgramEnvParameter4fvARB() @TypeOf(GLEW_GET_FUN(__glewProgramEnvParameter4fvARB)) {
    return GLEW_GET_FUN(__glewProgramEnvParameter4fvARB);
}
// /usr/include/GL/glew.h:8263:9: warning: macro 'glProgramLocalParameter4dARB' contains a runtime value, translated to function
pub inline fn glProgramLocalParameter4dARB() @TypeOf(GLEW_GET_FUN(__glewProgramLocalParameter4dARB)) {
    return GLEW_GET_FUN(__glewProgramLocalParameter4dARB);
}
// /usr/include/GL/glew.h:8264:9: warning: macro 'glProgramLocalParameter4dvARB' contains a runtime value, translated to function
pub inline fn glProgramLocalParameter4dvARB() @TypeOf(GLEW_GET_FUN(__glewProgramLocalParameter4dvARB)) {
    return GLEW_GET_FUN(__glewProgramLocalParameter4dvARB);
}
// /usr/include/GL/glew.h:8265:9: warning: macro 'glProgramLocalParameter4fARB' contains a runtime value, translated to function
pub inline fn glProgramLocalParameter4fARB() @TypeOf(GLEW_GET_FUN(__glewProgramLocalParameter4fARB)) {
    return GLEW_GET_FUN(__glewProgramLocalParameter4fARB);
}
// /usr/include/GL/glew.h:8266:9: warning: macro 'glProgramLocalParameter4fvARB' contains a runtime value, translated to function
pub inline fn glProgramLocalParameter4fvARB() @TypeOf(GLEW_GET_FUN(__glewProgramLocalParameter4fvARB)) {
    return GLEW_GET_FUN(__glewProgramLocalParameter4fvARB);
}
// /usr/include/GL/glew.h:8267:9: warning: macro 'glProgramStringARB' contains a runtime value, translated to function
pub inline fn glProgramStringARB() @TypeOf(GLEW_GET_FUN(__glewProgramStringARB)) {
    return GLEW_GET_FUN(__glewProgramStringARB);
}
// /usr/include/GL/glew.h:8268:9: warning: macro 'glVertexAttrib1dARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib1dARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1dARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib1dARB);
}
// /usr/include/GL/glew.h:8269:9: warning: macro 'glVertexAttrib1dvARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib1dvARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1dvARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib1dvARB);
}
// /usr/include/GL/glew.h:8270:9: warning: macro 'glVertexAttrib1fARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib1fARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1fARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib1fARB);
}
// /usr/include/GL/glew.h:8271:9: warning: macro 'glVertexAttrib1fvARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib1fvARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1fvARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib1fvARB);
}
// /usr/include/GL/glew.h:8272:9: warning: macro 'glVertexAttrib1sARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib1sARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1sARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib1sARB);
}
// /usr/include/GL/glew.h:8273:9: warning: macro 'glVertexAttrib1svARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib1svARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1svARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib1svARB);
}
// /usr/include/GL/glew.h:8274:9: warning: macro 'glVertexAttrib2dARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib2dARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2dARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib2dARB);
}
// /usr/include/GL/glew.h:8275:9: warning: macro 'glVertexAttrib2dvARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib2dvARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2dvARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib2dvARB);
}
// /usr/include/GL/glew.h:8276:9: warning: macro 'glVertexAttrib2fARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib2fARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2fARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib2fARB);
}
// /usr/include/GL/glew.h:8277:9: warning: macro 'glVertexAttrib2fvARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib2fvARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2fvARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib2fvARB);
}
// /usr/include/GL/glew.h:8278:9: warning: macro 'glVertexAttrib2sARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib2sARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2sARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib2sARB);
}
// /usr/include/GL/glew.h:8279:9: warning: macro 'glVertexAttrib2svARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib2svARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2svARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib2svARB);
}
// /usr/include/GL/glew.h:8280:9: warning: macro 'glVertexAttrib3dARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib3dARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3dARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib3dARB);
}
// /usr/include/GL/glew.h:8281:9: warning: macro 'glVertexAttrib3dvARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib3dvARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3dvARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib3dvARB);
}
// /usr/include/GL/glew.h:8282:9: warning: macro 'glVertexAttrib3fARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib3fARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3fARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib3fARB);
}
// /usr/include/GL/glew.h:8283:9: warning: macro 'glVertexAttrib3fvARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib3fvARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3fvARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib3fvARB);
}
// /usr/include/GL/glew.h:8284:9: warning: macro 'glVertexAttrib3sARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib3sARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3sARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib3sARB);
}
// /usr/include/GL/glew.h:8285:9: warning: macro 'glVertexAttrib3svARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib3svARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3svARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib3svARB);
}
// /usr/include/GL/glew.h:8286:9: warning: macro 'glVertexAttrib4NbvARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4NbvARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4NbvARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4NbvARB);
}
// /usr/include/GL/glew.h:8287:9: warning: macro 'glVertexAttrib4NivARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4NivARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4NivARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4NivARB);
}
// /usr/include/GL/glew.h:8288:9: warning: macro 'glVertexAttrib4NsvARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4NsvARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4NsvARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4NsvARB);
}
// /usr/include/GL/glew.h:8289:9: warning: macro 'glVertexAttrib4NubARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4NubARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4NubARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4NubARB);
}
// /usr/include/GL/glew.h:8290:9: warning: macro 'glVertexAttrib4NubvARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4NubvARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4NubvARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4NubvARB);
}
// /usr/include/GL/glew.h:8291:9: warning: macro 'glVertexAttrib4NuivARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4NuivARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4NuivARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4NuivARB);
}
// /usr/include/GL/glew.h:8292:9: warning: macro 'glVertexAttrib4NusvARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4NusvARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4NusvARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4NusvARB);
}
// /usr/include/GL/glew.h:8293:9: warning: macro 'glVertexAttrib4bvARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4bvARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4bvARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4bvARB);
}
// /usr/include/GL/glew.h:8294:9: warning: macro 'glVertexAttrib4dARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4dARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4dARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4dARB);
}
// /usr/include/GL/glew.h:8295:9: warning: macro 'glVertexAttrib4dvARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4dvARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4dvARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4dvARB);
}
// /usr/include/GL/glew.h:8296:9: warning: macro 'glVertexAttrib4fARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4fARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4fARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4fARB);
}
// /usr/include/GL/glew.h:8297:9: warning: macro 'glVertexAttrib4fvARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4fvARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4fvARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4fvARB);
}
// /usr/include/GL/glew.h:8298:9: warning: macro 'glVertexAttrib4ivARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4ivARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4ivARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4ivARB);
}
// /usr/include/GL/glew.h:8299:9: warning: macro 'glVertexAttrib4sARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4sARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4sARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4sARB);
}
// /usr/include/GL/glew.h:8300:9: warning: macro 'glVertexAttrib4svARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4svARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4svARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4svARB);
}
// /usr/include/GL/glew.h:8301:9: warning: macro 'glVertexAttrib4ubvARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4ubvARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4ubvARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4ubvARB);
}
// /usr/include/GL/glew.h:8302:9: warning: macro 'glVertexAttrib4uivARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4uivARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4uivARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4uivARB);
}
// /usr/include/GL/glew.h:8303:9: warning: macro 'glVertexAttrib4usvARB' contains a runtime value, translated to function
pub inline fn glVertexAttrib4usvARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4usvARB)) {
    return GLEW_GET_FUN(__glewVertexAttrib4usvARB);
}
// /usr/include/GL/glew.h:8304:9: warning: macro 'glVertexAttribPointerARB' contains a runtime value, translated to function
pub inline fn glVertexAttribPointerARB() @TypeOf(GLEW_GET_FUN(__glewVertexAttribPointerARB)) {
    return GLEW_GET_FUN(__glewVertexAttribPointerARB);
}
// /usr/include/GL/glew.h:8306:9: warning: macro 'GLEW_ARB_vertex_program' contains a runtime value, translated to function
pub inline fn GLEW_ARB_vertex_program() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_vertex_program)) {
    return GLEW_GET_VAR(__GLEW_ARB_vertex_program);
}
pub const GL_ARB_vertex_shader = @as(c_int, 1);
pub const GL_VERTEX_SHADER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B31, .hex);
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4A, .hex);
pub const GL_MAX_VARYING_FLOATS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hex);
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4C, .hex);
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4D, .hex);
pub const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B89, .hex);
pub const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8A, .hex);
// /usr/include/GL/glew.h:8327:9: warning: macro 'glBindAttribLocationARB' contains a runtime value, translated to function
pub inline fn glBindAttribLocationARB() @TypeOf(GLEW_GET_FUN(__glewBindAttribLocationARB)) {
    return GLEW_GET_FUN(__glewBindAttribLocationARB);
}
// /usr/include/GL/glew.h:8328:9: warning: macro 'glGetActiveAttribARB' contains a runtime value, translated to function
pub inline fn glGetActiveAttribARB() @TypeOf(GLEW_GET_FUN(__glewGetActiveAttribARB)) {
    return GLEW_GET_FUN(__glewGetActiveAttribARB);
}
// /usr/include/GL/glew.h:8329:9: warning: macro 'glGetAttribLocationARB' contains a runtime value, translated to function
pub inline fn glGetAttribLocationARB() @TypeOf(GLEW_GET_FUN(__glewGetAttribLocationARB)) {
    return GLEW_GET_FUN(__glewGetAttribLocationARB);
}
// /usr/include/GL/glew.h:8331:9: warning: macro 'GLEW_ARB_vertex_shader' contains a runtime value, translated to function
pub inline fn GLEW_ARB_vertex_shader() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_vertex_shader)) {
    return GLEW_GET_VAR(__GLEW_ARB_vertex_shader);
}
pub const GL_ARB_vertex_type_10f_11f_11f_rev = @as(c_int, 1);
// /usr/include/GL/glew.h:8342:9: warning: macro 'GLEW_ARB_vertex_type_10f_11f_11f_rev' contains a runtime value, translated to function
pub inline fn GLEW_ARB_vertex_type_10f_11f_11f_rev() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_vertex_type_10f_11f_11f_rev)) {
    return GLEW_GET_VAR(__GLEW_ARB_vertex_type_10f_11f_11f_rev);
}
pub const GL_ARB_vertex_type_2_10_10_10_rev = @as(c_int, 1);
pub const GL_UNSIGNED_INT_2_10_10_10_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8368, .hex);
pub const GL_INT_2_10_10_10_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9F, .hex);
// /usr/include/GL/glew.h:8393:9: warning: macro 'glColorP3ui' contains a runtime value, translated to function
pub inline fn glColorP3ui() @TypeOf(GLEW_GET_FUN(__glewColorP3ui)) {
    return GLEW_GET_FUN(__glewColorP3ui);
}
// /usr/include/GL/glew.h:8394:9: warning: macro 'glColorP3uiv' contains a runtime value, translated to function
pub inline fn glColorP3uiv() @TypeOf(GLEW_GET_FUN(__glewColorP3uiv)) {
    return GLEW_GET_FUN(__glewColorP3uiv);
}
// /usr/include/GL/glew.h:8395:9: warning: macro 'glColorP4ui' contains a runtime value, translated to function
pub inline fn glColorP4ui() @TypeOf(GLEW_GET_FUN(__glewColorP4ui)) {
    return GLEW_GET_FUN(__glewColorP4ui);
}
// /usr/include/GL/glew.h:8396:9: warning: macro 'glColorP4uiv' contains a runtime value, translated to function
pub inline fn glColorP4uiv() @TypeOf(GLEW_GET_FUN(__glewColorP4uiv)) {
    return GLEW_GET_FUN(__glewColorP4uiv);
}
// /usr/include/GL/glew.h:8397:9: warning: macro 'glMultiTexCoordP1ui' contains a runtime value, translated to function
pub inline fn glMultiTexCoordP1ui() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoordP1ui)) {
    return GLEW_GET_FUN(__glewMultiTexCoordP1ui);
}
// /usr/include/GL/glew.h:8398:9: warning: macro 'glMultiTexCoordP1uiv' contains a runtime value, translated to function
pub inline fn glMultiTexCoordP1uiv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoordP1uiv)) {
    return GLEW_GET_FUN(__glewMultiTexCoordP1uiv);
}
// /usr/include/GL/glew.h:8399:9: warning: macro 'glMultiTexCoordP2ui' contains a runtime value, translated to function
pub inline fn glMultiTexCoordP2ui() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoordP2ui)) {
    return GLEW_GET_FUN(__glewMultiTexCoordP2ui);
}
// /usr/include/GL/glew.h:8400:9: warning: macro 'glMultiTexCoordP2uiv' contains a runtime value, translated to function
pub inline fn glMultiTexCoordP2uiv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoordP2uiv)) {
    return GLEW_GET_FUN(__glewMultiTexCoordP2uiv);
}
// /usr/include/GL/glew.h:8401:9: warning: macro 'glMultiTexCoordP3ui' contains a runtime value, translated to function
pub inline fn glMultiTexCoordP3ui() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoordP3ui)) {
    return GLEW_GET_FUN(__glewMultiTexCoordP3ui);
}
// /usr/include/GL/glew.h:8402:9: warning: macro 'glMultiTexCoordP3uiv' contains a runtime value, translated to function
pub inline fn glMultiTexCoordP3uiv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoordP3uiv)) {
    return GLEW_GET_FUN(__glewMultiTexCoordP3uiv);
}
// /usr/include/GL/glew.h:8403:9: warning: macro 'glMultiTexCoordP4ui' contains a runtime value, translated to function
pub inline fn glMultiTexCoordP4ui() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoordP4ui)) {
    return GLEW_GET_FUN(__glewMultiTexCoordP4ui);
}
// /usr/include/GL/glew.h:8404:9: warning: macro 'glMultiTexCoordP4uiv' contains a runtime value, translated to function
pub inline fn glMultiTexCoordP4uiv() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoordP4uiv)) {
    return GLEW_GET_FUN(__glewMultiTexCoordP4uiv);
}
// /usr/include/GL/glew.h:8405:9: warning: macro 'glNormalP3ui' contains a runtime value, translated to function
pub inline fn glNormalP3ui() @TypeOf(GLEW_GET_FUN(__glewNormalP3ui)) {
    return GLEW_GET_FUN(__glewNormalP3ui);
}
// /usr/include/GL/glew.h:8406:9: warning: macro 'glNormalP3uiv' contains a runtime value, translated to function
pub inline fn glNormalP3uiv() @TypeOf(GLEW_GET_FUN(__glewNormalP3uiv)) {
    return GLEW_GET_FUN(__glewNormalP3uiv);
}
// /usr/include/GL/glew.h:8407:9: warning: macro 'glSecondaryColorP3ui' contains a runtime value, translated to function
pub inline fn glSecondaryColorP3ui() @TypeOf(GLEW_GET_FUN(__glewSecondaryColorP3ui)) {
    return GLEW_GET_FUN(__glewSecondaryColorP3ui);
}
// /usr/include/GL/glew.h:8408:9: warning: macro 'glSecondaryColorP3uiv' contains a runtime value, translated to function
pub inline fn glSecondaryColorP3uiv() @TypeOf(GLEW_GET_FUN(__glewSecondaryColorP3uiv)) {
    return GLEW_GET_FUN(__glewSecondaryColorP3uiv);
}
// /usr/include/GL/glew.h:8409:9: warning: macro 'glTexCoordP1ui' contains a runtime value, translated to function
pub inline fn glTexCoordP1ui() @TypeOf(GLEW_GET_FUN(__glewTexCoordP1ui)) {
    return GLEW_GET_FUN(__glewTexCoordP1ui);
}
// /usr/include/GL/glew.h:8410:9: warning: macro 'glTexCoordP1uiv' contains a runtime value, translated to function
pub inline fn glTexCoordP1uiv() @TypeOf(GLEW_GET_FUN(__glewTexCoordP1uiv)) {
    return GLEW_GET_FUN(__glewTexCoordP1uiv);
}
// /usr/include/GL/glew.h:8411:9: warning: macro 'glTexCoordP2ui' contains a runtime value, translated to function
pub inline fn glTexCoordP2ui() @TypeOf(GLEW_GET_FUN(__glewTexCoordP2ui)) {
    return GLEW_GET_FUN(__glewTexCoordP2ui);
}
// /usr/include/GL/glew.h:8412:9: warning: macro 'glTexCoordP2uiv' contains a runtime value, translated to function
pub inline fn glTexCoordP2uiv() @TypeOf(GLEW_GET_FUN(__glewTexCoordP2uiv)) {
    return GLEW_GET_FUN(__glewTexCoordP2uiv);
}
// /usr/include/GL/glew.h:8413:9: warning: macro 'glTexCoordP3ui' contains a runtime value, translated to function
pub inline fn glTexCoordP3ui() @TypeOf(GLEW_GET_FUN(__glewTexCoordP3ui)) {
    return GLEW_GET_FUN(__glewTexCoordP3ui);
}
// /usr/include/GL/glew.h:8414:9: warning: macro 'glTexCoordP3uiv' contains a runtime value, translated to function
pub inline fn glTexCoordP3uiv() @TypeOf(GLEW_GET_FUN(__glewTexCoordP3uiv)) {
    return GLEW_GET_FUN(__glewTexCoordP3uiv);
}
// /usr/include/GL/glew.h:8415:9: warning: macro 'glTexCoordP4ui' contains a runtime value, translated to function
pub inline fn glTexCoordP4ui() @TypeOf(GLEW_GET_FUN(__glewTexCoordP4ui)) {
    return GLEW_GET_FUN(__glewTexCoordP4ui);
}
// /usr/include/GL/glew.h:8416:9: warning: macro 'glTexCoordP4uiv' contains a runtime value, translated to function
pub inline fn glTexCoordP4uiv() @TypeOf(GLEW_GET_FUN(__glewTexCoordP4uiv)) {
    return GLEW_GET_FUN(__glewTexCoordP4uiv);
}
// /usr/include/GL/glew.h:8417:9: warning: macro 'glVertexAttribP1ui' contains a runtime value, translated to function
pub inline fn glVertexAttribP1ui() @TypeOf(GLEW_GET_FUN(__glewVertexAttribP1ui)) {
    return GLEW_GET_FUN(__glewVertexAttribP1ui);
}
// /usr/include/GL/glew.h:8418:9: warning: macro 'glVertexAttribP1uiv' contains a runtime value, translated to function
pub inline fn glVertexAttribP1uiv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribP1uiv)) {
    return GLEW_GET_FUN(__glewVertexAttribP1uiv);
}
// /usr/include/GL/glew.h:8419:9: warning: macro 'glVertexAttribP2ui' contains a runtime value, translated to function
pub inline fn glVertexAttribP2ui() @TypeOf(GLEW_GET_FUN(__glewVertexAttribP2ui)) {
    return GLEW_GET_FUN(__glewVertexAttribP2ui);
}
// /usr/include/GL/glew.h:8420:9: warning: macro 'glVertexAttribP2uiv' contains a runtime value, translated to function
pub inline fn glVertexAttribP2uiv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribP2uiv)) {
    return GLEW_GET_FUN(__glewVertexAttribP2uiv);
}
// /usr/include/GL/glew.h:8421:9: warning: macro 'glVertexAttribP3ui' contains a runtime value, translated to function
pub inline fn glVertexAttribP3ui() @TypeOf(GLEW_GET_FUN(__glewVertexAttribP3ui)) {
    return GLEW_GET_FUN(__glewVertexAttribP3ui);
}
// /usr/include/GL/glew.h:8422:9: warning: macro 'glVertexAttribP3uiv' contains a runtime value, translated to function
pub inline fn glVertexAttribP3uiv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribP3uiv)) {
    return GLEW_GET_FUN(__glewVertexAttribP3uiv);
}
// /usr/include/GL/glew.h:8423:9: warning: macro 'glVertexAttribP4ui' contains a runtime value, translated to function
pub inline fn glVertexAttribP4ui() @TypeOf(GLEW_GET_FUN(__glewVertexAttribP4ui)) {
    return GLEW_GET_FUN(__glewVertexAttribP4ui);
}
// /usr/include/GL/glew.h:8424:9: warning: macro 'glVertexAttribP4uiv' contains a runtime value, translated to function
pub inline fn glVertexAttribP4uiv() @TypeOf(GLEW_GET_FUN(__glewVertexAttribP4uiv)) {
    return GLEW_GET_FUN(__glewVertexAttribP4uiv);
}
// /usr/include/GL/glew.h:8425:9: warning: macro 'glVertexP2ui' contains a runtime value, translated to function
pub inline fn glVertexP2ui() @TypeOf(GLEW_GET_FUN(__glewVertexP2ui)) {
    return GLEW_GET_FUN(__glewVertexP2ui);
}
// /usr/include/GL/glew.h:8426:9: warning: macro 'glVertexP2uiv' contains a runtime value, translated to function
pub inline fn glVertexP2uiv() @TypeOf(GLEW_GET_FUN(__glewVertexP2uiv)) {
    return GLEW_GET_FUN(__glewVertexP2uiv);
}
// /usr/include/GL/glew.h:8427:9: warning: macro 'glVertexP3ui' contains a runtime value, translated to function
pub inline fn glVertexP3ui() @TypeOf(GLEW_GET_FUN(__glewVertexP3ui)) {
    return GLEW_GET_FUN(__glewVertexP3ui);
}
// /usr/include/GL/glew.h:8428:9: warning: macro 'glVertexP3uiv' contains a runtime value, translated to function
pub inline fn glVertexP3uiv() @TypeOf(GLEW_GET_FUN(__glewVertexP3uiv)) {
    return GLEW_GET_FUN(__glewVertexP3uiv);
}
// /usr/include/GL/glew.h:8429:9: warning: macro 'glVertexP4ui' contains a runtime value, translated to function
pub inline fn glVertexP4ui() @TypeOf(GLEW_GET_FUN(__glewVertexP4ui)) {
    return GLEW_GET_FUN(__glewVertexP4ui);
}
// /usr/include/GL/glew.h:8430:9: warning: macro 'glVertexP4uiv' contains a runtime value, translated to function
pub inline fn glVertexP4uiv() @TypeOf(GLEW_GET_FUN(__glewVertexP4uiv)) {
    return GLEW_GET_FUN(__glewVertexP4uiv);
}
// /usr/include/GL/glew.h:8432:9: warning: macro 'GLEW_ARB_vertex_type_2_10_10_10_rev' contains a runtime value, translated to function
pub inline fn GLEW_ARB_vertex_type_2_10_10_10_rev() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_vertex_type_2_10_10_10_rev)) {
    return GLEW_GET_VAR(__GLEW_ARB_vertex_type_2_10_10_10_rev);
}
pub const GL_ARB_viewport_array = @as(c_int, 1);
pub const GL_MAX_VIEWPORTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825B, .hex);
pub const GL_VIEWPORT_SUBPIXEL_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825C, .hex);
pub const GL_VIEWPORT_BOUNDS_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825D, .hex);
pub const GL_LAYER_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825E, .hex);
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825F, .hex);
pub const GL_UNDEFINED_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8260, .hex);
// /usr/include/GL/glew.h:8466:9: warning: macro 'glDepthRangeArrayv' contains a runtime value, translated to function
pub inline fn glDepthRangeArrayv() @TypeOf(GLEW_GET_FUN(__glewDepthRangeArrayv)) {
    return GLEW_GET_FUN(__glewDepthRangeArrayv);
}
// /usr/include/GL/glew.h:8467:9: warning: macro 'glDepthRangeIndexed' contains a runtime value, translated to function
pub inline fn glDepthRangeIndexed() @TypeOf(GLEW_GET_FUN(__glewDepthRangeIndexed)) {
    return GLEW_GET_FUN(__glewDepthRangeIndexed);
}
// /usr/include/GL/glew.h:8468:9: warning: macro 'glGetDoublei_v' contains a runtime value, translated to function
pub inline fn glGetDoublei_v() @TypeOf(GLEW_GET_FUN(__glewGetDoublei_v)) {
    return GLEW_GET_FUN(__glewGetDoublei_v);
}
// /usr/include/GL/glew.h:8469:9: warning: macro 'glGetFloati_v' contains a runtime value, translated to function
pub inline fn glGetFloati_v() @TypeOf(GLEW_GET_FUN(__glewGetFloati_v)) {
    return GLEW_GET_FUN(__glewGetFloati_v);
}
// /usr/include/GL/glew.h:8470:9: warning: macro 'glScissorArrayv' contains a runtime value, translated to function
pub inline fn glScissorArrayv() @TypeOf(GLEW_GET_FUN(__glewScissorArrayv)) {
    return GLEW_GET_FUN(__glewScissorArrayv);
}
// /usr/include/GL/glew.h:8471:9: warning: macro 'glScissorIndexed' contains a runtime value, translated to function
pub inline fn glScissorIndexed() @TypeOf(GLEW_GET_FUN(__glewScissorIndexed)) {
    return GLEW_GET_FUN(__glewScissorIndexed);
}
// /usr/include/GL/glew.h:8472:9: warning: macro 'glScissorIndexedv' contains a runtime value, translated to function
pub inline fn glScissorIndexedv() @TypeOf(GLEW_GET_FUN(__glewScissorIndexedv)) {
    return GLEW_GET_FUN(__glewScissorIndexedv);
}
// /usr/include/GL/glew.h:8473:9: warning: macro 'glViewportArrayv' contains a runtime value, translated to function
pub inline fn glViewportArrayv() @TypeOf(GLEW_GET_FUN(__glewViewportArrayv)) {
    return GLEW_GET_FUN(__glewViewportArrayv);
}
// /usr/include/GL/glew.h:8474:9: warning: macro 'glViewportIndexedf' contains a runtime value, translated to function
pub inline fn glViewportIndexedf() @TypeOf(GLEW_GET_FUN(__glewViewportIndexedf)) {
    return GLEW_GET_FUN(__glewViewportIndexedf);
}
// /usr/include/GL/glew.h:8475:9: warning: macro 'glViewportIndexedfv' contains a runtime value, translated to function
pub inline fn glViewportIndexedfv() @TypeOf(GLEW_GET_FUN(__glewViewportIndexedfv)) {
    return GLEW_GET_FUN(__glewViewportIndexedfv);
}
// /usr/include/GL/glew.h:8477:9: warning: macro 'GLEW_ARB_viewport_array' contains a runtime value, translated to function
pub inline fn GLEW_ARB_viewport_array() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_viewport_array)) {
    return GLEW_GET_VAR(__GLEW_ARB_viewport_array);
}
pub const GL_ARB_window_pos = @as(c_int, 1);
// /usr/include/GL/glew.h:8503:9: warning: macro 'glWindowPos2dARB' contains a runtime value, translated to function
pub inline fn glWindowPos2dARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos2dARB)) {
    return GLEW_GET_FUN(__glewWindowPos2dARB);
}
// /usr/include/GL/glew.h:8504:9: warning: macro 'glWindowPos2dvARB' contains a runtime value, translated to function
pub inline fn glWindowPos2dvARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos2dvARB)) {
    return GLEW_GET_FUN(__glewWindowPos2dvARB);
}
// /usr/include/GL/glew.h:8505:9: warning: macro 'glWindowPos2fARB' contains a runtime value, translated to function
pub inline fn glWindowPos2fARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos2fARB)) {
    return GLEW_GET_FUN(__glewWindowPos2fARB);
}
// /usr/include/GL/glew.h:8506:9: warning: macro 'glWindowPos2fvARB' contains a runtime value, translated to function
pub inline fn glWindowPos2fvARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos2fvARB)) {
    return GLEW_GET_FUN(__glewWindowPos2fvARB);
}
// /usr/include/GL/glew.h:8507:9: warning: macro 'glWindowPos2iARB' contains a runtime value, translated to function
pub inline fn glWindowPos2iARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos2iARB)) {
    return GLEW_GET_FUN(__glewWindowPos2iARB);
}
// /usr/include/GL/glew.h:8508:9: warning: macro 'glWindowPos2ivARB' contains a runtime value, translated to function
pub inline fn glWindowPos2ivARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos2ivARB)) {
    return GLEW_GET_FUN(__glewWindowPos2ivARB);
}
// /usr/include/GL/glew.h:8509:9: warning: macro 'glWindowPos2sARB' contains a runtime value, translated to function
pub inline fn glWindowPos2sARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos2sARB)) {
    return GLEW_GET_FUN(__glewWindowPos2sARB);
}
// /usr/include/GL/glew.h:8510:9: warning: macro 'glWindowPos2svARB' contains a runtime value, translated to function
pub inline fn glWindowPos2svARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos2svARB)) {
    return GLEW_GET_FUN(__glewWindowPos2svARB);
}
// /usr/include/GL/glew.h:8511:9: warning: macro 'glWindowPos3dARB' contains a runtime value, translated to function
pub inline fn glWindowPos3dARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos3dARB)) {
    return GLEW_GET_FUN(__glewWindowPos3dARB);
}
// /usr/include/GL/glew.h:8512:9: warning: macro 'glWindowPos3dvARB' contains a runtime value, translated to function
pub inline fn glWindowPos3dvARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos3dvARB)) {
    return GLEW_GET_FUN(__glewWindowPos3dvARB);
}
// /usr/include/GL/glew.h:8513:9: warning: macro 'glWindowPos3fARB' contains a runtime value, translated to function
pub inline fn glWindowPos3fARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos3fARB)) {
    return GLEW_GET_FUN(__glewWindowPos3fARB);
}
// /usr/include/GL/glew.h:8514:9: warning: macro 'glWindowPos3fvARB' contains a runtime value, translated to function
pub inline fn glWindowPos3fvARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos3fvARB)) {
    return GLEW_GET_FUN(__glewWindowPos3fvARB);
}
// /usr/include/GL/glew.h:8515:9: warning: macro 'glWindowPos3iARB' contains a runtime value, translated to function
pub inline fn glWindowPos3iARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos3iARB)) {
    return GLEW_GET_FUN(__glewWindowPos3iARB);
}
// /usr/include/GL/glew.h:8516:9: warning: macro 'glWindowPos3ivARB' contains a runtime value, translated to function
pub inline fn glWindowPos3ivARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos3ivARB)) {
    return GLEW_GET_FUN(__glewWindowPos3ivARB);
}
// /usr/include/GL/glew.h:8517:9: warning: macro 'glWindowPos3sARB' contains a runtime value, translated to function
pub inline fn glWindowPos3sARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos3sARB)) {
    return GLEW_GET_FUN(__glewWindowPos3sARB);
}
// /usr/include/GL/glew.h:8518:9: warning: macro 'glWindowPos3svARB' contains a runtime value, translated to function
pub inline fn glWindowPos3svARB() @TypeOf(GLEW_GET_FUN(__glewWindowPos3svARB)) {
    return GLEW_GET_FUN(__glewWindowPos3svARB);
}
// /usr/include/GL/glew.h:8520:9: warning: macro 'GLEW_ARB_window_pos' contains a runtime value, translated to function
pub inline fn GLEW_ARB_window_pos() @TypeOf(GLEW_GET_VAR(__GLEW_ARB_window_pos)) {
    return GLEW_GET_VAR(__GLEW_ARB_window_pos);
}
pub const GL_ARM_mali_program_binary = @as(c_int, 1);
pub const GL_MALI_PROGRAM_BINARY_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F61, .hex);
// /usr/include/GL/glew.h:8531:9: warning: macro 'GLEW_ARM_mali_program_binary' contains a runtime value, translated to function
pub inline fn GLEW_ARM_mali_program_binary() @TypeOf(GLEW_GET_VAR(__GLEW_ARM_mali_program_binary)) {
    return GLEW_GET_VAR(__GLEW_ARM_mali_program_binary);
}
pub const GL_ARM_mali_shader_binary = @as(c_int, 1);
pub const GL_MALI_SHADER_BINARY_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F60, .hex);
// /usr/include/GL/glew.h:8542:9: warning: macro 'GLEW_ARM_mali_shader_binary' contains a runtime value, translated to function
pub inline fn GLEW_ARM_mali_shader_binary() @TypeOf(GLEW_GET_VAR(__GLEW_ARM_mali_shader_binary)) {
    return GLEW_GET_VAR(__GLEW_ARM_mali_shader_binary);
}
pub const GL_ARM_rgba8 = @as(c_int, 1);
pub const GL_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hex);
// /usr/include/GL/glew.h:8553:9: warning: macro 'GLEW_ARM_rgba8' contains a runtime value, translated to function
pub inline fn GLEW_ARM_rgba8() @TypeOf(GLEW_GET_VAR(__GLEW_ARM_rgba8)) {
    return GLEW_GET_VAR(__GLEW_ARM_rgba8);
}
pub const GL_ARM_shader_framebuffer_fetch = @as(c_int, 1);
pub const GL_FETCH_PER_SAMPLE_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F65, .hex);
pub const GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F66, .hex);
// /usr/include/GL/glew.h:8565:9: warning: macro 'GLEW_ARM_shader_framebuffer_fetch' contains a runtime value, translated to function
pub inline fn GLEW_ARM_shader_framebuffer_fetch() @TypeOf(GLEW_GET_VAR(__GLEW_ARM_shader_framebuffer_fetch)) {
    return GLEW_GET_VAR(__GLEW_ARM_shader_framebuffer_fetch);
}
pub const GL_ARM_shader_framebuffer_fetch_depth_stencil = @as(c_int, 1);
// /usr/include/GL/glew.h:8574:9: warning: macro 'GLEW_ARM_shader_framebuffer_fetch_depth_stencil' contains a runtime value, translated to function
pub inline fn GLEW_ARM_shader_framebuffer_fetch_depth_stencil() @TypeOf(GLEW_GET_VAR(__GLEW_ARM_shader_framebuffer_fetch_depth_stencil)) {
    return GLEW_GET_VAR(__GLEW_ARM_shader_framebuffer_fetch_depth_stencil);
}
pub const GL_ARM_texture_unnormalized_coordinates = @as(c_int, 1);
pub const GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F6A, .hex);
// /usr/include/GL/glew.h:8585:9: warning: macro 'GLEW_ARM_texture_unnormalized_coordinates' contains a runtime value, translated to function
pub inline fn GLEW_ARM_texture_unnormalized_coordinates() @TypeOf(GLEW_GET_VAR(__GLEW_ARM_texture_unnormalized_coordinates)) {
    return GLEW_GET_VAR(__GLEW_ARM_texture_unnormalized_coordinates);
}
pub const GL_ATIX_point_sprites = @as(c_int, 1);
pub const GL_TEXTURE_POINT_MODE_ATIX = @as(c_int, 0x60B0);
pub const GL_TEXTURE_POINT_ONE_COORD_ATIX = @as(c_int, 0x60B1);
pub const GL_TEXTURE_POINT_SPRITE_ATIX = @as(c_int, 0x60B2);
pub const GL_POINT_SPRITE_CULL_MODE_ATIX = @as(c_int, 0x60B3);
pub const GL_POINT_SPRITE_CULL_CENTER_ATIX = @as(c_int, 0x60B4);
pub const GL_POINT_SPRITE_CULL_CLIP_ATIX = @as(c_int, 0x60B5);
// /usr/include/GL/glew.h:8601:9: warning: macro 'GLEW_ATIX_point_sprites' contains a runtime value, translated to function
pub inline fn GLEW_ATIX_point_sprites() @TypeOf(GLEW_GET_VAR(__GLEW_ATIX_point_sprites)) {
    return GLEW_GET_VAR(__GLEW_ATIX_point_sprites);
}
pub const GL_ATIX_texture_env_combine3 = @as(c_int, 1);
pub const GL_MODULATE_ADD_ATIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8744, .hex);
pub const GL_MODULATE_SIGNED_ADD_ATIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8745, .hex);
pub const GL_MODULATE_SUBTRACT_ATIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8746, .hex);
// /usr/include/GL/glew.h:8614:9: warning: macro 'GLEW_ATIX_texture_env_combine3' contains a runtime value, translated to function
pub inline fn GLEW_ATIX_texture_env_combine3() @TypeOf(GLEW_GET_VAR(__GLEW_ATIX_texture_env_combine3)) {
    return GLEW_GET_VAR(__GLEW_ATIX_texture_env_combine3);
}
pub const GL_ATIX_texture_env_route = @as(c_int, 1);
pub const GL_SECONDARY_COLOR_ATIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8747, .hex);
pub const GL_TEXTURE_OUTPUT_RGB_ATIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8748, .hex);
pub const GL_TEXTURE_OUTPUT_ALPHA_ATIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8749, .hex);
// /usr/include/GL/glew.h:8627:9: warning: macro 'GLEW_ATIX_texture_env_route' contains a runtime value, translated to function
pub inline fn GLEW_ATIX_texture_env_route() @TypeOf(GLEW_GET_VAR(__GLEW_ATIX_texture_env_route)) {
    return GLEW_GET_VAR(__GLEW_ATIX_texture_env_route);
}
pub const GL_ATIX_vertex_shader_output_point_size = @as(c_int, 1);
pub const GL_OUTPUT_POINT_SIZE_ATIX = @as(c_int, 0x610E);
// /usr/include/GL/glew.h:8638:9: warning: macro 'GLEW_ATIX_vertex_shader_output_point_size' contains a runtime value, translated to function
pub inline fn GLEW_ATIX_vertex_shader_output_point_size() @TypeOf(GLEW_GET_VAR(__GLEW_ATIX_vertex_shader_output_point_size)) {
    return GLEW_GET_VAR(__GLEW_ATIX_vertex_shader_output_point_size);
}
pub const GL_ATI_draw_buffers = @as(c_int, 1);
pub const GL_MAX_DRAW_BUFFERS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hex);
pub const GL_DRAW_BUFFER0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hex);
pub const GL_DRAW_BUFFER1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hex);
pub const GL_DRAW_BUFFER2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hex);
pub const GL_DRAW_BUFFER3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hex);
pub const GL_DRAW_BUFFER4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hex);
pub const GL_DRAW_BUFFER5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hex);
pub const GL_DRAW_BUFFER6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hex);
pub const GL_DRAW_BUFFER7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hex);
pub const GL_DRAW_BUFFER8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hex);
pub const GL_DRAW_BUFFER9_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hex);
pub const GL_DRAW_BUFFER10_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hex);
pub const GL_DRAW_BUFFER11_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hex);
pub const GL_DRAW_BUFFER12_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hex);
pub const GL_DRAW_BUFFER13_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hex);
pub const GL_DRAW_BUFFER14_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hex);
pub const GL_DRAW_BUFFER15_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hex);
// /usr/include/GL/glew.h:8667:9: warning: macro 'glDrawBuffersATI' contains a runtime value, translated to function
pub inline fn glDrawBuffersATI() @TypeOf(GLEW_GET_FUN(__glewDrawBuffersATI)) {
    return GLEW_GET_FUN(__glewDrawBuffersATI);
}
// /usr/include/GL/glew.h:8669:9: warning: macro 'GLEW_ATI_draw_buffers' contains a runtime value, translated to function
pub inline fn GLEW_ATI_draw_buffers() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_draw_buffers)) {
    return GLEW_GET_VAR(__GLEW_ATI_draw_buffers);
}
pub const GL_ATI_element_array = @as(c_int, 1);
pub const GL_ELEMENT_ARRAY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8768, .hex);
pub const GL_ELEMENT_ARRAY_TYPE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8769, .hex);
pub const GL_ELEMENT_ARRAY_POINTER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876A, .hex);
// /usr/include/GL/glew.h:8686:9: warning: macro 'glDrawElementArrayATI' contains a runtime value, translated to function
pub inline fn glDrawElementArrayATI() @TypeOf(GLEW_GET_FUN(__glewDrawElementArrayATI)) {
    return GLEW_GET_FUN(__glewDrawElementArrayATI);
}
// /usr/include/GL/glew.h:8687:9: warning: macro 'glDrawRangeElementArrayATI' contains a runtime value, translated to function
pub inline fn glDrawRangeElementArrayATI() @TypeOf(GLEW_GET_FUN(__glewDrawRangeElementArrayATI)) {
    return GLEW_GET_FUN(__glewDrawRangeElementArrayATI);
}
// /usr/include/GL/glew.h:8688:9: warning: macro 'glElementPointerATI' contains a runtime value, translated to function
pub inline fn glElementPointerATI() @TypeOf(GLEW_GET_FUN(__glewElementPointerATI)) {
    return GLEW_GET_FUN(__glewElementPointerATI);
}
// /usr/include/GL/glew.h:8690:9: warning: macro 'GLEW_ATI_element_array' contains a runtime value, translated to function
pub inline fn GLEW_ATI_element_array() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_element_array)) {
    return GLEW_GET_VAR(__GLEW_ATI_element_array);
}
pub const GL_ATI_envmap_bumpmap = @as(c_int, 1);
pub const GL_BUMP_ROT_MATRIX_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8775, .hex);
pub const GL_BUMP_ROT_MATRIX_SIZE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8776, .hex);
pub const GL_BUMP_NUM_TEX_UNITS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8777, .hex);
pub const GL_BUMP_TEX_UNITS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8778, .hex);
pub const GL_DUDV_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8779, .hex);
pub const GL_DU8DV8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x877A, .hex);
pub const GL_BUMP_ENVMAP_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x877B, .hex);
pub const GL_BUMP_TARGET_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x877C, .hex);
// /usr/include/GL/glew.h:8713:9: warning: macro 'glGetTexBumpParameterfvATI' contains a runtime value, translated to function
pub inline fn glGetTexBumpParameterfvATI() @TypeOf(GLEW_GET_FUN(__glewGetTexBumpParameterfvATI)) {
    return GLEW_GET_FUN(__glewGetTexBumpParameterfvATI);
}
// /usr/include/GL/glew.h:8714:9: warning: macro 'glGetTexBumpParameterivATI' contains a runtime value, translated to function
pub inline fn glGetTexBumpParameterivATI() @TypeOf(GLEW_GET_FUN(__glewGetTexBumpParameterivATI)) {
    return GLEW_GET_FUN(__glewGetTexBumpParameterivATI);
}
// /usr/include/GL/glew.h:8715:9: warning: macro 'glTexBumpParameterfvATI' contains a runtime value, translated to function
pub inline fn glTexBumpParameterfvATI() @TypeOf(GLEW_GET_FUN(__glewTexBumpParameterfvATI)) {
    return GLEW_GET_FUN(__glewTexBumpParameterfvATI);
}
// /usr/include/GL/glew.h:8716:9: warning: macro 'glTexBumpParameterivATI' contains a runtime value, translated to function
pub inline fn glTexBumpParameterivATI() @TypeOf(GLEW_GET_FUN(__glewTexBumpParameterivATI)) {
    return GLEW_GET_FUN(__glewTexBumpParameterivATI);
}
// /usr/include/GL/glew.h:8718:9: warning: macro 'GLEW_ATI_envmap_bumpmap' contains a runtime value, translated to function
pub inline fn GLEW_ATI_envmap_bumpmap() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_envmap_bumpmap)) {
    return GLEW_GET_VAR(__GLEW_ATI_envmap_bumpmap);
}
pub const GL_ATI_fragment_shader = @as(c_int, 1);
pub const GL_2X_BIT_ATI = @as(c_int, 0x00000001);
pub const GL_RED_BIT_ATI = @as(c_int, 0x00000001);
pub const GL_4X_BIT_ATI = @as(c_int, 0x00000002);
pub const GL_COMP_BIT_ATI = @as(c_int, 0x00000002);
pub const GL_GREEN_BIT_ATI = @as(c_int, 0x00000002);
pub const GL_8X_BIT_ATI = @as(c_int, 0x00000004);
pub const GL_BLUE_BIT_ATI = @as(c_int, 0x00000004);
pub const GL_NEGATE_BIT_ATI = @as(c_int, 0x00000004);
pub const GL_BIAS_BIT_ATI = @as(c_int, 0x00000008);
pub const GL_HALF_BIT_ATI = @as(c_int, 0x00000008);
pub const GL_QUARTER_BIT_ATI = @as(c_int, 0x00000010);
pub const GL_EIGHTH_BIT_ATI = @as(c_int, 0x00000020);
pub const GL_SATURATE_BIT_ATI = @as(c_int, 0x00000040);
pub const GL_FRAGMENT_SHADER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8920, .hex);
pub const GL_REG_0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8921, .hex);
pub const GL_REG_1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8922, .hex);
pub const GL_REG_2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8923, .hex);
pub const GL_REG_3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8924, .hex);
pub const GL_REG_4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8925, .hex);
pub const GL_REG_5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8926, .hex);
pub const GL_CON_0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8941, .hex);
pub const GL_CON_1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8942, .hex);
pub const GL_CON_2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8943, .hex);
pub const GL_CON_3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8944, .hex);
pub const GL_CON_4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8945, .hex);
pub const GL_CON_5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8946, .hex);
pub const GL_CON_6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8947, .hex);
pub const GL_CON_7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8948, .hex);
pub const GL_MOV_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8961, .hex);
pub const GL_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8963, .hex);
pub const GL_MUL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8964, .hex);
pub const GL_SUB_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8965, .hex);
pub const GL_DOT3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8966, .hex);
pub const GL_DOT4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8967, .hex);
pub const GL_MAD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8968, .hex);
pub const GL_LERP_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8969, .hex);
pub const GL_CND_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896A, .hex);
pub const GL_CND0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896B, .hex);
pub const GL_DOT2_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896C, .hex);
pub const GL_SECONDARY_INTERPOLATOR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896D, .hex);
pub const GL_NUM_FRAGMENT_REGISTERS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896E, .hex);
pub const GL_NUM_FRAGMENT_CONSTANTS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896F, .hex);
pub const GL_NUM_PASSES_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8970, .hex);
pub const GL_NUM_INSTRUCTIONS_PER_PASS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8971, .hex);
pub const GL_NUM_INSTRUCTIONS_TOTAL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8972, .hex);
pub const GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8973, .hex);
pub const GL_NUM_LOOPBACK_COMPONENTS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8974, .hex);
pub const GL_COLOR_ALPHA_PAIRING_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8975, .hex);
pub const GL_SWIZZLE_STR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8976, .hex);
pub const GL_SWIZZLE_STQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8977, .hex);
pub const GL_SWIZZLE_STR_DR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8978, .hex);
pub const GL_SWIZZLE_STQ_DQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8979, .hex);
pub const GL_SWIZZLE_STRQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x897A, .hex);
pub const GL_SWIZZLE_STRQ_DQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x897B, .hex);
// /usr/include/GL/glew.h:8797:9: warning: macro 'glAlphaFragmentOp1ATI' contains a runtime value, translated to function
pub inline fn glAlphaFragmentOp1ATI() @TypeOf(GLEW_GET_FUN(__glewAlphaFragmentOp1ATI)) {
    return GLEW_GET_FUN(__glewAlphaFragmentOp1ATI);
}
// /usr/include/GL/glew.h:8798:9: warning: macro 'glAlphaFragmentOp2ATI' contains a runtime value, translated to function
pub inline fn glAlphaFragmentOp2ATI() @TypeOf(GLEW_GET_FUN(__glewAlphaFragmentOp2ATI)) {
    return GLEW_GET_FUN(__glewAlphaFragmentOp2ATI);
}
// /usr/include/GL/glew.h:8799:9: warning: macro 'glAlphaFragmentOp3ATI' contains a runtime value, translated to function
pub inline fn glAlphaFragmentOp3ATI() @TypeOf(GLEW_GET_FUN(__glewAlphaFragmentOp3ATI)) {
    return GLEW_GET_FUN(__glewAlphaFragmentOp3ATI);
}
// /usr/include/GL/glew.h:8800:9: warning: macro 'glBeginFragmentShaderATI' contains a runtime value, translated to function
pub inline fn glBeginFragmentShaderATI() @TypeOf(GLEW_GET_FUN(__glewBeginFragmentShaderATI)) {
    return GLEW_GET_FUN(__glewBeginFragmentShaderATI);
}
// /usr/include/GL/glew.h:8801:9: warning: macro 'glBindFragmentShaderATI' contains a runtime value, translated to function
pub inline fn glBindFragmentShaderATI() @TypeOf(GLEW_GET_FUN(__glewBindFragmentShaderATI)) {
    return GLEW_GET_FUN(__glewBindFragmentShaderATI);
}
// /usr/include/GL/glew.h:8802:9: warning: macro 'glColorFragmentOp1ATI' contains a runtime value, translated to function
pub inline fn glColorFragmentOp1ATI() @TypeOf(GLEW_GET_FUN(__glewColorFragmentOp1ATI)) {
    return GLEW_GET_FUN(__glewColorFragmentOp1ATI);
}
// /usr/include/GL/glew.h:8803:9: warning: macro 'glColorFragmentOp2ATI' contains a runtime value, translated to function
pub inline fn glColorFragmentOp2ATI() @TypeOf(GLEW_GET_FUN(__glewColorFragmentOp2ATI)) {
    return GLEW_GET_FUN(__glewColorFragmentOp2ATI);
}
// /usr/include/GL/glew.h:8804:9: warning: macro 'glColorFragmentOp3ATI' contains a runtime value, translated to function
pub inline fn glColorFragmentOp3ATI() @TypeOf(GLEW_GET_FUN(__glewColorFragmentOp3ATI)) {
    return GLEW_GET_FUN(__glewColorFragmentOp3ATI);
}
// /usr/include/GL/glew.h:8805:9: warning: macro 'glDeleteFragmentShaderATI' contains a runtime value, translated to function
pub inline fn glDeleteFragmentShaderATI() @TypeOf(GLEW_GET_FUN(__glewDeleteFragmentShaderATI)) {
    return GLEW_GET_FUN(__glewDeleteFragmentShaderATI);
}
// /usr/include/GL/glew.h:8806:9: warning: macro 'glEndFragmentShaderATI' contains a runtime value, translated to function
pub inline fn glEndFragmentShaderATI() @TypeOf(GLEW_GET_FUN(__glewEndFragmentShaderATI)) {
    return GLEW_GET_FUN(__glewEndFragmentShaderATI);
}
// /usr/include/GL/glew.h:8807:9: warning: macro 'glGenFragmentShadersATI' contains a runtime value, translated to function
pub inline fn glGenFragmentShadersATI() @TypeOf(GLEW_GET_FUN(__glewGenFragmentShadersATI)) {
    return GLEW_GET_FUN(__glewGenFragmentShadersATI);
}
// /usr/include/GL/glew.h:8808:9: warning: macro 'glPassTexCoordATI' contains a runtime value, translated to function
pub inline fn glPassTexCoordATI() @TypeOf(GLEW_GET_FUN(__glewPassTexCoordATI)) {
    return GLEW_GET_FUN(__glewPassTexCoordATI);
}
// /usr/include/GL/glew.h:8809:9: warning: macro 'glSampleMapATI' contains a runtime value, translated to function
pub inline fn glSampleMapATI() @TypeOf(GLEW_GET_FUN(__glewSampleMapATI)) {
    return GLEW_GET_FUN(__glewSampleMapATI);
}
// /usr/include/GL/glew.h:8810:9: warning: macro 'glSetFragmentShaderConstantATI' contains a runtime value, translated to function
pub inline fn glSetFragmentShaderConstantATI() @TypeOf(GLEW_GET_FUN(__glewSetFragmentShaderConstantATI)) {
    return GLEW_GET_FUN(__glewSetFragmentShaderConstantATI);
}
// /usr/include/GL/glew.h:8812:9: warning: macro 'GLEW_ATI_fragment_shader' contains a runtime value, translated to function
pub inline fn GLEW_ATI_fragment_shader() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_fragment_shader)) {
    return GLEW_GET_VAR(__GLEW_ATI_fragment_shader);
}
pub const GL_ATI_map_object_buffer = @as(c_int, 1);
// /usr/include/GL/glew.h:8824:9: warning: macro 'glMapObjectBufferATI' contains a runtime value, translated to function
pub inline fn glMapObjectBufferATI() @TypeOf(GLEW_GET_FUN(__glewMapObjectBufferATI)) {
    return GLEW_GET_FUN(__glewMapObjectBufferATI);
}
// /usr/include/GL/glew.h:8825:9: warning: macro 'glUnmapObjectBufferATI' contains a runtime value, translated to function
pub inline fn glUnmapObjectBufferATI() @TypeOf(GLEW_GET_FUN(__glewUnmapObjectBufferATI)) {
    return GLEW_GET_FUN(__glewUnmapObjectBufferATI);
}
// /usr/include/GL/glew.h:8827:9: warning: macro 'GLEW_ATI_map_object_buffer' contains a runtime value, translated to function
pub inline fn GLEW_ATI_map_object_buffer() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_map_object_buffer)) {
    return GLEW_GET_VAR(__GLEW_ATI_map_object_buffer);
}
pub const GL_ATI_meminfo = @as(c_int, 1);
pub const GL_VBO_FREE_MEMORY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FB, .hex);
pub const GL_TEXTURE_FREE_MEMORY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FC, .hex);
pub const GL_RENDERBUFFER_FREE_MEMORY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FD, .hex);
// /usr/include/GL/glew.h:8840:9: warning: macro 'GLEW_ATI_meminfo' contains a runtime value, translated to function
pub inline fn GLEW_ATI_meminfo() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_meminfo)) {
    return GLEW_GET_VAR(__GLEW_ATI_meminfo);
}
pub const GL_ATI_pn_triangles = @as(c_int, 1);
pub const GL_PN_TRIANGLES_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F0, .hex);
pub const GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F1, .hex);
pub const GL_PN_TRIANGLES_POINT_MODE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F2, .hex);
pub const GL_PN_TRIANGLES_NORMAL_MODE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F3, .hex);
pub const GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F4, .hex);
pub const GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F5, .hex);
pub const GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F6, .hex);
pub const GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F7, .hex);
pub const GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F8, .hex);
// /usr/include/GL/glew.h:8862:9: warning: macro 'glPNTrianglesfATI' contains a runtime value, translated to function
pub inline fn glPNTrianglesfATI() @TypeOf(GLEW_GET_FUN(__glewPNTrianglesfATI)) {
    return GLEW_GET_FUN(__glewPNTrianglesfATI);
}
// /usr/include/GL/glew.h:8863:9: warning: macro 'glPNTrianglesiATI' contains a runtime value, translated to function
pub inline fn glPNTrianglesiATI() @TypeOf(GLEW_GET_FUN(__glewPNTrianglesiATI)) {
    return GLEW_GET_FUN(__glewPNTrianglesiATI);
}
// /usr/include/GL/glew.h:8865:9: warning: macro 'GLEW_ATI_pn_triangles' contains a runtime value, translated to function
pub inline fn GLEW_ATI_pn_triangles() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_pn_triangles)) {
    return GLEW_GET_VAR(__GLEW_ATI_pn_triangles);
}
pub const GL_ATI_separate_stencil = @as(c_int, 1);
pub const GL_STENCIL_BACK_FUNC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8800, .hex);
pub const GL_STENCIL_BACK_FAIL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8801, .hex);
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8802, .hex);
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8803, .hex);
// /usr/include/GL/glew.h:8882:9: warning: macro 'glStencilFuncSeparateATI' contains a runtime value, translated to function
pub inline fn glStencilFuncSeparateATI() @TypeOf(GLEW_GET_FUN(__glewStencilFuncSeparateATI)) {
    return GLEW_GET_FUN(__glewStencilFuncSeparateATI);
}
// /usr/include/GL/glew.h:8883:9: warning: macro 'glStencilOpSeparateATI' contains a runtime value, translated to function
pub inline fn glStencilOpSeparateATI() @TypeOf(GLEW_GET_FUN(__glewStencilOpSeparateATI)) {
    return GLEW_GET_FUN(__glewStencilOpSeparateATI);
}
// /usr/include/GL/glew.h:8885:9: warning: macro 'GLEW_ATI_separate_stencil' contains a runtime value, translated to function
pub inline fn GLEW_ATI_separate_stencil() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_separate_stencil)) {
    return GLEW_GET_VAR(__GLEW_ATI_separate_stencil);
}
pub const GL_ATI_shader_texture_lod = @as(c_int, 1);
// /usr/include/GL/glew.h:8894:9: warning: macro 'GLEW_ATI_shader_texture_lod' contains a runtime value, translated to function
pub inline fn GLEW_ATI_shader_texture_lod() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_shader_texture_lod)) {
    return GLEW_GET_VAR(__GLEW_ATI_shader_texture_lod);
}
pub const GL_ATI_text_fragment_shader = @as(c_int, 1);
pub const GL_TEXT_FRAGMENT_SHADER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8200, .hex);
// /usr/include/GL/glew.h:8905:9: warning: macro 'GLEW_ATI_text_fragment_shader' contains a runtime value, translated to function
pub inline fn GLEW_ATI_text_fragment_shader() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_text_fragment_shader)) {
    return GLEW_GET_VAR(__GLEW_ATI_text_fragment_shader);
}
pub const GL_ATI_texture_compression_3dc = @as(c_int, 1);
pub const GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8837, .hex);
// /usr/include/GL/glew.h:8916:9: warning: macro 'GLEW_ATI_texture_compression_3dc' contains a runtime value, translated to function
pub inline fn GLEW_ATI_texture_compression_3dc() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_texture_compression_3dc)) {
    return GLEW_GET_VAR(__GLEW_ATI_texture_compression_3dc);
}
pub const GL_ATI_texture_env_combine3 = @as(c_int, 1);
pub const GL_MODULATE_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8744, .hex);
pub const GL_MODULATE_SIGNED_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8745, .hex);
pub const GL_MODULATE_SUBTRACT_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8746, .hex);
// /usr/include/GL/glew.h:8929:9: warning: macro 'GLEW_ATI_texture_env_combine3' contains a runtime value, translated to function
pub inline fn GLEW_ATI_texture_env_combine3() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_texture_env_combine3)) {
    return GLEW_GET_VAR(__GLEW_ATI_texture_env_combine3);
}
pub const GL_ATI_texture_float = @as(c_int, 1);
pub const GL_RGBA_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hex);
pub const GL_RGB_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hex);
pub const GL_ALPHA_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hex);
pub const GL_INTENSITY_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8817, .hex);
pub const GL_LUMINANCE_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hex);
pub const GL_LUMINANCE_ALPHA_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hex);
pub const GL_RGBA_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hex);
pub const GL_RGB_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hex);
pub const GL_ALPHA_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hex);
pub const GL_INTENSITY_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881D, .hex);
pub const GL_LUMINANCE_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hex);
pub const GL_LUMINANCE_ALPHA_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hex);
// /usr/include/GL/glew.h:8951:9: warning: macro 'GLEW_ATI_texture_float' contains a runtime value, translated to function
pub inline fn GLEW_ATI_texture_float() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_texture_float)) {
    return GLEW_GET_VAR(__GLEW_ATI_texture_float);
}
pub const GL_ATI_texture_mirror_once = @as(c_int, 1);
pub const GL_MIRROR_CLAMP_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8742, .hex);
pub const GL_MIRROR_CLAMP_TO_EDGE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hex);
// /usr/include/GL/glew.h:8963:9: warning: macro 'GLEW_ATI_texture_mirror_once' contains a runtime value, translated to function
pub inline fn GLEW_ATI_texture_mirror_once() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_texture_mirror_once)) {
    return GLEW_GET_VAR(__GLEW_ATI_texture_mirror_once);
}
pub const GL_ATI_vertex_array_object = @as(c_int, 1);
pub const GL_STATIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8760, .hex);
pub const GL_DYNAMIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8761, .hex);
pub const GL_PRESERVE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8762, .hex);
pub const GL_DISCARD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8763, .hex);
pub const GL_OBJECT_BUFFER_SIZE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hex);
pub const GL_OBJECT_BUFFER_USAGE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hex);
pub const GL_ARRAY_OBJECT_BUFFER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8766, .hex);
pub const GL_ARRAY_OBJECT_OFFSET_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8767, .hex);
// /usr/include/GL/glew.h:8994:9: warning: macro 'glArrayObjectATI' contains a runtime value, translated to function
pub inline fn glArrayObjectATI() @TypeOf(GLEW_GET_FUN(__glewArrayObjectATI)) {
    return GLEW_GET_FUN(__glewArrayObjectATI);
}
// /usr/include/GL/glew.h:8995:9: warning: macro 'glFreeObjectBufferATI' contains a runtime value, translated to function
pub inline fn glFreeObjectBufferATI() @TypeOf(GLEW_GET_FUN(__glewFreeObjectBufferATI)) {
    return GLEW_GET_FUN(__glewFreeObjectBufferATI);
}
// /usr/include/GL/glew.h:8996:9: warning: macro 'glGetArrayObjectfvATI' contains a runtime value, translated to function
pub inline fn glGetArrayObjectfvATI() @TypeOf(GLEW_GET_FUN(__glewGetArrayObjectfvATI)) {
    return GLEW_GET_FUN(__glewGetArrayObjectfvATI);
}
// /usr/include/GL/glew.h:8997:9: warning: macro 'glGetArrayObjectivATI' contains a runtime value, translated to function
pub inline fn glGetArrayObjectivATI() @TypeOf(GLEW_GET_FUN(__glewGetArrayObjectivATI)) {
    return GLEW_GET_FUN(__glewGetArrayObjectivATI);
}
// /usr/include/GL/glew.h:8998:9: warning: macro 'glGetObjectBufferfvATI' contains a runtime value, translated to function
pub inline fn glGetObjectBufferfvATI() @TypeOf(GLEW_GET_FUN(__glewGetObjectBufferfvATI)) {
    return GLEW_GET_FUN(__glewGetObjectBufferfvATI);
}
// /usr/include/GL/glew.h:8999:9: warning: macro 'glGetObjectBufferivATI' contains a runtime value, translated to function
pub inline fn glGetObjectBufferivATI() @TypeOf(GLEW_GET_FUN(__glewGetObjectBufferivATI)) {
    return GLEW_GET_FUN(__glewGetObjectBufferivATI);
}
// /usr/include/GL/glew.h:9000:9: warning: macro 'glGetVariantArrayObjectfvATI' contains a runtime value, translated to function
pub inline fn glGetVariantArrayObjectfvATI() @TypeOf(GLEW_GET_FUN(__glewGetVariantArrayObjectfvATI)) {
    return GLEW_GET_FUN(__glewGetVariantArrayObjectfvATI);
}
// /usr/include/GL/glew.h:9001:9: warning: macro 'glGetVariantArrayObjectivATI' contains a runtime value, translated to function
pub inline fn glGetVariantArrayObjectivATI() @TypeOf(GLEW_GET_FUN(__glewGetVariantArrayObjectivATI)) {
    return GLEW_GET_FUN(__glewGetVariantArrayObjectivATI);
}
// /usr/include/GL/glew.h:9002:9: warning: macro 'glIsObjectBufferATI' contains a runtime value, translated to function
pub inline fn glIsObjectBufferATI() @TypeOf(GLEW_GET_FUN(__glewIsObjectBufferATI)) {
    return GLEW_GET_FUN(__glewIsObjectBufferATI);
}
// /usr/include/GL/glew.h:9003:9: warning: macro 'glNewObjectBufferATI' contains a runtime value, translated to function
pub inline fn glNewObjectBufferATI() @TypeOf(GLEW_GET_FUN(__glewNewObjectBufferATI)) {
    return GLEW_GET_FUN(__glewNewObjectBufferATI);
}
// /usr/include/GL/glew.h:9004:9: warning: macro 'glUpdateObjectBufferATI' contains a runtime value, translated to function
pub inline fn glUpdateObjectBufferATI() @TypeOf(GLEW_GET_FUN(__glewUpdateObjectBufferATI)) {
    return GLEW_GET_FUN(__glewUpdateObjectBufferATI);
}
// /usr/include/GL/glew.h:9005:9: warning: macro 'glVariantArrayObjectATI' contains a runtime value, translated to function
pub inline fn glVariantArrayObjectATI() @TypeOf(GLEW_GET_FUN(__glewVariantArrayObjectATI)) {
    return GLEW_GET_FUN(__glewVariantArrayObjectATI);
}
// /usr/include/GL/glew.h:9007:9: warning: macro 'GLEW_ATI_vertex_array_object' contains a runtime value, translated to function
pub inline fn GLEW_ATI_vertex_array_object() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_vertex_array_object)) {
    return GLEW_GET_VAR(__GLEW_ATI_vertex_array_object);
}
pub const GL_ATI_vertex_attrib_array_object = @as(c_int, 1);
// /usr/include/GL/glew.h:9020:9: warning: macro 'glGetVertexAttribArrayObjectfvATI' contains a runtime value, translated to function
pub inline fn glGetVertexAttribArrayObjectfvATI() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribArrayObjectfvATI)) {
    return GLEW_GET_FUN(__glewGetVertexAttribArrayObjectfvATI);
}
// /usr/include/GL/glew.h:9021:9: warning: macro 'glGetVertexAttribArrayObjectivATI' contains a runtime value, translated to function
pub inline fn glGetVertexAttribArrayObjectivATI() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribArrayObjectivATI)) {
    return GLEW_GET_FUN(__glewGetVertexAttribArrayObjectivATI);
}
// /usr/include/GL/glew.h:9022:9: warning: macro 'glVertexAttribArrayObjectATI' contains a runtime value, translated to function
pub inline fn glVertexAttribArrayObjectATI() @TypeOf(GLEW_GET_FUN(__glewVertexAttribArrayObjectATI)) {
    return GLEW_GET_FUN(__glewVertexAttribArrayObjectATI);
}
// /usr/include/GL/glew.h:9024:9: warning: macro 'GLEW_ATI_vertex_attrib_array_object' contains a runtime value, translated to function
pub inline fn GLEW_ATI_vertex_attrib_array_object() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_vertex_attrib_array_object)) {
    return GLEW_GET_VAR(__GLEW_ATI_vertex_attrib_array_object);
}
pub const GL_ATI_vertex_streams = @as(c_int, 1);
pub const GL_MAX_VERTEX_STREAMS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876B, .hex);
pub const GL_VERTEX_SOURCE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876C, .hex);
pub const GL_VERTEX_STREAM0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876D, .hex);
pub const GL_VERTEX_STREAM1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876E, .hex);
pub const GL_VERTEX_STREAM2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876F, .hex);
pub const GL_VERTEX_STREAM3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8770, .hex);
pub const GL_VERTEX_STREAM4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8771, .hex);
pub const GL_VERTEX_STREAM5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8772, .hex);
pub const GL_VERTEX_STREAM6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8773, .hex);
pub const GL_VERTEX_STREAM7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8774, .hex);
// /usr/include/GL/glew.h:9090:9: warning: macro 'glClientActiveVertexStreamATI' contains a runtime value, translated to function
pub inline fn glClientActiveVertexStreamATI() @TypeOf(GLEW_GET_FUN(__glewClientActiveVertexStreamATI)) {
    return GLEW_GET_FUN(__glewClientActiveVertexStreamATI);
}
// /usr/include/GL/glew.h:9091:9: warning: macro 'glNormalStream3bATI' contains a runtime value, translated to function
pub inline fn glNormalStream3bATI() @TypeOf(GLEW_GET_FUN(__glewNormalStream3bATI)) {
    return GLEW_GET_FUN(__glewNormalStream3bATI);
}
// /usr/include/GL/glew.h:9092:9: warning: macro 'glNormalStream3bvATI' contains a runtime value, translated to function
pub inline fn glNormalStream3bvATI() @TypeOf(GLEW_GET_FUN(__glewNormalStream3bvATI)) {
    return GLEW_GET_FUN(__glewNormalStream3bvATI);
}
// /usr/include/GL/glew.h:9093:9: warning: macro 'glNormalStream3dATI' contains a runtime value, translated to function
pub inline fn glNormalStream3dATI() @TypeOf(GLEW_GET_FUN(__glewNormalStream3dATI)) {
    return GLEW_GET_FUN(__glewNormalStream3dATI);
}
// /usr/include/GL/glew.h:9094:9: warning: macro 'glNormalStream3dvATI' contains a runtime value, translated to function
pub inline fn glNormalStream3dvATI() @TypeOf(GLEW_GET_FUN(__glewNormalStream3dvATI)) {
    return GLEW_GET_FUN(__glewNormalStream3dvATI);
}
// /usr/include/GL/glew.h:9095:9: warning: macro 'glNormalStream3fATI' contains a runtime value, translated to function
pub inline fn glNormalStream3fATI() @TypeOf(GLEW_GET_FUN(__glewNormalStream3fATI)) {
    return GLEW_GET_FUN(__glewNormalStream3fATI);
}
// /usr/include/GL/glew.h:9096:9: warning: macro 'glNormalStream3fvATI' contains a runtime value, translated to function
pub inline fn glNormalStream3fvATI() @TypeOf(GLEW_GET_FUN(__glewNormalStream3fvATI)) {
    return GLEW_GET_FUN(__glewNormalStream3fvATI);
}
// /usr/include/GL/glew.h:9097:9: warning: macro 'glNormalStream3iATI' contains a runtime value, translated to function
pub inline fn glNormalStream3iATI() @TypeOf(GLEW_GET_FUN(__glewNormalStream3iATI)) {
    return GLEW_GET_FUN(__glewNormalStream3iATI);
}
// /usr/include/GL/glew.h:9098:9: warning: macro 'glNormalStream3ivATI' contains a runtime value, translated to function
pub inline fn glNormalStream3ivATI() @TypeOf(GLEW_GET_FUN(__glewNormalStream3ivATI)) {
    return GLEW_GET_FUN(__glewNormalStream3ivATI);
}
// /usr/include/GL/glew.h:9099:9: warning: macro 'glNormalStream3sATI' contains a runtime value, translated to function
pub inline fn glNormalStream3sATI() @TypeOf(GLEW_GET_FUN(__glewNormalStream3sATI)) {
    return GLEW_GET_FUN(__glewNormalStream3sATI);
}
// /usr/include/GL/glew.h:9100:9: warning: macro 'glNormalStream3svATI' contains a runtime value, translated to function
pub inline fn glNormalStream3svATI() @TypeOf(GLEW_GET_FUN(__glewNormalStream3svATI)) {
    return GLEW_GET_FUN(__glewNormalStream3svATI);
}
// /usr/include/GL/glew.h:9101:9: warning: macro 'glVertexBlendEnvfATI' contains a runtime value, translated to function
pub inline fn glVertexBlendEnvfATI() @TypeOf(GLEW_GET_FUN(__glewVertexBlendEnvfATI)) {
    return GLEW_GET_FUN(__glewVertexBlendEnvfATI);
}
// /usr/include/GL/glew.h:9102:9: warning: macro 'glVertexBlendEnviATI' contains a runtime value, translated to function
pub inline fn glVertexBlendEnviATI() @TypeOf(GLEW_GET_FUN(__glewVertexBlendEnviATI)) {
    return GLEW_GET_FUN(__glewVertexBlendEnviATI);
}
// /usr/include/GL/glew.h:9103:9: warning: macro 'glVertexStream1dATI' contains a runtime value, translated to function
pub inline fn glVertexStream1dATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream1dATI)) {
    return GLEW_GET_FUN(__glewVertexStream1dATI);
}
// /usr/include/GL/glew.h:9104:9: warning: macro 'glVertexStream1dvATI' contains a runtime value, translated to function
pub inline fn glVertexStream1dvATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream1dvATI)) {
    return GLEW_GET_FUN(__glewVertexStream1dvATI);
}
// /usr/include/GL/glew.h:9105:9: warning: macro 'glVertexStream1fATI' contains a runtime value, translated to function
pub inline fn glVertexStream1fATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream1fATI)) {
    return GLEW_GET_FUN(__glewVertexStream1fATI);
}
// /usr/include/GL/glew.h:9106:9: warning: macro 'glVertexStream1fvATI' contains a runtime value, translated to function
pub inline fn glVertexStream1fvATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream1fvATI)) {
    return GLEW_GET_FUN(__glewVertexStream1fvATI);
}
// /usr/include/GL/glew.h:9107:9: warning: macro 'glVertexStream1iATI' contains a runtime value, translated to function
pub inline fn glVertexStream1iATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream1iATI)) {
    return GLEW_GET_FUN(__glewVertexStream1iATI);
}
// /usr/include/GL/glew.h:9108:9: warning: macro 'glVertexStream1ivATI' contains a runtime value, translated to function
pub inline fn glVertexStream1ivATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream1ivATI)) {
    return GLEW_GET_FUN(__glewVertexStream1ivATI);
}
// /usr/include/GL/glew.h:9109:9: warning: macro 'glVertexStream1sATI' contains a runtime value, translated to function
pub inline fn glVertexStream1sATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream1sATI)) {
    return GLEW_GET_FUN(__glewVertexStream1sATI);
}
// /usr/include/GL/glew.h:9110:9: warning: macro 'glVertexStream1svATI' contains a runtime value, translated to function
pub inline fn glVertexStream1svATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream1svATI)) {
    return GLEW_GET_FUN(__glewVertexStream1svATI);
}
// /usr/include/GL/glew.h:9111:9: warning: macro 'glVertexStream2dATI' contains a runtime value, translated to function
pub inline fn glVertexStream2dATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream2dATI)) {
    return GLEW_GET_FUN(__glewVertexStream2dATI);
}
// /usr/include/GL/glew.h:9112:9: warning: macro 'glVertexStream2dvATI' contains a runtime value, translated to function
pub inline fn glVertexStream2dvATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream2dvATI)) {
    return GLEW_GET_FUN(__glewVertexStream2dvATI);
}
// /usr/include/GL/glew.h:9113:9: warning: macro 'glVertexStream2fATI' contains a runtime value, translated to function
pub inline fn glVertexStream2fATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream2fATI)) {
    return GLEW_GET_FUN(__glewVertexStream2fATI);
}
// /usr/include/GL/glew.h:9114:9: warning: macro 'glVertexStream2fvATI' contains a runtime value, translated to function
pub inline fn glVertexStream2fvATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream2fvATI)) {
    return GLEW_GET_FUN(__glewVertexStream2fvATI);
}
// /usr/include/GL/glew.h:9115:9: warning: macro 'glVertexStream2iATI' contains a runtime value, translated to function
pub inline fn glVertexStream2iATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream2iATI)) {
    return GLEW_GET_FUN(__glewVertexStream2iATI);
}
// /usr/include/GL/glew.h:9116:9: warning: macro 'glVertexStream2ivATI' contains a runtime value, translated to function
pub inline fn glVertexStream2ivATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream2ivATI)) {
    return GLEW_GET_FUN(__glewVertexStream2ivATI);
}
// /usr/include/GL/glew.h:9117:9: warning: macro 'glVertexStream2sATI' contains a runtime value, translated to function
pub inline fn glVertexStream2sATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream2sATI)) {
    return GLEW_GET_FUN(__glewVertexStream2sATI);
}
// /usr/include/GL/glew.h:9118:9: warning: macro 'glVertexStream2svATI' contains a runtime value, translated to function
pub inline fn glVertexStream2svATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream2svATI)) {
    return GLEW_GET_FUN(__glewVertexStream2svATI);
}
// /usr/include/GL/glew.h:9119:9: warning: macro 'glVertexStream3dATI' contains a runtime value, translated to function
pub inline fn glVertexStream3dATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream3dATI)) {
    return GLEW_GET_FUN(__glewVertexStream3dATI);
}
// /usr/include/GL/glew.h:9120:9: warning: macro 'glVertexStream3dvATI' contains a runtime value, translated to function
pub inline fn glVertexStream3dvATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream3dvATI)) {
    return GLEW_GET_FUN(__glewVertexStream3dvATI);
}
// /usr/include/GL/glew.h:9121:9: warning: macro 'glVertexStream3fATI' contains a runtime value, translated to function
pub inline fn glVertexStream3fATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream3fATI)) {
    return GLEW_GET_FUN(__glewVertexStream3fATI);
}
// /usr/include/GL/glew.h:9122:9: warning: macro 'glVertexStream3fvATI' contains a runtime value, translated to function
pub inline fn glVertexStream3fvATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream3fvATI)) {
    return GLEW_GET_FUN(__glewVertexStream3fvATI);
}
// /usr/include/GL/glew.h:9123:9: warning: macro 'glVertexStream3iATI' contains a runtime value, translated to function
pub inline fn glVertexStream3iATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream3iATI)) {
    return GLEW_GET_FUN(__glewVertexStream3iATI);
}
// /usr/include/GL/glew.h:9124:9: warning: macro 'glVertexStream3ivATI' contains a runtime value, translated to function
pub inline fn glVertexStream3ivATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream3ivATI)) {
    return GLEW_GET_FUN(__glewVertexStream3ivATI);
}
// /usr/include/GL/glew.h:9125:9: warning: macro 'glVertexStream3sATI' contains a runtime value, translated to function
pub inline fn glVertexStream3sATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream3sATI)) {
    return GLEW_GET_FUN(__glewVertexStream3sATI);
}
// /usr/include/GL/glew.h:9126:9: warning: macro 'glVertexStream3svATI' contains a runtime value, translated to function
pub inline fn glVertexStream3svATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream3svATI)) {
    return GLEW_GET_FUN(__glewVertexStream3svATI);
}
// /usr/include/GL/glew.h:9127:9: warning: macro 'glVertexStream4dATI' contains a runtime value, translated to function
pub inline fn glVertexStream4dATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream4dATI)) {
    return GLEW_GET_FUN(__glewVertexStream4dATI);
}
// /usr/include/GL/glew.h:9128:9: warning: macro 'glVertexStream4dvATI' contains a runtime value, translated to function
pub inline fn glVertexStream4dvATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream4dvATI)) {
    return GLEW_GET_FUN(__glewVertexStream4dvATI);
}
// /usr/include/GL/glew.h:9129:9: warning: macro 'glVertexStream4fATI' contains a runtime value, translated to function
pub inline fn glVertexStream4fATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream4fATI)) {
    return GLEW_GET_FUN(__glewVertexStream4fATI);
}
// /usr/include/GL/glew.h:9130:9: warning: macro 'glVertexStream4fvATI' contains a runtime value, translated to function
pub inline fn glVertexStream4fvATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream4fvATI)) {
    return GLEW_GET_FUN(__glewVertexStream4fvATI);
}
// /usr/include/GL/glew.h:9131:9: warning: macro 'glVertexStream4iATI' contains a runtime value, translated to function
pub inline fn glVertexStream4iATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream4iATI)) {
    return GLEW_GET_FUN(__glewVertexStream4iATI);
}
// /usr/include/GL/glew.h:9132:9: warning: macro 'glVertexStream4ivATI' contains a runtime value, translated to function
pub inline fn glVertexStream4ivATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream4ivATI)) {
    return GLEW_GET_FUN(__glewVertexStream4ivATI);
}
// /usr/include/GL/glew.h:9133:9: warning: macro 'glVertexStream4sATI' contains a runtime value, translated to function
pub inline fn glVertexStream4sATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream4sATI)) {
    return GLEW_GET_FUN(__glewVertexStream4sATI);
}
// /usr/include/GL/glew.h:9134:9: warning: macro 'glVertexStream4svATI' contains a runtime value, translated to function
pub inline fn glVertexStream4svATI() @TypeOf(GLEW_GET_FUN(__glewVertexStream4svATI)) {
    return GLEW_GET_FUN(__glewVertexStream4svATI);
}
// /usr/include/GL/glew.h:9136:9: warning: macro 'GLEW_ATI_vertex_streams' contains a runtime value, translated to function
pub inline fn GLEW_ATI_vertex_streams() @TypeOf(GLEW_GET_VAR(__GLEW_ATI_vertex_streams)) {
    return GLEW_GET_VAR(__GLEW_ATI_vertex_streams);
}
pub const GL_DMP_program_binary = @as(c_int, 1);
pub const GL_SMAPHS30_PROGRAM_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9251, .hex);
pub const GL_SMAPHS_PROGRAM_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9252, .hex);
pub const GL_DMP_PROGRAM_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9253, .hex);
// /usr/include/GL/glew.h:9149:9: warning: macro 'GLEW_DMP_program_binary' contains a runtime value, translated to function
pub inline fn GLEW_DMP_program_binary() @TypeOf(GLEW_GET_VAR(__GLEW_DMP_program_binary)) {
    return GLEW_GET_VAR(__GLEW_DMP_program_binary);
}
pub const GL_DMP_shader_binary = @as(c_int, 1);
pub const GL_SHADER_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9250, .hex);
// /usr/include/GL/glew.h:9160:9: warning: macro 'GLEW_DMP_shader_binary' contains a runtime value, translated to function
pub inline fn GLEW_DMP_shader_binary() @TypeOf(GLEW_GET_VAR(__GLEW_DMP_shader_binary)) {
    return GLEW_GET_VAR(__GLEW_DMP_shader_binary);
}
pub const GL_EXT_422_pixels = @as(c_int, 1);
pub const GL_422_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CC, .hex);
pub const GL_422_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CD, .hex);
pub const GL_422_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CE, .hex);
pub const GL_422_REV_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CF, .hex);
// /usr/include/GL/glew.h:9174:9: warning: macro 'GLEW_EXT_422_pixels' contains a runtime value, translated to function
pub inline fn GLEW_EXT_422_pixels() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_422_pixels)) {
    return GLEW_GET_VAR(__GLEW_EXT_422_pixels);
}
pub const GL_EXT_Cg_shader = @as(c_int, 1);
pub const GL_CG_VERTEX_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x890E, .hex);
pub const GL_CG_FRAGMENT_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x890F, .hex);
// /usr/include/GL/glew.h:9186:9: warning: macro 'GLEW_EXT_Cg_shader' contains a runtime value, translated to function
pub inline fn GLEW_EXT_Cg_shader() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_Cg_shader)) {
    return GLEW_GET_VAR(__GLEW_EXT_Cg_shader);
}
pub const GL_EXT_EGL_image_array = @as(c_int, 1);
// /usr/include/GL/glew.h:9195:9: warning: macro 'GLEW_EXT_EGL_image_array' contains a runtime value, translated to function
pub inline fn GLEW_EXT_EGL_image_array() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_EGL_image_array)) {
    return GLEW_GET_VAR(__GLEW_EXT_EGL_image_array);
}
pub const GL_EXT_EGL_image_external_wrap_modes = @as(c_int, 1);
// /usr/include/GL/glew.h:9204:9: warning: macro 'GLEW_EXT_EGL_image_external_wrap_modes' contains a runtime value, translated to function
pub inline fn GLEW_EXT_EGL_image_external_wrap_modes() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_EGL_image_external_wrap_modes)) {
    return GLEW_GET_VAR(__GLEW_EXT_EGL_image_external_wrap_modes);
}
pub const GL_EXT_EGL_image_storage = @as(c_int, 1);
// /usr/include/GL/glew.h:9216:9: warning: macro 'glEGLImageTargetTexStorageEXT' contains a runtime value, translated to function
pub inline fn glEGLImageTargetTexStorageEXT() @TypeOf(GLEW_GET_FUN(__glewEGLImageTargetTexStorageEXT)) {
    return GLEW_GET_FUN(__glewEGLImageTargetTexStorageEXT);
}
// /usr/include/GL/glew.h:9217:9: warning: macro 'glEGLImageTargetTextureStorageEXT' contains a runtime value, translated to function
pub inline fn glEGLImageTargetTextureStorageEXT() @TypeOf(GLEW_GET_FUN(__glewEGLImageTargetTextureStorageEXT)) {
    return GLEW_GET_FUN(__glewEGLImageTargetTextureStorageEXT);
}
// /usr/include/GL/glew.h:9219:9: warning: macro 'GLEW_EXT_EGL_image_storage' contains a runtime value, translated to function
pub inline fn GLEW_EXT_EGL_image_storage() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_EGL_image_storage)) {
    return GLEW_GET_VAR(__GLEW_EXT_EGL_image_storage);
}
pub const GL_EXT_EGL_sync = @as(c_int, 1);
// /usr/include/GL/glew.h:9228:9: warning: macro 'GLEW_EXT_EGL_sync' contains a runtime value, translated to function
pub inline fn GLEW_EXT_EGL_sync() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_EGL_sync)) {
    return GLEW_GET_VAR(__GLEW_EXT_EGL_sync);
}
pub const GL_EXT_YUV_target = @as(c_int, 1);
pub const GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BE7, .hex);
// /usr/include/GL/glew.h:9239:9: warning: macro 'GLEW_EXT_YUV_target' contains a runtime value, translated to function
pub inline fn GLEW_EXT_YUV_target() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_YUV_target)) {
    return GLEW_GET_VAR(__GLEW_EXT_YUV_target);
}
pub const GL_EXT_abgr = @as(c_int, 1);
pub const GL_ABGR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hex);
// /usr/include/GL/glew.h:9250:9: warning: macro 'GLEW_EXT_abgr' contains a runtime value, translated to function
pub inline fn GLEW_EXT_abgr() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_abgr)) {
    return GLEW_GET_VAR(__GLEW_EXT_abgr);
}
pub const GL_EXT_base_instance = @as(c_int, 1);
// /usr/include/GL/glew.h:9263:9: warning: macro 'glDrawArraysInstancedBaseInstanceEXT' contains a runtime value, translated to function
pub inline fn glDrawArraysInstancedBaseInstanceEXT() @TypeOf(GLEW_GET_FUN(__glewDrawArraysInstancedBaseInstanceEXT)) {
    return GLEW_GET_FUN(__glewDrawArraysInstancedBaseInstanceEXT);
}
// /usr/include/GL/glew.h:9264:9: warning: macro 'glDrawElementsInstancedBaseInstanceEXT' contains a runtime value, translated to function
pub inline fn glDrawElementsInstancedBaseInstanceEXT() @TypeOf(GLEW_GET_FUN(__glewDrawElementsInstancedBaseInstanceEXT)) {
    return GLEW_GET_FUN(__glewDrawElementsInstancedBaseInstanceEXT);
}
// /usr/include/GL/glew.h:9265:9: warning: macro 'glDrawElementsInstancedBaseVertexBaseInstanceEXT' contains a runtime value, translated to function
pub inline fn glDrawElementsInstancedBaseVertexBaseInstanceEXT() @TypeOf(GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertexBaseInstanceEXT)) {
    return GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertexBaseInstanceEXT);
}
// /usr/include/GL/glew.h:9267:9: warning: macro 'GLEW_EXT_base_instance' contains a runtime value, translated to function
pub inline fn GLEW_EXT_base_instance() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_base_instance)) {
    return GLEW_GET_VAR(__GLEW_EXT_base_instance);
}
pub const GL_EXT_bgra = @as(c_int, 1);
pub const GL_BGR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E0, .hex);
// /usr/include/GL/glew.h:9279:9: warning: macro 'GLEW_EXT_bgra' contains a runtime value, translated to function
pub inline fn GLEW_EXT_bgra() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_bgra)) {
    return GLEW_GET_VAR(__GLEW_EXT_bgra);
}
pub const GL_EXT_bindable_uniform = @as(c_int, 1);
pub const GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE2, .hex);
pub const GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE3, .hex);
pub const GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE4, .hex);
pub const GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DED, .hex);
pub const GL_UNIFORM_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DEE, .hex);
pub const GL_UNIFORM_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DEF, .hex);
// /usr/include/GL/glew.h:9299:9: warning: macro 'glGetUniformBufferSizeEXT' contains a runtime value, translated to function
pub inline fn glGetUniformBufferSizeEXT() @TypeOf(GLEW_GET_FUN(__glewGetUniformBufferSizeEXT)) {
    return GLEW_GET_FUN(__glewGetUniformBufferSizeEXT);
}
// /usr/include/GL/glew.h:9300:9: warning: macro 'glGetUniformOffsetEXT' contains a runtime value, translated to function
pub inline fn glGetUniformOffsetEXT() @TypeOf(GLEW_GET_FUN(__glewGetUniformOffsetEXT)) {
    return GLEW_GET_FUN(__glewGetUniformOffsetEXT);
}
// /usr/include/GL/glew.h:9301:9: warning: macro 'glUniformBufferEXT' contains a runtime value, translated to function
pub inline fn glUniformBufferEXT() @TypeOf(GLEW_GET_FUN(__glewUniformBufferEXT)) {
    return GLEW_GET_FUN(__glewUniformBufferEXT);
}
// /usr/include/GL/glew.h:9303:9: warning: macro 'GLEW_EXT_bindable_uniform' contains a runtime value, translated to function
pub inline fn GLEW_EXT_bindable_uniform() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_bindable_uniform)) {
    return GLEW_GET_VAR(__GLEW_EXT_bindable_uniform);
}
pub const GL_EXT_blend_color = @as(c_int, 1);
pub const GL_CONSTANT_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8001, .hex);
pub const GL_ONE_MINUS_CONSTANT_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8002, .hex);
pub const GL_CONSTANT_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8003, .hex);
pub const GL_ONE_MINUS_CONSTANT_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8004, .hex);
pub const GL_BLEND_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8005, .hex);
// /usr/include/GL/glew.h:9320:9: warning: macro 'glBlendColorEXT' contains a runtime value, translated to function
pub inline fn glBlendColorEXT() @TypeOf(GLEW_GET_FUN(__glewBlendColorEXT)) {
    return GLEW_GET_FUN(__glewBlendColorEXT);
}
// /usr/include/GL/glew.h:9322:9: warning: macro 'GLEW_EXT_blend_color' contains a runtime value, translated to function
pub inline fn GLEW_EXT_blend_color() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_blend_color)) {
    return GLEW_GET_VAR(__GLEW_EXT_blend_color);
}
pub const GL_EXT_blend_equation_separate = @as(c_int, 1);
pub const GL_BLEND_EQUATION_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hex);
pub const GL_BLEND_EQUATION_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hex);
// /usr/include/GL/glew.h:9336:9: warning: macro 'glBlendEquationSeparateEXT' contains a runtime value, translated to function
pub inline fn glBlendEquationSeparateEXT() @TypeOf(GLEW_GET_FUN(__glewBlendEquationSeparateEXT)) {
    return GLEW_GET_FUN(__glewBlendEquationSeparateEXT);
}
// /usr/include/GL/glew.h:9338:9: warning: macro 'GLEW_EXT_blend_equation_separate' contains a runtime value, translated to function
pub inline fn GLEW_EXT_blend_equation_separate() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_blend_equation_separate)) {
    return GLEW_GET_VAR(__GLEW_EXT_blend_equation_separate);
}
pub const GL_EXT_blend_func_extended = @as(c_int, 1);
pub const GL_SRC_ALPHA_SATURATE_EXT = @as(c_int, 0x0308);
pub const GL_SRC1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hex);
pub const GL_SRC1_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F9, .hex);
pub const GL_ONE_MINUS_SRC1_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FA, .hex);
pub const GL_ONE_MINUS_SRC1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FB, .hex);
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FC, .hex);
pub const GL_LOCATION_INDEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930F, .hex);
// /usr/include/GL/glew.h:9359:9: warning: macro 'glBindFragDataLocationIndexedEXT' contains a runtime value, translated to function
pub inline fn glBindFragDataLocationIndexedEXT() @TypeOf(GLEW_GET_FUN(__glewBindFragDataLocationIndexedEXT)) {
    return GLEW_GET_FUN(__glewBindFragDataLocationIndexedEXT);
}
// /usr/include/GL/glew.h:9360:9: warning: macro 'glGetFragDataIndexEXT' contains a runtime value, translated to function
pub inline fn glGetFragDataIndexEXT() @TypeOf(GLEW_GET_FUN(__glewGetFragDataIndexEXT)) {
    return GLEW_GET_FUN(__glewGetFragDataIndexEXT);
}
// /usr/include/GL/glew.h:9361:9: warning: macro 'glGetProgramResourceLocationIndexEXT' contains a runtime value, translated to function
pub inline fn glGetProgramResourceLocationIndexEXT() @TypeOf(GLEW_GET_FUN(__glewGetProgramResourceLocationIndexEXT)) {
    return GLEW_GET_FUN(__glewGetProgramResourceLocationIndexEXT);
}
// /usr/include/GL/glew.h:9363:9: warning: macro 'GLEW_EXT_blend_func_extended' contains a runtime value, translated to function
pub inline fn GLEW_EXT_blend_func_extended() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_blend_func_extended)) {
    return GLEW_GET_VAR(__GLEW_EXT_blend_func_extended);
}
pub const GL_EXT_blend_func_separate = @as(c_int, 1);
pub const GL_BLEND_DST_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hex);
pub const GL_BLEND_SRC_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hex);
pub const GL_BLEND_DST_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hex);
pub const GL_BLEND_SRC_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hex);
// /usr/include/GL/glew.h:9379:9: warning: macro 'glBlendFuncSeparateEXT' contains a runtime value, translated to function
pub inline fn glBlendFuncSeparateEXT() @TypeOf(GLEW_GET_FUN(__glewBlendFuncSeparateEXT)) {
    return GLEW_GET_FUN(__glewBlendFuncSeparateEXT);
}
// /usr/include/GL/glew.h:9381:9: warning: macro 'GLEW_EXT_blend_func_separate' contains a runtime value, translated to function
pub inline fn GLEW_EXT_blend_func_separate() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_blend_func_separate)) {
    return GLEW_GET_VAR(__GLEW_EXT_blend_func_separate);
}
pub const GL_EXT_blend_logic_op = @as(c_int, 1);
// /usr/include/GL/glew.h:9390:9: warning: macro 'GLEW_EXT_blend_logic_op' contains a runtime value, translated to function
pub inline fn GLEW_EXT_blend_logic_op() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_blend_logic_op)) {
    return GLEW_GET_VAR(__GLEW_EXT_blend_logic_op);
}
pub const GL_EXT_blend_minmax = @as(c_int, 1);
pub const GL_FUNC_ADD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hex);
pub const GL_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8007, .hex);
pub const GL_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8008, .hex);
pub const GL_BLEND_EQUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hex);
// /usr/include/GL/glew.h:9406:9: warning: macro 'glBlendEquationEXT' contains a runtime value, translated to function
pub inline fn glBlendEquationEXT() @TypeOf(GLEW_GET_FUN(__glewBlendEquationEXT)) {
    return GLEW_GET_FUN(__glewBlendEquationEXT);
}
// /usr/include/GL/glew.h:9408:9: warning: macro 'GLEW_EXT_blend_minmax' contains a runtime value, translated to function
pub inline fn GLEW_EXT_blend_minmax() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_blend_minmax)) {
    return GLEW_GET_VAR(__GLEW_EXT_blend_minmax);
}
pub const GL_EXT_blend_subtract = @as(c_int, 1);
pub const GL_FUNC_SUBTRACT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hex);
pub const GL_FUNC_REVERSE_SUBTRACT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hex);
// /usr/include/GL/glew.h:9420:9: warning: macro 'GLEW_EXT_blend_subtract' contains a runtime value, translated to function
pub inline fn GLEW_EXT_blend_subtract() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_blend_subtract)) {
    return GLEW_GET_VAR(__GLEW_EXT_blend_subtract);
}
pub const GL_EXT_buffer_storage = @as(c_int, 1);
pub const GL_MAP_PERSISTENT_BIT_EXT = @as(c_int, 0x0040);
pub const GL_MAP_COHERENT_BIT_EXT = @as(c_int, 0x0080);
pub const GL_DYNAMIC_STORAGE_BIT_EXT = @as(c_int, 0x0100);
pub const GL_CLIENT_STORAGE_BIT_EXT = @as(c_int, 0x0200);
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = @as(c_int, 0x00004000);
pub const GL_BUFFER_IMMUTABLE_STORAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821F, .hex);
pub const GL_BUFFER_STORAGE_FLAGS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8220, .hex);
// /usr/include/GL/glew.h:9442:9: warning: macro 'glBufferStorageEXT' contains a runtime value, translated to function
pub inline fn glBufferStorageEXT() @TypeOf(GLEW_GET_FUN(__glewBufferStorageEXT)) {
    return GLEW_GET_FUN(__glewBufferStorageEXT);
}
// /usr/include/GL/glew.h:9443:9: warning: macro 'glNamedBufferStorageEXT' contains a runtime value, translated to function
pub inline fn glNamedBufferStorageEXT() @TypeOf(GLEW_GET_FUN(__glewNamedBufferStorageEXT)) {
    return GLEW_GET_FUN(__glewNamedBufferStorageEXT);
}
// /usr/include/GL/glew.h:9445:9: warning: macro 'GLEW_EXT_buffer_storage' contains a runtime value, translated to function
pub inline fn GLEW_EXT_buffer_storage() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_buffer_storage)) {
    return GLEW_GET_VAR(__GLEW_EXT_buffer_storage);
}
pub const GL_EXT_clear_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:9457:9: warning: macro 'glClearTexImageEXT' contains a runtime value, translated to function
pub inline fn glClearTexImageEXT() @TypeOf(GLEW_GET_FUN(__glewClearTexImageEXT)) {
    return GLEW_GET_FUN(__glewClearTexImageEXT);
}
// /usr/include/GL/glew.h:9458:9: warning: macro 'glClearTexSubImageEXT' contains a runtime value, translated to function
pub inline fn glClearTexSubImageEXT() @TypeOf(GLEW_GET_FUN(__glewClearTexSubImageEXT)) {
    return GLEW_GET_FUN(__glewClearTexSubImageEXT);
}
// /usr/include/GL/glew.h:9460:9: warning: macro 'GLEW_EXT_clear_texture' contains a runtime value, translated to function
pub inline fn GLEW_EXT_clear_texture() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_clear_texture)) {
    return GLEW_GET_VAR(__GLEW_EXT_clear_texture);
}
pub const GL_EXT_clip_control = @as(c_int, 1);
pub const GL_LOWER_LEFT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA1, .hex);
pub const GL_UPPER_LEFT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA2, .hex);
pub const GL_CLIP_ORIGIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935C, .hex);
pub const GL_CLIP_DEPTH_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935D, .hex);
pub const GL_NEGATIVE_ONE_TO_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935E, .hex);
pub const GL_ZERO_TO_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935F, .hex);
// /usr/include/GL/glew.h:9478:9: warning: macro 'glClipControlEXT' contains a runtime value, translated to function
pub inline fn glClipControlEXT() @TypeOf(GLEW_GET_FUN(__glewClipControlEXT)) {
    return GLEW_GET_FUN(__glewClipControlEXT);
}
// /usr/include/GL/glew.h:9480:9: warning: macro 'GLEW_EXT_clip_control' contains a runtime value, translated to function
pub inline fn GLEW_EXT_clip_control() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_clip_control)) {
    return GLEW_GET_VAR(__GLEW_EXT_clip_control);
}
pub const GL_EXT_clip_cull_distance = @as(c_int, 1);
pub const GL_MAX_CLIP_DISTANCES_EXT = @as(c_int, 0x0D32);
pub const GL_CLIP_DISTANCE0_EXT = @as(c_int, 0x3000);
pub const GL_CLIP_DISTANCE1_EXT = @as(c_int, 0x3001);
pub const GL_CLIP_DISTANCE2_EXT = @as(c_int, 0x3002);
pub const GL_CLIP_DISTANCE3_EXT = @as(c_int, 0x3003);
pub const GL_CLIP_DISTANCE4_EXT = @as(c_int, 0x3004);
pub const GL_CLIP_DISTANCE5_EXT = @as(c_int, 0x3005);
pub const GL_CLIP_DISTANCE6_EXT = @as(c_int, 0x3006);
pub const GL_CLIP_DISTANCE7_EXT = @as(c_int, 0x3007);
pub const GL_MAX_CULL_DISTANCES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F9, .hex);
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FA, .hex);
// /usr/include/GL/glew.h:9501:9: warning: macro 'GLEW_EXT_clip_cull_distance' contains a runtime value, translated to function
pub inline fn GLEW_EXT_clip_cull_distance() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_clip_cull_distance)) {
    return GLEW_GET_VAR(__GLEW_EXT_clip_cull_distance);
}
pub const GL_EXT_clip_volume_hint = @as(c_int, 1);
pub const GL_CLIP_VOLUME_CLIPPING_HINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80F0, .hex);
// /usr/include/GL/glew.h:9512:9: warning: macro 'GLEW_EXT_clip_volume_hint' contains a runtime value, translated to function
pub inline fn GLEW_EXT_clip_volume_hint() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_clip_volume_hint)) {
    return GLEW_GET_VAR(__GLEW_EXT_clip_volume_hint);
}
pub const GL_EXT_cmyka = @as(c_int, 1);
pub const GL_CMYK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800C, .hex);
pub const GL_CMYKA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800D, .hex);
pub const GL_PACK_CMYK_HINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800E, .hex);
pub const GL_UNPACK_CMYK_HINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800F, .hex);
// /usr/include/GL/glew.h:9526:9: warning: macro 'GLEW_EXT_cmyka' contains a runtime value, translated to function
pub inline fn GLEW_EXT_cmyka() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_cmyka)) {
    return GLEW_GET_VAR(__GLEW_EXT_cmyka);
}
pub const GL_EXT_color_buffer_float = @as(c_int, 1);
// /usr/include/GL/glew.h:9535:9: warning: macro 'GLEW_EXT_color_buffer_float' contains a runtime value, translated to function
pub inline fn GLEW_EXT_color_buffer_float() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_color_buffer_float)) {
    return GLEW_GET_VAR(__GLEW_EXT_color_buffer_float);
}
pub const GL_EXT_color_buffer_half_float = @as(c_int, 1);
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8211, .hex);
pub const GL_R16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822D, .hex);
pub const GL_RG16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822F, .hex);
pub const GL_RGBA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hex);
pub const GL_RGB16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hex);
pub const GL_UNSIGNED_NORMALIZED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C17, .hex);
// /usr/include/GL/glew.h:9551:9: warning: macro 'GLEW_EXT_color_buffer_half_float' contains a runtime value, translated to function
pub inline fn GLEW_EXT_color_buffer_half_float() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_color_buffer_half_float)) {
    return GLEW_GET_VAR(__GLEW_EXT_color_buffer_half_float);
}
pub const GL_EXT_color_subtable = @as(c_int, 1);
// /usr/include/GL/glew.h:9563:9: warning: macro 'glColorSubTableEXT' contains a runtime value, translated to function
pub inline fn glColorSubTableEXT() @TypeOf(GLEW_GET_FUN(__glewColorSubTableEXT)) {
    return GLEW_GET_FUN(__glewColorSubTableEXT);
}
// /usr/include/GL/glew.h:9564:9: warning: macro 'glCopyColorSubTableEXT' contains a runtime value, translated to function
pub inline fn glCopyColorSubTableEXT() @TypeOf(GLEW_GET_FUN(__glewCopyColorSubTableEXT)) {
    return GLEW_GET_FUN(__glewCopyColorSubTableEXT);
}
// /usr/include/GL/glew.h:9566:9: warning: macro 'GLEW_EXT_color_subtable' contains a runtime value, translated to function
pub inline fn GLEW_EXT_color_subtable() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_color_subtable)) {
    return GLEW_GET_VAR(__GLEW_EXT_color_subtable);
}
pub const GL_EXT_compiled_vertex_array = @as(c_int, 1);
pub const GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A8, .hex);
pub const GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A9, .hex);
// /usr/include/GL/glew.h:9581:9: warning: macro 'glLockArraysEXT' contains a runtime value, translated to function
pub inline fn glLockArraysEXT() @TypeOf(GLEW_GET_FUN(__glewLockArraysEXT)) {
    return GLEW_GET_FUN(__glewLockArraysEXT);
}
// /usr/include/GL/glew.h:9582:9: warning: macro 'glUnlockArraysEXT' contains a runtime value, translated to function
pub inline fn glUnlockArraysEXT() @TypeOf(GLEW_GET_FUN(__glewUnlockArraysEXT)) {
    return GLEW_GET_FUN(__glewUnlockArraysEXT);
}
// /usr/include/GL/glew.h:9584:9: warning: macro 'GLEW_EXT_compiled_vertex_array' contains a runtime value, translated to function
pub inline fn GLEW_EXT_compiled_vertex_array() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_compiled_vertex_array)) {
    return GLEW_GET_VAR(__GLEW_EXT_compiled_vertex_array);
}
pub const GL_EXT_compressed_ETC1_RGB8_sub_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:9593:9: warning: macro 'GLEW_EXT_compressed_ETC1_RGB8_sub_texture' contains a runtime value, translated to function
pub inline fn GLEW_EXT_compressed_ETC1_RGB8_sub_texture() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_compressed_ETC1_RGB8_sub_texture)) {
    return GLEW_GET_VAR(__GLEW_EXT_compressed_ETC1_RGB8_sub_texture);
}
pub const GL_EXT_conservative_depth = @as(c_int, 1);
// /usr/include/GL/glew.h:9602:9: warning: macro 'GLEW_EXT_conservative_depth' contains a runtime value, translated to function
pub inline fn GLEW_EXT_conservative_depth() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_conservative_depth)) {
    return GLEW_GET_VAR(__GLEW_EXT_conservative_depth);
}
pub const GL_EXT_convolution = @as(c_int, 1);
pub const GL_CONVOLUTION_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8010, .hex);
pub const GL_CONVOLUTION_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8011, .hex);
pub const GL_SEPARABLE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8012, .hex);
pub const GL_CONVOLUTION_BORDER_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8013, .hex);
pub const GL_CONVOLUTION_FILTER_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8014, .hex);
pub const GL_CONVOLUTION_FILTER_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8015, .hex);
pub const GL_REDUCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8016, .hex);
pub const GL_CONVOLUTION_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8017, .hex);
pub const GL_CONVOLUTION_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8018, .hex);
pub const GL_CONVOLUTION_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8019, .hex);
pub const GL_MAX_CONVOLUTION_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801A, .hex);
pub const GL_MAX_CONVOLUTION_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801B, .hex);
pub const GL_POST_CONVOLUTION_RED_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801C, .hex);
pub const GL_POST_CONVOLUTION_GREEN_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801D, .hex);
pub const GL_POST_CONVOLUTION_BLUE_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801E, .hex);
pub const GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801F, .hex);
pub const GL_POST_CONVOLUTION_RED_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8020, .hex);
pub const GL_POST_CONVOLUTION_GREEN_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8021, .hex);
pub const GL_POST_CONVOLUTION_BLUE_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8022, .hex);
pub const GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8023, .hex);
// /usr/include/GL/glew.h:9646:9: warning: macro 'glConvolutionFilter1DEXT' contains a runtime value, translated to function
pub inline fn glConvolutionFilter1DEXT() @TypeOf(GLEW_GET_FUN(__glewConvolutionFilter1DEXT)) {
    return GLEW_GET_FUN(__glewConvolutionFilter1DEXT);
}
// /usr/include/GL/glew.h:9647:9: warning: macro 'glConvolutionFilter2DEXT' contains a runtime value, translated to function
pub inline fn glConvolutionFilter2DEXT() @TypeOf(GLEW_GET_FUN(__glewConvolutionFilter2DEXT)) {
    return GLEW_GET_FUN(__glewConvolutionFilter2DEXT);
}
// /usr/include/GL/glew.h:9648:9: warning: macro 'glConvolutionParameterfEXT' contains a runtime value, translated to function
pub inline fn glConvolutionParameterfEXT() @TypeOf(GLEW_GET_FUN(__glewConvolutionParameterfEXT)) {
    return GLEW_GET_FUN(__glewConvolutionParameterfEXT);
}
// /usr/include/GL/glew.h:9649:9: warning: macro 'glConvolutionParameterfvEXT' contains a runtime value, translated to function
pub inline fn glConvolutionParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewConvolutionParameterfvEXT)) {
    return GLEW_GET_FUN(__glewConvolutionParameterfvEXT);
}
// /usr/include/GL/glew.h:9650:9: warning: macro 'glConvolutionParameteriEXT' contains a runtime value, translated to function
pub inline fn glConvolutionParameteriEXT() @TypeOf(GLEW_GET_FUN(__glewConvolutionParameteriEXT)) {
    return GLEW_GET_FUN(__glewConvolutionParameteriEXT);
}
// /usr/include/GL/glew.h:9651:9: warning: macro 'glConvolutionParameterivEXT' contains a runtime value, translated to function
pub inline fn glConvolutionParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewConvolutionParameterivEXT)) {
    return GLEW_GET_FUN(__glewConvolutionParameterivEXT);
}
// /usr/include/GL/glew.h:9652:9: warning: macro 'glCopyConvolutionFilter1DEXT' contains a runtime value, translated to function
pub inline fn glCopyConvolutionFilter1DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyConvolutionFilter1DEXT)) {
    return GLEW_GET_FUN(__glewCopyConvolutionFilter1DEXT);
}
// /usr/include/GL/glew.h:9653:9: warning: macro 'glCopyConvolutionFilter2DEXT' contains a runtime value, translated to function
pub inline fn glCopyConvolutionFilter2DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyConvolutionFilter2DEXT)) {
    return GLEW_GET_FUN(__glewCopyConvolutionFilter2DEXT);
}
// /usr/include/GL/glew.h:9654:9: warning: macro 'glGetConvolutionFilterEXT' contains a runtime value, translated to function
pub inline fn glGetConvolutionFilterEXT() @TypeOf(GLEW_GET_FUN(__glewGetConvolutionFilterEXT)) {
    return GLEW_GET_FUN(__glewGetConvolutionFilterEXT);
}
// /usr/include/GL/glew.h:9655:9: warning: macro 'glGetConvolutionParameterfvEXT' contains a runtime value, translated to function
pub inline fn glGetConvolutionParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewGetConvolutionParameterfvEXT)) {
    return GLEW_GET_FUN(__glewGetConvolutionParameterfvEXT);
}
// /usr/include/GL/glew.h:9656:9: warning: macro 'glGetConvolutionParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetConvolutionParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetConvolutionParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetConvolutionParameterivEXT);
}
// /usr/include/GL/glew.h:9657:9: warning: macro 'glGetSeparableFilterEXT' contains a runtime value, translated to function
pub inline fn glGetSeparableFilterEXT() @TypeOf(GLEW_GET_FUN(__glewGetSeparableFilterEXT)) {
    return GLEW_GET_FUN(__glewGetSeparableFilterEXT);
}
// /usr/include/GL/glew.h:9658:9: warning: macro 'glSeparableFilter2DEXT' contains a runtime value, translated to function
pub inline fn glSeparableFilter2DEXT() @TypeOf(GLEW_GET_FUN(__glewSeparableFilter2DEXT)) {
    return GLEW_GET_FUN(__glewSeparableFilter2DEXT);
}
// /usr/include/GL/glew.h:9660:9: warning: macro 'GLEW_EXT_convolution' contains a runtime value, translated to function
pub inline fn GLEW_EXT_convolution() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_convolution)) {
    return GLEW_GET_VAR(__GLEW_EXT_convolution);
}
pub const GL_EXT_coordinate_frame = @as(c_int, 1);
pub const GL_TANGENT_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8439, .hex);
pub const GL_BINORMAL_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843A, .hex);
pub const GL_CURRENT_TANGENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843B, .hex);
pub const GL_CURRENT_BINORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843C, .hex);
pub const GL_TANGENT_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843E, .hex);
pub const GL_TANGENT_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843F, .hex);
pub const GL_BINORMAL_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8440, .hex);
pub const GL_BINORMAL_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8441, .hex);
pub const GL_TANGENT_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8442, .hex);
pub const GL_BINORMAL_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8443, .hex);
pub const GL_MAP1_TANGENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8444, .hex);
pub const GL_MAP2_TANGENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8445, .hex);
pub const GL_MAP1_BINORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8446, .hex);
pub const GL_MAP2_BINORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8447, .hex);
// /usr/include/GL/glew.h:9687:9: warning: macro 'glBinormalPointerEXT' contains a runtime value, translated to function
pub inline fn glBinormalPointerEXT() @TypeOf(GLEW_GET_FUN(__glewBinormalPointerEXT)) {
    return GLEW_GET_FUN(__glewBinormalPointerEXT);
}
// /usr/include/GL/glew.h:9688:9: warning: macro 'glTangentPointerEXT' contains a runtime value, translated to function
pub inline fn glTangentPointerEXT() @TypeOf(GLEW_GET_FUN(__glewTangentPointerEXT)) {
    return GLEW_GET_FUN(__glewTangentPointerEXT);
}
// /usr/include/GL/glew.h:9690:9: warning: macro 'GLEW_EXT_coordinate_frame' contains a runtime value, translated to function
pub inline fn GLEW_EXT_coordinate_frame() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_coordinate_frame)) {
    return GLEW_GET_VAR(__GLEW_EXT_coordinate_frame);
}
pub const GL_EXT_copy_image = @as(c_int, 1);
// /usr/include/GL/glew.h:9701:9: warning: macro 'glCopyImageSubDataEXT' contains a runtime value, translated to function
pub inline fn glCopyImageSubDataEXT() @TypeOf(GLEW_GET_FUN(__glewCopyImageSubDataEXT)) {
    return GLEW_GET_FUN(__glewCopyImageSubDataEXT);
}
// /usr/include/GL/glew.h:9703:9: warning: macro 'GLEW_EXT_copy_image' contains a runtime value, translated to function
pub inline fn GLEW_EXT_copy_image() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_copy_image)) {
    return GLEW_GET_VAR(__GLEW_EXT_copy_image);
}
pub const GL_EXT_copy_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:9718:9: warning: macro 'glCopyTexImage1DEXT' contains a runtime value, translated to function
pub inline fn glCopyTexImage1DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyTexImage1DEXT)) {
    return GLEW_GET_FUN(__glewCopyTexImage1DEXT);
}
// /usr/include/GL/glew.h:9719:9: warning: macro 'glCopyTexImage2DEXT' contains a runtime value, translated to function
pub inline fn glCopyTexImage2DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyTexImage2DEXT)) {
    return GLEW_GET_FUN(__glewCopyTexImage2DEXT);
}
// /usr/include/GL/glew.h:9720:9: warning: macro 'glCopyTexSubImage1DEXT' contains a runtime value, translated to function
pub inline fn glCopyTexSubImage1DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyTexSubImage1DEXT)) {
    return GLEW_GET_FUN(__glewCopyTexSubImage1DEXT);
}
// /usr/include/GL/glew.h:9721:9: warning: macro 'glCopyTexSubImage2DEXT' contains a runtime value, translated to function
pub inline fn glCopyTexSubImage2DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyTexSubImage2DEXT)) {
    return GLEW_GET_FUN(__glewCopyTexSubImage2DEXT);
}
// /usr/include/GL/glew.h:9722:9: warning: macro 'glCopyTexSubImage3DEXT' contains a runtime value, translated to function
pub inline fn glCopyTexSubImage3DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyTexSubImage3DEXT)) {
    return GLEW_GET_FUN(__glewCopyTexSubImage3DEXT);
}
// /usr/include/GL/glew.h:9724:9: warning: macro 'GLEW_EXT_copy_texture' contains a runtime value, translated to function
pub inline fn GLEW_EXT_copy_texture() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_copy_texture)) {
    return GLEW_GET_VAR(__GLEW_EXT_copy_texture);
}
pub const GL_EXT_cull_vertex = @as(c_int, 1);
pub const GL_CULL_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AA, .hex);
pub const GL_CULL_VERTEX_EYE_POSITION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AB, .hex);
pub const GL_CULL_VERTEX_OBJECT_POSITION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AC, .hex);
// /usr/include/GL/glew.h:9740:9: warning: macro 'glCullParameterdvEXT' contains a runtime value, translated to function
pub inline fn glCullParameterdvEXT() @TypeOf(GLEW_GET_FUN(__glewCullParameterdvEXT)) {
    return GLEW_GET_FUN(__glewCullParameterdvEXT);
}
// /usr/include/GL/glew.h:9741:9: warning: macro 'glCullParameterfvEXT' contains a runtime value, translated to function
pub inline fn glCullParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewCullParameterfvEXT)) {
    return GLEW_GET_FUN(__glewCullParameterfvEXT);
}
// /usr/include/GL/glew.h:9743:9: warning: macro 'GLEW_EXT_cull_vertex' contains a runtime value, translated to function
pub inline fn GLEW_EXT_cull_vertex() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_cull_vertex)) {
    return GLEW_GET_VAR(__GLEW_EXT_cull_vertex);
}
pub const GL_EXT_debug_label = @as(c_int, 1);
pub const GL_PROGRAM_PIPELINE_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A4F, .hex);
pub const GL_PROGRAM_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B40, .hex);
pub const GL_SHADER_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B48, .hex);
pub const GL_BUFFER_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9151, .hex);
pub const GL_QUERY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9153, .hex);
pub const GL_VERTEX_ARRAY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9154, .hex);
// /usr/include/GL/glew.h:9762:9: warning: macro 'glGetObjectLabelEXT' contains a runtime value, translated to function
pub inline fn glGetObjectLabelEXT() @TypeOf(GLEW_GET_FUN(__glewGetObjectLabelEXT)) {
    return GLEW_GET_FUN(__glewGetObjectLabelEXT);
}
// /usr/include/GL/glew.h:9763:9: warning: macro 'glLabelObjectEXT' contains a runtime value, translated to function
pub inline fn glLabelObjectEXT() @TypeOf(GLEW_GET_FUN(__glewLabelObjectEXT)) {
    return GLEW_GET_FUN(__glewLabelObjectEXT);
}
// /usr/include/GL/glew.h:9765:9: warning: macro 'GLEW_EXT_debug_label' contains a runtime value, translated to function
pub inline fn GLEW_EXT_debug_label() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_debug_label)) {
    return GLEW_GET_VAR(__GLEW_EXT_debug_label);
}
pub const GL_EXT_debug_marker = @as(c_int, 1);
// /usr/include/GL/glew.h:9778:9: warning: macro 'glInsertEventMarkerEXT' contains a runtime value, translated to function
pub inline fn glInsertEventMarkerEXT() @TypeOf(GLEW_GET_FUN(__glewInsertEventMarkerEXT)) {
    return GLEW_GET_FUN(__glewInsertEventMarkerEXT);
}
// /usr/include/GL/glew.h:9779:9: warning: macro 'glPopGroupMarkerEXT' contains a runtime value, translated to function
pub inline fn glPopGroupMarkerEXT() @TypeOf(GLEW_GET_FUN(__glewPopGroupMarkerEXT)) {
    return GLEW_GET_FUN(__glewPopGroupMarkerEXT);
}
// /usr/include/GL/glew.h:9780:9: warning: macro 'glPushGroupMarkerEXT' contains a runtime value, translated to function
pub inline fn glPushGroupMarkerEXT() @TypeOf(GLEW_GET_FUN(__glewPushGroupMarkerEXT)) {
    return GLEW_GET_FUN(__glewPushGroupMarkerEXT);
}
// /usr/include/GL/glew.h:9782:9: warning: macro 'GLEW_EXT_debug_marker' contains a runtime value, translated to function
pub inline fn GLEW_EXT_debug_marker() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_debug_marker)) {
    return GLEW_GET_VAR(__GLEW_EXT_debug_marker);
}
pub const GL_EXT_depth_bounds_test = @as(c_int, 1);
pub const GL_DEPTH_BOUNDS_TEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8890, .hex);
pub const GL_DEPTH_BOUNDS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8891, .hex);
// /usr/include/GL/glew.h:9796:9: warning: macro 'glDepthBoundsEXT' contains a runtime value, translated to function
pub inline fn glDepthBoundsEXT() @TypeOf(GLEW_GET_FUN(__glewDepthBoundsEXT)) {
    return GLEW_GET_FUN(__glewDepthBoundsEXT);
}
// /usr/include/GL/glew.h:9798:9: warning: macro 'GLEW_EXT_depth_bounds_test' contains a runtime value, translated to function
pub inline fn GLEW_EXT_depth_bounds_test() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_depth_bounds_test)) {
    return GLEW_GET_VAR(__GLEW_EXT_depth_bounds_test);
}
pub const GL_EXT_depth_clamp = @as(c_int, 1);
pub const GL_DEPTH_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864F, .hex);
// /usr/include/GL/glew.h:9809:9: warning: macro 'GLEW_EXT_depth_clamp' contains a runtime value, translated to function
pub inline fn GLEW_EXT_depth_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_depth_clamp)) {
    return GLEW_GET_VAR(__GLEW_EXT_depth_clamp);
}
pub const GL_EXT_direct_state_access = @as(c_int, 1);
pub const GL_PROGRAM_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2D, .hex);
pub const GL_TRANSPOSE_PROGRAM_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2E, .hex);
pub const GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2F, .hex);
// /usr/include/GL/glew.h:10037:9: warning: macro 'glBindMultiTextureEXT' contains a runtime value, translated to function
pub inline fn glBindMultiTextureEXT() @TypeOf(GLEW_GET_FUN(__glewBindMultiTextureEXT)) {
    return GLEW_GET_FUN(__glewBindMultiTextureEXT);
}
// /usr/include/GL/glew.h:10038:9: warning: macro 'glCheckNamedFramebufferStatusEXT' contains a runtime value, translated to function
pub inline fn glCheckNamedFramebufferStatusEXT() @TypeOf(GLEW_GET_FUN(__glewCheckNamedFramebufferStatusEXT)) {
    return GLEW_GET_FUN(__glewCheckNamedFramebufferStatusEXT);
}
// /usr/include/GL/glew.h:10039:9: warning: macro 'glClientAttribDefaultEXT' contains a runtime value, translated to function
pub inline fn glClientAttribDefaultEXT() @TypeOf(GLEW_GET_FUN(__glewClientAttribDefaultEXT)) {
    return GLEW_GET_FUN(__glewClientAttribDefaultEXT);
}
// /usr/include/GL/glew.h:10040:9: warning: macro 'glCompressedMultiTexImage1DEXT' contains a runtime value, translated to function
pub inline fn glCompressedMultiTexImage1DEXT() @TypeOf(GLEW_GET_FUN(__glewCompressedMultiTexImage1DEXT)) {
    return GLEW_GET_FUN(__glewCompressedMultiTexImage1DEXT);
}
// /usr/include/GL/glew.h:10041:9: warning: macro 'glCompressedMultiTexImage2DEXT' contains a runtime value, translated to function
pub inline fn glCompressedMultiTexImage2DEXT() @TypeOf(GLEW_GET_FUN(__glewCompressedMultiTexImage2DEXT)) {
    return GLEW_GET_FUN(__glewCompressedMultiTexImage2DEXT);
}
// /usr/include/GL/glew.h:10042:9: warning: macro 'glCompressedMultiTexImage3DEXT' contains a runtime value, translated to function
pub inline fn glCompressedMultiTexImage3DEXT() @TypeOf(GLEW_GET_FUN(__glewCompressedMultiTexImage3DEXT)) {
    return GLEW_GET_FUN(__glewCompressedMultiTexImage3DEXT);
}
// /usr/include/GL/glew.h:10043:9: warning: macro 'glCompressedMultiTexSubImage1DEXT' contains a runtime value, translated to function
pub inline fn glCompressedMultiTexSubImage1DEXT() @TypeOf(GLEW_GET_FUN(__glewCompressedMultiTexSubImage1DEXT)) {
    return GLEW_GET_FUN(__glewCompressedMultiTexSubImage1DEXT);
}
// /usr/include/GL/glew.h:10044:9: warning: macro 'glCompressedMultiTexSubImage2DEXT' contains a runtime value, translated to function
pub inline fn glCompressedMultiTexSubImage2DEXT() @TypeOf(GLEW_GET_FUN(__glewCompressedMultiTexSubImage2DEXT)) {
    return GLEW_GET_FUN(__glewCompressedMultiTexSubImage2DEXT);
}
// /usr/include/GL/glew.h:10045:9: warning: macro 'glCompressedMultiTexSubImage3DEXT' contains a runtime value, translated to function
pub inline fn glCompressedMultiTexSubImage3DEXT() @TypeOf(GLEW_GET_FUN(__glewCompressedMultiTexSubImage3DEXT)) {
    return GLEW_GET_FUN(__glewCompressedMultiTexSubImage3DEXT);
}
// /usr/include/GL/glew.h:10046:9: warning: macro 'glCompressedTextureImage1DEXT' contains a runtime value, translated to function
pub inline fn glCompressedTextureImage1DEXT() @TypeOf(GLEW_GET_FUN(__glewCompressedTextureImage1DEXT)) {
    return GLEW_GET_FUN(__glewCompressedTextureImage1DEXT);
}
// /usr/include/GL/glew.h:10047:9: warning: macro 'glCompressedTextureImage2DEXT' contains a runtime value, translated to function
pub inline fn glCompressedTextureImage2DEXT() @TypeOf(GLEW_GET_FUN(__glewCompressedTextureImage2DEXT)) {
    return GLEW_GET_FUN(__glewCompressedTextureImage2DEXT);
}
// /usr/include/GL/glew.h:10048:9: warning: macro 'glCompressedTextureImage3DEXT' contains a runtime value, translated to function
pub inline fn glCompressedTextureImage3DEXT() @TypeOf(GLEW_GET_FUN(__glewCompressedTextureImage3DEXT)) {
    return GLEW_GET_FUN(__glewCompressedTextureImage3DEXT);
}
// /usr/include/GL/glew.h:10049:9: warning: macro 'glCompressedTextureSubImage1DEXT' contains a runtime value, translated to function
pub inline fn glCompressedTextureSubImage1DEXT() @TypeOf(GLEW_GET_FUN(__glewCompressedTextureSubImage1DEXT)) {
    return GLEW_GET_FUN(__glewCompressedTextureSubImage1DEXT);
}
// /usr/include/GL/glew.h:10050:9: warning: macro 'glCompressedTextureSubImage2DEXT' contains a runtime value, translated to function
pub inline fn glCompressedTextureSubImage2DEXT() @TypeOf(GLEW_GET_FUN(__glewCompressedTextureSubImage2DEXT)) {
    return GLEW_GET_FUN(__glewCompressedTextureSubImage2DEXT);
}
// /usr/include/GL/glew.h:10051:9: warning: macro 'glCompressedTextureSubImage3DEXT' contains a runtime value, translated to function
pub inline fn glCompressedTextureSubImage3DEXT() @TypeOf(GLEW_GET_FUN(__glewCompressedTextureSubImage3DEXT)) {
    return GLEW_GET_FUN(__glewCompressedTextureSubImage3DEXT);
}
// /usr/include/GL/glew.h:10052:9: warning: macro 'glCopyMultiTexImage1DEXT' contains a runtime value, translated to function
pub inline fn glCopyMultiTexImage1DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyMultiTexImage1DEXT)) {
    return GLEW_GET_FUN(__glewCopyMultiTexImage1DEXT);
}
// /usr/include/GL/glew.h:10053:9: warning: macro 'glCopyMultiTexImage2DEXT' contains a runtime value, translated to function
pub inline fn glCopyMultiTexImage2DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyMultiTexImage2DEXT)) {
    return GLEW_GET_FUN(__glewCopyMultiTexImage2DEXT);
}
// /usr/include/GL/glew.h:10054:9: warning: macro 'glCopyMultiTexSubImage1DEXT' contains a runtime value, translated to function
pub inline fn glCopyMultiTexSubImage1DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyMultiTexSubImage1DEXT)) {
    return GLEW_GET_FUN(__glewCopyMultiTexSubImage1DEXT);
}
// /usr/include/GL/glew.h:10055:9: warning: macro 'glCopyMultiTexSubImage2DEXT' contains a runtime value, translated to function
pub inline fn glCopyMultiTexSubImage2DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyMultiTexSubImage2DEXT)) {
    return GLEW_GET_FUN(__glewCopyMultiTexSubImage2DEXT);
}
// /usr/include/GL/glew.h:10056:9: warning: macro 'glCopyMultiTexSubImage3DEXT' contains a runtime value, translated to function
pub inline fn glCopyMultiTexSubImage3DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyMultiTexSubImage3DEXT)) {
    return GLEW_GET_FUN(__glewCopyMultiTexSubImage3DEXT);
}
// /usr/include/GL/glew.h:10057:9: warning: macro 'glCopyTextureImage1DEXT' contains a runtime value, translated to function
pub inline fn glCopyTextureImage1DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyTextureImage1DEXT)) {
    return GLEW_GET_FUN(__glewCopyTextureImage1DEXT);
}
// /usr/include/GL/glew.h:10058:9: warning: macro 'glCopyTextureImage2DEXT' contains a runtime value, translated to function
pub inline fn glCopyTextureImage2DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyTextureImage2DEXT)) {
    return GLEW_GET_FUN(__glewCopyTextureImage2DEXT);
}
// /usr/include/GL/glew.h:10059:9: warning: macro 'glCopyTextureSubImage1DEXT' contains a runtime value, translated to function
pub inline fn glCopyTextureSubImage1DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyTextureSubImage1DEXT)) {
    return GLEW_GET_FUN(__glewCopyTextureSubImage1DEXT);
}
// /usr/include/GL/glew.h:10060:9: warning: macro 'glCopyTextureSubImage2DEXT' contains a runtime value, translated to function
pub inline fn glCopyTextureSubImage2DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyTextureSubImage2DEXT)) {
    return GLEW_GET_FUN(__glewCopyTextureSubImage2DEXT);
}
// /usr/include/GL/glew.h:10061:9: warning: macro 'glCopyTextureSubImage3DEXT' contains a runtime value, translated to function
pub inline fn glCopyTextureSubImage3DEXT() @TypeOf(GLEW_GET_FUN(__glewCopyTextureSubImage3DEXT)) {
    return GLEW_GET_FUN(__glewCopyTextureSubImage3DEXT);
}
// /usr/include/GL/glew.h:10062:9: warning: macro 'glDisableClientStateIndexedEXT' contains a runtime value, translated to function
pub inline fn glDisableClientStateIndexedEXT() @TypeOf(GLEW_GET_FUN(__glewDisableClientStateIndexedEXT)) {
    return GLEW_GET_FUN(__glewDisableClientStateIndexedEXT);
}
// /usr/include/GL/glew.h:10063:9: warning: macro 'glDisableClientStateiEXT' contains a runtime value, translated to function
pub inline fn glDisableClientStateiEXT() @TypeOf(GLEW_GET_FUN(__glewDisableClientStateiEXT)) {
    return GLEW_GET_FUN(__glewDisableClientStateiEXT);
}
// /usr/include/GL/glew.h:10064:9: warning: macro 'glDisableVertexArrayAttribEXT' contains a runtime value, translated to function
pub inline fn glDisableVertexArrayAttribEXT() @TypeOf(GLEW_GET_FUN(__glewDisableVertexArrayAttribEXT)) {
    return GLEW_GET_FUN(__glewDisableVertexArrayAttribEXT);
}
// /usr/include/GL/glew.h:10065:9: warning: macro 'glDisableVertexArrayEXT' contains a runtime value, translated to function
pub inline fn glDisableVertexArrayEXT() @TypeOf(GLEW_GET_FUN(__glewDisableVertexArrayEXT)) {
    return GLEW_GET_FUN(__glewDisableVertexArrayEXT);
}
// /usr/include/GL/glew.h:10066:9: warning: macro 'glEnableClientStateIndexedEXT' contains a runtime value, translated to function
pub inline fn glEnableClientStateIndexedEXT() @TypeOf(GLEW_GET_FUN(__glewEnableClientStateIndexedEXT)) {
    return GLEW_GET_FUN(__glewEnableClientStateIndexedEXT);
}
// /usr/include/GL/glew.h:10067:9: warning: macro 'glEnableClientStateiEXT' contains a runtime value, translated to function
pub inline fn glEnableClientStateiEXT() @TypeOf(GLEW_GET_FUN(__glewEnableClientStateiEXT)) {
    return GLEW_GET_FUN(__glewEnableClientStateiEXT);
}
// /usr/include/GL/glew.h:10068:9: warning: macro 'glEnableVertexArrayAttribEXT' contains a runtime value, translated to function
pub inline fn glEnableVertexArrayAttribEXT() @TypeOf(GLEW_GET_FUN(__glewEnableVertexArrayAttribEXT)) {
    return GLEW_GET_FUN(__glewEnableVertexArrayAttribEXT);
}
// /usr/include/GL/glew.h:10069:9: warning: macro 'glEnableVertexArrayEXT' contains a runtime value, translated to function
pub inline fn glEnableVertexArrayEXT() @TypeOf(GLEW_GET_FUN(__glewEnableVertexArrayEXT)) {
    return GLEW_GET_FUN(__glewEnableVertexArrayEXT);
}
// /usr/include/GL/glew.h:10070:9: warning: macro 'glFlushMappedNamedBufferRangeEXT' contains a runtime value, translated to function
pub inline fn glFlushMappedNamedBufferRangeEXT() @TypeOf(GLEW_GET_FUN(__glewFlushMappedNamedBufferRangeEXT)) {
    return GLEW_GET_FUN(__glewFlushMappedNamedBufferRangeEXT);
}
// /usr/include/GL/glew.h:10071:9: warning: macro 'glFramebufferDrawBufferEXT' contains a runtime value, translated to function
pub inline fn glFramebufferDrawBufferEXT() @TypeOf(GLEW_GET_FUN(__glewFramebufferDrawBufferEXT)) {
    return GLEW_GET_FUN(__glewFramebufferDrawBufferEXT);
}
// /usr/include/GL/glew.h:10072:9: warning: macro 'glFramebufferDrawBuffersEXT' contains a runtime value, translated to function
pub inline fn glFramebufferDrawBuffersEXT() @TypeOf(GLEW_GET_FUN(__glewFramebufferDrawBuffersEXT)) {
    return GLEW_GET_FUN(__glewFramebufferDrawBuffersEXT);
}
// /usr/include/GL/glew.h:10073:9: warning: macro 'glFramebufferReadBufferEXT' contains a runtime value, translated to function
pub inline fn glFramebufferReadBufferEXT() @TypeOf(GLEW_GET_FUN(__glewFramebufferReadBufferEXT)) {
    return GLEW_GET_FUN(__glewFramebufferReadBufferEXT);
}
// /usr/include/GL/glew.h:10074:9: warning: macro 'glGenerateMultiTexMipmapEXT' contains a runtime value, translated to function
pub inline fn glGenerateMultiTexMipmapEXT() @TypeOf(GLEW_GET_FUN(__glewGenerateMultiTexMipmapEXT)) {
    return GLEW_GET_FUN(__glewGenerateMultiTexMipmapEXT);
}
// /usr/include/GL/glew.h:10075:9: warning: macro 'glGenerateTextureMipmapEXT' contains a runtime value, translated to function
pub inline fn glGenerateTextureMipmapEXT() @TypeOf(GLEW_GET_FUN(__glewGenerateTextureMipmapEXT)) {
    return GLEW_GET_FUN(__glewGenerateTextureMipmapEXT);
}
// /usr/include/GL/glew.h:10076:9: warning: macro 'glGetCompressedMultiTexImageEXT' contains a runtime value, translated to function
pub inline fn glGetCompressedMultiTexImageEXT() @TypeOf(GLEW_GET_FUN(__glewGetCompressedMultiTexImageEXT)) {
    return GLEW_GET_FUN(__glewGetCompressedMultiTexImageEXT);
}
// /usr/include/GL/glew.h:10077:9: warning: macro 'glGetCompressedTextureImageEXT' contains a runtime value, translated to function
pub inline fn glGetCompressedTextureImageEXT() @TypeOf(GLEW_GET_FUN(__glewGetCompressedTextureImageEXT)) {
    return GLEW_GET_FUN(__glewGetCompressedTextureImageEXT);
}
// /usr/include/GL/glew.h:10078:9: warning: macro 'glGetDoubleIndexedvEXT' contains a runtime value, translated to function
pub inline fn glGetDoubleIndexedvEXT() @TypeOf(GLEW_GET_FUN(__glewGetDoubleIndexedvEXT)) {
    return GLEW_GET_FUN(__glewGetDoubleIndexedvEXT);
}
// /usr/include/GL/glew.h:10079:9: warning: macro 'glGetDoublei_vEXT' contains a runtime value, translated to function
pub inline fn glGetDoublei_vEXT() @TypeOf(GLEW_GET_FUN(__glewGetDoublei_vEXT)) {
    return GLEW_GET_FUN(__glewGetDoublei_vEXT);
}
// /usr/include/GL/glew.h:10080:9: warning: macro 'glGetFloatIndexedvEXT' contains a runtime value, translated to function
pub inline fn glGetFloatIndexedvEXT() @TypeOf(GLEW_GET_FUN(__glewGetFloatIndexedvEXT)) {
    return GLEW_GET_FUN(__glewGetFloatIndexedvEXT);
}
// /usr/include/GL/glew.h:10081:9: warning: macro 'glGetFloati_vEXT' contains a runtime value, translated to function
pub inline fn glGetFloati_vEXT() @TypeOf(GLEW_GET_FUN(__glewGetFloati_vEXT)) {
    return GLEW_GET_FUN(__glewGetFloati_vEXT);
}
// /usr/include/GL/glew.h:10082:9: warning: macro 'glGetFramebufferParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetFramebufferParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetFramebufferParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetFramebufferParameterivEXT);
}
// /usr/include/GL/glew.h:10083:9: warning: macro 'glGetMultiTexEnvfvEXT' contains a runtime value, translated to function
pub inline fn glGetMultiTexEnvfvEXT() @TypeOf(GLEW_GET_FUN(__glewGetMultiTexEnvfvEXT)) {
    return GLEW_GET_FUN(__glewGetMultiTexEnvfvEXT);
}
// /usr/include/GL/glew.h:10084:9: warning: macro 'glGetMultiTexEnvivEXT' contains a runtime value, translated to function
pub inline fn glGetMultiTexEnvivEXT() @TypeOf(GLEW_GET_FUN(__glewGetMultiTexEnvivEXT)) {
    return GLEW_GET_FUN(__glewGetMultiTexEnvivEXT);
}
// /usr/include/GL/glew.h:10085:9: warning: macro 'glGetMultiTexGendvEXT' contains a runtime value, translated to function
pub inline fn glGetMultiTexGendvEXT() @TypeOf(GLEW_GET_FUN(__glewGetMultiTexGendvEXT)) {
    return GLEW_GET_FUN(__glewGetMultiTexGendvEXT);
}
// /usr/include/GL/glew.h:10086:9: warning: macro 'glGetMultiTexGenfvEXT' contains a runtime value, translated to function
pub inline fn glGetMultiTexGenfvEXT() @TypeOf(GLEW_GET_FUN(__glewGetMultiTexGenfvEXT)) {
    return GLEW_GET_FUN(__glewGetMultiTexGenfvEXT);
}
// /usr/include/GL/glew.h:10087:9: warning: macro 'glGetMultiTexGenivEXT' contains a runtime value, translated to function
pub inline fn glGetMultiTexGenivEXT() @TypeOf(GLEW_GET_FUN(__glewGetMultiTexGenivEXT)) {
    return GLEW_GET_FUN(__glewGetMultiTexGenivEXT);
}
// /usr/include/GL/glew.h:10088:9: warning: macro 'glGetMultiTexImageEXT' contains a runtime value, translated to function
pub inline fn glGetMultiTexImageEXT() @TypeOf(GLEW_GET_FUN(__glewGetMultiTexImageEXT)) {
    return GLEW_GET_FUN(__glewGetMultiTexImageEXT);
}
// /usr/include/GL/glew.h:10089:9: warning: macro 'glGetMultiTexLevelParameterfvEXT' contains a runtime value, translated to function
pub inline fn glGetMultiTexLevelParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewGetMultiTexLevelParameterfvEXT)) {
    return GLEW_GET_FUN(__glewGetMultiTexLevelParameterfvEXT);
}
// /usr/include/GL/glew.h:10090:9: warning: macro 'glGetMultiTexLevelParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetMultiTexLevelParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetMultiTexLevelParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetMultiTexLevelParameterivEXT);
}
// /usr/include/GL/glew.h:10091:9: warning: macro 'glGetMultiTexParameterIivEXT' contains a runtime value, translated to function
pub inline fn glGetMultiTexParameterIivEXT() @TypeOf(GLEW_GET_FUN(__glewGetMultiTexParameterIivEXT)) {
    return GLEW_GET_FUN(__glewGetMultiTexParameterIivEXT);
}
// /usr/include/GL/glew.h:10092:9: warning: macro 'glGetMultiTexParameterIuivEXT' contains a runtime value, translated to function
pub inline fn glGetMultiTexParameterIuivEXT() @TypeOf(GLEW_GET_FUN(__glewGetMultiTexParameterIuivEXT)) {
    return GLEW_GET_FUN(__glewGetMultiTexParameterIuivEXT);
}
// /usr/include/GL/glew.h:10093:9: warning: macro 'glGetMultiTexParameterfvEXT' contains a runtime value, translated to function
pub inline fn glGetMultiTexParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewGetMultiTexParameterfvEXT)) {
    return GLEW_GET_FUN(__glewGetMultiTexParameterfvEXT);
}
// /usr/include/GL/glew.h:10094:9: warning: macro 'glGetMultiTexParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetMultiTexParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetMultiTexParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetMultiTexParameterivEXT);
}
// /usr/include/GL/glew.h:10095:9: warning: macro 'glGetNamedBufferParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetNamedBufferParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetNamedBufferParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetNamedBufferParameterivEXT);
}
// /usr/include/GL/glew.h:10096:9: warning: macro 'glGetNamedBufferPointervEXT' contains a runtime value, translated to function
pub inline fn glGetNamedBufferPointervEXT() @TypeOf(GLEW_GET_FUN(__glewGetNamedBufferPointervEXT)) {
    return GLEW_GET_FUN(__glewGetNamedBufferPointervEXT);
}
// /usr/include/GL/glew.h:10097:9: warning: macro 'glGetNamedBufferSubDataEXT' contains a runtime value, translated to function
pub inline fn glGetNamedBufferSubDataEXT() @TypeOf(GLEW_GET_FUN(__glewGetNamedBufferSubDataEXT)) {
    return GLEW_GET_FUN(__glewGetNamedBufferSubDataEXT);
}
// /usr/include/GL/glew.h:10098:9: warning: macro 'glGetNamedFramebufferAttachmentParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetNamedFramebufferAttachmentParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetNamedFramebufferAttachmentParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetNamedFramebufferAttachmentParameterivEXT);
}
// /usr/include/GL/glew.h:10099:9: warning: macro 'glGetNamedProgramLocalParameterIivEXT' contains a runtime value, translated to function
pub inline fn glGetNamedProgramLocalParameterIivEXT() @TypeOf(GLEW_GET_FUN(__glewGetNamedProgramLocalParameterIivEXT)) {
    return GLEW_GET_FUN(__glewGetNamedProgramLocalParameterIivEXT);
}
// /usr/include/GL/glew.h:10100:9: warning: macro 'glGetNamedProgramLocalParameterIuivEXT' contains a runtime value, translated to function
pub inline fn glGetNamedProgramLocalParameterIuivEXT() @TypeOf(GLEW_GET_FUN(__glewGetNamedProgramLocalParameterIuivEXT)) {
    return GLEW_GET_FUN(__glewGetNamedProgramLocalParameterIuivEXT);
}
// /usr/include/GL/glew.h:10101:9: warning: macro 'glGetNamedProgramLocalParameterdvEXT' contains a runtime value, translated to function
pub inline fn glGetNamedProgramLocalParameterdvEXT() @TypeOf(GLEW_GET_FUN(__glewGetNamedProgramLocalParameterdvEXT)) {
    return GLEW_GET_FUN(__glewGetNamedProgramLocalParameterdvEXT);
}
// /usr/include/GL/glew.h:10102:9: warning: macro 'glGetNamedProgramLocalParameterfvEXT' contains a runtime value, translated to function
pub inline fn glGetNamedProgramLocalParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewGetNamedProgramLocalParameterfvEXT)) {
    return GLEW_GET_FUN(__glewGetNamedProgramLocalParameterfvEXT);
}
// /usr/include/GL/glew.h:10103:9: warning: macro 'glGetNamedProgramStringEXT' contains a runtime value, translated to function
pub inline fn glGetNamedProgramStringEXT() @TypeOf(GLEW_GET_FUN(__glewGetNamedProgramStringEXT)) {
    return GLEW_GET_FUN(__glewGetNamedProgramStringEXT);
}
// /usr/include/GL/glew.h:10104:9: warning: macro 'glGetNamedProgramivEXT' contains a runtime value, translated to function
pub inline fn glGetNamedProgramivEXT() @TypeOf(GLEW_GET_FUN(__glewGetNamedProgramivEXT)) {
    return GLEW_GET_FUN(__glewGetNamedProgramivEXT);
}
// /usr/include/GL/glew.h:10105:9: warning: macro 'glGetNamedRenderbufferParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetNamedRenderbufferParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetNamedRenderbufferParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetNamedRenderbufferParameterivEXT);
}
// /usr/include/GL/glew.h:10106:9: warning: macro 'glGetPointerIndexedvEXT' contains a runtime value, translated to function
pub inline fn glGetPointerIndexedvEXT() @TypeOf(GLEW_GET_FUN(__glewGetPointerIndexedvEXT)) {
    return GLEW_GET_FUN(__glewGetPointerIndexedvEXT);
}
// /usr/include/GL/glew.h:10107:9: warning: macro 'glGetPointeri_vEXT' contains a runtime value, translated to function
pub inline fn glGetPointeri_vEXT() @TypeOf(GLEW_GET_FUN(__glewGetPointeri_vEXT)) {
    return GLEW_GET_FUN(__glewGetPointeri_vEXT);
}
// /usr/include/GL/glew.h:10108:9: warning: macro 'glGetTextureImageEXT' contains a runtime value, translated to function
pub inline fn glGetTextureImageEXT() @TypeOf(GLEW_GET_FUN(__glewGetTextureImageEXT)) {
    return GLEW_GET_FUN(__glewGetTextureImageEXT);
}
// /usr/include/GL/glew.h:10109:9: warning: macro 'glGetTextureLevelParameterfvEXT' contains a runtime value, translated to function
pub inline fn glGetTextureLevelParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewGetTextureLevelParameterfvEXT)) {
    return GLEW_GET_FUN(__glewGetTextureLevelParameterfvEXT);
}
// /usr/include/GL/glew.h:10110:9: warning: macro 'glGetTextureLevelParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetTextureLevelParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetTextureLevelParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetTextureLevelParameterivEXT);
}
// /usr/include/GL/glew.h:10111:9: warning: macro 'glGetTextureParameterIivEXT' contains a runtime value, translated to function
pub inline fn glGetTextureParameterIivEXT() @TypeOf(GLEW_GET_FUN(__glewGetTextureParameterIivEXT)) {
    return GLEW_GET_FUN(__glewGetTextureParameterIivEXT);
}
// /usr/include/GL/glew.h:10112:9: warning: macro 'glGetTextureParameterIuivEXT' contains a runtime value, translated to function
pub inline fn glGetTextureParameterIuivEXT() @TypeOf(GLEW_GET_FUN(__glewGetTextureParameterIuivEXT)) {
    return GLEW_GET_FUN(__glewGetTextureParameterIuivEXT);
}
// /usr/include/GL/glew.h:10113:9: warning: macro 'glGetTextureParameterfvEXT' contains a runtime value, translated to function
pub inline fn glGetTextureParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewGetTextureParameterfvEXT)) {
    return GLEW_GET_FUN(__glewGetTextureParameterfvEXT);
}
// /usr/include/GL/glew.h:10114:9: warning: macro 'glGetTextureParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetTextureParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetTextureParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetTextureParameterivEXT);
}
// /usr/include/GL/glew.h:10115:9: warning: macro 'glGetVertexArrayIntegeri_vEXT' contains a runtime value, translated to function
pub inline fn glGetVertexArrayIntegeri_vEXT() @TypeOf(GLEW_GET_FUN(__glewGetVertexArrayIntegeri_vEXT)) {
    return GLEW_GET_FUN(__glewGetVertexArrayIntegeri_vEXT);
}
// /usr/include/GL/glew.h:10116:9: warning: macro 'glGetVertexArrayIntegervEXT' contains a runtime value, translated to function
pub inline fn glGetVertexArrayIntegervEXT() @TypeOf(GLEW_GET_FUN(__glewGetVertexArrayIntegervEXT)) {
    return GLEW_GET_FUN(__glewGetVertexArrayIntegervEXT);
}
// /usr/include/GL/glew.h:10117:9: warning: macro 'glGetVertexArrayPointeri_vEXT' contains a runtime value, translated to function
pub inline fn glGetVertexArrayPointeri_vEXT() @TypeOf(GLEW_GET_FUN(__glewGetVertexArrayPointeri_vEXT)) {
    return GLEW_GET_FUN(__glewGetVertexArrayPointeri_vEXT);
}
// /usr/include/GL/glew.h:10118:9: warning: macro 'glGetVertexArrayPointervEXT' contains a runtime value, translated to function
pub inline fn glGetVertexArrayPointervEXT() @TypeOf(GLEW_GET_FUN(__glewGetVertexArrayPointervEXT)) {
    return GLEW_GET_FUN(__glewGetVertexArrayPointervEXT);
}
// /usr/include/GL/glew.h:10119:9: warning: macro 'glMapNamedBufferEXT' contains a runtime value, translated to function
pub inline fn glMapNamedBufferEXT() @TypeOf(GLEW_GET_FUN(__glewMapNamedBufferEXT)) {
    return GLEW_GET_FUN(__glewMapNamedBufferEXT);
}
// /usr/include/GL/glew.h:10120:9: warning: macro 'glMapNamedBufferRangeEXT' contains a runtime value, translated to function
pub inline fn glMapNamedBufferRangeEXT() @TypeOf(GLEW_GET_FUN(__glewMapNamedBufferRangeEXT)) {
    return GLEW_GET_FUN(__glewMapNamedBufferRangeEXT);
}
// /usr/include/GL/glew.h:10121:9: warning: macro 'glMatrixFrustumEXT' contains a runtime value, translated to function
pub inline fn glMatrixFrustumEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixFrustumEXT)) {
    return GLEW_GET_FUN(__glewMatrixFrustumEXT);
}
// /usr/include/GL/glew.h:10122:9: warning: macro 'glMatrixLoadIdentityEXT' contains a runtime value, translated to function
pub inline fn glMatrixLoadIdentityEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixLoadIdentityEXT)) {
    return GLEW_GET_FUN(__glewMatrixLoadIdentityEXT);
}
// /usr/include/GL/glew.h:10123:9: warning: macro 'glMatrixLoadTransposedEXT' contains a runtime value, translated to function
pub inline fn glMatrixLoadTransposedEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixLoadTransposedEXT)) {
    return GLEW_GET_FUN(__glewMatrixLoadTransposedEXT);
}
// /usr/include/GL/glew.h:10124:9: warning: macro 'glMatrixLoadTransposefEXT' contains a runtime value, translated to function
pub inline fn glMatrixLoadTransposefEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixLoadTransposefEXT)) {
    return GLEW_GET_FUN(__glewMatrixLoadTransposefEXT);
}
// /usr/include/GL/glew.h:10125:9: warning: macro 'glMatrixLoaddEXT' contains a runtime value, translated to function
pub inline fn glMatrixLoaddEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixLoaddEXT)) {
    return GLEW_GET_FUN(__glewMatrixLoaddEXT);
}
// /usr/include/GL/glew.h:10126:9: warning: macro 'glMatrixLoadfEXT' contains a runtime value, translated to function
pub inline fn glMatrixLoadfEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixLoadfEXT)) {
    return GLEW_GET_FUN(__glewMatrixLoadfEXT);
}
// /usr/include/GL/glew.h:10127:9: warning: macro 'glMatrixMultTransposedEXT' contains a runtime value, translated to function
pub inline fn glMatrixMultTransposedEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixMultTransposedEXT)) {
    return GLEW_GET_FUN(__glewMatrixMultTransposedEXT);
}
// /usr/include/GL/glew.h:10128:9: warning: macro 'glMatrixMultTransposefEXT' contains a runtime value, translated to function
pub inline fn glMatrixMultTransposefEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixMultTransposefEXT)) {
    return GLEW_GET_FUN(__glewMatrixMultTransposefEXT);
}
// /usr/include/GL/glew.h:10129:9: warning: macro 'glMatrixMultdEXT' contains a runtime value, translated to function
pub inline fn glMatrixMultdEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixMultdEXT)) {
    return GLEW_GET_FUN(__glewMatrixMultdEXT);
}
// /usr/include/GL/glew.h:10130:9: warning: macro 'glMatrixMultfEXT' contains a runtime value, translated to function
pub inline fn glMatrixMultfEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixMultfEXT)) {
    return GLEW_GET_FUN(__glewMatrixMultfEXT);
}
// /usr/include/GL/glew.h:10131:9: warning: macro 'glMatrixOrthoEXT' contains a runtime value, translated to function
pub inline fn glMatrixOrthoEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixOrthoEXT)) {
    return GLEW_GET_FUN(__glewMatrixOrthoEXT);
}
// /usr/include/GL/glew.h:10132:9: warning: macro 'glMatrixPopEXT' contains a runtime value, translated to function
pub inline fn glMatrixPopEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixPopEXT)) {
    return GLEW_GET_FUN(__glewMatrixPopEXT);
}
// /usr/include/GL/glew.h:10133:9: warning: macro 'glMatrixPushEXT' contains a runtime value, translated to function
pub inline fn glMatrixPushEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixPushEXT)) {
    return GLEW_GET_FUN(__glewMatrixPushEXT);
}
// /usr/include/GL/glew.h:10134:9: warning: macro 'glMatrixRotatedEXT' contains a runtime value, translated to function
pub inline fn glMatrixRotatedEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixRotatedEXT)) {
    return GLEW_GET_FUN(__glewMatrixRotatedEXT);
}
// /usr/include/GL/glew.h:10135:9: warning: macro 'glMatrixRotatefEXT' contains a runtime value, translated to function
pub inline fn glMatrixRotatefEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixRotatefEXT)) {
    return GLEW_GET_FUN(__glewMatrixRotatefEXT);
}
// /usr/include/GL/glew.h:10136:9: warning: macro 'glMatrixScaledEXT' contains a runtime value, translated to function
pub inline fn glMatrixScaledEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixScaledEXT)) {
    return GLEW_GET_FUN(__glewMatrixScaledEXT);
}
// /usr/include/GL/glew.h:10137:9: warning: macro 'glMatrixScalefEXT' contains a runtime value, translated to function
pub inline fn glMatrixScalefEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixScalefEXT)) {
    return GLEW_GET_FUN(__glewMatrixScalefEXT);
}
// /usr/include/GL/glew.h:10138:9: warning: macro 'glMatrixTranslatedEXT' contains a runtime value, translated to function
pub inline fn glMatrixTranslatedEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixTranslatedEXT)) {
    return GLEW_GET_FUN(__glewMatrixTranslatedEXT);
}
// /usr/include/GL/glew.h:10139:9: warning: macro 'glMatrixTranslatefEXT' contains a runtime value, translated to function
pub inline fn glMatrixTranslatefEXT() @TypeOf(GLEW_GET_FUN(__glewMatrixTranslatefEXT)) {
    return GLEW_GET_FUN(__glewMatrixTranslatefEXT);
}
// /usr/include/GL/glew.h:10140:9: warning: macro 'glMultiTexBufferEXT' contains a runtime value, translated to function
pub inline fn glMultiTexBufferEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexBufferEXT)) {
    return GLEW_GET_FUN(__glewMultiTexBufferEXT);
}
// /usr/include/GL/glew.h:10141:9: warning: macro 'glMultiTexCoordPointerEXT' contains a runtime value, translated to function
pub inline fn glMultiTexCoordPointerEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoordPointerEXT)) {
    return GLEW_GET_FUN(__glewMultiTexCoordPointerEXT);
}
// /usr/include/GL/glew.h:10142:9: warning: macro 'glMultiTexEnvfEXT' contains a runtime value, translated to function
pub inline fn glMultiTexEnvfEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexEnvfEXT)) {
    return GLEW_GET_FUN(__glewMultiTexEnvfEXT);
}
// /usr/include/GL/glew.h:10143:9: warning: macro 'glMultiTexEnvfvEXT' contains a runtime value, translated to function
pub inline fn glMultiTexEnvfvEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexEnvfvEXT)) {
    return GLEW_GET_FUN(__glewMultiTexEnvfvEXT);
}
// /usr/include/GL/glew.h:10144:9: warning: macro 'glMultiTexEnviEXT' contains a runtime value, translated to function
pub inline fn glMultiTexEnviEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexEnviEXT)) {
    return GLEW_GET_FUN(__glewMultiTexEnviEXT);
}
// /usr/include/GL/glew.h:10145:9: warning: macro 'glMultiTexEnvivEXT' contains a runtime value, translated to function
pub inline fn glMultiTexEnvivEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexEnvivEXT)) {
    return GLEW_GET_FUN(__glewMultiTexEnvivEXT);
}
// /usr/include/GL/glew.h:10146:9: warning: macro 'glMultiTexGendEXT' contains a runtime value, translated to function
pub inline fn glMultiTexGendEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexGendEXT)) {
    return GLEW_GET_FUN(__glewMultiTexGendEXT);
}
// /usr/include/GL/glew.h:10147:9: warning: macro 'glMultiTexGendvEXT' contains a runtime value, translated to function
pub inline fn glMultiTexGendvEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexGendvEXT)) {
    return GLEW_GET_FUN(__glewMultiTexGendvEXT);
}
// /usr/include/GL/glew.h:10148:9: warning: macro 'glMultiTexGenfEXT' contains a runtime value, translated to function
pub inline fn glMultiTexGenfEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexGenfEXT)) {
    return GLEW_GET_FUN(__glewMultiTexGenfEXT);
}
// /usr/include/GL/glew.h:10149:9: warning: macro 'glMultiTexGenfvEXT' contains a runtime value, translated to function
pub inline fn glMultiTexGenfvEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexGenfvEXT)) {
    return GLEW_GET_FUN(__glewMultiTexGenfvEXT);
}
// /usr/include/GL/glew.h:10150:9: warning: macro 'glMultiTexGeniEXT' contains a runtime value, translated to function
pub inline fn glMultiTexGeniEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexGeniEXT)) {
    return GLEW_GET_FUN(__glewMultiTexGeniEXT);
}
// /usr/include/GL/glew.h:10151:9: warning: macro 'glMultiTexGenivEXT' contains a runtime value, translated to function
pub inline fn glMultiTexGenivEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexGenivEXT)) {
    return GLEW_GET_FUN(__glewMultiTexGenivEXT);
}
// /usr/include/GL/glew.h:10152:9: warning: macro 'glMultiTexImage1DEXT' contains a runtime value, translated to function
pub inline fn glMultiTexImage1DEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexImage1DEXT)) {
    return GLEW_GET_FUN(__glewMultiTexImage1DEXT);
}
// /usr/include/GL/glew.h:10153:9: warning: macro 'glMultiTexImage2DEXT' contains a runtime value, translated to function
pub inline fn glMultiTexImage2DEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexImage2DEXT)) {
    return GLEW_GET_FUN(__glewMultiTexImage2DEXT);
}
// /usr/include/GL/glew.h:10154:9: warning: macro 'glMultiTexImage3DEXT' contains a runtime value, translated to function
pub inline fn glMultiTexImage3DEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexImage3DEXT)) {
    return GLEW_GET_FUN(__glewMultiTexImage3DEXT);
}
// /usr/include/GL/glew.h:10155:9: warning: macro 'glMultiTexParameterIivEXT' contains a runtime value, translated to function
pub inline fn glMultiTexParameterIivEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexParameterIivEXT)) {
    return GLEW_GET_FUN(__glewMultiTexParameterIivEXT);
}
// /usr/include/GL/glew.h:10156:9: warning: macro 'glMultiTexParameterIuivEXT' contains a runtime value, translated to function
pub inline fn glMultiTexParameterIuivEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexParameterIuivEXT)) {
    return GLEW_GET_FUN(__glewMultiTexParameterIuivEXT);
}
// /usr/include/GL/glew.h:10157:9: warning: macro 'glMultiTexParameterfEXT' contains a runtime value, translated to function
pub inline fn glMultiTexParameterfEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexParameterfEXT)) {
    return GLEW_GET_FUN(__glewMultiTexParameterfEXT);
}
// /usr/include/GL/glew.h:10158:9: warning: macro 'glMultiTexParameterfvEXT' contains a runtime value, translated to function
pub inline fn glMultiTexParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexParameterfvEXT)) {
    return GLEW_GET_FUN(__glewMultiTexParameterfvEXT);
}
// /usr/include/GL/glew.h:10159:9: warning: macro 'glMultiTexParameteriEXT' contains a runtime value, translated to function
pub inline fn glMultiTexParameteriEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexParameteriEXT)) {
    return GLEW_GET_FUN(__glewMultiTexParameteriEXT);
}
// /usr/include/GL/glew.h:10160:9: warning: macro 'glMultiTexParameterivEXT' contains a runtime value, translated to function
pub inline fn glMultiTexParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexParameterivEXT)) {
    return GLEW_GET_FUN(__glewMultiTexParameterivEXT);
}
// /usr/include/GL/glew.h:10161:9: warning: macro 'glMultiTexRenderbufferEXT' contains a runtime value, translated to function
pub inline fn glMultiTexRenderbufferEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexRenderbufferEXT)) {
    return GLEW_GET_FUN(__glewMultiTexRenderbufferEXT);
}
// /usr/include/GL/glew.h:10162:9: warning: macro 'glMultiTexSubImage1DEXT' contains a runtime value, translated to function
pub inline fn glMultiTexSubImage1DEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexSubImage1DEXT)) {
    return GLEW_GET_FUN(__glewMultiTexSubImage1DEXT);
}
// /usr/include/GL/glew.h:10163:9: warning: macro 'glMultiTexSubImage2DEXT' contains a runtime value, translated to function
pub inline fn glMultiTexSubImage2DEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexSubImage2DEXT)) {
    return GLEW_GET_FUN(__glewMultiTexSubImage2DEXT);
}
// /usr/include/GL/glew.h:10164:9: warning: macro 'glMultiTexSubImage3DEXT' contains a runtime value, translated to function
pub inline fn glMultiTexSubImage3DEXT() @TypeOf(GLEW_GET_FUN(__glewMultiTexSubImage3DEXT)) {
    return GLEW_GET_FUN(__glewMultiTexSubImage3DEXT);
}
// /usr/include/GL/glew.h:10165:9: warning: macro 'glNamedBufferDataEXT' contains a runtime value, translated to function
pub inline fn glNamedBufferDataEXT() @TypeOf(GLEW_GET_FUN(__glewNamedBufferDataEXT)) {
    return GLEW_GET_FUN(__glewNamedBufferDataEXT);
}
// /usr/include/GL/glew.h:10166:9: warning: macro 'glNamedBufferSubDataEXT' contains a runtime value, translated to function
pub inline fn glNamedBufferSubDataEXT() @TypeOf(GLEW_GET_FUN(__glewNamedBufferSubDataEXT)) {
    return GLEW_GET_FUN(__glewNamedBufferSubDataEXT);
}
// /usr/include/GL/glew.h:10167:9: warning: macro 'glNamedCopyBufferSubDataEXT' contains a runtime value, translated to function
pub inline fn glNamedCopyBufferSubDataEXT() @TypeOf(GLEW_GET_FUN(__glewNamedCopyBufferSubDataEXT)) {
    return GLEW_GET_FUN(__glewNamedCopyBufferSubDataEXT);
}
// /usr/include/GL/glew.h:10168:9: warning: macro 'glNamedFramebufferRenderbufferEXT' contains a runtime value, translated to function
pub inline fn glNamedFramebufferRenderbufferEXT() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferRenderbufferEXT)) {
    return GLEW_GET_FUN(__glewNamedFramebufferRenderbufferEXT);
}
// /usr/include/GL/glew.h:10169:9: warning: macro 'glNamedFramebufferTexture1DEXT' contains a runtime value, translated to function
pub inline fn glNamedFramebufferTexture1DEXT() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferTexture1DEXT)) {
    return GLEW_GET_FUN(__glewNamedFramebufferTexture1DEXT);
}
// /usr/include/GL/glew.h:10170:9: warning: macro 'glNamedFramebufferTexture2DEXT' contains a runtime value, translated to function
pub inline fn glNamedFramebufferTexture2DEXT() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferTexture2DEXT)) {
    return GLEW_GET_FUN(__glewNamedFramebufferTexture2DEXT);
}
// /usr/include/GL/glew.h:10171:9: warning: macro 'glNamedFramebufferTexture3DEXT' contains a runtime value, translated to function
pub inline fn glNamedFramebufferTexture3DEXT() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferTexture3DEXT)) {
    return GLEW_GET_FUN(__glewNamedFramebufferTexture3DEXT);
}
// /usr/include/GL/glew.h:10172:9: warning: macro 'glNamedFramebufferTextureEXT' contains a runtime value, translated to function
pub inline fn glNamedFramebufferTextureEXT() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferTextureEXT)) {
    return GLEW_GET_FUN(__glewNamedFramebufferTextureEXT);
}
// /usr/include/GL/glew.h:10173:9: warning: macro 'glNamedFramebufferTextureFaceEXT' contains a runtime value, translated to function
pub inline fn glNamedFramebufferTextureFaceEXT() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferTextureFaceEXT)) {
    return GLEW_GET_FUN(__glewNamedFramebufferTextureFaceEXT);
}
// /usr/include/GL/glew.h:10174:9: warning: macro 'glNamedFramebufferTextureLayerEXT' contains a runtime value, translated to function
pub inline fn glNamedFramebufferTextureLayerEXT() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferTextureLayerEXT)) {
    return GLEW_GET_FUN(__glewNamedFramebufferTextureLayerEXT);
}
// /usr/include/GL/glew.h:10175:9: warning: macro 'glNamedProgramLocalParameter4dEXT' contains a runtime value, translated to function
pub inline fn glNamedProgramLocalParameter4dEXT() @TypeOf(GLEW_GET_FUN(__glewNamedProgramLocalParameter4dEXT)) {
    return GLEW_GET_FUN(__glewNamedProgramLocalParameter4dEXT);
}
// /usr/include/GL/glew.h:10176:9: warning: macro 'glNamedProgramLocalParameter4dvEXT' contains a runtime value, translated to function
pub inline fn glNamedProgramLocalParameter4dvEXT() @TypeOf(GLEW_GET_FUN(__glewNamedProgramLocalParameter4dvEXT)) {
    return GLEW_GET_FUN(__glewNamedProgramLocalParameter4dvEXT);
}
// /usr/include/GL/glew.h:10177:9: warning: macro 'glNamedProgramLocalParameter4fEXT' contains a runtime value, translated to function
pub inline fn glNamedProgramLocalParameter4fEXT() @TypeOf(GLEW_GET_FUN(__glewNamedProgramLocalParameter4fEXT)) {
    return GLEW_GET_FUN(__glewNamedProgramLocalParameter4fEXT);
}
// /usr/include/GL/glew.h:10178:9: warning: macro 'glNamedProgramLocalParameter4fvEXT' contains a runtime value, translated to function
pub inline fn glNamedProgramLocalParameter4fvEXT() @TypeOf(GLEW_GET_FUN(__glewNamedProgramLocalParameter4fvEXT)) {
    return GLEW_GET_FUN(__glewNamedProgramLocalParameter4fvEXT);
}
// /usr/include/GL/glew.h:10179:9: warning: macro 'glNamedProgramLocalParameterI4iEXT' contains a runtime value, translated to function
pub inline fn glNamedProgramLocalParameterI4iEXT() @TypeOf(GLEW_GET_FUN(__glewNamedProgramLocalParameterI4iEXT)) {
    return GLEW_GET_FUN(__glewNamedProgramLocalParameterI4iEXT);
}
// /usr/include/GL/glew.h:10180:9: warning: macro 'glNamedProgramLocalParameterI4ivEXT' contains a runtime value, translated to function
pub inline fn glNamedProgramLocalParameterI4ivEXT() @TypeOf(GLEW_GET_FUN(__glewNamedProgramLocalParameterI4ivEXT)) {
    return GLEW_GET_FUN(__glewNamedProgramLocalParameterI4ivEXT);
}
// /usr/include/GL/glew.h:10181:9: warning: macro 'glNamedProgramLocalParameterI4uiEXT' contains a runtime value, translated to function
pub inline fn glNamedProgramLocalParameterI4uiEXT() @TypeOf(GLEW_GET_FUN(__glewNamedProgramLocalParameterI4uiEXT)) {
    return GLEW_GET_FUN(__glewNamedProgramLocalParameterI4uiEXT);
}
// /usr/include/GL/glew.h:10182:9: warning: macro 'glNamedProgramLocalParameterI4uivEXT' contains a runtime value, translated to function
pub inline fn glNamedProgramLocalParameterI4uivEXT() @TypeOf(GLEW_GET_FUN(__glewNamedProgramLocalParameterI4uivEXT)) {
    return GLEW_GET_FUN(__glewNamedProgramLocalParameterI4uivEXT);
}
// /usr/include/GL/glew.h:10183:9: warning: macro 'glNamedProgramLocalParameters4fvEXT' contains a runtime value, translated to function
pub inline fn glNamedProgramLocalParameters4fvEXT() @TypeOf(GLEW_GET_FUN(__glewNamedProgramLocalParameters4fvEXT)) {
    return GLEW_GET_FUN(__glewNamedProgramLocalParameters4fvEXT);
}
// /usr/include/GL/glew.h:10184:9: warning: macro 'glNamedProgramLocalParametersI4ivEXT' contains a runtime value, translated to function
pub inline fn glNamedProgramLocalParametersI4ivEXT() @TypeOf(GLEW_GET_FUN(__glewNamedProgramLocalParametersI4ivEXT)) {
    return GLEW_GET_FUN(__glewNamedProgramLocalParametersI4ivEXT);
}
// /usr/include/GL/glew.h:10185:9: warning: macro 'glNamedProgramLocalParametersI4uivEXT' contains a runtime value, translated to function
pub inline fn glNamedProgramLocalParametersI4uivEXT() @TypeOf(GLEW_GET_FUN(__glewNamedProgramLocalParametersI4uivEXT)) {
    return GLEW_GET_FUN(__glewNamedProgramLocalParametersI4uivEXT);
}
// /usr/include/GL/glew.h:10186:9: warning: macro 'glNamedProgramStringEXT' contains a runtime value, translated to function
pub inline fn glNamedProgramStringEXT() @TypeOf(GLEW_GET_FUN(__glewNamedProgramStringEXT)) {
    return GLEW_GET_FUN(__glewNamedProgramStringEXT);
}
// /usr/include/GL/glew.h:10187:9: warning: macro 'glNamedRenderbufferStorageEXT' contains a runtime value, translated to function
pub inline fn glNamedRenderbufferStorageEXT() @TypeOf(GLEW_GET_FUN(__glewNamedRenderbufferStorageEXT)) {
    return GLEW_GET_FUN(__glewNamedRenderbufferStorageEXT);
}
// /usr/include/GL/glew.h:10188:9: warning: macro 'glNamedRenderbufferStorageMultisampleCoverageEXT' contains a runtime value, translated to function
pub inline fn glNamedRenderbufferStorageMultisampleCoverageEXT() @TypeOf(GLEW_GET_FUN(__glewNamedRenderbufferStorageMultisampleCoverageEXT)) {
    return GLEW_GET_FUN(__glewNamedRenderbufferStorageMultisampleCoverageEXT);
}
// /usr/include/GL/glew.h:10189:9: warning: macro 'glNamedRenderbufferStorageMultisampleEXT' contains a runtime value, translated to function
pub inline fn glNamedRenderbufferStorageMultisampleEXT() @TypeOf(GLEW_GET_FUN(__glewNamedRenderbufferStorageMultisampleEXT)) {
    return GLEW_GET_FUN(__glewNamedRenderbufferStorageMultisampleEXT);
}
// /usr/include/GL/glew.h:10190:9: warning: macro 'glProgramUniform1fEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform1fEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1fEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform1fEXT);
}
// /usr/include/GL/glew.h:10191:9: warning: macro 'glProgramUniform1fvEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform1fvEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1fvEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform1fvEXT);
}
// /usr/include/GL/glew.h:10192:9: warning: macro 'glProgramUniform1iEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform1iEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1iEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform1iEXT);
}
// /usr/include/GL/glew.h:10193:9: warning: macro 'glProgramUniform1ivEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform1ivEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1ivEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform1ivEXT);
}
// /usr/include/GL/glew.h:10194:9: warning: macro 'glProgramUniform1uiEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform1uiEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1uiEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform1uiEXT);
}
// /usr/include/GL/glew.h:10195:9: warning: macro 'glProgramUniform1uivEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform1uivEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1uivEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform1uivEXT);
}
// /usr/include/GL/glew.h:10196:9: warning: macro 'glProgramUniform2fEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform2fEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2fEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform2fEXT);
}
// /usr/include/GL/glew.h:10197:9: warning: macro 'glProgramUniform2fvEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform2fvEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2fvEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform2fvEXT);
}
// /usr/include/GL/glew.h:10198:9: warning: macro 'glProgramUniform2iEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform2iEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2iEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform2iEXT);
}
// /usr/include/GL/glew.h:10199:9: warning: macro 'glProgramUniform2ivEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform2ivEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2ivEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform2ivEXT);
}
// /usr/include/GL/glew.h:10200:9: warning: macro 'glProgramUniform2uiEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform2uiEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2uiEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform2uiEXT);
}
// /usr/include/GL/glew.h:10201:9: warning: macro 'glProgramUniform2uivEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform2uivEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2uivEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform2uivEXT);
}
// /usr/include/GL/glew.h:10202:9: warning: macro 'glProgramUniform3fEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform3fEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3fEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform3fEXT);
}
// /usr/include/GL/glew.h:10203:9: warning: macro 'glProgramUniform3fvEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform3fvEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3fvEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform3fvEXT);
}
// /usr/include/GL/glew.h:10204:9: warning: macro 'glProgramUniform3iEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform3iEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3iEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform3iEXT);
}
// /usr/include/GL/glew.h:10205:9: warning: macro 'glProgramUniform3ivEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform3ivEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3ivEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform3ivEXT);
}
// /usr/include/GL/glew.h:10206:9: warning: macro 'glProgramUniform3uiEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform3uiEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3uiEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform3uiEXT);
}
// /usr/include/GL/glew.h:10207:9: warning: macro 'glProgramUniform3uivEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform3uivEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3uivEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform3uivEXT);
}
// /usr/include/GL/glew.h:10208:9: warning: macro 'glProgramUniform4fEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform4fEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4fEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform4fEXT);
}
// /usr/include/GL/glew.h:10209:9: warning: macro 'glProgramUniform4fvEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform4fvEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4fvEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform4fvEXT);
}
// /usr/include/GL/glew.h:10210:9: warning: macro 'glProgramUniform4iEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform4iEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4iEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform4iEXT);
}
// /usr/include/GL/glew.h:10211:9: warning: macro 'glProgramUniform4ivEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform4ivEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4ivEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform4ivEXT);
}
// /usr/include/GL/glew.h:10212:9: warning: macro 'glProgramUniform4uiEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform4uiEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4uiEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform4uiEXT);
}
// /usr/include/GL/glew.h:10213:9: warning: macro 'glProgramUniform4uivEXT' contains a runtime value, translated to function
pub inline fn glProgramUniform4uivEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4uivEXT)) {
    return GLEW_GET_FUN(__glewProgramUniform4uivEXT);
}
// /usr/include/GL/glew.h:10214:9: warning: macro 'glProgramUniformMatrix2fvEXT' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix2fvEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix2fvEXT)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix2fvEXT);
}
// /usr/include/GL/glew.h:10215:9: warning: macro 'glProgramUniformMatrix2x3fvEXT' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix2x3fvEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix2x3fvEXT)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix2x3fvEXT);
}
// /usr/include/GL/glew.h:10216:9: warning: macro 'glProgramUniformMatrix2x4fvEXT' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix2x4fvEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix2x4fvEXT)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix2x4fvEXT);
}
// /usr/include/GL/glew.h:10217:9: warning: macro 'glProgramUniformMatrix3fvEXT' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix3fvEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix3fvEXT)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix3fvEXT);
}
// /usr/include/GL/glew.h:10218:9: warning: macro 'glProgramUniformMatrix3x2fvEXT' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix3x2fvEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix3x2fvEXT)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix3x2fvEXT);
}
// /usr/include/GL/glew.h:10219:9: warning: macro 'glProgramUniformMatrix3x4fvEXT' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix3x4fvEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix3x4fvEXT)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix3x4fvEXT);
}
// /usr/include/GL/glew.h:10220:9: warning: macro 'glProgramUniformMatrix4fvEXT' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix4fvEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix4fvEXT)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix4fvEXT);
}
// /usr/include/GL/glew.h:10221:9: warning: macro 'glProgramUniformMatrix4x2fvEXT' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix4x2fvEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix4x2fvEXT)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix4x2fvEXT);
}
// /usr/include/GL/glew.h:10222:9: warning: macro 'glProgramUniformMatrix4x3fvEXT' contains a runtime value, translated to function
pub inline fn glProgramUniformMatrix4x3fvEXT() @TypeOf(GLEW_GET_FUN(__glewProgramUniformMatrix4x3fvEXT)) {
    return GLEW_GET_FUN(__glewProgramUniformMatrix4x3fvEXT);
}
// /usr/include/GL/glew.h:10223:9: warning: macro 'glPushClientAttribDefaultEXT' contains a runtime value, translated to function
pub inline fn glPushClientAttribDefaultEXT() @TypeOf(GLEW_GET_FUN(__glewPushClientAttribDefaultEXT)) {
    return GLEW_GET_FUN(__glewPushClientAttribDefaultEXT);
}
// /usr/include/GL/glew.h:10224:9: warning: macro 'glTextureBufferEXT' contains a runtime value, translated to function
pub inline fn glTextureBufferEXT() @TypeOf(GLEW_GET_FUN(__glewTextureBufferEXT)) {
    return GLEW_GET_FUN(__glewTextureBufferEXT);
}
// /usr/include/GL/glew.h:10225:9: warning: macro 'glTextureImage1DEXT' contains a runtime value, translated to function
pub inline fn glTextureImage1DEXT() @TypeOf(GLEW_GET_FUN(__glewTextureImage1DEXT)) {
    return GLEW_GET_FUN(__glewTextureImage1DEXT);
}
// /usr/include/GL/glew.h:10226:9: warning: macro 'glTextureImage2DEXT' contains a runtime value, translated to function
pub inline fn glTextureImage2DEXT() @TypeOf(GLEW_GET_FUN(__glewTextureImage2DEXT)) {
    return GLEW_GET_FUN(__glewTextureImage2DEXT);
}
// /usr/include/GL/glew.h:10227:9: warning: macro 'glTextureImage3DEXT' contains a runtime value, translated to function
pub inline fn glTextureImage3DEXT() @TypeOf(GLEW_GET_FUN(__glewTextureImage3DEXT)) {
    return GLEW_GET_FUN(__glewTextureImage3DEXT);
}
// /usr/include/GL/glew.h:10228:9: warning: macro 'glTextureParameterIivEXT' contains a runtime value, translated to function
pub inline fn glTextureParameterIivEXT() @TypeOf(GLEW_GET_FUN(__glewTextureParameterIivEXT)) {
    return GLEW_GET_FUN(__glewTextureParameterIivEXT);
}
// /usr/include/GL/glew.h:10229:9: warning: macro 'glTextureParameterIuivEXT' contains a runtime value, translated to function
pub inline fn glTextureParameterIuivEXT() @TypeOf(GLEW_GET_FUN(__glewTextureParameterIuivEXT)) {
    return GLEW_GET_FUN(__glewTextureParameterIuivEXT);
}
// /usr/include/GL/glew.h:10230:9: warning: macro 'glTextureParameterfEXT' contains a runtime value, translated to function
pub inline fn glTextureParameterfEXT() @TypeOf(GLEW_GET_FUN(__glewTextureParameterfEXT)) {
    return GLEW_GET_FUN(__glewTextureParameterfEXT);
}
// /usr/include/GL/glew.h:10231:9: warning: macro 'glTextureParameterfvEXT' contains a runtime value, translated to function
pub inline fn glTextureParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewTextureParameterfvEXT)) {
    return GLEW_GET_FUN(__glewTextureParameterfvEXT);
}
// /usr/include/GL/glew.h:10232:9: warning: macro 'glTextureParameteriEXT' contains a runtime value, translated to function
pub inline fn glTextureParameteriEXT() @TypeOf(GLEW_GET_FUN(__glewTextureParameteriEXT)) {
    return GLEW_GET_FUN(__glewTextureParameteriEXT);
}
// /usr/include/GL/glew.h:10233:9: warning: macro 'glTextureParameterivEXT' contains a runtime value, translated to function
pub inline fn glTextureParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewTextureParameterivEXT)) {
    return GLEW_GET_FUN(__glewTextureParameterivEXT);
}
// /usr/include/GL/glew.h:10234:9: warning: macro 'glTextureRenderbufferEXT' contains a runtime value, translated to function
pub inline fn glTextureRenderbufferEXT() @TypeOf(GLEW_GET_FUN(__glewTextureRenderbufferEXT)) {
    return GLEW_GET_FUN(__glewTextureRenderbufferEXT);
}
// /usr/include/GL/glew.h:10235:9: warning: macro 'glTextureSubImage1DEXT' contains a runtime value, translated to function
pub inline fn glTextureSubImage1DEXT() @TypeOf(GLEW_GET_FUN(__glewTextureSubImage1DEXT)) {
    return GLEW_GET_FUN(__glewTextureSubImage1DEXT);
}
// /usr/include/GL/glew.h:10236:9: warning: macro 'glTextureSubImage2DEXT' contains a runtime value, translated to function
pub inline fn glTextureSubImage2DEXT() @TypeOf(GLEW_GET_FUN(__glewTextureSubImage2DEXT)) {
    return GLEW_GET_FUN(__glewTextureSubImage2DEXT);
}
// /usr/include/GL/glew.h:10237:9: warning: macro 'glTextureSubImage3DEXT' contains a runtime value, translated to function
pub inline fn glTextureSubImage3DEXT() @TypeOf(GLEW_GET_FUN(__glewTextureSubImage3DEXT)) {
    return GLEW_GET_FUN(__glewTextureSubImage3DEXT);
}
// /usr/include/GL/glew.h:10238:9: warning: macro 'glUnmapNamedBufferEXT' contains a runtime value, translated to function
pub inline fn glUnmapNamedBufferEXT() @TypeOf(GLEW_GET_FUN(__glewUnmapNamedBufferEXT)) {
    return GLEW_GET_FUN(__glewUnmapNamedBufferEXT);
}
// /usr/include/GL/glew.h:10239:9: warning: macro 'glVertexArrayColorOffsetEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayColorOffsetEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayColorOffsetEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayColorOffsetEXT);
}
// /usr/include/GL/glew.h:10240:9: warning: macro 'glVertexArrayEdgeFlagOffsetEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayEdgeFlagOffsetEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayEdgeFlagOffsetEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayEdgeFlagOffsetEXT);
}
// /usr/include/GL/glew.h:10241:9: warning: macro 'glVertexArrayFogCoordOffsetEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayFogCoordOffsetEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayFogCoordOffsetEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayFogCoordOffsetEXT);
}
// /usr/include/GL/glew.h:10242:9: warning: macro 'glVertexArrayIndexOffsetEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayIndexOffsetEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayIndexOffsetEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayIndexOffsetEXT);
}
// /usr/include/GL/glew.h:10243:9: warning: macro 'glVertexArrayMultiTexCoordOffsetEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayMultiTexCoordOffsetEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayMultiTexCoordOffsetEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayMultiTexCoordOffsetEXT);
}
// /usr/include/GL/glew.h:10244:9: warning: macro 'glVertexArrayNormalOffsetEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayNormalOffsetEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayNormalOffsetEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayNormalOffsetEXT);
}
// /usr/include/GL/glew.h:10245:9: warning: macro 'glVertexArraySecondaryColorOffsetEXT' contains a runtime value, translated to function
pub inline fn glVertexArraySecondaryColorOffsetEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArraySecondaryColorOffsetEXT)) {
    return GLEW_GET_FUN(__glewVertexArraySecondaryColorOffsetEXT);
}
// /usr/include/GL/glew.h:10246:9: warning: macro 'glVertexArrayTexCoordOffsetEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayTexCoordOffsetEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayTexCoordOffsetEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayTexCoordOffsetEXT);
}
// /usr/include/GL/glew.h:10247:9: warning: macro 'glVertexArrayVertexAttribDivisorEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayVertexAttribDivisorEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayVertexAttribDivisorEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayVertexAttribDivisorEXT);
}
// /usr/include/GL/glew.h:10248:9: warning: macro 'glVertexArrayVertexAttribIOffsetEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayVertexAttribIOffsetEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayVertexAttribIOffsetEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayVertexAttribIOffsetEXT);
}
// /usr/include/GL/glew.h:10249:9: warning: macro 'glVertexArrayVertexAttribOffsetEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayVertexAttribOffsetEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayVertexAttribOffsetEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayVertexAttribOffsetEXT);
}
// /usr/include/GL/glew.h:10250:9: warning: macro 'glVertexArrayVertexOffsetEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayVertexOffsetEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayVertexOffsetEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayVertexOffsetEXT);
}
// /usr/include/GL/glew.h:10252:9: warning: macro 'GLEW_EXT_direct_state_access' contains a runtime value, translated to function
pub inline fn GLEW_EXT_direct_state_access() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_direct_state_access)) {
    return GLEW_GET_VAR(__GLEW_EXT_direct_state_access);
}
pub const GL_EXT_discard_framebuffer = @as(c_int, 1);
pub const GL_COLOR_EXT = @as(c_int, 0x1800);
pub const GL_DEPTH_EXT = @as(c_int, 0x1801);
pub const GL_STENCIL_EXT = @as(c_int, 0x1802);
// /usr/include/GL/glew.h:10267:9: warning: macro 'glDiscardFramebufferEXT' contains a runtime value, translated to function
pub inline fn glDiscardFramebufferEXT() @TypeOf(GLEW_GET_FUN(__glewDiscardFramebufferEXT)) {
    return GLEW_GET_FUN(__glewDiscardFramebufferEXT);
}
// /usr/include/GL/glew.h:10269:9: warning: macro 'GLEW_EXT_discard_framebuffer' contains a runtime value, translated to function
pub inline fn GLEW_EXT_discard_framebuffer() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_discard_framebuffer)) {
    return GLEW_GET_VAR(__GLEW_EXT_discard_framebuffer);
}
pub const GL_EXT_disjoint_timer_query = @as(c_int, 1);
pub const GL_QUERY_COUNTER_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hex);
pub const GL_CURRENT_QUERY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hex);
pub const GL_QUERY_RESULT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hex);
pub const GL_QUERY_RESULT_AVAILABLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hex);
pub const GL_TIME_ELAPSED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BF, .hex);
pub const GL_TIMESTAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hex);
pub const GL_GPU_DISJOINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBB, .hex);
// /usr/include/GL/glew.h:10297:9: warning: macro 'glBeginQueryEXT' contains a runtime value, translated to function
pub inline fn glBeginQueryEXT() @TypeOf(GLEW_GET_FUN(__glewBeginQueryEXT)) {
    return GLEW_GET_FUN(__glewBeginQueryEXT);
}
// /usr/include/GL/glew.h:10298:9: warning: macro 'glDeleteQueriesEXT' contains a runtime value, translated to function
pub inline fn glDeleteQueriesEXT() @TypeOf(GLEW_GET_FUN(__glewDeleteQueriesEXT)) {
    return GLEW_GET_FUN(__glewDeleteQueriesEXT);
}
// /usr/include/GL/glew.h:10299:9: warning: macro 'glEndQueryEXT' contains a runtime value, translated to function
pub inline fn glEndQueryEXT() @TypeOf(GLEW_GET_FUN(__glewEndQueryEXT)) {
    return GLEW_GET_FUN(__glewEndQueryEXT);
}
// /usr/include/GL/glew.h:10300:9: warning: macro 'glGenQueriesEXT' contains a runtime value, translated to function
pub inline fn glGenQueriesEXT() @TypeOf(GLEW_GET_FUN(__glewGenQueriesEXT)) {
    return GLEW_GET_FUN(__glewGenQueriesEXT);
}
// /usr/include/GL/glew.h:10301:9: warning: macro 'glGetInteger64vEXT' contains a runtime value, translated to function
pub inline fn glGetInteger64vEXT() @TypeOf(GLEW_GET_FUN(__glewGetInteger64vEXT)) {
    return GLEW_GET_FUN(__glewGetInteger64vEXT);
}
// /usr/include/GL/glew.h:10302:9: warning: macro 'glGetQueryObjectivEXT' contains a runtime value, translated to function
pub inline fn glGetQueryObjectivEXT() @TypeOf(GLEW_GET_FUN(__glewGetQueryObjectivEXT)) {
    return GLEW_GET_FUN(__glewGetQueryObjectivEXT);
}
// /usr/include/GL/glew.h:10303:9: warning: macro 'glGetQueryObjectuivEXT' contains a runtime value, translated to function
pub inline fn glGetQueryObjectuivEXT() @TypeOf(GLEW_GET_FUN(__glewGetQueryObjectuivEXT)) {
    return GLEW_GET_FUN(__glewGetQueryObjectuivEXT);
}
// /usr/include/GL/glew.h:10304:9: warning: macro 'glGetQueryivEXT' contains a runtime value, translated to function
pub inline fn glGetQueryivEXT() @TypeOf(GLEW_GET_FUN(__glewGetQueryivEXT)) {
    return GLEW_GET_FUN(__glewGetQueryivEXT);
}
// /usr/include/GL/glew.h:10305:9: warning: macro 'glIsQueryEXT' contains a runtime value, translated to function
pub inline fn glIsQueryEXT() @TypeOf(GLEW_GET_FUN(__glewIsQueryEXT)) {
    return GLEW_GET_FUN(__glewIsQueryEXT);
}
// /usr/include/GL/glew.h:10306:9: warning: macro 'glQueryCounterEXT' contains a runtime value, translated to function
pub inline fn glQueryCounterEXT() @TypeOf(GLEW_GET_FUN(__glewQueryCounterEXT)) {
    return GLEW_GET_FUN(__glewQueryCounterEXT);
}
// /usr/include/GL/glew.h:10308:9: warning: macro 'GLEW_EXT_disjoint_timer_query' contains a runtime value, translated to function
pub inline fn GLEW_EXT_disjoint_timer_query() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_disjoint_timer_query)) {
    return GLEW_GET_VAR(__GLEW_EXT_disjoint_timer_query);
}
pub const GL_EXT_draw_buffers = @as(c_int, 1);
pub const GL_MAX_DRAW_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hex);
pub const GL_DRAW_BUFFER0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hex);
pub const GL_DRAW_BUFFER1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hex);
pub const GL_DRAW_BUFFER2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hex);
pub const GL_DRAW_BUFFER3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hex);
pub const GL_DRAW_BUFFER4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hex);
pub const GL_DRAW_BUFFER5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hex);
pub const GL_DRAW_BUFFER6_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hex);
pub const GL_DRAW_BUFFER7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hex);
pub const GL_DRAW_BUFFER8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hex);
pub const GL_DRAW_BUFFER9_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hex);
pub const GL_DRAW_BUFFER10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hex);
pub const GL_DRAW_BUFFER11_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hex);
pub const GL_DRAW_BUFFER12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hex);
pub const GL_DRAW_BUFFER13_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hex);
pub const GL_DRAW_BUFFER14_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hex);
pub const GL_DRAW_BUFFER15_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hex);
pub const GL_MAX_COLOR_ATTACHMENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hex);
pub const GL_COLOR_ATTACHMENT0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hex);
pub const GL_COLOR_ATTACHMENT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hex);
pub const GL_COLOR_ATTACHMENT2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hex);
pub const GL_COLOR_ATTACHMENT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hex);
pub const GL_COLOR_ATTACHMENT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hex);
pub const GL_COLOR_ATTACHMENT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hex);
pub const GL_COLOR_ATTACHMENT6_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hex);
pub const GL_COLOR_ATTACHMENT7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hex);
pub const GL_COLOR_ATTACHMENT8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hex);
pub const GL_COLOR_ATTACHMENT9_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hex);
pub const GL_COLOR_ATTACHMENT10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hex);
pub const GL_COLOR_ATTACHMENT11_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hex);
pub const GL_COLOR_ATTACHMENT12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hex);
pub const GL_COLOR_ATTACHMENT13_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hex);
pub const GL_COLOR_ATTACHMENT14_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hex);
pub const GL_COLOR_ATTACHMENT15_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hex);
// /usr/include/GL/glew.h:10354:9: warning: macro 'glDrawBuffersEXT' contains a runtime value, translated to function
pub inline fn glDrawBuffersEXT() @TypeOf(GLEW_GET_FUN(__glewDrawBuffersEXT)) {
    return GLEW_GET_FUN(__glewDrawBuffersEXT);
}
// /usr/include/GL/glew.h:10356:9: warning: macro 'GLEW_EXT_draw_buffers' contains a runtime value, translated to function
pub inline fn GLEW_EXT_draw_buffers() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_draw_buffers)) {
    return GLEW_GET_VAR(__GLEW_EXT_draw_buffers);
}
pub const GL_EXT_draw_buffers2 = @as(c_int, 1);
// /usr/include/GL/glew.h:10372:9: warning: macro 'glColorMaskIndexedEXT' contains a runtime value, translated to function
pub inline fn glColorMaskIndexedEXT() @TypeOf(GLEW_GET_FUN(__glewColorMaskIndexedEXT)) {
    return GLEW_GET_FUN(__glewColorMaskIndexedEXT);
}
// /usr/include/GL/glew.h:10373:9: warning: macro 'glDisableIndexedEXT' contains a runtime value, translated to function
pub inline fn glDisableIndexedEXT() @TypeOf(GLEW_GET_FUN(__glewDisableIndexedEXT)) {
    return GLEW_GET_FUN(__glewDisableIndexedEXT);
}
// /usr/include/GL/glew.h:10374:9: warning: macro 'glEnableIndexedEXT' contains a runtime value, translated to function
pub inline fn glEnableIndexedEXT() @TypeOf(GLEW_GET_FUN(__glewEnableIndexedEXT)) {
    return GLEW_GET_FUN(__glewEnableIndexedEXT);
}
// /usr/include/GL/glew.h:10375:9: warning: macro 'glGetBooleanIndexedvEXT' contains a runtime value, translated to function
pub inline fn glGetBooleanIndexedvEXT() @TypeOf(GLEW_GET_FUN(__glewGetBooleanIndexedvEXT)) {
    return GLEW_GET_FUN(__glewGetBooleanIndexedvEXT);
}
// /usr/include/GL/glew.h:10376:9: warning: macro 'glGetIntegerIndexedvEXT' contains a runtime value, translated to function
pub inline fn glGetIntegerIndexedvEXT() @TypeOf(GLEW_GET_FUN(__glewGetIntegerIndexedvEXT)) {
    return GLEW_GET_FUN(__glewGetIntegerIndexedvEXT);
}
// /usr/include/GL/glew.h:10377:9: warning: macro 'glIsEnabledIndexedEXT' contains a runtime value, translated to function
pub inline fn glIsEnabledIndexedEXT() @TypeOf(GLEW_GET_FUN(__glewIsEnabledIndexedEXT)) {
    return GLEW_GET_FUN(__glewIsEnabledIndexedEXT);
}
// /usr/include/GL/glew.h:10379:9: warning: macro 'GLEW_EXT_draw_buffers2' contains a runtime value, translated to function
pub inline fn GLEW_EXT_draw_buffers2() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_draw_buffers2)) {
    return GLEW_GET_VAR(__GLEW_EXT_draw_buffers2);
}
pub const GL_EXT_draw_buffers_indexed = @as(c_int, 1);
// /usr/include/GL/glew.h:10397:9: warning: macro 'glBlendEquationSeparateiEXT' contains a runtime value, translated to function
pub inline fn glBlendEquationSeparateiEXT() @TypeOf(GLEW_GET_FUN(__glewBlendEquationSeparateiEXT)) {
    return GLEW_GET_FUN(__glewBlendEquationSeparateiEXT);
}
// /usr/include/GL/glew.h:10398:9: warning: macro 'glBlendEquationiEXT' contains a runtime value, translated to function
pub inline fn glBlendEquationiEXT() @TypeOf(GLEW_GET_FUN(__glewBlendEquationiEXT)) {
    return GLEW_GET_FUN(__glewBlendEquationiEXT);
}
// /usr/include/GL/glew.h:10399:9: warning: macro 'glBlendFuncSeparateiEXT' contains a runtime value, translated to function
pub inline fn glBlendFuncSeparateiEXT() @TypeOf(GLEW_GET_FUN(__glewBlendFuncSeparateiEXT)) {
    return GLEW_GET_FUN(__glewBlendFuncSeparateiEXT);
}
// /usr/include/GL/glew.h:10400:9: warning: macro 'glBlendFunciEXT' contains a runtime value, translated to function
pub inline fn glBlendFunciEXT() @TypeOf(GLEW_GET_FUN(__glewBlendFunciEXT)) {
    return GLEW_GET_FUN(__glewBlendFunciEXT);
}
// /usr/include/GL/glew.h:10401:9: warning: macro 'glColorMaskiEXT' contains a runtime value, translated to function
pub inline fn glColorMaskiEXT() @TypeOf(GLEW_GET_FUN(__glewColorMaskiEXT)) {
    return GLEW_GET_FUN(__glewColorMaskiEXT);
}
// /usr/include/GL/glew.h:10402:9: warning: macro 'glDisableiEXT' contains a runtime value, translated to function
pub inline fn glDisableiEXT() @TypeOf(GLEW_GET_FUN(__glewDisableiEXT)) {
    return GLEW_GET_FUN(__glewDisableiEXT);
}
// /usr/include/GL/glew.h:10403:9: warning: macro 'glEnableiEXT' contains a runtime value, translated to function
pub inline fn glEnableiEXT() @TypeOf(GLEW_GET_FUN(__glewEnableiEXT)) {
    return GLEW_GET_FUN(__glewEnableiEXT);
}
// /usr/include/GL/glew.h:10404:9: warning: macro 'glIsEnablediEXT' contains a runtime value, translated to function
pub inline fn glIsEnablediEXT() @TypeOf(GLEW_GET_FUN(__glewIsEnablediEXT)) {
    return GLEW_GET_FUN(__glewIsEnablediEXT);
}
// /usr/include/GL/glew.h:10406:9: warning: macro 'GLEW_EXT_draw_buffers_indexed' contains a runtime value, translated to function
pub inline fn GLEW_EXT_draw_buffers_indexed() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_draw_buffers_indexed)) {
    return GLEW_GET_VAR(__GLEW_EXT_draw_buffers_indexed);
}
pub const GL_EXT_draw_elements_base_vertex = @as(c_int, 1);
// /usr/include/GL/glew.h:10420:9: warning: macro 'glDrawElementsBaseVertexEXT' contains a runtime value, translated to function
pub inline fn glDrawElementsBaseVertexEXT() @TypeOf(GLEW_GET_FUN(__glewDrawElementsBaseVertexEXT)) {
    return GLEW_GET_FUN(__glewDrawElementsBaseVertexEXT);
}
// /usr/include/GL/glew.h:10421:9: warning: macro 'glDrawElementsInstancedBaseVertexEXT' contains a runtime value, translated to function
pub inline fn glDrawElementsInstancedBaseVertexEXT() @TypeOf(GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertexEXT)) {
    return GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertexEXT);
}
// /usr/include/GL/glew.h:10422:9: warning: macro 'glDrawRangeElementsBaseVertexEXT' contains a runtime value, translated to function
pub inline fn glDrawRangeElementsBaseVertexEXT() @TypeOf(GLEW_GET_FUN(__glewDrawRangeElementsBaseVertexEXT)) {
    return GLEW_GET_FUN(__glewDrawRangeElementsBaseVertexEXT);
}
// /usr/include/GL/glew.h:10423:9: warning: macro 'glMultiDrawElementsBaseVertexEXT' contains a runtime value, translated to function
pub inline fn glMultiDrawElementsBaseVertexEXT() @TypeOf(GLEW_GET_FUN(__glewMultiDrawElementsBaseVertexEXT)) {
    return GLEW_GET_FUN(__glewMultiDrawElementsBaseVertexEXT);
}
// /usr/include/GL/glew.h:10425:9: warning: macro 'GLEW_EXT_draw_elements_base_vertex' contains a runtime value, translated to function
pub inline fn GLEW_EXT_draw_elements_base_vertex() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_draw_elements_base_vertex)) {
    return GLEW_GET_VAR(__GLEW_EXT_draw_elements_base_vertex);
}
pub const GL_EXT_draw_instanced = @as(c_int, 1);
// /usr/include/GL/glew.h:10437:9: warning: macro 'glDrawArraysInstancedEXT' contains a runtime value, translated to function
pub inline fn glDrawArraysInstancedEXT() @TypeOf(GLEW_GET_FUN(__glewDrawArraysInstancedEXT)) {
    return GLEW_GET_FUN(__glewDrawArraysInstancedEXT);
}
// /usr/include/GL/glew.h:10438:9: warning: macro 'glDrawElementsInstancedEXT' contains a runtime value, translated to function
pub inline fn glDrawElementsInstancedEXT() @TypeOf(GLEW_GET_FUN(__glewDrawElementsInstancedEXT)) {
    return GLEW_GET_FUN(__glewDrawElementsInstancedEXT);
}
// /usr/include/GL/glew.h:10440:9: warning: macro 'GLEW_EXT_draw_instanced' contains a runtime value, translated to function
pub inline fn GLEW_EXT_draw_instanced() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_draw_instanced)) {
    return GLEW_GET_VAR(__GLEW_EXT_draw_instanced);
}
pub const GL_EXT_draw_range_elements = @as(c_int, 1);
pub const GL_MAX_ELEMENTS_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E8, .hex);
pub const GL_MAX_ELEMENTS_INDICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E9, .hex);
// /usr/include/GL/glew.h:10454:9: warning: macro 'glDrawRangeElementsEXT' contains a runtime value, translated to function
pub inline fn glDrawRangeElementsEXT() @TypeOf(GLEW_GET_FUN(__glewDrawRangeElementsEXT)) {
    return GLEW_GET_FUN(__glewDrawRangeElementsEXT);
}
// /usr/include/GL/glew.h:10456:9: warning: macro 'GLEW_EXT_draw_range_elements' contains a runtime value, translated to function
pub inline fn GLEW_EXT_draw_range_elements() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_draw_range_elements)) {
    return GLEW_GET_VAR(__GLEW_EXT_draw_range_elements);
}
pub const GL_EXT_draw_transform_feedback = @as(c_int, 1);
// /usr/include/GL/glew.h:10468:9: warning: macro 'glDrawTransformFeedbackEXT' contains a runtime value, translated to function
pub inline fn glDrawTransformFeedbackEXT() @TypeOf(GLEW_GET_FUN(__glewDrawTransformFeedbackEXT)) {
    return GLEW_GET_FUN(__glewDrawTransformFeedbackEXT);
}
// /usr/include/GL/glew.h:10469:9: warning: macro 'glDrawTransformFeedbackInstancedEXT' contains a runtime value, translated to function
pub inline fn glDrawTransformFeedbackInstancedEXT() @TypeOf(GLEW_GET_FUN(__glewDrawTransformFeedbackInstancedEXT)) {
    return GLEW_GET_FUN(__glewDrawTransformFeedbackInstancedEXT);
}
// /usr/include/GL/glew.h:10471:9: warning: macro 'GLEW_EXT_draw_transform_feedback' contains a runtime value, translated to function
pub inline fn GLEW_EXT_draw_transform_feedback() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_draw_transform_feedback)) {
    return GLEW_GET_VAR(__GLEW_EXT_draw_transform_feedback);
}
pub const GL_EXT_external_buffer = @as(c_int, 1);
// /usr/include/GL/glew.h:10485:9: warning: macro 'glBufferStorageExternalEXT' contains a runtime value, translated to function
pub inline fn glBufferStorageExternalEXT() @TypeOf(GLEW_GET_FUN(__glewBufferStorageExternalEXT)) {
    return GLEW_GET_FUN(__glewBufferStorageExternalEXT);
}
// /usr/include/GL/glew.h:10486:9: warning: macro 'glNamedBufferStorageExternalEXT' contains a runtime value, translated to function
pub inline fn glNamedBufferStorageExternalEXT() @TypeOf(GLEW_GET_FUN(__glewNamedBufferStorageExternalEXT)) {
    return GLEW_GET_FUN(__glewNamedBufferStorageExternalEXT);
}
// /usr/include/GL/glew.h:10488:9: warning: macro 'GLEW_EXT_external_buffer' contains a runtime value, translated to function
pub inline fn GLEW_EXT_external_buffer() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_external_buffer)) {
    return GLEW_GET_VAR(__GLEW_EXT_external_buffer);
}
pub const GL_EXT_float_blend = @as(c_int, 1);
// /usr/include/GL/glew.h:10497:9: warning: macro 'GLEW_EXT_float_blend' contains a runtime value, translated to function
pub inline fn GLEW_EXT_float_blend() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_float_blend)) {
    return GLEW_GET_VAR(__GLEW_EXT_float_blend);
}
pub const GL_EXT_fog_coord = @as(c_int, 1);
pub const GL_FOG_COORDINATE_SOURCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8450, .hex);
pub const GL_FOG_COORDINATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8451, .hex);
pub const GL_FRAGMENT_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8452, .hex);
pub const GL_CURRENT_FOG_COORDINATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8453, .hex);
pub const GL_FOG_COORDINATE_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8454, .hex);
pub const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8455, .hex);
pub const GL_FOG_COORDINATE_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8456, .hex);
pub const GL_FOG_COORDINATE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8457, .hex);
// /usr/include/GL/glew.h:10521:9: warning: macro 'glFogCoordPointerEXT' contains a runtime value, translated to function
pub inline fn glFogCoordPointerEXT() @TypeOf(GLEW_GET_FUN(__glewFogCoordPointerEXT)) {
    return GLEW_GET_FUN(__glewFogCoordPointerEXT);
}
// /usr/include/GL/glew.h:10522:9: warning: macro 'glFogCoorddEXT' contains a runtime value, translated to function
pub inline fn glFogCoorddEXT() @TypeOf(GLEW_GET_FUN(__glewFogCoorddEXT)) {
    return GLEW_GET_FUN(__glewFogCoorddEXT);
}
// /usr/include/GL/glew.h:10523:9: warning: macro 'glFogCoorddvEXT' contains a runtime value, translated to function
pub inline fn glFogCoorddvEXT() @TypeOf(GLEW_GET_FUN(__glewFogCoorddvEXT)) {
    return GLEW_GET_FUN(__glewFogCoorddvEXT);
}
// /usr/include/GL/glew.h:10524:9: warning: macro 'glFogCoordfEXT' contains a runtime value, translated to function
pub inline fn glFogCoordfEXT() @TypeOf(GLEW_GET_FUN(__glewFogCoordfEXT)) {
    return GLEW_GET_FUN(__glewFogCoordfEXT);
}
// /usr/include/GL/glew.h:10525:9: warning: macro 'glFogCoordfvEXT' contains a runtime value, translated to function
pub inline fn glFogCoordfvEXT() @TypeOf(GLEW_GET_FUN(__glewFogCoordfvEXT)) {
    return GLEW_GET_FUN(__glewFogCoordfvEXT);
}
// /usr/include/GL/glew.h:10527:9: warning: macro 'GLEW_EXT_fog_coord' contains a runtime value, translated to function
pub inline fn GLEW_EXT_fog_coord() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_fog_coord)) {
    return GLEW_GET_VAR(__GLEW_EXT_fog_coord);
}
pub const GL_EXT_frag_depth = @as(c_int, 1);
// /usr/include/GL/glew.h:10536:9: warning: macro 'GLEW_EXT_frag_depth' contains a runtime value, translated to function
pub inline fn GLEW_EXT_frag_depth() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_frag_depth)) {
    return GLEW_GET_VAR(__GLEW_EXT_frag_depth);
}
pub const GL_EXT_fragment_lighting = @as(c_int, 1);
pub const GL_FRAGMENT_LIGHTING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8400, .hex);
pub const GL_FRAGMENT_COLOR_MATERIAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8401, .hex);
pub const GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8402, .hex);
pub const GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8403, .hex);
pub const GL_MAX_FRAGMENT_LIGHTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8404, .hex);
pub const GL_MAX_ACTIVE_LIGHTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8405, .hex);
pub const GL_CURRENT_RASTER_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8406, .hex);
pub const GL_LIGHT_ENV_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8407, .hex);
pub const GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8408, .hex);
pub const GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8409, .hex);
pub const GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840A, .hex);
pub const GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840B, .hex);
pub const GL_FRAGMENT_LIGHT0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840C, .hex);
pub const GL_FRAGMENT_LIGHT7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8413, .hex);
// /usr/include/GL/glew.h:10579:9: warning: macro 'glFragmentColorMaterialEXT' contains a runtime value, translated to function
pub inline fn glFragmentColorMaterialEXT() @TypeOf(GLEW_GET_FUN(__glewFragmentColorMaterialEXT)) {
    return GLEW_GET_FUN(__glewFragmentColorMaterialEXT);
}
// /usr/include/GL/glew.h:10580:9: warning: macro 'glFragmentLightModelfEXT' contains a runtime value, translated to function
pub inline fn glFragmentLightModelfEXT() @TypeOf(GLEW_GET_FUN(__glewFragmentLightModelfEXT)) {
    return GLEW_GET_FUN(__glewFragmentLightModelfEXT);
}
// /usr/include/GL/glew.h:10581:9: warning: macro 'glFragmentLightModelfvEXT' contains a runtime value, translated to function
pub inline fn glFragmentLightModelfvEXT() @TypeOf(GLEW_GET_FUN(__glewFragmentLightModelfvEXT)) {
    return GLEW_GET_FUN(__glewFragmentLightModelfvEXT);
}
// /usr/include/GL/glew.h:10582:9: warning: macro 'glFragmentLightModeliEXT' contains a runtime value, translated to function
pub inline fn glFragmentLightModeliEXT() @TypeOf(GLEW_GET_FUN(__glewFragmentLightModeliEXT)) {
    return GLEW_GET_FUN(__glewFragmentLightModeliEXT);
}
// /usr/include/GL/glew.h:10583:9: warning: macro 'glFragmentLightModelivEXT' contains a runtime value, translated to function
pub inline fn glFragmentLightModelivEXT() @TypeOf(GLEW_GET_FUN(__glewFragmentLightModelivEXT)) {
    return GLEW_GET_FUN(__glewFragmentLightModelivEXT);
}
// /usr/include/GL/glew.h:10584:9: warning: macro 'glFragmentLightfEXT' contains a runtime value, translated to function
pub inline fn glFragmentLightfEXT() @TypeOf(GLEW_GET_FUN(__glewFragmentLightfEXT)) {
    return GLEW_GET_FUN(__glewFragmentLightfEXT);
}
// /usr/include/GL/glew.h:10585:9: warning: macro 'glFragmentLightfvEXT' contains a runtime value, translated to function
pub inline fn glFragmentLightfvEXT() @TypeOf(GLEW_GET_FUN(__glewFragmentLightfvEXT)) {
    return GLEW_GET_FUN(__glewFragmentLightfvEXT);
}
// /usr/include/GL/glew.h:10586:9: warning: macro 'glFragmentLightiEXT' contains a runtime value, translated to function
pub inline fn glFragmentLightiEXT() @TypeOf(GLEW_GET_FUN(__glewFragmentLightiEXT)) {
    return GLEW_GET_FUN(__glewFragmentLightiEXT);
}
// /usr/include/GL/glew.h:10587:9: warning: macro 'glFragmentLightivEXT' contains a runtime value, translated to function
pub inline fn glFragmentLightivEXT() @TypeOf(GLEW_GET_FUN(__glewFragmentLightivEXT)) {
    return GLEW_GET_FUN(__glewFragmentLightivEXT);
}
// /usr/include/GL/glew.h:10588:9: warning: macro 'glFragmentMaterialfEXT' contains a runtime value, translated to function
pub inline fn glFragmentMaterialfEXT() @TypeOf(GLEW_GET_FUN(__glewFragmentMaterialfEXT)) {
    return GLEW_GET_FUN(__glewFragmentMaterialfEXT);
}
// /usr/include/GL/glew.h:10589:9: warning: macro 'glFragmentMaterialfvEXT' contains a runtime value, translated to function
pub inline fn glFragmentMaterialfvEXT() @TypeOf(GLEW_GET_FUN(__glewFragmentMaterialfvEXT)) {
    return GLEW_GET_FUN(__glewFragmentMaterialfvEXT);
}
// /usr/include/GL/glew.h:10590:9: warning: macro 'glFragmentMaterialiEXT' contains a runtime value, translated to function
pub inline fn glFragmentMaterialiEXT() @TypeOf(GLEW_GET_FUN(__glewFragmentMaterialiEXT)) {
    return GLEW_GET_FUN(__glewFragmentMaterialiEXT);
}
// /usr/include/GL/glew.h:10591:9: warning: macro 'glFragmentMaterialivEXT' contains a runtime value, translated to function
pub inline fn glFragmentMaterialivEXT() @TypeOf(GLEW_GET_FUN(__glewFragmentMaterialivEXT)) {
    return GLEW_GET_FUN(__glewFragmentMaterialivEXT);
}
// /usr/include/GL/glew.h:10592:9: warning: macro 'glGetFragmentLightfvEXT' contains a runtime value, translated to function
pub inline fn glGetFragmentLightfvEXT() @TypeOf(GLEW_GET_FUN(__glewGetFragmentLightfvEXT)) {
    return GLEW_GET_FUN(__glewGetFragmentLightfvEXT);
}
// /usr/include/GL/glew.h:10593:9: warning: macro 'glGetFragmentLightivEXT' contains a runtime value, translated to function
pub inline fn glGetFragmentLightivEXT() @TypeOf(GLEW_GET_FUN(__glewGetFragmentLightivEXT)) {
    return GLEW_GET_FUN(__glewGetFragmentLightivEXT);
}
// /usr/include/GL/glew.h:10594:9: warning: macro 'glGetFragmentMaterialfvEXT' contains a runtime value, translated to function
pub inline fn glGetFragmentMaterialfvEXT() @TypeOf(GLEW_GET_FUN(__glewGetFragmentMaterialfvEXT)) {
    return GLEW_GET_FUN(__glewGetFragmentMaterialfvEXT);
}
// /usr/include/GL/glew.h:10595:9: warning: macro 'glGetFragmentMaterialivEXT' contains a runtime value, translated to function
pub inline fn glGetFragmentMaterialivEXT() @TypeOf(GLEW_GET_FUN(__glewGetFragmentMaterialivEXT)) {
    return GLEW_GET_FUN(__glewGetFragmentMaterialivEXT);
}
// /usr/include/GL/glew.h:10596:9: warning: macro 'glLightEnviEXT' contains a runtime value, translated to function
pub inline fn glLightEnviEXT() @TypeOf(GLEW_GET_FUN(__glewLightEnviEXT)) {
    return GLEW_GET_FUN(__glewLightEnviEXT);
}
// /usr/include/GL/glew.h:10598:9: warning: macro 'GLEW_EXT_fragment_lighting' contains a runtime value, translated to function
pub inline fn GLEW_EXT_fragment_lighting() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_fragment_lighting)) {
    return GLEW_GET_VAR(__GLEW_EXT_fragment_lighting);
}
pub const GL_EXT_framebuffer_blit = @as(c_int, 1);
pub const GL_DRAW_FRAMEBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_READ_FRAMEBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hex);
pub const GL_DRAW_FRAMEBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hex);
pub const GL_READ_FRAMEBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hex);
// /usr/include/GL/glew.h:10614:9: warning: macro 'glBlitFramebufferEXT' contains a runtime value, translated to function
pub inline fn glBlitFramebufferEXT() @TypeOf(GLEW_GET_FUN(__glewBlitFramebufferEXT)) {
    return GLEW_GET_FUN(__glewBlitFramebufferEXT);
}
// /usr/include/GL/glew.h:10616:9: warning: macro 'GLEW_EXT_framebuffer_blit' contains a runtime value, translated to function
pub inline fn GLEW_EXT_framebuffer_blit() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_framebuffer_blit)) {
    return GLEW_GET_VAR(__GLEW_EXT_framebuffer_blit);
}
pub const GL_EXT_framebuffer_multisample = @as(c_int, 1);
pub const GL_RENDERBUFFER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hex);
pub const GL_MAX_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hex);
// /usr/include/GL/glew.h:10631:9: warning: macro 'glRenderbufferStorageMultisampleEXT' contains a runtime value, translated to function
pub inline fn glRenderbufferStorageMultisampleEXT() @TypeOf(GLEW_GET_FUN(__glewRenderbufferStorageMultisampleEXT)) {
    return GLEW_GET_FUN(__glewRenderbufferStorageMultisampleEXT);
}
// /usr/include/GL/glew.h:10633:9: warning: macro 'GLEW_EXT_framebuffer_multisample' contains a runtime value, translated to function
pub inline fn GLEW_EXT_framebuffer_multisample() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_framebuffer_multisample)) {
    return GLEW_GET_VAR(__GLEW_EXT_framebuffer_multisample);
}
pub const GL_EXT_framebuffer_multisample_blit_scaled = @as(c_int, 1);
pub const GL_SCALED_RESOLVE_FASTEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BA, .hex);
pub const GL_SCALED_RESOLVE_NICEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BB, .hex);
// /usr/include/GL/glew.h:10645:9: warning: macro 'GLEW_EXT_framebuffer_multisample_blit_scaled' contains a runtime value, translated to function
pub inline fn GLEW_EXT_framebuffer_multisample_blit_scaled() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_framebuffer_multisample_blit_scaled)) {
    return GLEW_GET_VAR(__GLEW_EXT_framebuffer_multisample_blit_scaled);
}
pub const GL_EXT_framebuffer_object = @as(c_int, 1);
pub const GL_INVALID_FRAMEBUFFER_OPERATION_EXT = @as(c_int, 0x0506);
pub const GL_MAX_RENDERBUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E8, .hex);
pub const GL_FRAMEBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_RENDERBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD0, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD1, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD2, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD3, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hex);
pub const GL_FRAMEBUFFER_COMPLETE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD5, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD6, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD7, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD9, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDA, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDB, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDC, .hex);
pub const GL_FRAMEBUFFER_UNSUPPORTED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDD, .hex);
pub const GL_DEPTH_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D00, .hex);
pub const GL_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D20, .hex);
pub const GL_FRAMEBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D40, .hex);
pub const GL_RENDERBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D41, .hex);
pub const GL_RENDERBUFFER_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D42, .hex);
pub const GL_RENDERBUFFER_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D43, .hex);
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D44, .hex);
pub const GL_STENCIL_INDEX1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D46, .hex);
pub const GL_STENCIL_INDEX4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D47, .hex);
pub const GL_STENCIL_INDEX8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hex);
pub const GL_STENCIL_INDEX16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D49, .hex);
pub const GL_RENDERBUFFER_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D50, .hex);
pub const GL_RENDERBUFFER_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D51, .hex);
pub const GL_RENDERBUFFER_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D52, .hex);
pub const GL_RENDERBUFFER_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D53, .hex);
pub const GL_RENDERBUFFER_DEPTH_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D54, .hex);
pub const GL_RENDERBUFFER_STENCIL_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D55, .hex);
// /usr/include/GL/glew.h:10724:9: warning: macro 'glBindFramebufferEXT' contains a runtime value, translated to function
pub inline fn glBindFramebufferEXT() @TypeOf(GLEW_GET_FUN(__glewBindFramebufferEXT)) {
    return GLEW_GET_FUN(__glewBindFramebufferEXT);
}
// /usr/include/GL/glew.h:10725:9: warning: macro 'glBindRenderbufferEXT' contains a runtime value, translated to function
pub inline fn glBindRenderbufferEXT() @TypeOf(GLEW_GET_FUN(__glewBindRenderbufferEXT)) {
    return GLEW_GET_FUN(__glewBindRenderbufferEXT);
}
// /usr/include/GL/glew.h:10726:9: warning: macro 'glCheckFramebufferStatusEXT' contains a runtime value, translated to function
pub inline fn glCheckFramebufferStatusEXT() @TypeOf(GLEW_GET_FUN(__glewCheckFramebufferStatusEXT)) {
    return GLEW_GET_FUN(__glewCheckFramebufferStatusEXT);
}
// /usr/include/GL/glew.h:10727:9: warning: macro 'glDeleteFramebuffersEXT' contains a runtime value, translated to function
pub inline fn glDeleteFramebuffersEXT() @TypeOf(GLEW_GET_FUN(__glewDeleteFramebuffersEXT)) {
    return GLEW_GET_FUN(__glewDeleteFramebuffersEXT);
}
// /usr/include/GL/glew.h:10728:9: warning: macro 'glDeleteRenderbuffersEXT' contains a runtime value, translated to function
pub inline fn glDeleteRenderbuffersEXT() @TypeOf(GLEW_GET_FUN(__glewDeleteRenderbuffersEXT)) {
    return GLEW_GET_FUN(__glewDeleteRenderbuffersEXT);
}
// /usr/include/GL/glew.h:10729:9: warning: macro 'glFramebufferRenderbufferEXT' contains a runtime value, translated to function
pub inline fn glFramebufferRenderbufferEXT() @TypeOf(GLEW_GET_FUN(__glewFramebufferRenderbufferEXT)) {
    return GLEW_GET_FUN(__glewFramebufferRenderbufferEXT);
}
// /usr/include/GL/glew.h:10730:9: warning: macro 'glFramebufferTexture1DEXT' contains a runtime value, translated to function
pub inline fn glFramebufferTexture1DEXT() @TypeOf(GLEW_GET_FUN(__glewFramebufferTexture1DEXT)) {
    return GLEW_GET_FUN(__glewFramebufferTexture1DEXT);
}
// /usr/include/GL/glew.h:10731:9: warning: macro 'glFramebufferTexture2DEXT' contains a runtime value, translated to function
pub inline fn glFramebufferTexture2DEXT() @TypeOf(GLEW_GET_FUN(__glewFramebufferTexture2DEXT)) {
    return GLEW_GET_FUN(__glewFramebufferTexture2DEXT);
}
// /usr/include/GL/glew.h:10732:9: warning: macro 'glFramebufferTexture3DEXT' contains a runtime value, translated to function
pub inline fn glFramebufferTexture3DEXT() @TypeOf(GLEW_GET_FUN(__glewFramebufferTexture3DEXT)) {
    return GLEW_GET_FUN(__glewFramebufferTexture3DEXT);
}
// /usr/include/GL/glew.h:10733:9: warning: macro 'glGenFramebuffersEXT' contains a runtime value, translated to function
pub inline fn glGenFramebuffersEXT() @TypeOf(GLEW_GET_FUN(__glewGenFramebuffersEXT)) {
    return GLEW_GET_FUN(__glewGenFramebuffersEXT);
}
// /usr/include/GL/glew.h:10734:9: warning: macro 'glGenRenderbuffersEXT' contains a runtime value, translated to function
pub inline fn glGenRenderbuffersEXT() @TypeOf(GLEW_GET_FUN(__glewGenRenderbuffersEXT)) {
    return GLEW_GET_FUN(__glewGenRenderbuffersEXT);
}
// /usr/include/GL/glew.h:10735:9: warning: macro 'glGenerateMipmapEXT' contains a runtime value, translated to function
pub inline fn glGenerateMipmapEXT() @TypeOf(GLEW_GET_FUN(__glewGenerateMipmapEXT)) {
    return GLEW_GET_FUN(__glewGenerateMipmapEXT);
}
// /usr/include/GL/glew.h:10736:9: warning: macro 'glGetFramebufferAttachmentParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetFramebufferAttachmentParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetFramebufferAttachmentParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetFramebufferAttachmentParameterivEXT);
}
// /usr/include/GL/glew.h:10737:9: warning: macro 'glGetRenderbufferParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetRenderbufferParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetRenderbufferParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetRenderbufferParameterivEXT);
}
// /usr/include/GL/glew.h:10738:9: warning: macro 'glIsFramebufferEXT' contains a runtime value, translated to function
pub inline fn glIsFramebufferEXT() @TypeOf(GLEW_GET_FUN(__glewIsFramebufferEXT)) {
    return GLEW_GET_FUN(__glewIsFramebufferEXT);
}
// /usr/include/GL/glew.h:10739:9: warning: macro 'glIsRenderbufferEXT' contains a runtime value, translated to function
pub inline fn glIsRenderbufferEXT() @TypeOf(GLEW_GET_FUN(__glewIsRenderbufferEXT)) {
    return GLEW_GET_FUN(__glewIsRenderbufferEXT);
}
// /usr/include/GL/glew.h:10740:9: warning: macro 'glRenderbufferStorageEXT' contains a runtime value, translated to function
pub inline fn glRenderbufferStorageEXT() @TypeOf(GLEW_GET_FUN(__glewRenderbufferStorageEXT)) {
    return GLEW_GET_FUN(__glewRenderbufferStorageEXT);
}
// /usr/include/GL/glew.h:10742:9: warning: macro 'GLEW_EXT_framebuffer_object' contains a runtime value, translated to function
pub inline fn GLEW_EXT_framebuffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_framebuffer_object)) {
    return GLEW_GET_VAR(__GLEW_EXT_framebuffer_object);
}
pub const GL_EXT_framebuffer_sRGB = @as(c_int, 1);
pub const GL_FRAMEBUFFER_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DB9, .hex);
pub const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBA, .hex);
// /usr/include/GL/glew.h:10754:9: warning: macro 'GLEW_EXT_framebuffer_sRGB' contains a runtime value, translated to function
pub inline fn GLEW_EXT_framebuffer_sRGB() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_framebuffer_sRGB)) {
    return GLEW_GET_VAR(__GLEW_EXT_framebuffer_sRGB);
}
pub const GL_EXT_geometry_point_size = @as(c_int, 1);
pub const GL_GEOMETRY_SHADER_BIT_EXT = @as(c_int, 0x00000004);
pub const GL_LINES_ADJACENCY_EXT = @as(c_int, 0xA);
pub const GL_LINE_STRIP_ADJACENCY_EXT = @as(c_int, 0xB);
pub const GL_TRIANGLES_ADJACENCY_EXT = @as(c_int, 0xC);
pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT = @as(c_int, 0xD);
pub const GL_LAYER_PROVOKING_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825E, .hex);
pub const GL_UNDEFINED_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8260, .hex);
pub const GL_GEOMETRY_SHADER_INVOCATIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887F, .hex);
pub const GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8916, .hex);
pub const GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8917, .hex);
pub const GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8918, .hex);
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2C, .hex);
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A32, .hex);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hex);
pub const GL_PRIMITIVES_GENERATED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hex);
pub const GL_GEOMETRY_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hex);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hex);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hex);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hex);
pub const GL_FIRST_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hex);
pub const GL_LAST_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hex);
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hex);
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CD, .hex);
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D7, .hex);
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9123, .hex);
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9124, .hex);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CF, .hex);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D5, .hex);
pub const GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9309, .hex);
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9312, .hex);
pub const GL_MAX_FRAMEBUFFER_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9317, .hex);
// /usr/include/GL/glew.h:10797:9: warning: macro 'GLEW_EXT_geometry_point_size' contains a runtime value, translated to function
pub inline fn GLEW_EXT_geometry_point_size() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_geometry_point_size)) {
    return GLEW_GET_VAR(__GLEW_EXT_geometry_point_size);
}
pub const GL_EXT_geometry_shader = @as(c_int, 1);
// /usr/include/GL/glew.h:10840:9: warning: macro 'GLEW_EXT_geometry_shader' contains a runtime value, translated to function
pub inline fn GLEW_EXT_geometry_shader() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_geometry_shader)) {
    return GLEW_GET_VAR(__GLEW_EXT_geometry_shader);
}
pub const GL_EXT_geometry_shader4 = @as(c_int, 1);
pub const GL_PROGRAM_POINT_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hex);
pub const GL_MAX_VARYING_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA9, .hex);
pub const GL_GEOMETRY_VERTICES_OUT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDA, .hex);
pub const GL_GEOMETRY_INPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDB, .hex);
pub const GL_GEOMETRY_OUTPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDC, .hex);
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDD, .hex);
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDE, .hex);
// /usr/include/GL/glew.h:10874:9: warning: macro 'glFramebufferTextureEXT' contains a runtime value, translated to function
pub inline fn glFramebufferTextureEXT() @TypeOf(GLEW_GET_FUN(__glewFramebufferTextureEXT)) {
    return GLEW_GET_FUN(__glewFramebufferTextureEXT);
}
// /usr/include/GL/glew.h:10875:9: warning: macro 'glFramebufferTextureFaceEXT' contains a runtime value, translated to function
pub inline fn glFramebufferTextureFaceEXT() @TypeOf(GLEW_GET_FUN(__glewFramebufferTextureFaceEXT)) {
    return GLEW_GET_FUN(__glewFramebufferTextureFaceEXT);
}
// /usr/include/GL/glew.h:10876:9: warning: macro 'glProgramParameteriEXT' contains a runtime value, translated to function
pub inline fn glProgramParameteriEXT() @TypeOf(GLEW_GET_FUN(__glewProgramParameteriEXT)) {
    return GLEW_GET_FUN(__glewProgramParameteriEXT);
}
// /usr/include/GL/glew.h:10878:9: warning: macro 'GLEW_EXT_geometry_shader4' contains a runtime value, translated to function
pub inline fn GLEW_EXT_geometry_shader4() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_geometry_shader4)) {
    return GLEW_GET_VAR(__GLEW_EXT_geometry_shader4);
}
pub const GL_EXT_gpu_program_parameters = @as(c_int, 1);
// /usr/include/GL/glew.h:10890:9: warning: macro 'glProgramEnvParameters4fvEXT' contains a runtime value, translated to function
pub inline fn glProgramEnvParameters4fvEXT() @TypeOf(GLEW_GET_FUN(__glewProgramEnvParameters4fvEXT)) {
    return GLEW_GET_FUN(__glewProgramEnvParameters4fvEXT);
}
// /usr/include/GL/glew.h:10891:9: warning: macro 'glProgramLocalParameters4fvEXT' contains a runtime value, translated to function
pub inline fn glProgramLocalParameters4fvEXT() @TypeOf(GLEW_GET_FUN(__glewProgramLocalParameters4fvEXT)) {
    return GLEW_GET_FUN(__glewProgramLocalParameters4fvEXT);
}
// /usr/include/GL/glew.h:10893:9: warning: macro 'GLEW_EXT_gpu_program_parameters' contains a runtime value, translated to function
pub inline fn GLEW_EXT_gpu_program_parameters() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_gpu_program_parameters)) {
    return GLEW_GET_VAR(__GLEW_EXT_gpu_program_parameters);
}
pub const GL_EXT_gpu_shader4 = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hex);
pub const GL_SAMPLER_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC0, .hex);
pub const GL_SAMPLER_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC1, .hex);
pub const GL_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hex);
pub const GL_SAMPLER_1D_ARRAY_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC3, .hex);
pub const GL_SAMPLER_2D_ARRAY_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC4, .hex);
pub const GL_SAMPLER_CUBE_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC5, .hex);
pub const GL_UNSIGNED_INT_VEC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC6, .hex);
pub const GL_UNSIGNED_INT_VEC3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC7, .hex);
pub const GL_UNSIGNED_INT_VEC4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC8, .hex);
pub const GL_INT_SAMPLER_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC9, .hex);
pub const GL_INT_SAMPLER_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCA, .hex);
pub const GL_INT_SAMPLER_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCB, .hex);
pub const GL_INT_SAMPLER_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCC, .hex);
pub const GL_INT_SAMPLER_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCD, .hex);
pub const GL_INT_SAMPLER_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCE, .hex);
pub const GL_INT_SAMPLER_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCF, .hex);
pub const GL_INT_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD1, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD2, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD3, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD4, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD5, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD6, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD7, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hex);
// /usr/include/GL/glew.h:10964:9: warning: macro 'glBindFragDataLocationEXT' contains a runtime value, translated to function
pub inline fn glBindFragDataLocationEXT() @TypeOf(GLEW_GET_FUN(__glewBindFragDataLocationEXT)) {
    return GLEW_GET_FUN(__glewBindFragDataLocationEXT);
}
// /usr/include/GL/glew.h:10965:9: warning: macro 'glGetFragDataLocationEXT' contains a runtime value, translated to function
pub inline fn glGetFragDataLocationEXT() @TypeOf(GLEW_GET_FUN(__glewGetFragDataLocationEXT)) {
    return GLEW_GET_FUN(__glewGetFragDataLocationEXT);
}
// /usr/include/GL/glew.h:10966:9: warning: macro 'glGetUniformuivEXT' contains a runtime value, translated to function
pub inline fn glGetUniformuivEXT() @TypeOf(GLEW_GET_FUN(__glewGetUniformuivEXT)) {
    return GLEW_GET_FUN(__glewGetUniformuivEXT);
}
// /usr/include/GL/glew.h:10967:9: warning: macro 'glGetVertexAttribIivEXT' contains a runtime value, translated to function
pub inline fn glGetVertexAttribIivEXT() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribIivEXT)) {
    return GLEW_GET_FUN(__glewGetVertexAttribIivEXT);
}
// /usr/include/GL/glew.h:10968:9: warning: macro 'glGetVertexAttribIuivEXT' contains a runtime value, translated to function
pub inline fn glGetVertexAttribIuivEXT() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribIuivEXT)) {
    return GLEW_GET_FUN(__glewGetVertexAttribIuivEXT);
}
// /usr/include/GL/glew.h:10969:9: warning: macro 'glUniform1uiEXT' contains a runtime value, translated to function
pub inline fn glUniform1uiEXT() @TypeOf(GLEW_GET_FUN(__glewUniform1uiEXT)) {
    return GLEW_GET_FUN(__glewUniform1uiEXT);
}
// /usr/include/GL/glew.h:10970:9: warning: macro 'glUniform1uivEXT' contains a runtime value, translated to function
pub inline fn glUniform1uivEXT() @TypeOf(GLEW_GET_FUN(__glewUniform1uivEXT)) {
    return GLEW_GET_FUN(__glewUniform1uivEXT);
}
// /usr/include/GL/glew.h:10971:9: warning: macro 'glUniform2uiEXT' contains a runtime value, translated to function
pub inline fn glUniform2uiEXT() @TypeOf(GLEW_GET_FUN(__glewUniform2uiEXT)) {
    return GLEW_GET_FUN(__glewUniform2uiEXT);
}
// /usr/include/GL/glew.h:10972:9: warning: macro 'glUniform2uivEXT' contains a runtime value, translated to function
pub inline fn glUniform2uivEXT() @TypeOf(GLEW_GET_FUN(__glewUniform2uivEXT)) {
    return GLEW_GET_FUN(__glewUniform2uivEXT);
}
// /usr/include/GL/glew.h:10973:9: warning: macro 'glUniform3uiEXT' contains a runtime value, translated to function
pub inline fn glUniform3uiEXT() @TypeOf(GLEW_GET_FUN(__glewUniform3uiEXT)) {
    return GLEW_GET_FUN(__glewUniform3uiEXT);
}
// /usr/include/GL/glew.h:10974:9: warning: macro 'glUniform3uivEXT' contains a runtime value, translated to function
pub inline fn glUniform3uivEXT() @TypeOf(GLEW_GET_FUN(__glewUniform3uivEXT)) {
    return GLEW_GET_FUN(__glewUniform3uivEXT);
}
// /usr/include/GL/glew.h:10975:9: warning: macro 'glUniform4uiEXT' contains a runtime value, translated to function
pub inline fn glUniform4uiEXT() @TypeOf(GLEW_GET_FUN(__glewUniform4uiEXT)) {
    return GLEW_GET_FUN(__glewUniform4uiEXT);
}
// /usr/include/GL/glew.h:10976:9: warning: macro 'glUniform4uivEXT' contains a runtime value, translated to function
pub inline fn glUniform4uivEXT() @TypeOf(GLEW_GET_FUN(__glewUniform4uivEXT)) {
    return GLEW_GET_FUN(__glewUniform4uivEXT);
}
// /usr/include/GL/glew.h:10977:9: warning: macro 'glVertexAttribI1iEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI1iEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI1iEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI1iEXT);
}
// /usr/include/GL/glew.h:10978:9: warning: macro 'glVertexAttribI1ivEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI1ivEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI1ivEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI1ivEXT);
}
// /usr/include/GL/glew.h:10979:9: warning: macro 'glVertexAttribI1uiEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI1uiEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI1uiEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI1uiEXT);
}
// /usr/include/GL/glew.h:10980:9: warning: macro 'glVertexAttribI1uivEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI1uivEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI1uivEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI1uivEXT);
}
// /usr/include/GL/glew.h:10981:9: warning: macro 'glVertexAttribI2iEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI2iEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI2iEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI2iEXT);
}
// /usr/include/GL/glew.h:10982:9: warning: macro 'glVertexAttribI2ivEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI2ivEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI2ivEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI2ivEXT);
}
// /usr/include/GL/glew.h:10983:9: warning: macro 'glVertexAttribI2uiEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI2uiEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI2uiEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI2uiEXT);
}
// /usr/include/GL/glew.h:10984:9: warning: macro 'glVertexAttribI2uivEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI2uivEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI2uivEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI2uivEXT);
}
// /usr/include/GL/glew.h:10985:9: warning: macro 'glVertexAttribI3iEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI3iEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI3iEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI3iEXT);
}
// /usr/include/GL/glew.h:10986:9: warning: macro 'glVertexAttribI3ivEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI3ivEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI3ivEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI3ivEXT);
}
// /usr/include/GL/glew.h:10987:9: warning: macro 'glVertexAttribI3uiEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI3uiEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI3uiEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI3uiEXT);
}
// /usr/include/GL/glew.h:10988:9: warning: macro 'glVertexAttribI3uivEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI3uivEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI3uivEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI3uivEXT);
}
// /usr/include/GL/glew.h:10989:9: warning: macro 'glVertexAttribI4bvEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI4bvEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4bvEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI4bvEXT);
}
// /usr/include/GL/glew.h:10990:9: warning: macro 'glVertexAttribI4iEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI4iEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4iEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI4iEXT);
}
// /usr/include/GL/glew.h:10991:9: warning: macro 'glVertexAttribI4ivEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI4ivEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4ivEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI4ivEXT);
}
// /usr/include/GL/glew.h:10992:9: warning: macro 'glVertexAttribI4svEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI4svEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4svEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI4svEXT);
}
// /usr/include/GL/glew.h:10993:9: warning: macro 'glVertexAttribI4ubvEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI4ubvEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4ubvEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI4ubvEXT);
}
// /usr/include/GL/glew.h:10994:9: warning: macro 'glVertexAttribI4uiEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI4uiEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4uiEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI4uiEXT);
}
// /usr/include/GL/glew.h:10995:9: warning: macro 'glVertexAttribI4uivEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI4uivEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4uivEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI4uivEXT);
}
// /usr/include/GL/glew.h:10996:9: warning: macro 'glVertexAttribI4usvEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribI4usvEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribI4usvEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribI4usvEXT);
}
// /usr/include/GL/glew.h:10997:9: warning: macro 'glVertexAttribIPointerEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribIPointerEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribIPointerEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribIPointerEXT);
}
// /usr/include/GL/glew.h:10999:9: warning: macro 'GLEW_EXT_gpu_shader4' contains a runtime value, translated to function
pub inline fn GLEW_EXT_gpu_shader4() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_gpu_shader4)) {
    return GLEW_GET_VAR(__GLEW_EXT_gpu_shader4);
}
pub const GL_EXT_gpu_shader5 = @as(c_int, 1);
// /usr/include/GL/glew.h:11008:9: warning: macro 'GLEW_EXT_gpu_shader5' contains a runtime value, translated to function
pub inline fn GLEW_EXT_gpu_shader5() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_gpu_shader5)) {
    return GLEW_GET_VAR(__GLEW_EXT_gpu_shader5);
}
pub const GL_EXT_histogram = @as(c_int, 1);
pub const GL_HISTOGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8024, .hex);
pub const GL_PROXY_HISTOGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8025, .hex);
pub const GL_HISTOGRAM_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8026, .hex);
pub const GL_HISTOGRAM_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8027, .hex);
pub const GL_HISTOGRAM_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8028, .hex);
pub const GL_HISTOGRAM_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8029, .hex);
pub const GL_HISTOGRAM_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802A, .hex);
pub const GL_HISTOGRAM_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802B, .hex);
pub const GL_HISTOGRAM_LUMINANCE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802C, .hex);
pub const GL_HISTOGRAM_SINK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802D, .hex);
pub const GL_MINMAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802E, .hex);
pub const GL_MINMAX_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802F, .hex);
pub const GL_MINMAX_SINK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8030, .hex);
// /usr/include/GL/glew.h:11042:9: warning: macro 'glGetHistogramEXT' contains a runtime value, translated to function
pub inline fn glGetHistogramEXT() @TypeOf(GLEW_GET_FUN(__glewGetHistogramEXT)) {
    return GLEW_GET_FUN(__glewGetHistogramEXT);
}
// /usr/include/GL/glew.h:11043:9: warning: macro 'glGetHistogramParameterfvEXT' contains a runtime value, translated to function
pub inline fn glGetHistogramParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewGetHistogramParameterfvEXT)) {
    return GLEW_GET_FUN(__glewGetHistogramParameterfvEXT);
}
// /usr/include/GL/glew.h:11044:9: warning: macro 'glGetHistogramParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetHistogramParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetHistogramParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetHistogramParameterivEXT);
}
// /usr/include/GL/glew.h:11045:9: warning: macro 'glGetMinmaxEXT' contains a runtime value, translated to function
pub inline fn glGetMinmaxEXT() @TypeOf(GLEW_GET_FUN(__glewGetMinmaxEXT)) {
    return GLEW_GET_FUN(__glewGetMinmaxEXT);
}
// /usr/include/GL/glew.h:11046:9: warning: macro 'glGetMinmaxParameterfvEXT' contains a runtime value, translated to function
pub inline fn glGetMinmaxParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewGetMinmaxParameterfvEXT)) {
    return GLEW_GET_FUN(__glewGetMinmaxParameterfvEXT);
}
// /usr/include/GL/glew.h:11047:9: warning: macro 'glGetMinmaxParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetMinmaxParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetMinmaxParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetMinmaxParameterivEXT);
}
// /usr/include/GL/glew.h:11048:9: warning: macro 'glHistogramEXT' contains a runtime value, translated to function
pub inline fn glHistogramEXT() @TypeOf(GLEW_GET_FUN(__glewHistogramEXT)) {
    return GLEW_GET_FUN(__glewHistogramEXT);
}
// /usr/include/GL/glew.h:11049:9: warning: macro 'glMinmaxEXT' contains a runtime value, translated to function
pub inline fn glMinmaxEXT() @TypeOf(GLEW_GET_FUN(__glewMinmaxEXT)) {
    return GLEW_GET_FUN(__glewMinmaxEXT);
}
// /usr/include/GL/glew.h:11050:9: warning: macro 'glResetHistogramEXT' contains a runtime value, translated to function
pub inline fn glResetHistogramEXT() @TypeOf(GLEW_GET_FUN(__glewResetHistogramEXT)) {
    return GLEW_GET_FUN(__glewResetHistogramEXT);
}
// /usr/include/GL/glew.h:11051:9: warning: macro 'glResetMinmaxEXT' contains a runtime value, translated to function
pub inline fn glResetMinmaxEXT() @TypeOf(GLEW_GET_FUN(__glewResetMinmaxEXT)) {
    return GLEW_GET_FUN(__glewResetMinmaxEXT);
}
// /usr/include/GL/glew.h:11053:9: warning: macro 'GLEW_EXT_histogram' contains a runtime value, translated to function
pub inline fn GLEW_EXT_histogram() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_histogram)) {
    return GLEW_GET_VAR(__GLEW_EXT_histogram);
}
pub const GL_EXT_index_array_formats = @as(c_int, 1);
// /usr/include/GL/glew.h:11062:9: warning: macro 'GLEW_EXT_index_array_formats' contains a runtime value, translated to function
pub inline fn GLEW_EXT_index_array_formats() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_index_array_formats)) {
    return GLEW_GET_VAR(__GLEW_EXT_index_array_formats);
}
pub const GL_EXT_index_func = @as(c_int, 1);
// /usr/include/GL/glew.h:11073:9: warning: macro 'glIndexFuncEXT' contains a runtime value, translated to function
pub inline fn glIndexFuncEXT() @TypeOf(GLEW_GET_FUN(__glewIndexFuncEXT)) {
    return GLEW_GET_FUN(__glewIndexFuncEXT);
}
// /usr/include/GL/glew.h:11075:9: warning: macro 'GLEW_EXT_index_func' contains a runtime value, translated to function
pub inline fn GLEW_EXT_index_func() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_index_func)) {
    return GLEW_GET_VAR(__GLEW_EXT_index_func);
}
pub const GL_EXT_index_material = @as(c_int, 1);
// /usr/include/GL/glew.h:11086:9: warning: macro 'glIndexMaterialEXT' contains a runtime value, translated to function
pub inline fn glIndexMaterialEXT() @TypeOf(GLEW_GET_FUN(__glewIndexMaterialEXT)) {
    return GLEW_GET_FUN(__glewIndexMaterialEXT);
}
// /usr/include/GL/glew.h:11088:9: warning: macro 'GLEW_EXT_index_material' contains a runtime value, translated to function
pub inline fn GLEW_EXT_index_material() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_index_material)) {
    return GLEW_GET_VAR(__GLEW_EXT_index_material);
}
pub const GL_EXT_index_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:11097:9: warning: macro 'GLEW_EXT_index_texture' contains a runtime value, translated to function
pub inline fn GLEW_EXT_index_texture() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_index_texture)) {
    return GLEW_GET_VAR(__GLEW_EXT_index_texture);
}
pub const GL_EXT_instanced_arrays = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hex);
// /usr/include/GL/glew.h:11110:9: warning: macro 'glVertexAttribDivisorEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribDivisorEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribDivisorEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribDivisorEXT);
}
// /usr/include/GL/glew.h:11112:9: warning: macro 'GLEW_EXT_instanced_arrays' contains a runtime value, translated to function
pub inline fn GLEW_EXT_instanced_arrays() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_instanced_arrays)) {
    return GLEW_GET_VAR(__GLEW_EXT_instanced_arrays);
}
pub const GL_EXT_light_texture = @as(c_int, 1);
pub const GL_FRAGMENT_MATERIAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8349, .hex);
pub const GL_FRAGMENT_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834A, .hex);
pub const GL_FRAGMENT_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834C, .hex);
pub const GL_ATTENUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834D, .hex);
pub const GL_SHADOW_ATTENUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834E, .hex);
pub const GL_TEXTURE_APPLICATION_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834F, .hex);
pub const GL_TEXTURE_LIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8350, .hex);
pub const GL_TEXTURE_MATERIAL_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8351, .hex);
pub const GL_TEXTURE_MATERIAL_PARAMETER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8352, .hex);
// /usr/include/GL/glew.h:11135:9: warning: macro 'glApplyTextureEXT' contains a runtime value, translated to function
pub inline fn glApplyTextureEXT() @TypeOf(GLEW_GET_FUN(__glewApplyTextureEXT)) {
    return GLEW_GET_FUN(__glewApplyTextureEXT);
}
// /usr/include/GL/glew.h:11136:9: warning: macro 'glTextureLightEXT' contains a runtime value, translated to function
pub inline fn glTextureLightEXT() @TypeOf(GLEW_GET_FUN(__glewTextureLightEXT)) {
    return GLEW_GET_FUN(__glewTextureLightEXT);
}
// /usr/include/GL/glew.h:11137:9: warning: macro 'glTextureMaterialEXT' contains a runtime value, translated to function
pub inline fn glTextureMaterialEXT() @TypeOf(GLEW_GET_FUN(__glewTextureMaterialEXT)) {
    return GLEW_GET_FUN(__glewTextureMaterialEXT);
}
// /usr/include/GL/glew.h:11139:9: warning: macro 'GLEW_EXT_light_texture' contains a runtime value, translated to function
pub inline fn GLEW_EXT_light_texture() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_light_texture)) {
    return GLEW_GET_VAR(__GLEW_EXT_light_texture);
}
pub const GL_EXT_map_buffer_range = @as(c_int, 1);
pub const GL_MAP_READ_BIT_EXT = @as(c_int, 0x0001);
pub const GL_MAP_WRITE_BIT_EXT = @as(c_int, 0x0002);
pub const GL_MAP_INVALIDATE_RANGE_BIT_EXT = @as(c_int, 0x0004);
pub const GL_MAP_INVALIDATE_BUFFER_BIT_EXT = @as(c_int, 0x0008);
pub const GL_MAP_FLUSH_EXPLICIT_BIT_EXT = @as(c_int, 0x0010);
pub const GL_MAP_UNSYNCHRONIZED_BIT_EXT = @as(c_int, 0x0020);
// /usr/include/GL/glew.h:11158:9: warning: macro 'glFlushMappedBufferRangeEXT' contains a runtime value, translated to function
pub inline fn glFlushMappedBufferRangeEXT() @TypeOf(GLEW_GET_FUN(__glewFlushMappedBufferRangeEXT)) {
    return GLEW_GET_FUN(__glewFlushMappedBufferRangeEXT);
}
// /usr/include/GL/glew.h:11159:9: warning: macro 'glMapBufferRangeEXT' contains a runtime value, translated to function
pub inline fn glMapBufferRangeEXT() @TypeOf(GLEW_GET_FUN(__glewMapBufferRangeEXT)) {
    return GLEW_GET_FUN(__glewMapBufferRangeEXT);
}
// /usr/include/GL/glew.h:11161:9: warning: macro 'GLEW_EXT_map_buffer_range' contains a runtime value, translated to function
pub inline fn GLEW_EXT_map_buffer_range() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_map_buffer_range)) {
    return GLEW_GET_VAR(__GLEW_EXT_map_buffer_range);
}
pub const GL_EXT_memory_object = @as(c_int, 1);
pub const GL_UUID_SIZE_EXT = @as(c_int, 16);
pub const GL_TEXTURE_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9580, .hex);
pub const GL_DEDICATED_MEMORY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9581, .hex);
pub const GL_NUM_TILING_TYPES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9582, .hex);
pub const GL_TILING_TYPES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9583, .hex);
pub const GL_OPTIMAL_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9584, .hex);
pub const GL_LINEAR_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9585, .hex);
pub const GL_NUM_DEVICE_UUIDS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9596, .hex);
pub const GL_DEVICE_UUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9597, .hex);
pub const GL_DRIVER_UUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9598, .hex);
pub const GL_PROTECTED_MEMORY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959B, .hex);
// /usr/include/GL/glew.h:11202:9: warning: macro 'glBufferStorageMemEXT' contains a runtime value, translated to function
pub inline fn glBufferStorageMemEXT() @TypeOf(GLEW_GET_FUN(__glewBufferStorageMemEXT)) {
    return GLEW_GET_FUN(__glewBufferStorageMemEXT);
}
// /usr/include/GL/glew.h:11203:9: warning: macro 'glCreateMemoryObjectsEXT' contains a runtime value, translated to function
pub inline fn glCreateMemoryObjectsEXT() @TypeOf(GLEW_GET_FUN(__glewCreateMemoryObjectsEXT)) {
    return GLEW_GET_FUN(__glewCreateMemoryObjectsEXT);
}
// /usr/include/GL/glew.h:11204:9: warning: macro 'glDeleteMemoryObjectsEXT' contains a runtime value, translated to function
pub inline fn glDeleteMemoryObjectsEXT() @TypeOf(GLEW_GET_FUN(__glewDeleteMemoryObjectsEXT)) {
    return GLEW_GET_FUN(__glewDeleteMemoryObjectsEXT);
}
// /usr/include/GL/glew.h:11205:9: warning: macro 'glGetMemoryObjectParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetMemoryObjectParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetMemoryObjectParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetMemoryObjectParameterivEXT);
}
// /usr/include/GL/glew.h:11206:9: warning: macro 'glGetUnsignedBytei_vEXT' contains a runtime value, translated to function
pub inline fn glGetUnsignedBytei_vEXT() @TypeOf(GLEW_GET_FUN(__glewGetUnsignedBytei_vEXT)) {
    return GLEW_GET_FUN(__glewGetUnsignedBytei_vEXT);
}
// /usr/include/GL/glew.h:11207:9: warning: macro 'glGetUnsignedBytevEXT' contains a runtime value, translated to function
pub inline fn glGetUnsignedBytevEXT() @TypeOf(GLEW_GET_FUN(__glewGetUnsignedBytevEXT)) {
    return GLEW_GET_FUN(__glewGetUnsignedBytevEXT);
}
// /usr/include/GL/glew.h:11208:9: warning: macro 'glIsMemoryObjectEXT' contains a runtime value, translated to function
pub inline fn glIsMemoryObjectEXT() @TypeOf(GLEW_GET_FUN(__glewIsMemoryObjectEXT)) {
    return GLEW_GET_FUN(__glewIsMemoryObjectEXT);
}
// /usr/include/GL/glew.h:11209:9: warning: macro 'glMemoryObjectParameterivEXT' contains a runtime value, translated to function
pub inline fn glMemoryObjectParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewMemoryObjectParameterivEXT)) {
    return GLEW_GET_FUN(__glewMemoryObjectParameterivEXT);
}
// /usr/include/GL/glew.h:11210:9: warning: macro 'glNamedBufferStorageMemEXT' contains a runtime value, translated to function
pub inline fn glNamedBufferStorageMemEXT() @TypeOf(GLEW_GET_FUN(__glewNamedBufferStorageMemEXT)) {
    return GLEW_GET_FUN(__glewNamedBufferStorageMemEXT);
}
// /usr/include/GL/glew.h:11211:9: warning: macro 'glTexStorageMem1DEXT' contains a runtime value, translated to function
pub inline fn glTexStorageMem1DEXT() @TypeOf(GLEW_GET_FUN(__glewTexStorageMem1DEXT)) {
    return GLEW_GET_FUN(__glewTexStorageMem1DEXT);
}
// /usr/include/GL/glew.h:11212:9: warning: macro 'glTexStorageMem2DEXT' contains a runtime value, translated to function
pub inline fn glTexStorageMem2DEXT() @TypeOf(GLEW_GET_FUN(__glewTexStorageMem2DEXT)) {
    return GLEW_GET_FUN(__glewTexStorageMem2DEXT);
}
// /usr/include/GL/glew.h:11213:9: warning: macro 'glTexStorageMem2DMultisampleEXT' contains a runtime value, translated to function
pub inline fn glTexStorageMem2DMultisampleEXT() @TypeOf(GLEW_GET_FUN(__glewTexStorageMem2DMultisampleEXT)) {
    return GLEW_GET_FUN(__glewTexStorageMem2DMultisampleEXT);
}
// /usr/include/GL/glew.h:11214:9: warning: macro 'glTexStorageMem3DEXT' contains a runtime value, translated to function
pub inline fn glTexStorageMem3DEXT() @TypeOf(GLEW_GET_FUN(__glewTexStorageMem3DEXT)) {
    return GLEW_GET_FUN(__glewTexStorageMem3DEXT);
}
// /usr/include/GL/glew.h:11215:9: warning: macro 'glTexStorageMem3DMultisampleEXT' contains a runtime value, translated to function
pub inline fn glTexStorageMem3DMultisampleEXT() @TypeOf(GLEW_GET_FUN(__glewTexStorageMem3DMultisampleEXT)) {
    return GLEW_GET_FUN(__glewTexStorageMem3DMultisampleEXT);
}
// /usr/include/GL/glew.h:11216:9: warning: macro 'glTextureStorageMem1DEXT' contains a runtime value, translated to function
pub inline fn glTextureStorageMem1DEXT() @TypeOf(GLEW_GET_FUN(__glewTextureStorageMem1DEXT)) {
    return GLEW_GET_FUN(__glewTextureStorageMem1DEXT);
}
// /usr/include/GL/glew.h:11217:9: warning: macro 'glTextureStorageMem2DEXT' contains a runtime value, translated to function
pub inline fn glTextureStorageMem2DEXT() @TypeOf(GLEW_GET_FUN(__glewTextureStorageMem2DEXT)) {
    return GLEW_GET_FUN(__glewTextureStorageMem2DEXT);
}
// /usr/include/GL/glew.h:11218:9: warning: macro 'glTextureStorageMem2DMultisampleEXT' contains a runtime value, translated to function
pub inline fn glTextureStorageMem2DMultisampleEXT() @TypeOf(GLEW_GET_FUN(__glewTextureStorageMem2DMultisampleEXT)) {
    return GLEW_GET_FUN(__glewTextureStorageMem2DMultisampleEXT);
}
// /usr/include/GL/glew.h:11219:9: warning: macro 'glTextureStorageMem3DEXT' contains a runtime value, translated to function
pub inline fn glTextureStorageMem3DEXT() @TypeOf(GLEW_GET_FUN(__glewTextureStorageMem3DEXT)) {
    return GLEW_GET_FUN(__glewTextureStorageMem3DEXT);
}
// /usr/include/GL/glew.h:11220:9: warning: macro 'glTextureStorageMem3DMultisampleEXT' contains a runtime value, translated to function
pub inline fn glTextureStorageMem3DMultisampleEXT() @TypeOf(GLEW_GET_FUN(__glewTextureStorageMem3DMultisampleEXT)) {
    return GLEW_GET_FUN(__glewTextureStorageMem3DMultisampleEXT);
}
// /usr/include/GL/glew.h:11222:9: warning: macro 'GLEW_EXT_memory_object' contains a runtime value, translated to function
pub inline fn GLEW_EXT_memory_object() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_memory_object)) {
    return GLEW_GET_VAR(__GLEW_EXT_memory_object);
}
pub const GL_EXT_memory_object_fd = @as(c_int, 1);
pub const GL_HANDLE_TYPE_OPAQUE_FD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9586, .hex);
// /usr/include/GL/glew.h:11235:9: warning: macro 'glImportMemoryFdEXT' contains a runtime value, translated to function
pub inline fn glImportMemoryFdEXT() @TypeOf(GLEW_GET_FUN(__glewImportMemoryFdEXT)) {
    return GLEW_GET_FUN(__glewImportMemoryFdEXT);
}
// /usr/include/GL/glew.h:11237:9: warning: macro 'GLEW_EXT_memory_object_fd' contains a runtime value, translated to function
pub inline fn GLEW_EXT_memory_object_fd() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_memory_object_fd)) {
    return GLEW_GET_VAR(__GLEW_EXT_memory_object_fd);
}
pub const GL_EXT_memory_object_win32 = @as(c_int, 1);
pub const GL_LUID_SIZE_EXT = @as(c_int, 8);
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9587, .hex);
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9588, .hex);
pub const GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9589, .hex);
pub const GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958A, .hex);
pub const GL_HANDLE_TYPE_D3D11_IMAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958B, .hex);
pub const GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958C, .hex);
pub const GL_HANDLE_TYPE_D3D12_FENCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9594, .hex);
pub const GL_D3D12_FENCE_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9595, .hex);
pub const GL_DEVICE_LUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9599, .hex);
pub const GL_DEVICE_NODE_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959A, .hex);
// /usr/include/GL/glew.h:11261:9: warning: macro 'glImportMemoryWin32HandleEXT' contains a runtime value, translated to function
pub inline fn glImportMemoryWin32HandleEXT() @TypeOf(GLEW_GET_FUN(__glewImportMemoryWin32HandleEXT)) {
    return GLEW_GET_FUN(__glewImportMemoryWin32HandleEXT);
}
// /usr/include/GL/glew.h:11262:9: warning: macro 'glImportMemoryWin32NameEXT' contains a runtime value, translated to function
pub inline fn glImportMemoryWin32NameEXT() @TypeOf(GLEW_GET_FUN(__glewImportMemoryWin32NameEXT)) {
    return GLEW_GET_FUN(__glewImportMemoryWin32NameEXT);
}
// /usr/include/GL/glew.h:11264:9: warning: macro 'GLEW_EXT_memory_object_win32' contains a runtime value, translated to function
pub inline fn GLEW_EXT_memory_object_win32() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_memory_object_win32)) {
    return GLEW_GET_VAR(__GLEW_EXT_memory_object_win32);
}
pub const GL_EXT_misc_attribute = @as(c_int, 1);
// /usr/include/GL/glew.h:11273:9: warning: macro 'GLEW_EXT_misc_attribute' contains a runtime value, translated to function
pub inline fn GLEW_EXT_misc_attribute() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_misc_attribute)) {
    return GLEW_GET_VAR(__GLEW_EXT_misc_attribute);
}
pub const GL_EXT_multi_draw_arrays = @as(c_int, 1);
// /usr/include/GL/glew.h:11285:9: warning: macro 'glMultiDrawArraysEXT' contains a runtime value, translated to function
pub inline fn glMultiDrawArraysEXT() @TypeOf(GLEW_GET_FUN(__glewMultiDrawArraysEXT)) {
    return GLEW_GET_FUN(__glewMultiDrawArraysEXT);
}
// /usr/include/GL/glew.h:11286:9: warning: macro 'glMultiDrawElementsEXT' contains a runtime value, translated to function
pub inline fn glMultiDrawElementsEXT() @TypeOf(GLEW_GET_FUN(__glewMultiDrawElementsEXT)) {
    return GLEW_GET_FUN(__glewMultiDrawElementsEXT);
}
// /usr/include/GL/glew.h:11288:9: warning: macro 'GLEW_EXT_multi_draw_arrays' contains a runtime value, translated to function
pub inline fn GLEW_EXT_multi_draw_arrays() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_multi_draw_arrays)) {
    return GLEW_GET_VAR(__GLEW_EXT_multi_draw_arrays);
}
pub const GL_EXT_multi_draw_indirect = @as(c_int, 1);
// /usr/include/GL/glew.h:11300:9: warning: macro 'glMultiDrawArraysIndirectEXT' contains a runtime value, translated to function
pub inline fn glMultiDrawArraysIndirectEXT() @TypeOf(GLEW_GET_FUN(__glewMultiDrawArraysIndirectEXT)) {
    return GLEW_GET_FUN(__glewMultiDrawArraysIndirectEXT);
}
// /usr/include/GL/glew.h:11301:9: warning: macro 'glMultiDrawElementsIndirectEXT' contains a runtime value, translated to function
pub inline fn glMultiDrawElementsIndirectEXT() @TypeOf(GLEW_GET_FUN(__glewMultiDrawElementsIndirectEXT)) {
    return GLEW_GET_FUN(__glewMultiDrawElementsIndirectEXT);
}
// /usr/include/GL/glew.h:11303:9: warning: macro 'GLEW_EXT_multi_draw_indirect' contains a runtime value, translated to function
pub inline fn GLEW_EXT_multi_draw_indirect() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_multi_draw_indirect)) {
    return GLEW_GET_VAR(__GLEW_EXT_multi_draw_indirect);
}
pub const GL_EXT_multiple_textures = @as(c_int, 1);
// /usr/include/GL/glew.h:11312:9: warning: macro 'GLEW_EXT_multiple_textures' contains a runtime value, translated to function
pub inline fn GLEW_EXT_multiple_textures() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_multiple_textures)) {
    return GLEW_GET_VAR(__GLEW_EXT_multiple_textures);
}
pub const GL_EXT_multisample = @as(c_int, 1);
pub const GL_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hex);
pub const GL_SAMPLE_ALPHA_TO_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hex);
pub const GL_SAMPLE_ALPHA_TO_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hex);
pub const GL_SAMPLE_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hex);
pub const GL_1PASS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A1, .hex);
pub const GL_2PASS_0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A2, .hex);
pub const GL_2PASS_1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A3, .hex);
pub const GL_4PASS_0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A4, .hex);
pub const GL_4PASS_1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A5, .hex);
pub const GL_4PASS_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A6, .hex);
pub const GL_4PASS_3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A7, .hex);
pub const GL_SAMPLE_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hex);
pub const GL_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hex);
pub const GL_SAMPLE_MASK_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hex);
pub const GL_SAMPLE_MASK_INVERT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hex);
pub const GL_SAMPLE_PATTERN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AC, .hex);
pub const GL_MULTISAMPLE_BIT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
// /usr/include/GL/glew.h:11342:9: warning: macro 'glSampleMaskEXT' contains a runtime value, translated to function
pub inline fn glSampleMaskEXT() @TypeOf(GLEW_GET_FUN(__glewSampleMaskEXT)) {
    return GLEW_GET_FUN(__glewSampleMaskEXT);
}
// /usr/include/GL/glew.h:11343:9: warning: macro 'glSamplePatternEXT' contains a runtime value, translated to function
pub inline fn glSamplePatternEXT() @TypeOf(GLEW_GET_FUN(__glewSamplePatternEXT)) {
    return GLEW_GET_FUN(__glewSamplePatternEXT);
}
// /usr/include/GL/glew.h:11345:9: warning: macro 'GLEW_EXT_multisample' contains a runtime value, translated to function
pub inline fn GLEW_EXT_multisample() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_multisample)) {
    return GLEW_GET_VAR(__GLEW_EXT_multisample);
}
pub const GL_EXT_multisample_compatibility = @as(c_int, 1);
// /usr/include/GL/glew.h:11357:9: warning: macro 'GLEW_EXT_multisample_compatibility' contains a runtime value, translated to function
pub inline fn GLEW_EXT_multisample_compatibility() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_multisample_compatibility)) {
    return GLEW_GET_VAR(__GLEW_EXT_multisample_compatibility);
}
pub const GL_EXT_multisampled_render_to_texture = @as(c_int, 1);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6C, .hex);
// /usr/include/GL/glew.h:11373:9: warning: macro 'glFramebufferTexture2DMultisampleEXT' contains a runtime value, translated to function
pub inline fn glFramebufferTexture2DMultisampleEXT() @TypeOf(GLEW_GET_FUN(__glewFramebufferTexture2DMultisampleEXT)) {
    return GLEW_GET_FUN(__glewFramebufferTexture2DMultisampleEXT);
}
// /usr/include/GL/glew.h:11375:9: warning: macro 'GLEW_EXT_multisampled_render_to_texture' contains a runtime value, translated to function
pub inline fn GLEW_EXT_multisampled_render_to_texture() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_multisampled_render_to_texture)) {
    return GLEW_GET_VAR(__GLEW_EXT_multisampled_render_to_texture);
}
pub const GL_EXT_multisampled_render_to_texture2 = @as(c_int, 1);
// /usr/include/GL/glew.h:11384:9: warning: macro 'GLEW_EXT_multisampled_render_to_texture2' contains a runtime value, translated to function
pub inline fn GLEW_EXT_multisampled_render_to_texture2() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_multisampled_render_to_texture2)) {
    return GLEW_GET_VAR(__GLEW_EXT_multisampled_render_to_texture2);
}
pub const GL_EXT_multiview_draw_buffers = @as(c_int, 1);
pub const GL_DRAW_BUFFER_EXT = @as(c_int, 0x0C01);
pub const GL_READ_BUFFER_EXT = @as(c_int, 0x0C02);
pub const GL_COLOR_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F0, .hex);
pub const GL_MULTIVIEW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F1, .hex);
pub const GL_MAX_MULTIVIEW_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F2, .hex);
// /usr/include/GL/glew.h:11403:9: warning: macro 'glDrawBuffersIndexedEXT' contains a runtime value, translated to function
pub inline fn glDrawBuffersIndexedEXT() @TypeOf(GLEW_GET_FUN(__glewDrawBuffersIndexedEXT)) {
    return GLEW_GET_FUN(__glewDrawBuffersIndexedEXT);
}
// /usr/include/GL/glew.h:11404:9: warning: macro 'glGetIntegeri_vEXT' contains a runtime value, translated to function
pub inline fn glGetIntegeri_vEXT() @TypeOf(GLEW_GET_FUN(__glewGetIntegeri_vEXT)) {
    return GLEW_GET_FUN(__glewGetIntegeri_vEXT);
}
// /usr/include/GL/glew.h:11405:9: warning: macro 'glReadBufferIndexedEXT' contains a runtime value, translated to function
pub inline fn glReadBufferIndexedEXT() @TypeOf(GLEW_GET_FUN(__glewReadBufferIndexedEXT)) {
    return GLEW_GET_FUN(__glewReadBufferIndexedEXT);
}
// /usr/include/GL/glew.h:11407:9: warning: macro 'GLEW_EXT_multiview_draw_buffers' contains a runtime value, translated to function
pub inline fn GLEW_EXT_multiview_draw_buffers() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_multiview_draw_buffers)) {
    return GLEW_GET_VAR(__GLEW_EXT_multiview_draw_buffers);
}
pub const GL_EXT_multiview_tessellation_geometry_shader = @as(c_int, 1);
// /usr/include/GL/glew.h:11416:9: warning: macro 'GLEW_EXT_multiview_tessellation_geometry_shader' contains a runtime value, translated to function
pub inline fn GLEW_EXT_multiview_tessellation_geometry_shader() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_multiview_tessellation_geometry_shader)) {
    return GLEW_GET_VAR(__GLEW_EXT_multiview_tessellation_geometry_shader);
}
pub const GL_EXT_multiview_texture_multisample = @as(c_int, 1);
// /usr/include/GL/glew.h:11425:9: warning: macro 'GLEW_EXT_multiview_texture_multisample' contains a runtime value, translated to function
pub inline fn GLEW_EXT_multiview_texture_multisample() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_multiview_texture_multisample)) {
    return GLEW_GET_VAR(__GLEW_EXT_multiview_texture_multisample);
}
pub const GL_EXT_multiview_timer_query = @as(c_int, 1);
// /usr/include/GL/glew.h:11434:9: warning: macro 'GLEW_EXT_multiview_timer_query' contains a runtime value, translated to function
pub inline fn GLEW_EXT_multiview_timer_query() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_multiview_timer_query)) {
    return GLEW_GET_VAR(__GLEW_EXT_multiview_timer_query);
}
pub const GL_EXT_occlusion_query_boolean = @as(c_int, 1);
pub const GL_ANY_SAMPLES_PASSED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2F, .hex);
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6A, .hex);
// /usr/include/GL/glew.h:11449:9: warning: macro 'GLEW_EXT_occlusion_query_boolean' contains a runtime value, translated to function
pub inline fn GLEW_EXT_occlusion_query_boolean() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_occlusion_query_boolean)) {
    return GLEW_GET_VAR(__GLEW_EXT_occlusion_query_boolean);
}
pub const GL_EXT_packed_depth_stencil = @as(c_int, 1);
pub const GL_DEPTH_STENCIL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hex);
pub const GL_UNSIGNED_INT_24_8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hex);
pub const GL_DEPTH24_STENCIL8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F0, .hex);
pub const GL_TEXTURE_STENCIL_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F1, .hex);
// /usr/include/GL/glew.h:11463:9: warning: macro 'GLEW_EXT_packed_depth_stencil' contains a runtime value, translated to function
pub inline fn GLEW_EXT_packed_depth_stencil() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_packed_depth_stencil)) {
    return GLEW_GET_VAR(__GLEW_EXT_packed_depth_stencil);
}
pub const GL_EXT_packed_float = @as(c_int, 1);
pub const GL_R11F_G11F_B10F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hex);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hex);
pub const GL_RGBA_SIGNED_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3C, .hex);
// /usr/include/GL/glew.h:11476:9: warning: macro 'GLEW_EXT_packed_float' contains a runtime value, translated to function
pub inline fn GLEW_EXT_packed_float() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_packed_float)) {
    return GLEW_GET_VAR(__GLEW_EXT_packed_float);
}
pub const GL_EXT_packed_pixels = @as(c_int, 1);
pub const GL_UNSIGNED_BYTE_3_3_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8032, .hex);
pub const GL_UNSIGNED_SHORT_4_4_4_4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8033, .hex);
pub const GL_UNSIGNED_SHORT_5_5_5_1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8034, .hex);
pub const GL_UNSIGNED_INT_8_8_8_8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8035, .hex);
pub const GL_UNSIGNED_INT_10_10_10_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8036, .hex);
// /usr/include/GL/glew.h:11491:9: warning: macro 'GLEW_EXT_packed_pixels' contains a runtime value, translated to function
pub inline fn GLEW_EXT_packed_pixels() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_packed_pixels)) {
    return GLEW_GET_VAR(__GLEW_EXT_packed_pixels);
}
pub const GL_EXT_paletted_texture = @as(c_int, 1);
pub const GL_COLOR_TABLE_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D8, .hex);
pub const GL_COLOR_TABLE_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D9, .hex);
pub const GL_COLOR_TABLE_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DA, .hex);
pub const GL_COLOR_TABLE_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DB, .hex);
pub const GL_COLOR_TABLE_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DC, .hex);
pub const GL_COLOR_TABLE_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DD, .hex);
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DE, .hex);
pub const GL_COLOR_TABLE_INTENSITY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DF, .hex);
pub const GL_TEXTURE_INDEX_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80ED, .hex);
// /usr/include/GL/glew.h:11527:9: warning: macro 'glColorTableEXT' contains a runtime value, translated to function
pub inline fn glColorTableEXT() @TypeOf(GLEW_GET_FUN(__glewColorTableEXT)) {
    return GLEW_GET_FUN(__glewColorTableEXT);
}
// /usr/include/GL/glew.h:11528:9: warning: macro 'glGetColorTableEXT' contains a runtime value, translated to function
pub inline fn glGetColorTableEXT() @TypeOf(GLEW_GET_FUN(__glewGetColorTableEXT)) {
    return GLEW_GET_FUN(__glewGetColorTableEXT);
}
// /usr/include/GL/glew.h:11529:9: warning: macro 'glGetColorTableParameterfvEXT' contains a runtime value, translated to function
pub inline fn glGetColorTableParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewGetColorTableParameterfvEXT)) {
    return GLEW_GET_FUN(__glewGetColorTableParameterfvEXT);
}
// /usr/include/GL/glew.h:11530:9: warning: macro 'glGetColorTableParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetColorTableParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetColorTableParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetColorTableParameterivEXT);
}
// /usr/include/GL/glew.h:11532:9: warning: macro 'GLEW_EXT_paletted_texture' contains a runtime value, translated to function
pub inline fn GLEW_EXT_paletted_texture() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_paletted_texture)) {
    return GLEW_GET_VAR(__GLEW_EXT_paletted_texture);
}
pub const GL_EXT_pixel_buffer_object = @as(c_int, 1);
pub const GL_PIXEL_PACK_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hex);
pub const GL_PIXEL_UNPACK_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hex);
pub const GL_PIXEL_PACK_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hex);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hex);
// /usr/include/GL/glew.h:11546:9: warning: macro 'GLEW_EXT_pixel_buffer_object' contains a runtime value, translated to function
pub inline fn GLEW_EXT_pixel_buffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_pixel_buffer_object)) {
    return GLEW_GET_VAR(__GLEW_EXT_pixel_buffer_object);
}
pub const GL_EXT_pixel_transform = @as(c_int, 1);
pub const GL_PIXEL_TRANSFORM_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8330, .hex);
pub const GL_PIXEL_MAG_FILTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8331, .hex);
pub const GL_PIXEL_MIN_FILTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8332, .hex);
pub const GL_PIXEL_CUBIC_WEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8333, .hex);
pub const GL_CUBIC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8334, .hex);
pub const GL_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8335, .hex);
pub const GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8336, .hex);
pub const GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8337, .hex);
pub const GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8338, .hex);
// /usr/include/GL/glew.h:11572:9: warning: macro 'glGetPixelTransformParameterfvEXT' contains a runtime value, translated to function
pub inline fn glGetPixelTransformParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewGetPixelTransformParameterfvEXT)) {
    return GLEW_GET_FUN(__glewGetPixelTransformParameterfvEXT);
}
// /usr/include/GL/glew.h:11573:9: warning: macro 'glGetPixelTransformParameterivEXT' contains a runtime value, translated to function
pub inline fn glGetPixelTransformParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewGetPixelTransformParameterivEXT)) {
    return GLEW_GET_FUN(__glewGetPixelTransformParameterivEXT);
}
// /usr/include/GL/glew.h:11574:9: warning: macro 'glPixelTransformParameterfEXT' contains a runtime value, translated to function
pub inline fn glPixelTransformParameterfEXT() @TypeOf(GLEW_GET_FUN(__glewPixelTransformParameterfEXT)) {
    return GLEW_GET_FUN(__glewPixelTransformParameterfEXT);
}
// /usr/include/GL/glew.h:11575:9: warning: macro 'glPixelTransformParameterfvEXT' contains a runtime value, translated to function
pub inline fn glPixelTransformParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewPixelTransformParameterfvEXT)) {
    return GLEW_GET_FUN(__glewPixelTransformParameterfvEXT);
}
// /usr/include/GL/glew.h:11576:9: warning: macro 'glPixelTransformParameteriEXT' contains a runtime value, translated to function
pub inline fn glPixelTransformParameteriEXT() @TypeOf(GLEW_GET_FUN(__glewPixelTransformParameteriEXT)) {
    return GLEW_GET_FUN(__glewPixelTransformParameteriEXT);
}
// /usr/include/GL/glew.h:11577:9: warning: macro 'glPixelTransformParameterivEXT' contains a runtime value, translated to function
pub inline fn glPixelTransformParameterivEXT() @TypeOf(GLEW_GET_FUN(__glewPixelTransformParameterivEXT)) {
    return GLEW_GET_FUN(__glewPixelTransformParameterivEXT);
}
// /usr/include/GL/glew.h:11579:9: warning: macro 'GLEW_EXT_pixel_transform' contains a runtime value, translated to function
pub inline fn GLEW_EXT_pixel_transform() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_pixel_transform)) {
    return GLEW_GET_VAR(__GLEW_EXT_pixel_transform);
}
pub const GL_EXT_pixel_transform_color_table = @as(c_int, 1);
// /usr/include/GL/glew.h:11588:9: warning: macro 'GLEW_EXT_pixel_transform_color_table' contains a runtime value, translated to function
pub inline fn GLEW_EXT_pixel_transform_color_table() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_pixel_transform_color_table)) {
    return GLEW_GET_VAR(__GLEW_EXT_pixel_transform_color_table);
}
pub const GL_EXT_point_parameters = @as(c_int, 1);
pub const GL_POINT_SIZE_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hex);
pub const GL_POINT_SIZE_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hex);
pub const GL_POINT_FADE_THRESHOLD_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hex);
pub const GL_DISTANCE_ATTENUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hex);
// /usr/include/GL/glew.h:11605:9: warning: macro 'glPointParameterfEXT' contains a runtime value, translated to function
pub inline fn glPointParameterfEXT() @TypeOf(GLEW_GET_FUN(__glewPointParameterfEXT)) {
    return GLEW_GET_FUN(__glewPointParameterfEXT);
}
// /usr/include/GL/glew.h:11606:9: warning: macro 'glPointParameterfvEXT' contains a runtime value, translated to function
pub inline fn glPointParameterfvEXT() @TypeOf(GLEW_GET_FUN(__glewPointParameterfvEXT)) {
    return GLEW_GET_FUN(__glewPointParameterfvEXT);
}
// /usr/include/GL/glew.h:11608:9: warning: macro 'GLEW_EXT_point_parameters' contains a runtime value, translated to function
pub inline fn GLEW_EXT_point_parameters() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_point_parameters)) {
    return GLEW_GET_VAR(__GLEW_EXT_point_parameters);
}
pub const GL_EXT_polygon_offset = @as(c_int, 1);
pub const GL_POLYGON_OFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8037, .hex);
pub const GL_POLYGON_OFFSET_FACTOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8038, .hex);
pub const GL_POLYGON_OFFSET_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8039, .hex);
// /usr/include/GL/glew.h:11623:9: warning: macro 'glPolygonOffsetEXT' contains a runtime value, translated to function
pub inline fn glPolygonOffsetEXT() @TypeOf(GLEW_GET_FUN(__glewPolygonOffsetEXT)) {
    return GLEW_GET_FUN(__glewPolygonOffsetEXT);
}
// /usr/include/GL/glew.h:11625:9: warning: macro 'GLEW_EXT_polygon_offset' contains a runtime value, translated to function
pub inline fn GLEW_EXT_polygon_offset() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_polygon_offset)) {
    return GLEW_GET_VAR(__GLEW_EXT_polygon_offset);
}
pub const GL_EXT_polygon_offset_clamp = @as(c_int, 1);
pub const GL_POLYGON_OFFSET_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1B, .hex);
// /usr/include/GL/glew.h:11638:9: warning: macro 'glPolygonOffsetClampEXT' contains a runtime value, translated to function
pub inline fn glPolygonOffsetClampEXT() @TypeOf(GLEW_GET_FUN(__glewPolygonOffsetClampEXT)) {
    return GLEW_GET_FUN(__glewPolygonOffsetClampEXT);
}
// /usr/include/GL/glew.h:11640:9: warning: macro 'GLEW_EXT_polygon_offset_clamp' contains a runtime value, translated to function
pub inline fn GLEW_EXT_polygon_offset_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_polygon_offset_clamp)) {
    return GLEW_GET_VAR(__GLEW_EXT_polygon_offset_clamp);
}
pub const GL_EXT_post_depth_coverage = @as(c_int, 1);
// /usr/include/GL/glew.h:11649:9: warning: macro 'GLEW_EXT_post_depth_coverage' contains a runtime value, translated to function
pub inline fn GLEW_EXT_post_depth_coverage() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_post_depth_coverage)) {
    return GLEW_GET_VAR(__GLEW_EXT_post_depth_coverage);
}
pub const GL_EXT_primitive_bounding_box = @as(c_int, 1);
pub const GL_PRIMITIVE_BOUNDING_BOX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BE, .hex);
// /usr/include/GL/glew.h:11662:9: warning: macro 'glPrimitiveBoundingBoxEXT' contains a runtime value, translated to function
pub inline fn glPrimitiveBoundingBoxEXT() @TypeOf(GLEW_GET_FUN(__glewPrimitiveBoundingBoxEXT)) {
    return GLEW_GET_FUN(__glewPrimitiveBoundingBoxEXT);
}
// /usr/include/GL/glew.h:11664:9: warning: macro 'GLEW_EXT_primitive_bounding_box' contains a runtime value, translated to function
pub inline fn GLEW_EXT_primitive_bounding_box() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_primitive_bounding_box)) {
    return GLEW_GET_VAR(__GLEW_EXT_primitive_bounding_box);
}
pub const GL_EXT_protected_textures = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = @as(c_int, 0x00000010);
pub const GL_TEXTURE_PROTECTED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFA, .hex);
// /usr/include/GL/glew.h:11676:9: warning: macro 'GLEW_EXT_protected_textures' contains a runtime value, translated to function
pub inline fn GLEW_EXT_protected_textures() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_protected_textures)) {
    return GLEW_GET_VAR(__GLEW_EXT_protected_textures);
}
pub const GL_EXT_provoking_vertex = @as(c_int, 1);
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4C, .hex);
pub const GL_PROVOKING_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4F, .hex);
// /usr/include/GL/glew.h:11692:9: warning: macro 'glProvokingVertexEXT' contains a runtime value, translated to function
pub inline fn glProvokingVertexEXT() @TypeOf(GLEW_GET_FUN(__glewProvokingVertexEXT)) {
    return GLEW_GET_FUN(__glewProvokingVertexEXT);
}
// /usr/include/GL/glew.h:11694:9: warning: macro 'GLEW_EXT_provoking_vertex' contains a runtime value, translated to function
pub inline fn GLEW_EXT_provoking_vertex() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_provoking_vertex)) {
    return GLEW_GET_VAR(__GLEW_EXT_provoking_vertex);
}
pub const GL_EXT_pvrtc_sRGB = @as(c_int, 1);
pub const GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A54, .hex);
pub const GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A55, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A56, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A57, .hex);
// /usr/include/GL/glew.h:11708:9: warning: macro 'GLEW_EXT_pvrtc_sRGB' contains a runtime value, translated to function
pub inline fn GLEW_EXT_pvrtc_sRGB() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_pvrtc_sRGB)) {
    return GLEW_GET_VAR(__GLEW_EXT_pvrtc_sRGB);
}
pub const GL_EXT_raster_multisample = @as(c_int, 1);
pub const GL_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E20, .hex);
pub const GL_RASTER_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9327, .hex);
pub const GL_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9328, .hex);
pub const GL_MAX_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9329, .hex);
pub const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932A, .hex);
pub const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932B, .hex);
pub const GL_EFFECTIVE_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932C, .hex);
pub const GL_DEPTH_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932D, .hex);
pub const GL_STENCIL_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932E, .hex);
pub const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932F, .hex);
pub const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9330, .hex);
pub const GL_COVERAGE_MODULATION_TABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9331, .hex);
pub const GL_COVERAGE_MODULATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9332, .hex);
pub const GL_COVERAGE_MODULATION_TABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9333, .hex);
// /usr/include/GL/glew.h:11737:9: warning: macro 'glCoverageModulationNV' contains a runtime value, translated to function
pub inline fn glCoverageModulationNV() @TypeOf(GLEW_GET_FUN(__glewCoverageModulationNV)) {
    return GLEW_GET_FUN(__glewCoverageModulationNV);
}
// /usr/include/GL/glew.h:11738:9: warning: macro 'glCoverageModulationTableNV' contains a runtime value, translated to function
pub inline fn glCoverageModulationTableNV() @TypeOf(GLEW_GET_FUN(__glewCoverageModulationTableNV)) {
    return GLEW_GET_FUN(__glewCoverageModulationTableNV);
}
// /usr/include/GL/glew.h:11739:9: warning: macro 'glGetCoverageModulationTableNV' contains a runtime value, translated to function
pub inline fn glGetCoverageModulationTableNV() @TypeOf(GLEW_GET_FUN(__glewGetCoverageModulationTableNV)) {
    return GLEW_GET_FUN(__glewGetCoverageModulationTableNV);
}
// /usr/include/GL/glew.h:11740:9: warning: macro 'glRasterSamplesEXT' contains a runtime value, translated to function
pub inline fn glRasterSamplesEXT() @TypeOf(GLEW_GET_FUN(__glewRasterSamplesEXT)) {
    return GLEW_GET_FUN(__glewRasterSamplesEXT);
}
// /usr/include/GL/glew.h:11742:9: warning: macro 'GLEW_EXT_raster_multisample' contains a runtime value, translated to function
pub inline fn GLEW_EXT_raster_multisample() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_raster_multisample)) {
    return GLEW_GET_VAR(__GLEW_EXT_raster_multisample);
}
pub const GL_EXT_read_format_bgra = @as(c_int, 1);
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8365, .hex);
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8366, .hex);
// /usr/include/GL/glew.h:11755:9: warning: macro 'GLEW_EXT_read_format_bgra' contains a runtime value, translated to function
pub inline fn GLEW_EXT_read_format_bgra() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_read_format_bgra)) {
    return GLEW_GET_VAR(__GLEW_EXT_read_format_bgra);
}
pub const GL_EXT_render_snorm = @as(c_int, 1);
pub const GL_R16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F98, .hex);
pub const GL_RG16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F99, .hex);
pub const GL_RGBA16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9B, .hex);
// /usr/include/GL/glew.h:11773:9: warning: macro 'GLEW_EXT_render_snorm' contains a runtime value, translated to function
pub inline fn GLEW_EXT_render_snorm() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_render_snorm)) {
    return GLEW_GET_VAR(__GLEW_EXT_render_snorm);
}
pub const GL_EXT_rescale_normal = @as(c_int, 1);
pub const GL_RESCALE_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803A, .hex);
// /usr/include/GL/glew.h:11784:9: warning: macro 'GLEW_EXT_rescale_normal' contains a runtime value, translated to function
pub inline fn GLEW_EXT_rescale_normal() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_rescale_normal)) {
    return GLEW_GET_VAR(__GLEW_EXT_rescale_normal);
}
pub const GL_EXT_robustness = @as(c_int, 1);
pub const GL_LOSE_CONTEXT_ON_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hex);
pub const GL_GUILTY_CONTEXT_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hex);
pub const GL_INNOCENT_CONTEXT_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hex);
pub const GL_UNKNOWN_CONTEXT_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hex);
pub const GL_RESET_NOTIFICATION_STRATEGY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hex);
pub const GL_NO_RESET_NOTIFICATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hex);
pub const GL_CONTEXT_ROBUST_ACCESS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F3, .hex);
// /usr/include/GL/glew.h:11805:9: warning: macro 'glGetnUniformfvEXT' contains a runtime value, translated to function
pub inline fn glGetnUniformfvEXT() @TypeOf(GLEW_GET_FUN(__glewGetnUniformfvEXT)) {
    return GLEW_GET_FUN(__glewGetnUniformfvEXT);
}
// /usr/include/GL/glew.h:11806:9: warning: macro 'glGetnUniformivEXT' contains a runtime value, translated to function
pub inline fn glGetnUniformivEXT() @TypeOf(GLEW_GET_FUN(__glewGetnUniformivEXT)) {
    return GLEW_GET_FUN(__glewGetnUniformivEXT);
}
// /usr/include/GL/glew.h:11807:9: warning: macro 'glReadnPixelsEXT' contains a runtime value, translated to function
pub inline fn glReadnPixelsEXT() @TypeOf(GLEW_GET_FUN(__glewReadnPixelsEXT)) {
    return GLEW_GET_FUN(__glewReadnPixelsEXT);
}
// /usr/include/GL/glew.h:11809:9: warning: macro 'GLEW_EXT_robustness' contains a runtime value, translated to function
pub inline fn GLEW_EXT_robustness() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_robustness)) {
    return GLEW_GET_VAR(__GLEW_EXT_robustness);
}
pub const GL_EXT_sRGB = @as(c_int, 1);
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8210, .hex);
pub const GL_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C40, .hex);
pub const GL_SRGB_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C42, .hex);
pub const GL_SRGB8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C43, .hex);
// /usr/include/GL/glew.h:11823:9: warning: macro 'GLEW_EXT_sRGB' contains a runtime value, translated to function
pub inline fn GLEW_EXT_sRGB() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_sRGB)) {
    return GLEW_GET_VAR(__GLEW_EXT_sRGB);
}
pub const GL_EXT_sRGB_write_control = @as(c_int, 1);
// /usr/include/GL/glew.h:11834:9: warning: macro 'GLEW_EXT_sRGB_write_control' contains a runtime value, translated to function
pub inline fn GLEW_EXT_sRGB_write_control() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_sRGB_write_control)) {
    return GLEW_GET_VAR(__GLEW_EXT_sRGB_write_control);
}
pub const GL_EXT_scene_marker = @as(c_int, 1);
// /usr/include/GL/glew.h:11846:9: warning: macro 'glBeginSceneEXT' contains a runtime value, translated to function
pub inline fn glBeginSceneEXT() @TypeOf(GLEW_GET_FUN(__glewBeginSceneEXT)) {
    return GLEW_GET_FUN(__glewBeginSceneEXT);
}
// /usr/include/GL/glew.h:11847:9: warning: macro 'glEndSceneEXT' contains a runtime value, translated to function
pub inline fn glEndSceneEXT() @TypeOf(GLEW_GET_FUN(__glewEndSceneEXT)) {
    return GLEW_GET_FUN(__glewEndSceneEXT);
}
// /usr/include/GL/glew.h:11849:9: warning: macro 'GLEW_EXT_scene_marker' contains a runtime value, translated to function
pub inline fn GLEW_EXT_scene_marker() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_scene_marker)) {
    return GLEW_GET_VAR(__GLEW_EXT_scene_marker);
}
pub const GL_EXT_secondary_color = @as(c_int, 1);
pub const GL_COLOR_SUM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hex);
pub const GL_CURRENT_SECONDARY_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8459, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845A, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845B, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845C, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845D, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845E, .hex);
// /usr/include/GL/glew.h:11884:9: warning: macro 'glSecondaryColor3bEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3bEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3bEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3bEXT);
}
// /usr/include/GL/glew.h:11885:9: warning: macro 'glSecondaryColor3bvEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3bvEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3bvEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3bvEXT);
}
// /usr/include/GL/glew.h:11886:9: warning: macro 'glSecondaryColor3dEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3dEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3dEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3dEXT);
}
// /usr/include/GL/glew.h:11887:9: warning: macro 'glSecondaryColor3dvEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3dvEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3dvEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3dvEXT);
}
// /usr/include/GL/glew.h:11888:9: warning: macro 'glSecondaryColor3fEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3fEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3fEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3fEXT);
}
// /usr/include/GL/glew.h:11889:9: warning: macro 'glSecondaryColor3fvEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3fvEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3fvEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3fvEXT);
}
// /usr/include/GL/glew.h:11890:9: warning: macro 'glSecondaryColor3iEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3iEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3iEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3iEXT);
}
// /usr/include/GL/glew.h:11891:9: warning: macro 'glSecondaryColor3ivEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3ivEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3ivEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3ivEXT);
}
// /usr/include/GL/glew.h:11892:9: warning: macro 'glSecondaryColor3sEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3sEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3sEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3sEXT);
}
// /usr/include/GL/glew.h:11893:9: warning: macro 'glSecondaryColor3svEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3svEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3svEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3svEXT);
}
// /usr/include/GL/glew.h:11894:9: warning: macro 'glSecondaryColor3ubEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3ubEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3ubEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3ubEXT);
}
// /usr/include/GL/glew.h:11895:9: warning: macro 'glSecondaryColor3ubvEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3ubvEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3ubvEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3ubvEXT);
}
// /usr/include/GL/glew.h:11896:9: warning: macro 'glSecondaryColor3uiEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3uiEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3uiEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3uiEXT);
}
// /usr/include/GL/glew.h:11897:9: warning: macro 'glSecondaryColor3uivEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3uivEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3uivEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3uivEXT);
}
// /usr/include/GL/glew.h:11898:9: warning: macro 'glSecondaryColor3usEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3usEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3usEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3usEXT);
}
// /usr/include/GL/glew.h:11899:9: warning: macro 'glSecondaryColor3usvEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColor3usvEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3usvEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColor3usvEXT);
}
// /usr/include/GL/glew.h:11900:9: warning: macro 'glSecondaryColorPointerEXT' contains a runtime value, translated to function
pub inline fn glSecondaryColorPointerEXT() @TypeOf(GLEW_GET_FUN(__glewSecondaryColorPointerEXT)) {
    return GLEW_GET_FUN(__glewSecondaryColorPointerEXT);
}
// /usr/include/GL/glew.h:11902:9: warning: macro 'GLEW_EXT_secondary_color' contains a runtime value, translated to function
pub inline fn GLEW_EXT_secondary_color() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_secondary_color)) {
    return GLEW_GET_VAR(__GLEW_EXT_secondary_color);
}
pub const GL_EXT_semaphore = @as(c_int, 1);
pub const GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9530, .hex);
pub const GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9531, .hex);
pub const GL_LAYOUT_GENERAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958D, .hex);
pub const GL_LAYOUT_COLOR_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958E, .hex);
pub const GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958F, .hex);
pub const GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9590, .hex);
pub const GL_LAYOUT_SHADER_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9591, .hex);
pub const GL_LAYOUT_TRANSFER_SRC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9592, .hex);
pub const GL_LAYOUT_TRANSFER_DST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9593, .hex);
// /usr/include/GL/glew.h:11929:9: warning: macro 'glDeleteSemaphoresEXT' contains a runtime value, translated to function
pub inline fn glDeleteSemaphoresEXT() @TypeOf(GLEW_GET_FUN(__glewDeleteSemaphoresEXT)) {
    return GLEW_GET_FUN(__glewDeleteSemaphoresEXT);
}
// /usr/include/GL/glew.h:11930:9: warning: macro 'glGenSemaphoresEXT' contains a runtime value, translated to function
pub inline fn glGenSemaphoresEXT() @TypeOf(GLEW_GET_FUN(__glewGenSemaphoresEXT)) {
    return GLEW_GET_FUN(__glewGenSemaphoresEXT);
}
// /usr/include/GL/glew.h:11931:9: warning: macro 'glGetSemaphoreParameterui64vEXT' contains a runtime value, translated to function
pub inline fn glGetSemaphoreParameterui64vEXT() @TypeOf(GLEW_GET_FUN(__glewGetSemaphoreParameterui64vEXT)) {
    return GLEW_GET_FUN(__glewGetSemaphoreParameterui64vEXT);
}
// /usr/include/GL/glew.h:11932:9: warning: macro 'glIsSemaphoreEXT' contains a runtime value, translated to function
pub inline fn glIsSemaphoreEXT() @TypeOf(GLEW_GET_FUN(__glewIsSemaphoreEXT)) {
    return GLEW_GET_FUN(__glewIsSemaphoreEXT);
}
// /usr/include/GL/glew.h:11933:9: warning: macro 'glSemaphoreParameterui64vEXT' contains a runtime value, translated to function
pub inline fn glSemaphoreParameterui64vEXT() @TypeOf(GLEW_GET_FUN(__glewSemaphoreParameterui64vEXT)) {
    return GLEW_GET_FUN(__glewSemaphoreParameterui64vEXT);
}
// /usr/include/GL/glew.h:11934:9: warning: macro 'glSignalSemaphoreEXT' contains a runtime value, translated to function
pub inline fn glSignalSemaphoreEXT() @TypeOf(GLEW_GET_FUN(__glewSignalSemaphoreEXT)) {
    return GLEW_GET_FUN(__glewSignalSemaphoreEXT);
}
// /usr/include/GL/glew.h:11935:9: warning: macro 'glWaitSemaphoreEXT' contains a runtime value, translated to function
pub inline fn glWaitSemaphoreEXT() @TypeOf(GLEW_GET_FUN(__glewWaitSemaphoreEXT)) {
    return GLEW_GET_FUN(__glewWaitSemaphoreEXT);
}
// /usr/include/GL/glew.h:11937:9: warning: macro 'GLEW_EXT_semaphore' contains a runtime value, translated to function
pub inline fn GLEW_EXT_semaphore() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_semaphore)) {
    return GLEW_GET_VAR(__GLEW_EXT_semaphore);
}
pub const GL_EXT_semaphore_fd = @as(c_int, 1);
// /usr/include/GL/glew.h:11948:9: warning: macro 'glImportSemaphoreFdEXT' contains a runtime value, translated to function
pub inline fn glImportSemaphoreFdEXT() @TypeOf(GLEW_GET_FUN(__glewImportSemaphoreFdEXT)) {
    return GLEW_GET_FUN(__glewImportSemaphoreFdEXT);
}
// /usr/include/GL/glew.h:11950:9: warning: macro 'GLEW_EXT_semaphore_fd' contains a runtime value, translated to function
pub inline fn GLEW_EXT_semaphore_fd() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_semaphore_fd)) {
    return GLEW_GET_VAR(__GLEW_EXT_semaphore_fd);
}
pub const GL_EXT_semaphore_win32 = @as(c_int, 1);
// /usr/include/GL/glew.h:11962:9: warning: macro 'glImportSemaphoreWin32HandleEXT' contains a runtime value, translated to function
pub inline fn glImportSemaphoreWin32HandleEXT() @TypeOf(GLEW_GET_FUN(__glewImportSemaphoreWin32HandleEXT)) {
    return GLEW_GET_FUN(__glewImportSemaphoreWin32HandleEXT);
}
// /usr/include/GL/glew.h:11963:9: warning: macro 'glImportSemaphoreWin32NameEXT' contains a runtime value, translated to function
pub inline fn glImportSemaphoreWin32NameEXT() @TypeOf(GLEW_GET_FUN(__glewImportSemaphoreWin32NameEXT)) {
    return GLEW_GET_FUN(__glewImportSemaphoreWin32NameEXT);
}
// /usr/include/GL/glew.h:11965:9: warning: macro 'GLEW_EXT_semaphore_win32' contains a runtime value, translated to function
pub inline fn GLEW_EXT_semaphore_win32() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_semaphore_win32)) {
    return GLEW_GET_VAR(__GLEW_EXT_semaphore_win32);
}
pub const GL_EXT_separate_shader_objects = @as(c_int, 1);
pub const GL_ACTIVE_PROGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8D, .hex);
// /usr/include/GL/glew.h:11980:9: warning: macro 'glActiveProgramEXT' contains a runtime value, translated to function
pub inline fn glActiveProgramEXT() @TypeOf(GLEW_GET_FUN(__glewActiveProgramEXT)) {
    return GLEW_GET_FUN(__glewActiveProgramEXT);
}
// /usr/include/GL/glew.h:11981:9: warning: macro 'glCreateShaderProgramEXT' contains a runtime value, translated to function
pub inline fn glCreateShaderProgramEXT() @TypeOf(GLEW_GET_FUN(__glewCreateShaderProgramEXT)) {
    return GLEW_GET_FUN(__glewCreateShaderProgramEXT);
}
// /usr/include/GL/glew.h:11982:9: warning: macro 'glUseShaderProgramEXT' contains a runtime value, translated to function
pub inline fn glUseShaderProgramEXT() @TypeOf(GLEW_GET_FUN(__glewUseShaderProgramEXT)) {
    return GLEW_GET_FUN(__glewUseShaderProgramEXT);
}
// /usr/include/GL/glew.h:11984:9: warning: macro 'GLEW_EXT_separate_shader_objects' contains a runtime value, translated to function
pub inline fn GLEW_EXT_separate_shader_objects() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_separate_shader_objects)) {
    return GLEW_GET_VAR(__GLEW_EXT_separate_shader_objects);
}
pub const GL_EXT_separate_specular_color = @as(c_int, 1);
pub const GL_LIGHT_MODEL_COLOR_CONTROL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F8, .hex);
pub const GL_SINGLE_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F9, .hex);
pub const GL_SEPARATE_SPECULAR_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FA, .hex);
// /usr/include/GL/glew.h:11997:9: warning: macro 'GLEW_EXT_separate_specular_color' contains a runtime value, translated to function
pub inline fn GLEW_EXT_separate_specular_color() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_separate_specular_color)) {
    return GLEW_GET_VAR(__GLEW_EXT_separate_specular_color);
}
pub const GL_EXT_shader_framebuffer_fetch = @as(c_int, 1);
pub const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A52, .hex);
// /usr/include/GL/glew.h:12010:9: warning: macro 'glFramebufferFetchBarrierEXT' contains a runtime value, translated to function
pub inline fn glFramebufferFetchBarrierEXT() @TypeOf(GLEW_GET_FUN(__glewFramebufferFetchBarrierEXT)) {
    return GLEW_GET_FUN(__glewFramebufferFetchBarrierEXT);
}
// /usr/include/GL/glew.h:12012:9: warning: macro 'GLEW_EXT_shader_framebuffer_fetch' contains a runtime value, translated to function
pub inline fn GLEW_EXT_shader_framebuffer_fetch() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_shader_framebuffer_fetch)) {
    return GLEW_GET_VAR(__GLEW_EXT_shader_framebuffer_fetch);
}
pub const GL_EXT_shader_framebuffer_fetch_non_coherent = @as(c_int, 1);
// /usr/include/GL/glew.h:12023:9: warning: macro 'GLEW_EXT_shader_framebuffer_fetch_non_coherent' contains a runtime value, translated to function
pub inline fn GLEW_EXT_shader_framebuffer_fetch_non_coherent() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_shader_framebuffer_fetch_non_coherent)) {
    return GLEW_GET_VAR(__GLEW_EXT_shader_framebuffer_fetch_non_coherent);
}
pub const GL_EXT_shader_group_vote = @as(c_int, 1);
// /usr/include/GL/glew.h:12032:9: warning: macro 'GLEW_EXT_shader_group_vote' contains a runtime value, translated to function
pub inline fn GLEW_EXT_shader_group_vote() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_shader_group_vote)) {
    return GLEW_GET_VAR(__GLEW_EXT_shader_group_vote);
}
pub const GL_EXT_shader_image_load_formatted = @as(c_int, 1);
// /usr/include/GL/glew.h:12041:9: warning: macro 'GLEW_EXT_shader_image_load_formatted' contains a runtime value, translated to function
pub inline fn GLEW_EXT_shader_image_load_formatted() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_shader_image_load_formatted)) {
    return GLEW_GET_VAR(__GLEW_EXT_shader_image_load_formatted);
}
pub const GL_EXT_shader_image_load_store = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = @as(c_int, 0x00000001);
pub const GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = @as(c_int, 0x00000002);
pub const GL_UNIFORM_BARRIER_BIT_EXT = @as(c_int, 0x00000004);
pub const GL_TEXTURE_FETCH_BARRIER_BIT_EXT = @as(c_int, 0x00000008);
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = @as(c_int, 0x00000020);
pub const GL_COMMAND_BARRIER_BIT_EXT = @as(c_int, 0x00000040);
pub const GL_PIXEL_BUFFER_BARRIER_BIT_EXT = @as(c_int, 0x00000080);
pub const GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = @as(c_int, 0x00000100);
pub const GL_BUFFER_UPDATE_BARRIER_BIT_EXT = @as(c_int, 0x00000200);
pub const GL_FRAMEBUFFER_BARRIER_BIT_EXT = @as(c_int, 0x00000400);
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = @as(c_int, 0x00000800);
pub const GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = @as(c_int, 0x00001000);
pub const GL_MAX_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F38, .hex);
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hex);
pub const GL_IMAGE_BINDING_NAME_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3A, .hex);
pub const GL_IMAGE_BINDING_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3B, .hex);
pub const GL_IMAGE_BINDING_LAYERED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3C, .hex);
pub const GL_IMAGE_BINDING_LAYER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3D, .hex);
pub const GL_IMAGE_BINDING_ACCESS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3E, .hex);
pub const GL_IMAGE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904C, .hex);
pub const GL_IMAGE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904D, .hex);
pub const GL_IMAGE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904E, .hex);
pub const GL_IMAGE_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904F, .hex);
pub const GL_IMAGE_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9050, .hex);
pub const GL_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hex);
pub const GL_IMAGE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9052, .hex);
pub const GL_IMAGE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9053, .hex);
pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hex);
pub const GL_IMAGE_2D_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9055, .hex);
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9056, .hex);
pub const GL_INT_IMAGE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9057, .hex);
pub const GL_INT_IMAGE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9058, .hex);
pub const GL_INT_IMAGE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9059, .hex);
pub const GL_INT_IMAGE_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905A, .hex);
pub const GL_INT_IMAGE_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905B, .hex);
pub const GL_INT_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hex);
pub const GL_INT_IMAGE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905D, .hex);
pub const GL_INT_IMAGE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905E, .hex);
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hex);
pub const GL_INT_IMAGE_2D_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9060, .hex);
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9061, .hex);
pub const GL_UNSIGNED_INT_IMAGE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9062, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9063, .hex);
pub const GL_UNSIGNED_INT_IMAGE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9064, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9065, .hex);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9066, .hex);
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hex);
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9068, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9069, .hex);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906B, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906C, .hex);
pub const GL_MAX_IMAGE_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906D, .hex);
pub const GL_IMAGE_BINDING_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906E, .hex);
pub const GL_ALL_BARRIER_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex);
// /usr/include/GL/glew.h:12109:9: warning: macro 'glBindImageTextureEXT' contains a runtime value, translated to function
pub inline fn glBindImageTextureEXT() @TypeOf(GLEW_GET_FUN(__glewBindImageTextureEXT)) {
    return GLEW_GET_FUN(__glewBindImageTextureEXT);
}
// /usr/include/GL/glew.h:12110:9: warning: macro 'glMemoryBarrierEXT' contains a runtime value, translated to function
pub inline fn glMemoryBarrierEXT() @TypeOf(GLEW_GET_FUN(__glewMemoryBarrierEXT)) {
    return GLEW_GET_FUN(__glewMemoryBarrierEXT);
}
// /usr/include/GL/glew.h:12112:9: warning: macro 'GLEW_EXT_shader_image_load_store' contains a runtime value, translated to function
pub inline fn GLEW_EXT_shader_image_load_store() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_shader_image_load_store)) {
    return GLEW_GET_VAR(__GLEW_EXT_shader_image_load_store);
}
pub const GL_EXT_shader_implicit_conversions = @as(c_int, 1);
// /usr/include/GL/glew.h:12121:9: warning: macro 'GLEW_EXT_shader_implicit_conversions' contains a runtime value, translated to function
pub inline fn GLEW_EXT_shader_implicit_conversions() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_shader_implicit_conversions)) {
    return GLEW_GET_VAR(__GLEW_EXT_shader_implicit_conversions);
}
pub const GL_EXT_shader_integer_mix = @as(c_int, 1);
// /usr/include/GL/glew.h:12130:9: warning: macro 'GLEW_EXT_shader_integer_mix' contains a runtime value, translated to function
pub inline fn GLEW_EXT_shader_integer_mix() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_shader_integer_mix)) {
    return GLEW_GET_VAR(__GLEW_EXT_shader_integer_mix);
}
pub const GL_EXT_shader_io_blocks = @as(c_int, 1);
// /usr/include/GL/glew.h:12139:9: warning: macro 'GLEW_EXT_shader_io_blocks' contains a runtime value, translated to function
pub inline fn GLEW_EXT_shader_io_blocks() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_shader_io_blocks)) {
    return GLEW_GET_VAR(__GLEW_EXT_shader_io_blocks);
}
pub const GL_EXT_shader_non_constant_global_initializers = @as(c_int, 1);
// /usr/include/GL/glew.h:12148:9: warning: macro 'GLEW_EXT_shader_non_constant_global_initializers' contains a runtime value, translated to function
pub inline fn GLEW_EXT_shader_non_constant_global_initializers() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_shader_non_constant_global_initializers)) {
    return GLEW_GET_VAR(__GLEW_EXT_shader_non_constant_global_initializers);
}
pub const GL_EXT_shader_pixel_local_storage = @as(c_int, 1);
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F63, .hex);
pub const GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F64, .hex);
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F67, .hex);
// /usr/include/GL/glew.h:12161:9: warning: macro 'GLEW_EXT_shader_pixel_local_storage' contains a runtime value, translated to function
pub inline fn GLEW_EXT_shader_pixel_local_storage() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_shader_pixel_local_storage)) {
    return GLEW_GET_VAR(__GLEW_EXT_shader_pixel_local_storage);
}
pub const GL_EXT_shader_pixel_local_storage2 = @as(c_int, 1);
pub const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9650, .hex);
pub const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9651, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9652, .hex);
// /usr/include/GL/glew.h:12178:9: warning: macro 'glClearPixelLocalStorageuiEXT' contains a runtime value, translated to function
pub inline fn glClearPixelLocalStorageuiEXT() @TypeOf(GLEW_GET_FUN(__glewClearPixelLocalStorageuiEXT)) {
    return GLEW_GET_FUN(__glewClearPixelLocalStorageuiEXT);
}
// /usr/include/GL/glew.h:12179:9: warning: macro 'glFramebufferPixelLocalStorageSizeEXT' contains a runtime value, translated to function
pub inline fn glFramebufferPixelLocalStorageSizeEXT() @TypeOf(GLEW_GET_FUN(__glewFramebufferPixelLocalStorageSizeEXT)) {
    return GLEW_GET_FUN(__glewFramebufferPixelLocalStorageSizeEXT);
}
// /usr/include/GL/glew.h:12180:9: warning: macro 'glGetFramebufferPixelLocalStorageSizeEXT' contains a runtime value, translated to function
pub inline fn glGetFramebufferPixelLocalStorageSizeEXT() @TypeOf(GLEW_GET_FUN(__glewGetFramebufferPixelLocalStorageSizeEXT)) {
    return GLEW_GET_FUN(__glewGetFramebufferPixelLocalStorageSizeEXT);
}
// /usr/include/GL/glew.h:12182:9: warning: macro 'GLEW_EXT_shader_pixel_local_storage2' contains a runtime value, translated to function
pub inline fn GLEW_EXT_shader_pixel_local_storage2() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_shader_pixel_local_storage2)) {
    return GLEW_GET_VAR(__GLEW_EXT_shader_pixel_local_storage2);
}
pub const GL_EXT_shader_texture_lod = @as(c_int, 1);
// /usr/include/GL/glew.h:12191:9: warning: macro 'GLEW_EXT_shader_texture_lod' contains a runtime value, translated to function
pub inline fn GLEW_EXT_shader_texture_lod() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_shader_texture_lod)) {
    return GLEW_GET_VAR(__GLEW_EXT_shader_texture_lod);
}
pub const GL_EXT_shadow_funcs = @as(c_int, 1);
// /usr/include/GL/glew.h:12200:9: warning: macro 'GLEW_EXT_shadow_funcs' contains a runtime value, translated to function
pub inline fn GLEW_EXT_shadow_funcs() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_shadow_funcs)) {
    return GLEW_GET_VAR(__GLEW_EXT_shadow_funcs);
}
pub const GL_EXT_shadow_samplers = @as(c_int, 1);
pub const GL_TEXTURE_COMPARE_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hex);
pub const GL_TEXTURE_COMPARE_FUNC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hex);
pub const GL_COMPARE_REF_TO_TEXTURE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hex);
pub const GL_SAMPLER_2D_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hex);
// /usr/include/GL/glew.h:12214:9: warning: macro 'GLEW_EXT_shadow_samplers' contains a runtime value, translated to function
pub inline fn GLEW_EXT_shadow_samplers() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_shadow_samplers)) {
    return GLEW_GET_VAR(__GLEW_EXT_shadow_samplers);
}
pub const GL_EXT_shared_texture_palette = @as(c_int, 1);
pub const GL_SHARED_TEXTURE_PALETTE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FB, .hex);
// /usr/include/GL/glew.h:12225:9: warning: macro 'GLEW_EXT_shared_texture_palette' contains a runtime value, translated to function
pub inline fn GLEW_EXT_shared_texture_palette() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_shared_texture_palette)) {
    return GLEW_GET_VAR(__GLEW_EXT_shared_texture_palette);
}
pub const GL_EXT_sparse_texture = @as(c_int, 1);
pub const GL_TEXTURE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9195, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9196, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9197, .hex);
pub const GL_MAX_SPARSE_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9198, .hex);
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9199, .hex);
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919A, .hex);
pub const GL_TEXTURE_SPARSE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A6, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A7, .hex);
pub const GL_NUM_VIRTUAL_PAGE_SIZES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A8, .hex);
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A9, .hex);
pub const GL_NUM_SPARSE_LEVELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AA, .hex);
// /usr/include/GL/glew.h:12254:9: warning: macro 'glTexPageCommitmentEXT' contains a runtime value, translated to function
pub inline fn glTexPageCommitmentEXT() @TypeOf(GLEW_GET_FUN(__glewTexPageCommitmentEXT)) {
    return GLEW_GET_FUN(__glewTexPageCommitmentEXT);
}
// /usr/include/GL/glew.h:12255:9: warning: macro 'glTexturePageCommitmentEXT' contains a runtime value, translated to function
pub inline fn glTexturePageCommitmentEXT() @TypeOf(GLEW_GET_FUN(__glewTexturePageCommitmentEXT)) {
    return GLEW_GET_FUN(__glewTexturePageCommitmentEXT);
}
// /usr/include/GL/glew.h:12257:9: warning: macro 'GLEW_EXT_sparse_texture' contains a runtime value, translated to function
pub inline fn GLEW_EXT_sparse_texture() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_sparse_texture)) {
    return GLEW_GET_VAR(__GLEW_EXT_sparse_texture);
}
pub const GL_EXT_sparse_texture2 = @as(c_int, 1);
// /usr/include/GL/glew.h:12266:9: warning: macro 'GLEW_EXT_sparse_texture2' contains a runtime value, translated to function
pub inline fn GLEW_EXT_sparse_texture2() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_sparse_texture2)) {
    return GLEW_GET_VAR(__GLEW_EXT_sparse_texture2);
}
pub const GL_EXT_static_vertex_array = @as(c_int, 1);
// /usr/include/GL/glew.h:12275:9: warning: macro 'GLEW_EXT_static_vertex_array' contains a runtime value, translated to function
pub inline fn GLEW_EXT_static_vertex_array() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_static_vertex_array)) {
    return GLEW_GET_VAR(__GLEW_EXT_static_vertex_array);
}
pub const GL_EXT_stencil_clear_tag = @as(c_int, 1);
pub const GL_STENCIL_TAG_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F2, .hex);
pub const GL_STENCIL_CLEAR_TAG_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F3, .hex);
// /usr/include/GL/glew.h:12287:9: warning: macro 'GLEW_EXT_stencil_clear_tag' contains a runtime value, translated to function
pub inline fn GLEW_EXT_stencil_clear_tag() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_stencil_clear_tag)) {
    return GLEW_GET_VAR(__GLEW_EXT_stencil_clear_tag);
}
pub const GL_EXT_stencil_two_side = @as(c_int, 1);
pub const GL_STENCIL_TEST_TWO_SIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8910, .hex);
pub const GL_ACTIVE_STENCIL_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8911, .hex);
// /usr/include/GL/glew.h:12301:9: warning: macro 'glActiveStencilFaceEXT' contains a runtime value, translated to function
pub inline fn glActiveStencilFaceEXT() @TypeOf(GLEW_GET_FUN(__glewActiveStencilFaceEXT)) {
    return GLEW_GET_FUN(__glewActiveStencilFaceEXT);
}
// /usr/include/GL/glew.h:12303:9: warning: macro 'GLEW_EXT_stencil_two_side' contains a runtime value, translated to function
pub inline fn GLEW_EXT_stencil_two_side() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_stencil_two_side)) {
    return GLEW_GET_VAR(__GLEW_EXT_stencil_two_side);
}
pub const GL_EXT_stencil_wrap = @as(c_int, 1);
pub const GL_INCR_WRAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8507, .hex);
pub const GL_DECR_WRAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8508, .hex);
// /usr/include/GL/glew.h:12315:9: warning: macro 'GLEW_EXT_stencil_wrap' contains a runtime value, translated to function
pub inline fn GLEW_EXT_stencil_wrap() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_stencil_wrap)) {
    return GLEW_GET_VAR(__GLEW_EXT_stencil_wrap);
}
pub const GL_EXT_subtexture = @as(c_int, 1);
// /usr/include/GL/glew.h:12328:9: warning: macro 'glTexSubImage1DEXT' contains a runtime value, translated to function
pub inline fn glTexSubImage1DEXT() @TypeOf(GLEW_GET_FUN(__glewTexSubImage1DEXT)) {
    return GLEW_GET_FUN(__glewTexSubImage1DEXT);
}
// /usr/include/GL/glew.h:12329:9: warning: macro 'glTexSubImage2DEXT' contains a runtime value, translated to function
pub inline fn glTexSubImage2DEXT() @TypeOf(GLEW_GET_FUN(__glewTexSubImage2DEXT)) {
    return GLEW_GET_FUN(__glewTexSubImage2DEXT);
}
// /usr/include/GL/glew.h:12330:9: warning: macro 'glTexSubImage3DEXT' contains a runtime value, translated to function
pub inline fn glTexSubImage3DEXT() @TypeOf(GLEW_GET_FUN(__glewTexSubImage3DEXT)) {
    return GLEW_GET_FUN(__glewTexSubImage3DEXT);
}
// /usr/include/GL/glew.h:12332:9: warning: macro 'GLEW_EXT_subtexture' contains a runtime value, translated to function
pub inline fn GLEW_EXT_subtexture() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_subtexture)) {
    return GLEW_GET_VAR(__GLEW_EXT_subtexture);
}
pub const GL_EXT_tessellation_point_size = @as(c_int, 1);
pub const GL_QUADS_EXT = @as(c_int, 0x0007);
pub const GL_TESS_CONTROL_SHADER_BIT_EXT = @as(c_int, 0x00000008);
pub const GL_PATCHES_EXT = @as(c_int, 0xE);
pub const GL_TESS_EVALUATION_SHADER_BIT_EXT = @as(c_int, 0x00000010);
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886C, .hex);
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886D, .hex);
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1E, .hex);
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1F, .hex);
pub const GL_PATCH_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E72, .hex);
pub const GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E75, .hex);
pub const GL_TESS_GEN_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E76, .hex);
pub const GL_TESS_GEN_SPACING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E77, .hex);
pub const GL_TESS_GEN_VERTEX_ORDER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E78, .hex);
pub const GL_TESS_GEN_POINT_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E79, .hex);
pub const GL_ISOLINES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7A, .hex);
pub const GL_FRACTIONAL_ODD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7B, .hex);
pub const GL_FRACTIONAL_EVEN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7C, .hex);
pub const GL_MAX_PATCH_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7D, .hex);
pub const GL_MAX_TESS_GEN_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7E, .hex);
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7F, .hex);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E80, .hex);
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E81, .hex);
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E82, .hex);
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E83, .hex);
pub const GL_MAX_TESS_PATCH_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E84, .hex);
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E85, .hex);
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E86, .hex);
pub const GL_TESS_EVALUATION_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E87, .hex);
pub const GL_TESS_CONTROL_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E88, .hex);
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E89, .hex);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8A, .hex);
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CB, .hex);
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CC, .hex);
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D8, .hex);
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D9, .hex);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CD, .hex);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CE, .hex);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D3, .hex);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D4, .hex);
pub const GL_IS_PER_PATCH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E7, .hex);
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9307, .hex);
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9308, .hex);
// /usr/include/GL/glew.h:12387:9: warning: macro 'glPatchParameteriEXT' contains a runtime value, translated to function
pub inline fn glPatchParameteriEXT() @TypeOf(GLEW_GET_FUN(__glewPatchParameteriEXT)) {
    return GLEW_GET_FUN(__glewPatchParameteriEXT);
}
// /usr/include/GL/glew.h:12389:9: warning: macro 'GLEW_EXT_tessellation_point_size' contains a runtime value, translated to function
pub inline fn GLEW_EXT_tessellation_point_size() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_tessellation_point_size)) {
    return GLEW_GET_VAR(__GLEW_EXT_tessellation_point_size);
}
pub const GL_EXT_tessellation_shader = @as(c_int, 1);
// /usr/include/GL/glew.h:12442:9: warning: macro 'GLEW_EXT_tessellation_shader' contains a runtime value, translated to function
pub inline fn GLEW_EXT_tessellation_shader() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_tessellation_shader)) {
    return GLEW_GET_VAR(__GLEW_EXT_tessellation_shader);
}
pub const GL_EXT_texture = @as(c_int, 1);
pub const GL_ALPHA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803B, .hex);
pub const GL_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hex);
pub const GL_ALPHA12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803D, .hex);
pub const GL_ALPHA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803E, .hex);
pub const GL_LUMINANCE4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803F, .hex);
pub const GL_LUMINANCE8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hex);
pub const GL_LUMINANCE12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8041, .hex);
pub const GL_LUMINANCE16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8042, .hex);
pub const GL_LUMINANCE4_ALPHA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8043, .hex);
pub const GL_LUMINANCE6_ALPHA2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8044, .hex);
pub const GL_LUMINANCE8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hex);
pub const GL_LUMINANCE12_ALPHA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8046, .hex);
pub const GL_LUMINANCE12_ALPHA12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8047, .hex);
pub const GL_LUMINANCE16_ALPHA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8048, .hex);
pub const GL_INTENSITY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8049, .hex);
pub const GL_INTENSITY4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804A, .hex);
pub const GL_INTENSITY8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804B, .hex);
pub const GL_INTENSITY12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804C, .hex);
pub const GL_INTENSITY16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804D, .hex);
pub const GL_RGB2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804E, .hex);
pub const GL_RGB4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804F, .hex);
pub const GL_RGB5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8050, .hex);
pub const GL_RGB8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hex);
pub const GL_RGB10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8052, .hex);
pub const GL_RGB12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8053, .hex);
pub const GL_RGB16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8054, .hex);
pub const GL_RGBA2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8055, .hex);
pub const GL_RGBA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hex);
pub const GL_RGB5_A1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hex);
pub const GL_RGBA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hex);
pub const GL_RGB10_A2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8059, .hex);
pub const GL_RGBA12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805A, .hex);
pub const GL_RGBA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805B, .hex);
pub const GL_TEXTURE_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805C, .hex);
pub const GL_TEXTURE_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805D, .hex);
pub const GL_TEXTURE_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805E, .hex);
pub const GL_TEXTURE_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805F, .hex);
pub const GL_TEXTURE_LUMINANCE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8060, .hex);
pub const GL_TEXTURE_INTENSITY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8061, .hex);
pub const GL_REPLACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8062, .hex);
pub const GL_PROXY_TEXTURE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8063, .hex);
pub const GL_PROXY_TEXTURE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8064, .hex);
// /usr/include/GL/glew.h:12494:9: warning: macro 'GLEW_EXT_texture' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture);
}
pub const GL_EXT_texture3D = @as(c_int, 1);
pub const GL_PACK_SKIP_IMAGES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806B, .hex);
pub const GL_PACK_IMAGE_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806C, .hex);
pub const GL_UNPACK_SKIP_IMAGES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806D, .hex);
pub const GL_UNPACK_IMAGE_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806E, .hex);
pub const GL_TEXTURE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hex);
pub const GL_PROXY_TEXTURE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8070, .hex);
pub const GL_TEXTURE_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8071, .hex);
pub const GL_TEXTURE_WRAP_R_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hex);
pub const GL_MAX_3D_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hex);
// /usr/include/GL/glew.h:12515:9: warning: macro 'glTexImage3DEXT' contains a runtime value, translated to function
pub inline fn glTexImage3DEXT() @TypeOf(GLEW_GET_FUN(__glewTexImage3DEXT)) {
    return GLEW_GET_FUN(__glewTexImage3DEXT);
}
// /usr/include/GL/glew.h:12517:9: warning: macro 'GLEW_EXT_texture3D' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture3D() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture3D)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture3D);
}
pub const GL_EXT_texture_array = @as(c_int, 1);
pub const GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hex);
pub const GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FF, .hex);
pub const GL_TEXTURE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C18, .hex);
pub const GL_PROXY_TEXTURE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C19, .hex);
pub const GL_TEXTURE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1A, .hex);
pub const GL_PROXY_TEXTURE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1B, .hex);
pub const GL_TEXTURE_BINDING_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1C, .hex);
pub const GL_TEXTURE_BINDING_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1D, .hex);
// /usr/include/GL/glew.h:12537:9: warning: macro 'glFramebufferTextureLayerEXT' contains a runtime value, translated to function
pub inline fn glFramebufferTextureLayerEXT() @TypeOf(GLEW_GET_FUN(__glewFramebufferTextureLayerEXT)) {
    return GLEW_GET_FUN(__glewFramebufferTextureLayerEXT);
}
// /usr/include/GL/glew.h:12539:9: warning: macro 'GLEW_EXT_texture_array' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_array() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_array)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_array);
}
pub const GL_EXT_texture_border_clamp = @as(c_int, 1);
pub const GL_TEXTURE_BORDER_COLOR_EXT = @as(c_int, 0x1004);
pub const GL_CLAMP_TO_BORDER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hex);
// /usr/include/GL/glew.h:12556:9: warning: macro 'glGetSamplerParameterIivEXT' contains a runtime value, translated to function
pub inline fn glGetSamplerParameterIivEXT() @TypeOf(GLEW_GET_FUN(__glewGetSamplerParameterIivEXT)) {
    return GLEW_GET_FUN(__glewGetSamplerParameterIivEXT);
}
// /usr/include/GL/glew.h:12557:9: warning: macro 'glGetSamplerParameterIuivEXT' contains a runtime value, translated to function
pub inline fn glGetSamplerParameterIuivEXT() @TypeOf(GLEW_GET_FUN(__glewGetSamplerParameterIuivEXT)) {
    return GLEW_GET_FUN(__glewGetSamplerParameterIuivEXT);
}
// /usr/include/GL/glew.h:12558:9: warning: macro 'glSamplerParameterIivEXT' contains a runtime value, translated to function
pub inline fn glSamplerParameterIivEXT() @TypeOf(GLEW_GET_FUN(__glewSamplerParameterIivEXT)) {
    return GLEW_GET_FUN(__glewSamplerParameterIivEXT);
}
// /usr/include/GL/glew.h:12559:9: warning: macro 'glSamplerParameterIuivEXT' contains a runtime value, translated to function
pub inline fn glSamplerParameterIuivEXT() @TypeOf(GLEW_GET_FUN(__glewSamplerParameterIuivEXT)) {
    return GLEW_GET_FUN(__glewSamplerParameterIuivEXT);
}
// /usr/include/GL/glew.h:12561:9: warning: macro 'GLEW_EXT_texture_border_clamp' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_border_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_border_clamp)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_border_clamp);
}
pub const GL_EXT_texture_buffer = @as(c_int, 1);
pub const GL_TEXTURE_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hex);
pub const GL_TEXTURE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hex);
pub const GL_MAX_TEXTURE_BUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hex);
pub const GL_TEXTURE_BINDING_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hex);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hex);
pub const GL_TEXTURE_BUFFER_OFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919D, .hex);
pub const GL_TEXTURE_BUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919E, .hex);
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919F, .hex);
// /usr/include/GL/glew.h:12585:9: warning: macro 'GLEW_EXT_texture_buffer' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_buffer() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_buffer)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_buffer);
}
pub const GL_EXT_texture_buffer_object = @as(c_int, 1);
pub const GL_TEXTURE_BUFFER_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2E, .hex);
// /usr/include/GL/glew.h:12602:9: warning: macro 'glTexBufferEXT' contains a runtime value, translated to function
pub inline fn glTexBufferEXT() @TypeOf(GLEW_GET_FUN(__glewTexBufferEXT)) {
    return GLEW_GET_FUN(__glewTexBufferEXT);
}
// /usr/include/GL/glew.h:12604:9: warning: macro 'GLEW_EXT_texture_buffer_object' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_buffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_buffer_object)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_buffer_object);
}
pub const GL_EXT_texture_compression_astc_decode_mode = @as(c_int, 1);
pub const GL_TEXTURE_ASTC_DECODE_PRECISION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F69, .hex);
// /usr/include/GL/glew.h:12615:9: warning: macro 'GLEW_EXT_texture_compression_astc_decode_mode' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_compression_astc_decode_mode() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_compression_astc_decode_mode)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_compression_astc_decode_mode);
}
pub const GL_EXT_texture_compression_astc_decode_mode_rgb9e5 = @as(c_int, 1);
// /usr/include/GL/glew.h:12626:9: warning: macro 'GLEW_EXT_texture_compression_astc_decode_mode_rgb9e5' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_compression_astc_decode_mode_rgb9e5() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_compression_astc_decode_mode_rgb9e5)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_compression_astc_decode_mode_rgb9e5);
}
pub const GL_EXT_texture_compression_bptc = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8C, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8D, .hex);
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8E, .hex);
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8F, .hex);
// /usr/include/GL/glew.h:12640:9: warning: macro 'GLEW_EXT_texture_compression_bptc' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_compression_bptc() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_compression_bptc)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_compression_bptc);
}
pub const GL_EXT_texture_compression_dxt1 = @as(c_int, 1);
// /usr/include/GL/glew.h:12649:9: warning: macro 'GLEW_EXT_texture_compression_dxt1' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_compression_dxt1() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_compression_dxt1)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_compression_dxt1);
}
pub const GL_EXT_texture_compression_latc = @as(c_int, 1);
pub const GL_COMPRESSED_LUMINANCE_LATC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C70, .hex);
pub const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C71, .hex);
pub const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C72, .hex);
pub const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C73, .hex);
// /usr/include/GL/glew.h:12663:9: warning: macro 'GLEW_EXT_texture_compression_latc' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_compression_latc() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_compression_latc)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_compression_latc);
}
pub const GL_EXT_texture_compression_rgtc = @as(c_int, 1);
pub const GL_COMPRESSED_RED_RGTC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBB, .hex);
pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBC, .hex);
pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBD, .hex);
pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBE, .hex);
// /usr/include/GL/glew.h:12677:9: warning: macro 'GLEW_EXT_texture_compression_rgtc' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_compression_rgtc() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_compression_rgtc)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_compression_rgtc);
}
pub const GL_EXT_texture_compression_s3tc = @as(c_int, 1);
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F0, .hex);
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F1, .hex);
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F2, .hex);
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F3, .hex);
// /usr/include/GL/glew.h:12691:9: warning: macro 'GLEW_EXT_texture_compression_s3tc' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_compression_s3tc() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_compression_s3tc)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_compression_s3tc);
}
pub const GL_EXT_texture_compression_s3tc_srgb = @as(c_int, 1);
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4C, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4D, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4E, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4F, .hex);
// /usr/include/GL/glew.h:12705:9: warning: macro 'GLEW_EXT_texture_compression_s3tc_srgb' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_compression_s3tc_srgb() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_compression_s3tc_srgb)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_compression_s3tc_srgb);
}
pub const GL_EXT_texture_cube_map = @as(c_int, 1);
pub const GL_NORMAL_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hex);
pub const GL_REFLECTION_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hex);
pub const GL_TEXTURE_CUBE_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hex);
pub const GL_TEXTURE_BINDING_CUBE_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hex);
pub const GL_PROXY_TEXTURE_CUBE_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hex);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hex);
// /usr/include/GL/glew.h:12727:9: warning: macro 'GLEW_EXT_texture_cube_map' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_cube_map() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_cube_map)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_cube_map);
}
pub const GL_EXT_texture_cube_map_array = @as(c_int, 1);
pub const GL_TEXTURE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hex);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hex);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hex);
// /usr/include/GL/glew.h:12746:9: warning: macro 'GLEW_EXT_texture_cube_map_array' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_cube_map_array() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_cube_map_array)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_cube_map_array);
}
pub const GL_EXT_texture_edge_clamp = @as(c_int, 1);
pub const GL_CLAMP_TO_EDGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812F, .hex);
// /usr/include/GL/glew.h:12757:9: warning: macro 'GLEW_EXT_texture_edge_clamp' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_edge_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_edge_clamp)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_edge_clamp);
}
pub const GL_EXT_texture_env = @as(c_int, 1);
// /usr/include/GL/glew.h:12766:9: warning: macro 'GLEW_EXT_texture_env' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_env() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_env)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_env);
}
pub const GL_EXT_texture_env_add = @as(c_int, 1);
// /usr/include/GL/glew.h:12775:9: warning: macro 'GLEW_EXT_texture_env_add' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_env_add() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_env_add)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_env_add);
}
pub const GL_EXT_texture_env_combine = @as(c_int, 1);
pub const GL_COMBINE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hex);
pub const GL_COMBINE_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hex);
pub const GL_COMBINE_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hex);
pub const GL_RGB_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hex);
pub const GL_ADD_SIGNED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hex);
pub const GL_INTERPOLATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hex);
pub const GL_CONSTANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hex);
pub const GL_PRIMARY_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hex);
pub const GL_PREVIOUS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hex);
pub const GL_SOURCE0_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hex);
pub const GL_SOURCE1_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hex);
pub const GL_SOURCE2_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hex);
pub const GL_SOURCE0_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hex);
pub const GL_SOURCE1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hex);
pub const GL_SOURCE2_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hex);
pub const GL_OPERAND0_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hex);
pub const GL_OPERAND1_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hex);
pub const GL_OPERAND2_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hex);
pub const GL_OPERAND0_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hex);
pub const GL_OPERAND1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hex);
pub const GL_OPERAND2_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hex);
// /usr/include/GL/glew.h:12806:9: warning: macro 'GLEW_EXT_texture_env_combine' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_env_combine() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_env_combine)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_env_combine);
}
pub const GL_EXT_texture_env_dot3 = @as(c_int, 1);
pub const GL_DOT3_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8740, .hex);
pub const GL_DOT3_RGBA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8741, .hex);
// /usr/include/GL/glew.h:12818:9: warning: macro 'GLEW_EXT_texture_env_dot3' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_env_dot3() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_env_dot3)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_env_dot3);
}
pub const GL_EXT_texture_filter_anisotropic = @as(c_int, 1);
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FE, .hex);
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FF, .hex);
// /usr/include/GL/glew.h:12830:9: warning: macro 'GLEW_EXT_texture_filter_anisotropic' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_filter_anisotropic() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_filter_anisotropic)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_filter_anisotropic);
}
pub const GL_EXT_texture_filter_minmax = @as(c_int, 1);
pub const GL_TEXTURE_REDUCTION_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9366, .hex);
pub const GL_WEIGHTED_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9367, .hex);
// /usr/include/GL/glew.h:12842:9: warning: macro 'GLEW_EXT_texture_filter_minmax' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_filter_minmax() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_filter_minmax)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_filter_minmax);
}
pub const GL_EXT_texture_format_BGRA8888 = @as(c_int, 1);
// /usr/include/GL/glew.h:12853:9: warning: macro 'GLEW_EXT_texture_format_BGRA8888' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_format_BGRA8888() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_format_BGRA8888)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_format_BGRA8888);
}
pub const GL_EXT_texture_format_sRGB_override = @as(c_int, 1);
pub const GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBF, .hex);
// /usr/include/GL/glew.h:12864:9: warning: macro 'GLEW_EXT_texture_format_sRGB_override' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_format_sRGB_override() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_format_sRGB_override)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_format_sRGB_override);
}
pub const GL_EXT_texture_integer = @as(c_int, 1);
pub const GL_RGBA32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D70, .hex);
pub const GL_RGB32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D71, .hex);
pub const GL_ALPHA32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D72, .hex);
pub const GL_INTENSITY32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D73, .hex);
pub const GL_LUMINANCE32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D74, .hex);
pub const GL_LUMINANCE_ALPHA32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D75, .hex);
pub const GL_RGBA16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D76, .hex);
pub const GL_RGB16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D77, .hex);
pub const GL_ALPHA16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D78, .hex);
pub const GL_INTENSITY16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D79, .hex);
pub const GL_LUMINANCE16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7A, .hex);
pub const GL_LUMINANCE_ALPHA16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7B, .hex);
pub const GL_RGBA8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7C, .hex);
pub const GL_RGB8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7D, .hex);
pub const GL_ALPHA8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7E, .hex);
pub const GL_INTENSITY8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7F, .hex);
pub const GL_LUMINANCE8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D80, .hex);
pub const GL_LUMINANCE_ALPHA8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D81, .hex);
pub const GL_RGBA32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D82, .hex);
pub const GL_RGB32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D83, .hex);
pub const GL_ALPHA32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D84, .hex);
pub const GL_INTENSITY32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D85, .hex);
pub const GL_LUMINANCE32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D86, .hex);
pub const GL_LUMINANCE_ALPHA32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D87, .hex);
pub const GL_RGBA16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D88, .hex);
pub const GL_RGB16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D89, .hex);
pub const GL_ALPHA16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8A, .hex);
pub const GL_INTENSITY16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8B, .hex);
pub const GL_LUMINANCE16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8C, .hex);
pub const GL_LUMINANCE_ALPHA16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8D, .hex);
pub const GL_RGBA8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8E, .hex);
pub const GL_RGB8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8F, .hex);
pub const GL_ALPHA8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D90, .hex);
pub const GL_INTENSITY8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D91, .hex);
pub const GL_LUMINANCE8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D92, .hex);
pub const GL_LUMINANCE_ALPHA8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D93, .hex);
pub const GL_RED_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D94, .hex);
pub const GL_GREEN_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D95, .hex);
pub const GL_BLUE_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D96, .hex);
pub const GL_ALPHA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D97, .hex);
pub const GL_RGB_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D98, .hex);
pub const GL_RGBA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D99, .hex);
pub const GL_BGR_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9A, .hex);
pub const GL_BGRA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9B, .hex);
pub const GL_LUMINANCE_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9C, .hex);
pub const GL_LUMINANCE_ALPHA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9D, .hex);
pub const GL_RGBA_INTEGER_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9E, .hex);
// /usr/include/GL/glew.h:12928:9: warning: macro 'glClearColorIiEXT' contains a runtime value, translated to function
pub inline fn glClearColorIiEXT() @TypeOf(GLEW_GET_FUN(__glewClearColorIiEXT)) {
    return GLEW_GET_FUN(__glewClearColorIiEXT);
}
// /usr/include/GL/glew.h:12929:9: warning: macro 'glClearColorIuiEXT' contains a runtime value, translated to function
pub inline fn glClearColorIuiEXT() @TypeOf(GLEW_GET_FUN(__glewClearColorIuiEXT)) {
    return GLEW_GET_FUN(__glewClearColorIuiEXT);
}
// /usr/include/GL/glew.h:12930:9: warning: macro 'glGetTexParameterIivEXT' contains a runtime value, translated to function
pub inline fn glGetTexParameterIivEXT() @TypeOf(GLEW_GET_FUN(__glewGetTexParameterIivEXT)) {
    return GLEW_GET_FUN(__glewGetTexParameterIivEXT);
}
// /usr/include/GL/glew.h:12931:9: warning: macro 'glGetTexParameterIuivEXT' contains a runtime value, translated to function
pub inline fn glGetTexParameterIuivEXT() @TypeOf(GLEW_GET_FUN(__glewGetTexParameterIuivEXT)) {
    return GLEW_GET_FUN(__glewGetTexParameterIuivEXT);
}
// /usr/include/GL/glew.h:12932:9: warning: macro 'glTexParameterIivEXT' contains a runtime value, translated to function
pub inline fn glTexParameterIivEXT() @TypeOf(GLEW_GET_FUN(__glewTexParameterIivEXT)) {
    return GLEW_GET_FUN(__glewTexParameterIivEXT);
}
// /usr/include/GL/glew.h:12933:9: warning: macro 'glTexParameterIuivEXT' contains a runtime value, translated to function
pub inline fn glTexParameterIuivEXT() @TypeOf(GLEW_GET_FUN(__glewTexParameterIuivEXT)) {
    return GLEW_GET_FUN(__glewTexParameterIuivEXT);
}
// /usr/include/GL/glew.h:12935:9: warning: macro 'GLEW_EXT_texture_integer' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_integer() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_integer)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_integer);
}
pub const GL_EXT_texture_lod_bias = @as(c_int, 1);
pub const GL_MAX_TEXTURE_LOD_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FD, .hex);
pub const GL_TEXTURE_FILTER_CONTROL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8500, .hex);
pub const GL_TEXTURE_LOD_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8501, .hex);
// /usr/include/GL/glew.h:12948:9: warning: macro 'GLEW_EXT_texture_lod_bias' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_lod_bias() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_lod_bias)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_lod_bias);
}
pub const GL_EXT_texture_mirror_clamp = @as(c_int, 1);
pub const GL_MIRROR_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8742, .hex);
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hex);
pub const GL_MIRROR_CLAMP_TO_BORDER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8912, .hex);
// /usr/include/GL/glew.h:12961:9: warning: macro 'GLEW_EXT_texture_mirror_clamp' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_mirror_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_mirror_clamp)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_mirror_clamp);
}
pub const GL_EXT_texture_mirror_clamp_to_edge = @as(c_int, 1);
// /usr/include/GL/glew.h:12972:9: warning: macro 'GLEW_EXT_texture_mirror_clamp_to_edge' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_mirror_clamp_to_edge() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_mirror_clamp_to_edge)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_mirror_clamp_to_edge);
}
pub const GL_EXT_texture_norm16 = @as(c_int, 1);
pub const GL_R16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822A, .hex);
pub const GL_RG16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822C, .hex);
pub const GL_RGB16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9A, .hex);
// /usr/include/GL/glew.h:12990:9: warning: macro 'GLEW_EXT_texture_norm16' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_norm16() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_norm16)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_norm16);
}
pub const GL_EXT_texture_object = @as(c_int, 1);
pub const GL_TEXTURE_PRIORITY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8066, .hex);
pub const GL_TEXTURE_RESIDENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8067, .hex);
pub const GL_TEXTURE_1D_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8068, .hex);
pub const GL_TEXTURE_2D_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8069, .hex);
pub const GL_TEXTURE_3D_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hex);
// /usr/include/GL/glew.h:13012:9: warning: macro 'glAreTexturesResidentEXT' contains a runtime value, translated to function
pub inline fn glAreTexturesResidentEXT() @TypeOf(GLEW_GET_FUN(__glewAreTexturesResidentEXT)) {
    return GLEW_GET_FUN(__glewAreTexturesResidentEXT);
}
// /usr/include/GL/glew.h:13013:9: warning: macro 'glBindTextureEXT' contains a runtime value, translated to function
pub inline fn glBindTextureEXT() @TypeOf(GLEW_GET_FUN(__glewBindTextureEXT)) {
    return GLEW_GET_FUN(__glewBindTextureEXT);
}
// /usr/include/GL/glew.h:13014:9: warning: macro 'glDeleteTexturesEXT' contains a runtime value, translated to function
pub inline fn glDeleteTexturesEXT() @TypeOf(GLEW_GET_FUN(__glewDeleteTexturesEXT)) {
    return GLEW_GET_FUN(__glewDeleteTexturesEXT);
}
// /usr/include/GL/glew.h:13015:9: warning: macro 'glGenTexturesEXT' contains a runtime value, translated to function
pub inline fn glGenTexturesEXT() @TypeOf(GLEW_GET_FUN(__glewGenTexturesEXT)) {
    return GLEW_GET_FUN(__glewGenTexturesEXT);
}
// /usr/include/GL/glew.h:13016:9: warning: macro 'glIsTextureEXT' contains a runtime value, translated to function
pub inline fn glIsTextureEXT() @TypeOf(GLEW_GET_FUN(__glewIsTextureEXT)) {
    return GLEW_GET_FUN(__glewIsTextureEXT);
}
// /usr/include/GL/glew.h:13017:9: warning: macro 'glPrioritizeTexturesEXT' contains a runtime value, translated to function
pub inline fn glPrioritizeTexturesEXT() @TypeOf(GLEW_GET_FUN(__glewPrioritizeTexturesEXT)) {
    return GLEW_GET_FUN(__glewPrioritizeTexturesEXT);
}
// /usr/include/GL/glew.h:13019:9: warning: macro 'GLEW_EXT_texture_object' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_object() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_object)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_object);
}
pub const GL_EXT_texture_perturb_normal = @as(c_int, 1);
pub const GL_PERTURB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AE, .hex);
pub const GL_TEXTURE_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AF, .hex);
// /usr/include/GL/glew.h:13033:9: warning: macro 'glTextureNormalEXT' contains a runtime value, translated to function
pub inline fn glTextureNormalEXT() @TypeOf(GLEW_GET_FUN(__glewTextureNormalEXT)) {
    return GLEW_GET_FUN(__glewTextureNormalEXT);
}
// /usr/include/GL/glew.h:13035:9: warning: macro 'GLEW_EXT_texture_perturb_normal' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_perturb_normal() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_perturb_normal)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_perturb_normal);
}
pub const GL_EXT_texture_query_lod = @as(c_int, 1);
// /usr/include/GL/glew.h:13044:9: warning: macro 'GLEW_EXT_texture_query_lod' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_query_lod() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_query_lod)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_query_lod);
}
pub const GL_EXT_texture_rectangle = @as(c_int, 1);
pub const GL_TEXTURE_RECTANGLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hex);
pub const GL_TEXTURE_BINDING_RECTANGLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hex);
pub const GL_PROXY_TEXTURE_RECTANGLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hex);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hex);
// /usr/include/GL/glew.h:13058:9: warning: macro 'GLEW_EXT_texture_rectangle' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_rectangle() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_rectangle)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_rectangle);
}
pub const GL_EXT_texture_rg = @as(c_int, 1);
pub const GL_RED_EXT = @as(c_int, 0x1903);
pub const GL_RG_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8227, .hex);
pub const GL_R8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8229, .hex);
pub const GL_RG8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822B, .hex);
// /usr/include/GL/glew.h:13072:9: warning: macro 'GLEW_EXT_texture_rg' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_rg() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_rg)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_rg);
}
pub const GL_EXT_texture_sRGB = @as(c_int, 1);
pub const GL_SRGB8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hex);
pub const GL_SLUMINANCE_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C44, .hex);
pub const GL_SLUMINANCE8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C45, .hex);
pub const GL_SLUMINANCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C46, .hex);
pub const GL_SLUMINANCE8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C47, .hex);
pub const GL_COMPRESSED_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C48, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C49, .hex);
pub const GL_COMPRESSED_SLUMINANCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4A, .hex);
pub const GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4B, .hex);
// /usr/include/GL/glew.h:13098:9: warning: macro 'GLEW_EXT_texture_sRGB' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_sRGB() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_sRGB)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_sRGB);
}
pub const GL_EXT_texture_sRGB_R8 = @as(c_int, 1);
pub const GL_SR8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBD, .hex);
// /usr/include/GL/glew.h:13109:9: warning: macro 'GLEW_EXT_texture_sRGB_R8' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_sRGB_R8() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_sRGB_R8)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_sRGB_R8);
}
pub const GL_EXT_texture_sRGB_RG8 = @as(c_int, 1);
pub const GL_SRG8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBE, .hex);
// /usr/include/GL/glew.h:13120:9: warning: macro 'GLEW_EXT_texture_sRGB_RG8' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_sRGB_RG8() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_sRGB_RG8)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_sRGB_RG8);
}
pub const GL_EXT_texture_sRGB_decode = @as(c_int, 1);
pub const GL_TEXTURE_SRGB_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A48, .hex);
pub const GL_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A49, .hex);
pub const GL_SKIP_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A4A, .hex);
// /usr/include/GL/glew.h:13133:9: warning: macro 'GLEW_EXT_texture_sRGB_decode' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_sRGB_decode() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_sRGB_decode)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_sRGB_decode);
}
pub const GL_EXT_texture_shadow_lod = @as(c_int, 1);
// /usr/include/GL/glew.h:13142:9: warning: macro 'GLEW_EXT_texture_shadow_lod' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_shadow_lod() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_shadow_lod)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_shadow_lod);
}
pub const GL_EXT_texture_shared_exponent = @as(c_int, 1);
pub const GL_RGB9_E5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3D, .hex);
pub const GL_UNSIGNED_INT_5_9_9_9_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3E, .hex);
pub const GL_TEXTURE_SHARED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3F, .hex);
// /usr/include/GL/glew.h:13155:9: warning: macro 'GLEW_EXT_texture_shared_exponent' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_shared_exponent() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_shared_exponent)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_shared_exponent);
}
pub const GL_EXT_texture_snorm = @as(c_int, 1);
pub const GL_ALPHA_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9010, .hex);
pub const GL_LUMINANCE_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9011, .hex);
pub const GL_LUMINANCE_ALPHA_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9012, .hex);
pub const GL_INTENSITY_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9013, .hex);
pub const GL_ALPHA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9014, .hex);
pub const GL_LUMINANCE8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9015, .hex);
pub const GL_LUMINANCE8_ALPHA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9016, .hex);
pub const GL_INTENSITY8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9017, .hex);
pub const GL_ALPHA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9018, .hex);
pub const GL_LUMINANCE16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9019, .hex);
pub const GL_LUMINANCE16_ALPHA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901A, .hex);
pub const GL_INTENSITY16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901B, .hex);
// /usr/include/GL/glew.h:13190:9: warning: macro 'GLEW_EXT_texture_snorm' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_snorm() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_snorm)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_snorm);
}
pub const GL_EXT_texture_storage = @as(c_int, 1);
pub const GL_R32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822E, .hex);
pub const GL_RG32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8230, .hex);
pub const GL_RGBA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hex);
pub const GL_RGB32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hex);
pub const GL_ALPHA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hex);
pub const GL_LUMINANCE32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hex);
pub const GL_LUMINANCE_ALPHA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hex);
pub const GL_ALPHA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hex);
pub const GL_LUMINANCE16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hex);
pub const GL_LUMINANCE_ALPHA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hex);
pub const GL_TEXTURE_IMMUTABLE_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912F, .hex);
// /usr/include/GL/glew.h:13231:9: warning: macro 'glTexStorage1DEXT' contains a runtime value, translated to function
pub inline fn glTexStorage1DEXT() @TypeOf(GLEW_GET_FUN(__glewTexStorage1DEXT)) {
    return GLEW_GET_FUN(__glewTexStorage1DEXT);
}
// /usr/include/GL/glew.h:13232:9: warning: macro 'glTexStorage2DEXT' contains a runtime value, translated to function
pub inline fn glTexStorage2DEXT() @TypeOf(GLEW_GET_FUN(__glewTexStorage2DEXT)) {
    return GLEW_GET_FUN(__glewTexStorage2DEXT);
}
// /usr/include/GL/glew.h:13233:9: warning: macro 'glTexStorage3DEXT' contains a runtime value, translated to function
pub inline fn glTexStorage3DEXT() @TypeOf(GLEW_GET_FUN(__glewTexStorage3DEXT)) {
    return GLEW_GET_FUN(__glewTexStorage3DEXT);
}
// /usr/include/GL/glew.h:13234:9: warning: macro 'glTextureStorage1DEXT' contains a runtime value, translated to function
pub inline fn glTextureStorage1DEXT() @TypeOf(GLEW_GET_FUN(__glewTextureStorage1DEXT)) {
    return GLEW_GET_FUN(__glewTextureStorage1DEXT);
}
// /usr/include/GL/glew.h:13235:9: warning: macro 'glTextureStorage2DEXT' contains a runtime value, translated to function
pub inline fn glTextureStorage2DEXT() @TypeOf(GLEW_GET_FUN(__glewTextureStorage2DEXT)) {
    return GLEW_GET_FUN(__glewTextureStorage2DEXT);
}
// /usr/include/GL/glew.h:13236:9: warning: macro 'glTextureStorage3DEXT' contains a runtime value, translated to function
pub inline fn glTextureStorage3DEXT() @TypeOf(GLEW_GET_FUN(__glewTextureStorage3DEXT)) {
    return GLEW_GET_FUN(__glewTextureStorage3DEXT);
}
// /usr/include/GL/glew.h:13238:9: warning: macro 'GLEW_EXT_texture_storage' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_storage() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_storage)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_storage);
}
pub const GL_EXT_texture_swizzle = @as(c_int, 1);
pub const GL_TEXTURE_SWIZZLE_R_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E42, .hex);
pub const GL_TEXTURE_SWIZZLE_G_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E43, .hex);
pub const GL_TEXTURE_SWIZZLE_B_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E44, .hex);
pub const GL_TEXTURE_SWIZZLE_A_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E45, .hex);
pub const GL_TEXTURE_SWIZZLE_RGBA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E46, .hex);
// /usr/include/GL/glew.h:13253:9: warning: macro 'GLEW_EXT_texture_swizzle' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_swizzle() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_swizzle)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_swizzle);
}
pub const GL_EXT_texture_type_2_10_10_10_REV = @as(c_int, 1);
pub const GL_UNSIGNED_INT_2_10_10_10_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8368, .hex);
// /usr/include/GL/glew.h:13264:9: warning: macro 'GLEW_EXT_texture_type_2_10_10_10_REV' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_type_2_10_10_10_REV() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_type_2_10_10_10_REV)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_type_2_10_10_10_REV);
}
pub const GL_EXT_texture_view = @as(c_int, 1);
pub const GL_TEXTURE_VIEW_MIN_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DB, .hex);
pub const GL_TEXTURE_VIEW_NUM_LEVELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DC, .hex);
pub const GL_TEXTURE_VIEW_MIN_LAYER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DD, .hex);
pub const GL_TEXTURE_VIEW_NUM_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DE, .hex);
// /usr/include/GL/glew.h:13281:9: warning: macro 'glTextureViewEXT' contains a runtime value, translated to function
pub inline fn glTextureViewEXT() @TypeOf(GLEW_GET_FUN(__glewTextureViewEXT)) {
    return GLEW_GET_FUN(__glewTextureViewEXT);
}
// /usr/include/GL/glew.h:13283:9: warning: macro 'GLEW_EXT_texture_view' contains a runtime value, translated to function
pub inline fn GLEW_EXT_texture_view() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_texture_view)) {
    return GLEW_GET_VAR(__GLEW_EXT_texture_view);
}
pub const GL_EXT_timer_query = @as(c_int, 1);
// /usr/include/GL/glew.h:13297:9: warning: macro 'glGetQueryObjecti64vEXT' contains a runtime value, translated to function
pub inline fn glGetQueryObjecti64vEXT() @TypeOf(GLEW_GET_FUN(__glewGetQueryObjecti64vEXT)) {
    return GLEW_GET_FUN(__glewGetQueryObjecti64vEXT);
}
// /usr/include/GL/glew.h:13298:9: warning: macro 'glGetQueryObjectui64vEXT' contains a runtime value, translated to function
pub inline fn glGetQueryObjectui64vEXT() @TypeOf(GLEW_GET_FUN(__glewGetQueryObjectui64vEXT)) {
    return GLEW_GET_FUN(__glewGetQueryObjectui64vEXT);
}
// /usr/include/GL/glew.h:13300:9: warning: macro 'GLEW_EXT_timer_query' contains a runtime value, translated to function
pub inline fn GLEW_EXT_timer_query() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_timer_query)) {
    return GLEW_GET_VAR(__GLEW_EXT_timer_query);
}
pub const GL_EXT_transform_feedback = @as(c_int, 1);
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C76, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hex);
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hex);
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hex);
pub const GL_RASTERIZER_DISCARD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hex);
pub const GL_INTERLEAVED_ATTRIBS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hex);
pub const GL_SEPARATE_ATTRIBS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hex);
// /usr/include/GL/glew.h:13333:9: warning: macro 'glBeginTransformFeedbackEXT' contains a runtime value, translated to function
pub inline fn glBeginTransformFeedbackEXT() @TypeOf(GLEW_GET_FUN(__glewBeginTransformFeedbackEXT)) {
    return GLEW_GET_FUN(__glewBeginTransformFeedbackEXT);
}
// /usr/include/GL/glew.h:13334:9: warning: macro 'glBindBufferBaseEXT' contains a runtime value, translated to function
pub inline fn glBindBufferBaseEXT() @TypeOf(GLEW_GET_FUN(__glewBindBufferBaseEXT)) {
    return GLEW_GET_FUN(__glewBindBufferBaseEXT);
}
// /usr/include/GL/glew.h:13335:9: warning: macro 'glBindBufferOffsetEXT' contains a runtime value, translated to function
pub inline fn glBindBufferOffsetEXT() @TypeOf(GLEW_GET_FUN(__glewBindBufferOffsetEXT)) {
    return GLEW_GET_FUN(__glewBindBufferOffsetEXT);
}
// /usr/include/GL/glew.h:13336:9: warning: macro 'glBindBufferRangeEXT' contains a runtime value, translated to function
pub inline fn glBindBufferRangeEXT() @TypeOf(GLEW_GET_FUN(__glewBindBufferRangeEXT)) {
    return GLEW_GET_FUN(__glewBindBufferRangeEXT);
}
// /usr/include/GL/glew.h:13337:9: warning: macro 'glEndTransformFeedbackEXT' contains a runtime value, translated to function
pub inline fn glEndTransformFeedbackEXT() @TypeOf(GLEW_GET_FUN(__glewEndTransformFeedbackEXT)) {
    return GLEW_GET_FUN(__glewEndTransformFeedbackEXT);
}
// /usr/include/GL/glew.h:13338:9: warning: macro 'glGetTransformFeedbackVaryingEXT' contains a runtime value, translated to function
pub inline fn glGetTransformFeedbackVaryingEXT() @TypeOf(GLEW_GET_FUN(__glewGetTransformFeedbackVaryingEXT)) {
    return GLEW_GET_FUN(__glewGetTransformFeedbackVaryingEXT);
}
// /usr/include/GL/glew.h:13339:9: warning: macro 'glTransformFeedbackVaryingsEXT' contains a runtime value, translated to function
pub inline fn glTransformFeedbackVaryingsEXT() @TypeOf(GLEW_GET_FUN(__glewTransformFeedbackVaryingsEXT)) {
    return GLEW_GET_FUN(__glewTransformFeedbackVaryingsEXT);
}
// /usr/include/GL/glew.h:13341:9: warning: macro 'GLEW_EXT_transform_feedback' contains a runtime value, translated to function
pub inline fn GLEW_EXT_transform_feedback() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_transform_feedback)) {
    return GLEW_GET_VAR(__GLEW_EXT_transform_feedback);
}
pub const GL_EXT_unpack_subimage = @as(c_int, 1);
pub const GL_UNPACK_ROW_LENGTH_EXT = @as(c_int, 0x0CF2);
pub const GL_UNPACK_SKIP_ROWS_EXT = @as(c_int, 0x0CF3);
pub const GL_UNPACK_SKIP_PIXELS_EXT = @as(c_int, 0x0CF4);
// /usr/include/GL/glew.h:13354:9: warning: macro 'GLEW_EXT_unpack_subimage' contains a runtime value, translated to function
pub inline fn GLEW_EXT_unpack_subimage() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_unpack_subimage)) {
    return GLEW_GET_VAR(__GLEW_EXT_unpack_subimage);
}
pub const GL_EXT_vertex_array = @as(c_int, 1);
pub const GL_DOUBLE_EXT = @as(c_int, 0x140A);
pub const GL_VERTEX_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8074, .hex);
pub const GL_NORMAL_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8075, .hex);
pub const GL_COLOR_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8076, .hex);
pub const GL_INDEX_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8077, .hex);
pub const GL_TEXTURE_COORD_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8078, .hex);
pub const GL_EDGE_FLAG_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8079, .hex);
pub const GL_VERTEX_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807A, .hex);
pub const GL_VERTEX_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807B, .hex);
pub const GL_VERTEX_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807C, .hex);
pub const GL_VERTEX_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807D, .hex);
pub const GL_NORMAL_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807E, .hex);
pub const GL_NORMAL_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807F, .hex);
pub const GL_NORMAL_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8080, .hex);
pub const GL_COLOR_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8081, .hex);
pub const GL_COLOR_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8082, .hex);
pub const GL_COLOR_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8083, .hex);
pub const GL_COLOR_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8084, .hex);
pub const GL_INDEX_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8085, .hex);
pub const GL_INDEX_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8086, .hex);
pub const GL_INDEX_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8087, .hex);
pub const GL_TEXTURE_COORD_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8088, .hex);
pub const GL_TEXTURE_COORD_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8089, .hex);
pub const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808A, .hex);
pub const GL_TEXTURE_COORD_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808B, .hex);
pub const GL_EDGE_FLAG_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808C, .hex);
pub const GL_EDGE_FLAG_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808D, .hex);
pub const GL_VERTEX_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808E, .hex);
pub const GL_NORMAL_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808F, .hex);
pub const GL_COLOR_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8090, .hex);
pub const GL_INDEX_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8091, .hex);
pub const GL_TEXTURE_COORD_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8092, .hex);
pub const GL_EDGE_FLAG_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8093, .hex);
// /usr/include/GL/glew.h:13406:9: warning: macro 'glArrayElementEXT' contains a runtime value, translated to function
pub inline fn glArrayElementEXT() @TypeOf(GLEW_GET_FUN(__glewArrayElementEXT)) {
    return GLEW_GET_FUN(__glewArrayElementEXT);
}
// /usr/include/GL/glew.h:13407:9: warning: macro 'glColorPointerEXT' contains a runtime value, translated to function
pub inline fn glColorPointerEXT() @TypeOf(GLEW_GET_FUN(__glewColorPointerEXT)) {
    return GLEW_GET_FUN(__glewColorPointerEXT);
}
// /usr/include/GL/glew.h:13408:9: warning: macro 'glDrawArraysEXT' contains a runtime value, translated to function
pub inline fn glDrawArraysEXT() @TypeOf(GLEW_GET_FUN(__glewDrawArraysEXT)) {
    return GLEW_GET_FUN(__glewDrawArraysEXT);
}
// /usr/include/GL/glew.h:13409:9: warning: macro 'glEdgeFlagPointerEXT' contains a runtime value, translated to function
pub inline fn glEdgeFlagPointerEXT() @TypeOf(GLEW_GET_FUN(__glewEdgeFlagPointerEXT)) {
    return GLEW_GET_FUN(__glewEdgeFlagPointerEXT);
}
// /usr/include/GL/glew.h:13410:9: warning: macro 'glIndexPointerEXT' contains a runtime value, translated to function
pub inline fn glIndexPointerEXT() @TypeOf(GLEW_GET_FUN(__glewIndexPointerEXT)) {
    return GLEW_GET_FUN(__glewIndexPointerEXT);
}
// /usr/include/GL/glew.h:13411:9: warning: macro 'glNormalPointerEXT' contains a runtime value, translated to function
pub inline fn glNormalPointerEXT() @TypeOf(GLEW_GET_FUN(__glewNormalPointerEXT)) {
    return GLEW_GET_FUN(__glewNormalPointerEXT);
}
// /usr/include/GL/glew.h:13412:9: warning: macro 'glTexCoordPointerEXT' contains a runtime value, translated to function
pub inline fn glTexCoordPointerEXT() @TypeOf(GLEW_GET_FUN(__glewTexCoordPointerEXT)) {
    return GLEW_GET_FUN(__glewTexCoordPointerEXT);
}
// /usr/include/GL/glew.h:13413:9: warning: macro 'glVertexPointerEXT' contains a runtime value, translated to function
pub inline fn glVertexPointerEXT() @TypeOf(GLEW_GET_FUN(__glewVertexPointerEXT)) {
    return GLEW_GET_FUN(__glewVertexPointerEXT);
}
// /usr/include/GL/glew.h:13415:9: warning: macro 'GLEW_EXT_vertex_array' contains a runtime value, translated to function
pub inline fn GLEW_EXT_vertex_array() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_vertex_array)) {
    return GLEW_GET_VAR(__GLEW_EXT_vertex_array);
}
pub const GL_EXT_vertex_array_bgra = @as(c_int, 1);
// /usr/include/GL/glew.h:13426:9: warning: macro 'GLEW_EXT_vertex_array_bgra' contains a runtime value, translated to function
pub inline fn GLEW_EXT_vertex_array_bgra() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_vertex_array_bgra)) {
    return GLEW_GET_VAR(__GLEW_EXT_vertex_array_bgra);
}
pub const GL_EXT_vertex_array_setXXX = @as(c_int, 1);
// /usr/include/GL/glew.h:13439:9: warning: macro 'glBindArraySetEXT' contains a runtime value, translated to function
pub inline fn glBindArraySetEXT() @TypeOf(GLEW_GET_FUN(__glewBindArraySetEXT)) {
    return GLEW_GET_FUN(__glewBindArraySetEXT);
}
// /usr/include/GL/glew.h:13440:9: warning: macro 'glCreateArraySetExt' contains a runtime value, translated to function
pub inline fn glCreateArraySetExt() @TypeOf(GLEW_GET_FUN(__glewCreateArraySetExt)) {
    return GLEW_GET_FUN(__glewCreateArraySetExt);
}
// /usr/include/GL/glew.h:13441:9: warning: macro 'glDeleteArraySetsEXT' contains a runtime value, translated to function
pub inline fn glDeleteArraySetsEXT() @TypeOf(GLEW_GET_FUN(__glewDeleteArraySetsEXT)) {
    return GLEW_GET_FUN(__glewDeleteArraySetsEXT);
}
// /usr/include/GL/glew.h:13443:9: warning: macro 'GLEW_EXT_vertex_array_setXXX' contains a runtime value, translated to function
pub inline fn GLEW_EXT_vertex_array_setXXX() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_vertex_array_setXXX)) {
    return GLEW_GET_VAR(__GLEW_EXT_vertex_array_setXXX);
}
pub const GL_EXT_vertex_attrib_64bit = @as(c_int, 1);
pub const GL_DOUBLE_MAT2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F46, .hex);
pub const GL_DOUBLE_MAT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F47, .hex);
pub const GL_DOUBLE_MAT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F48, .hex);
pub const GL_DOUBLE_MAT2x3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F49, .hex);
pub const GL_DOUBLE_MAT2x4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4A, .hex);
pub const GL_DOUBLE_MAT3x2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4B, .hex);
pub const GL_DOUBLE_MAT3x4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4C, .hex);
pub const GL_DOUBLE_MAT4x2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4D, .hex);
pub const GL_DOUBLE_MAT4x3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4E, .hex);
pub const GL_DOUBLE_VEC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFC, .hex);
pub const GL_DOUBLE_VEC3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFD, .hex);
pub const GL_DOUBLE_VEC4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFE, .hex);
// /usr/include/GL/glew.h:13477:9: warning: macro 'glGetVertexAttribLdvEXT' contains a runtime value, translated to function
pub inline fn glGetVertexAttribLdvEXT() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribLdvEXT)) {
    return GLEW_GET_FUN(__glewGetVertexAttribLdvEXT);
}
// /usr/include/GL/glew.h:13478:9: warning: macro 'glVertexArrayVertexAttribLOffsetEXT' contains a runtime value, translated to function
pub inline fn glVertexArrayVertexAttribLOffsetEXT() @TypeOf(GLEW_GET_FUN(__glewVertexArrayVertexAttribLOffsetEXT)) {
    return GLEW_GET_FUN(__glewVertexArrayVertexAttribLOffsetEXT);
}
// /usr/include/GL/glew.h:13479:9: warning: macro 'glVertexAttribL1dEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribL1dEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL1dEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribL1dEXT);
}
// /usr/include/GL/glew.h:13480:9: warning: macro 'glVertexAttribL1dvEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribL1dvEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL1dvEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribL1dvEXT);
}
// /usr/include/GL/glew.h:13481:9: warning: macro 'glVertexAttribL2dEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribL2dEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL2dEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribL2dEXT);
}
// /usr/include/GL/glew.h:13482:9: warning: macro 'glVertexAttribL2dvEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribL2dvEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL2dvEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribL2dvEXT);
}
// /usr/include/GL/glew.h:13483:9: warning: macro 'glVertexAttribL3dEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribL3dEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL3dEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribL3dEXT);
}
// /usr/include/GL/glew.h:13484:9: warning: macro 'glVertexAttribL3dvEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribL3dvEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL3dvEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribL3dvEXT);
}
// /usr/include/GL/glew.h:13485:9: warning: macro 'glVertexAttribL4dEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribL4dEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL4dEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribL4dEXT);
}
// /usr/include/GL/glew.h:13486:9: warning: macro 'glVertexAttribL4dvEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribL4dvEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL4dvEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribL4dvEXT);
}
// /usr/include/GL/glew.h:13487:9: warning: macro 'glVertexAttribLPointerEXT' contains a runtime value, translated to function
pub inline fn glVertexAttribLPointerEXT() @TypeOf(GLEW_GET_FUN(__glewVertexAttribLPointerEXT)) {
    return GLEW_GET_FUN(__glewVertexAttribLPointerEXT);
}
// /usr/include/GL/glew.h:13489:9: warning: macro 'GLEW_EXT_vertex_attrib_64bit' contains a runtime value, translated to function
pub inline fn GLEW_EXT_vertex_attrib_64bit() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_vertex_attrib_64bit)) {
    return GLEW_GET_VAR(__GLEW_EXT_vertex_attrib_64bit);
}
pub const GL_EXT_vertex_shader = @as(c_int, 1);
pub const GL_VERTEX_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8780, .hex);
pub const GL_VERTEX_SHADER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8781, .hex);
pub const GL_OP_INDEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8782, .hex);
pub const GL_OP_NEGATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8783, .hex);
pub const GL_OP_DOT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8784, .hex);
pub const GL_OP_DOT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8785, .hex);
pub const GL_OP_MUL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8786, .hex);
pub const GL_OP_ADD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8787, .hex);
pub const GL_OP_MADD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8788, .hex);
pub const GL_OP_FRAC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8789, .hex);
pub const GL_OP_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878A, .hex);
pub const GL_OP_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878B, .hex);
pub const GL_OP_SET_GE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878C, .hex);
pub const GL_OP_SET_LT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878D, .hex);
pub const GL_OP_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878E, .hex);
pub const GL_OP_FLOOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878F, .hex);
pub const GL_OP_ROUND_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8790, .hex);
pub const GL_OP_EXP_BASE_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8791, .hex);
pub const GL_OP_LOG_BASE_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8792, .hex);
pub const GL_OP_POWER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8793, .hex);
pub const GL_OP_RECIP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8794, .hex);
pub const GL_OP_RECIP_SQRT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8795, .hex);
pub const GL_OP_SUB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8796, .hex);
pub const GL_OP_CROSS_PRODUCT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8797, .hex);
pub const GL_OP_MULTIPLY_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8798, .hex);
pub const GL_OP_MOV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8799, .hex);
pub const GL_OUTPUT_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879A, .hex);
pub const GL_OUTPUT_COLOR0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879B, .hex);
pub const GL_OUTPUT_COLOR1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879C, .hex);
pub const GL_OUTPUT_TEXTURE_COORD0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879D, .hex);
pub const GL_OUTPUT_TEXTURE_COORD1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879E, .hex);
pub const GL_OUTPUT_TEXTURE_COORD2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879F, .hex);
pub const GL_OUTPUT_TEXTURE_COORD3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A0, .hex);
pub const GL_OUTPUT_TEXTURE_COORD4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A1, .hex);
pub const GL_OUTPUT_TEXTURE_COORD5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A2, .hex);
pub const GL_OUTPUT_TEXTURE_COORD6_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A3, .hex);
pub const GL_OUTPUT_TEXTURE_COORD7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A4, .hex);
pub const GL_OUTPUT_TEXTURE_COORD8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A5, .hex);
pub const GL_OUTPUT_TEXTURE_COORD9_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A6, .hex);
pub const GL_OUTPUT_TEXTURE_COORD10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A7, .hex);
pub const GL_OUTPUT_TEXTURE_COORD11_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A8, .hex);
pub const GL_OUTPUT_TEXTURE_COORD12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A9, .hex);
pub const GL_OUTPUT_TEXTURE_COORD13_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AA, .hex);
pub const GL_OUTPUT_TEXTURE_COORD14_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AB, .hex);
pub const GL_OUTPUT_TEXTURE_COORD15_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AC, .hex);
pub const GL_OUTPUT_TEXTURE_COORD16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AD, .hex);
pub const GL_OUTPUT_TEXTURE_COORD17_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AE, .hex);
pub const GL_OUTPUT_TEXTURE_COORD18_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AF, .hex);
pub const GL_OUTPUT_TEXTURE_COORD19_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B0, .hex);
pub const GL_OUTPUT_TEXTURE_COORD20_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B1, .hex);
pub const GL_OUTPUT_TEXTURE_COORD21_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B2, .hex);
pub const GL_OUTPUT_TEXTURE_COORD22_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B3, .hex);
pub const GL_OUTPUT_TEXTURE_COORD23_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B4, .hex);
pub const GL_OUTPUT_TEXTURE_COORD24_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B5, .hex);
pub const GL_OUTPUT_TEXTURE_COORD25_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B6, .hex);
pub const GL_OUTPUT_TEXTURE_COORD26_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B7, .hex);
pub const GL_OUTPUT_TEXTURE_COORD27_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B8, .hex);
pub const GL_OUTPUT_TEXTURE_COORD28_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B9, .hex);
pub const GL_OUTPUT_TEXTURE_COORD29_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BA, .hex);
pub const GL_OUTPUT_TEXTURE_COORD30_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BB, .hex);
pub const GL_OUTPUT_TEXTURE_COORD31_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BC, .hex);
pub const GL_OUTPUT_FOG_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BD, .hex);
pub const GL_SCALAR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BE, .hex);
pub const GL_VECTOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BF, .hex);
pub const GL_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C0, .hex);
pub const GL_VARIANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C1, .hex);
pub const GL_INVARIANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C2, .hex);
pub const GL_LOCAL_CONSTANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C3, .hex);
pub const GL_LOCAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C4, .hex);
pub const GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C5, .hex);
pub const GL_MAX_VERTEX_SHADER_VARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C6, .hex);
pub const GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C7, .hex);
pub const GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C8, .hex);
pub const GL_MAX_VERTEX_SHADER_LOCALS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C9, .hex);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CA, .hex);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CB, .hex);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CC, .hex);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CD, .hex);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CE, .hex);
pub const GL_VERTEX_SHADER_INSTRUCTIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CF, .hex);
pub const GL_VERTEX_SHADER_VARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D0, .hex);
pub const GL_VERTEX_SHADER_INVARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D1, .hex);
pub const GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D2, .hex);
pub const GL_VERTEX_SHADER_LOCALS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D3, .hex);
pub const GL_VERTEX_SHADER_OPTIMIZED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D4, .hex);
pub const GL_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D5, .hex);
pub const GL_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D6, .hex);
pub const GL_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D7, .hex);
pub const GL_W_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D8, .hex);
pub const GL_NEGATIVE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D9, .hex);
pub const GL_NEGATIVE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DA, .hex);
pub const GL_NEGATIVE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DB, .hex);
pub const GL_NEGATIVE_W_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DC, .hex);
pub const GL_ZERO_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DD, .hex);
pub const GL_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DE, .hex);
pub const GL_NEGATIVE_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DF, .hex);
pub const GL_NORMALIZED_RANGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E0, .hex);
pub const GL_FULL_RANGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E1, .hex);
pub const GL_CURRENT_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E2, .hex);
pub const GL_MVP_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E3, .hex);
pub const GL_VARIANT_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E4, .hex);
pub const GL_VARIANT_DATATYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E5, .hex);
pub const GL_VARIANT_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E6, .hex);
pub const GL_VARIANT_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E7, .hex);
pub const GL_VARIANT_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E8, .hex);
pub const GL_VARIANT_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E9, .hex);
pub const GL_INVARIANT_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EA, .hex);
pub const GL_INVARIANT_DATATYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EB, .hex);
pub const GL_LOCAL_CONSTANT_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EC, .hex);
pub const GL_LOCAL_CONSTANT_DATATYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87ED, .hex);
// /usr/include/GL/glew.h:13652:9: warning: macro 'glBeginVertexShaderEXT' contains a runtime value, translated to function
pub inline fn glBeginVertexShaderEXT() @TypeOf(GLEW_GET_FUN(__glewBeginVertexShaderEXT)) {
    return GLEW_GET_FUN(__glewBeginVertexShaderEXT);
}
// /usr/include/GL/glew.h:13653:9: warning: macro 'glBindLightParameterEXT' contains a runtime value, translated to function
pub inline fn glBindLightParameterEXT() @TypeOf(GLEW_GET_FUN(__glewBindLightParameterEXT)) {
    return GLEW_GET_FUN(__glewBindLightParameterEXT);
}
// /usr/include/GL/glew.h:13654:9: warning: macro 'glBindMaterialParameterEXT' contains a runtime value, translated to function
pub inline fn glBindMaterialParameterEXT() @TypeOf(GLEW_GET_FUN(__glewBindMaterialParameterEXT)) {
    return GLEW_GET_FUN(__glewBindMaterialParameterEXT);
}
// /usr/include/GL/glew.h:13655:9: warning: macro 'glBindParameterEXT' contains a runtime value, translated to function
pub inline fn glBindParameterEXT() @TypeOf(GLEW_GET_FUN(__glewBindParameterEXT)) {
    return GLEW_GET_FUN(__glewBindParameterEXT);
}
// /usr/include/GL/glew.h:13656:9: warning: macro 'glBindTexGenParameterEXT' contains a runtime value, translated to function
pub inline fn glBindTexGenParameterEXT() @TypeOf(GLEW_GET_FUN(__glewBindTexGenParameterEXT)) {
    return GLEW_GET_FUN(__glewBindTexGenParameterEXT);
}
// /usr/include/GL/glew.h:13657:9: warning: macro 'glBindTextureUnitParameterEXT' contains a runtime value, translated to function
pub inline fn glBindTextureUnitParameterEXT() @TypeOf(GLEW_GET_FUN(__glewBindTextureUnitParameterEXT)) {
    return GLEW_GET_FUN(__glewBindTextureUnitParameterEXT);
}
// /usr/include/GL/glew.h:13658:9: warning: macro 'glBindVertexShaderEXT' contains a runtime value, translated to function
pub inline fn glBindVertexShaderEXT() @TypeOf(GLEW_GET_FUN(__glewBindVertexShaderEXT)) {
    return GLEW_GET_FUN(__glewBindVertexShaderEXT);
}
// /usr/include/GL/glew.h:13659:9: warning: macro 'glDeleteVertexShaderEXT' contains a runtime value, translated to function
pub inline fn glDeleteVertexShaderEXT() @TypeOf(GLEW_GET_FUN(__glewDeleteVertexShaderEXT)) {
    return GLEW_GET_FUN(__glewDeleteVertexShaderEXT);
}
// /usr/include/GL/glew.h:13660:9: warning: macro 'glDisableVariantClientStateEXT' contains a runtime value, translated to function
pub inline fn glDisableVariantClientStateEXT() @TypeOf(GLEW_GET_FUN(__glewDisableVariantClientStateEXT)) {
    return GLEW_GET_FUN(__glewDisableVariantClientStateEXT);
}
// /usr/include/GL/glew.h:13661:9: warning: macro 'glEnableVariantClientStateEXT' contains a runtime value, translated to function
pub inline fn glEnableVariantClientStateEXT() @TypeOf(GLEW_GET_FUN(__glewEnableVariantClientStateEXT)) {
    return GLEW_GET_FUN(__glewEnableVariantClientStateEXT);
}
// /usr/include/GL/glew.h:13662:9: warning: macro 'glEndVertexShaderEXT' contains a runtime value, translated to function
pub inline fn glEndVertexShaderEXT() @TypeOf(GLEW_GET_FUN(__glewEndVertexShaderEXT)) {
    return GLEW_GET_FUN(__glewEndVertexShaderEXT);
}
// /usr/include/GL/glew.h:13663:9: warning: macro 'glExtractComponentEXT' contains a runtime value, translated to function
pub inline fn glExtractComponentEXT() @TypeOf(GLEW_GET_FUN(__glewExtractComponentEXT)) {
    return GLEW_GET_FUN(__glewExtractComponentEXT);
}
// /usr/include/GL/glew.h:13664:9: warning: macro 'glGenSymbolsEXT' contains a runtime value, translated to function
pub inline fn glGenSymbolsEXT() @TypeOf(GLEW_GET_FUN(__glewGenSymbolsEXT)) {
    return GLEW_GET_FUN(__glewGenSymbolsEXT);
}
// /usr/include/GL/glew.h:13665:9: warning: macro 'glGenVertexShadersEXT' contains a runtime value, translated to function
pub inline fn glGenVertexShadersEXT() @TypeOf(GLEW_GET_FUN(__glewGenVertexShadersEXT)) {
    return GLEW_GET_FUN(__glewGenVertexShadersEXT);
}
// /usr/include/GL/glew.h:13666:9: warning: macro 'glGetInvariantBooleanvEXT' contains a runtime value, translated to function
pub inline fn glGetInvariantBooleanvEXT() @TypeOf(GLEW_GET_FUN(__glewGetInvariantBooleanvEXT)) {
    return GLEW_GET_FUN(__glewGetInvariantBooleanvEXT);
}
// /usr/include/GL/glew.h:13667:9: warning: macro 'glGetInvariantFloatvEXT' contains a runtime value, translated to function
pub inline fn glGetInvariantFloatvEXT() @TypeOf(GLEW_GET_FUN(__glewGetInvariantFloatvEXT)) {
    return GLEW_GET_FUN(__glewGetInvariantFloatvEXT);
}
// /usr/include/GL/glew.h:13668:9: warning: macro 'glGetInvariantIntegervEXT' contains a runtime value, translated to function
pub inline fn glGetInvariantIntegervEXT() @TypeOf(GLEW_GET_FUN(__glewGetInvariantIntegervEXT)) {
    return GLEW_GET_FUN(__glewGetInvariantIntegervEXT);
}
// /usr/include/GL/glew.h:13669:9: warning: macro 'glGetLocalConstantBooleanvEXT' contains a runtime value, translated to function
pub inline fn glGetLocalConstantBooleanvEXT() @TypeOf(GLEW_GET_FUN(__glewGetLocalConstantBooleanvEXT)) {
    return GLEW_GET_FUN(__glewGetLocalConstantBooleanvEXT);
}
// /usr/include/GL/glew.h:13670:9: warning: macro 'glGetLocalConstantFloatvEXT' contains a runtime value, translated to function
pub inline fn glGetLocalConstantFloatvEXT() @TypeOf(GLEW_GET_FUN(__glewGetLocalConstantFloatvEXT)) {
    return GLEW_GET_FUN(__glewGetLocalConstantFloatvEXT);
}
// /usr/include/GL/glew.h:13671:9: warning: macro 'glGetLocalConstantIntegervEXT' contains a runtime value, translated to function
pub inline fn glGetLocalConstantIntegervEXT() @TypeOf(GLEW_GET_FUN(__glewGetLocalConstantIntegervEXT)) {
    return GLEW_GET_FUN(__glewGetLocalConstantIntegervEXT);
}
// /usr/include/GL/glew.h:13672:9: warning: macro 'glGetVariantBooleanvEXT' contains a runtime value, translated to function
pub inline fn glGetVariantBooleanvEXT() @TypeOf(GLEW_GET_FUN(__glewGetVariantBooleanvEXT)) {
    return GLEW_GET_FUN(__glewGetVariantBooleanvEXT);
}
// /usr/include/GL/glew.h:13673:9: warning: macro 'glGetVariantFloatvEXT' contains a runtime value, translated to function
pub inline fn glGetVariantFloatvEXT() @TypeOf(GLEW_GET_FUN(__glewGetVariantFloatvEXT)) {
    return GLEW_GET_FUN(__glewGetVariantFloatvEXT);
}
// /usr/include/GL/glew.h:13674:9: warning: macro 'glGetVariantIntegervEXT' contains a runtime value, translated to function
pub inline fn glGetVariantIntegervEXT() @TypeOf(GLEW_GET_FUN(__glewGetVariantIntegervEXT)) {
    return GLEW_GET_FUN(__glewGetVariantIntegervEXT);
}
// /usr/include/GL/glew.h:13675:9: warning: macro 'glGetVariantPointervEXT' contains a runtime value, translated to function
pub inline fn glGetVariantPointervEXT() @TypeOf(GLEW_GET_FUN(__glewGetVariantPointervEXT)) {
    return GLEW_GET_FUN(__glewGetVariantPointervEXT);
}
// /usr/include/GL/glew.h:13676:9: warning: macro 'glInsertComponentEXT' contains a runtime value, translated to function
pub inline fn glInsertComponentEXT() @TypeOf(GLEW_GET_FUN(__glewInsertComponentEXT)) {
    return GLEW_GET_FUN(__glewInsertComponentEXT);
}
// /usr/include/GL/glew.h:13677:9: warning: macro 'glIsVariantEnabledEXT' contains a runtime value, translated to function
pub inline fn glIsVariantEnabledEXT() @TypeOf(GLEW_GET_FUN(__glewIsVariantEnabledEXT)) {
    return GLEW_GET_FUN(__glewIsVariantEnabledEXT);
}
// /usr/include/GL/glew.h:13678:9: warning: macro 'glSetInvariantEXT' contains a runtime value, translated to function
pub inline fn glSetInvariantEXT() @TypeOf(GLEW_GET_FUN(__glewSetInvariantEXT)) {
    return GLEW_GET_FUN(__glewSetInvariantEXT);
}
// /usr/include/GL/glew.h:13679:9: warning: macro 'glSetLocalConstantEXT' contains a runtime value, translated to function
pub inline fn glSetLocalConstantEXT() @TypeOf(GLEW_GET_FUN(__glewSetLocalConstantEXT)) {
    return GLEW_GET_FUN(__glewSetLocalConstantEXT);
}
// /usr/include/GL/glew.h:13680:9: warning: macro 'glShaderOp1EXT' contains a runtime value, translated to function
pub inline fn glShaderOp1EXT() @TypeOf(GLEW_GET_FUN(__glewShaderOp1EXT)) {
    return GLEW_GET_FUN(__glewShaderOp1EXT);
}
// /usr/include/GL/glew.h:13681:9: warning: macro 'glShaderOp2EXT' contains a runtime value, translated to function
pub inline fn glShaderOp2EXT() @TypeOf(GLEW_GET_FUN(__glewShaderOp2EXT)) {
    return GLEW_GET_FUN(__glewShaderOp2EXT);
}
// /usr/include/GL/glew.h:13682:9: warning: macro 'glShaderOp3EXT' contains a runtime value, translated to function
pub inline fn glShaderOp3EXT() @TypeOf(GLEW_GET_FUN(__glewShaderOp3EXT)) {
    return GLEW_GET_FUN(__glewShaderOp3EXT);
}
// /usr/include/GL/glew.h:13683:9: warning: macro 'glSwizzleEXT' contains a runtime value, translated to function
pub inline fn glSwizzleEXT() @TypeOf(GLEW_GET_FUN(__glewSwizzleEXT)) {
    return GLEW_GET_FUN(__glewSwizzleEXT);
}
// /usr/include/GL/glew.h:13684:9: warning: macro 'glVariantPointerEXT' contains a runtime value, translated to function
pub inline fn glVariantPointerEXT() @TypeOf(GLEW_GET_FUN(__glewVariantPointerEXT)) {
    return GLEW_GET_FUN(__glewVariantPointerEXT);
}
// /usr/include/GL/glew.h:13685:9: warning: macro 'glVariantbvEXT' contains a runtime value, translated to function
pub inline fn glVariantbvEXT() @TypeOf(GLEW_GET_FUN(__glewVariantbvEXT)) {
    return GLEW_GET_FUN(__glewVariantbvEXT);
}
// /usr/include/GL/glew.h:13686:9: warning: macro 'glVariantdvEXT' contains a runtime value, translated to function
pub inline fn glVariantdvEXT() @TypeOf(GLEW_GET_FUN(__glewVariantdvEXT)) {
    return GLEW_GET_FUN(__glewVariantdvEXT);
}
// /usr/include/GL/glew.h:13687:9: warning: macro 'glVariantfvEXT' contains a runtime value, translated to function
pub inline fn glVariantfvEXT() @TypeOf(GLEW_GET_FUN(__glewVariantfvEXT)) {
    return GLEW_GET_FUN(__glewVariantfvEXT);
}
// /usr/include/GL/glew.h:13688:9: warning: macro 'glVariantivEXT' contains a runtime value, translated to function
pub inline fn glVariantivEXT() @TypeOf(GLEW_GET_FUN(__glewVariantivEXT)) {
    return GLEW_GET_FUN(__glewVariantivEXT);
}
// /usr/include/GL/glew.h:13689:9: warning: macro 'glVariantsvEXT' contains a runtime value, translated to function
pub inline fn glVariantsvEXT() @TypeOf(GLEW_GET_FUN(__glewVariantsvEXT)) {
    return GLEW_GET_FUN(__glewVariantsvEXT);
}
// /usr/include/GL/glew.h:13690:9: warning: macro 'glVariantubvEXT' contains a runtime value, translated to function
pub inline fn glVariantubvEXT() @TypeOf(GLEW_GET_FUN(__glewVariantubvEXT)) {
    return GLEW_GET_FUN(__glewVariantubvEXT);
}
// /usr/include/GL/glew.h:13691:9: warning: macro 'glVariantuivEXT' contains a runtime value, translated to function
pub inline fn glVariantuivEXT() @TypeOf(GLEW_GET_FUN(__glewVariantuivEXT)) {
    return GLEW_GET_FUN(__glewVariantuivEXT);
}
// /usr/include/GL/glew.h:13692:9: warning: macro 'glVariantusvEXT' contains a runtime value, translated to function
pub inline fn glVariantusvEXT() @TypeOf(GLEW_GET_FUN(__glewVariantusvEXT)) {
    return GLEW_GET_FUN(__glewVariantusvEXT);
}
// /usr/include/GL/glew.h:13693:9: warning: macro 'glWriteMaskEXT' contains a runtime value, translated to function
pub inline fn glWriteMaskEXT() @TypeOf(GLEW_GET_FUN(__glewWriteMaskEXT)) {
    return GLEW_GET_FUN(__glewWriteMaskEXT);
}
// /usr/include/GL/glew.h:13695:9: warning: macro 'GLEW_EXT_vertex_shader' contains a runtime value, translated to function
pub inline fn GLEW_EXT_vertex_shader() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_vertex_shader)) {
    return GLEW_GET_VAR(__GLEW_EXT_vertex_shader);
}
pub const GL_EXT_vertex_weighting = @as(c_int, 1);
pub const GL_MODELVIEW0_STACK_DEPTH_EXT = @as(c_int, 0x0BA3);
pub const GL_MODELVIEW0_MATRIX_EXT = @as(c_int, 0x0BA6);
pub const GL_MODELVIEW0_EXT = @as(c_int, 0x1700);
pub const GL_MODELVIEW1_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8502, .hex);
pub const GL_MODELVIEW1_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8506, .hex);
pub const GL_VERTEX_WEIGHTING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8509, .hex);
pub const GL_MODELVIEW1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850A, .hex);
pub const GL_CURRENT_VERTEX_WEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850B, .hex);
pub const GL_VERTEX_WEIGHT_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850C, .hex);
pub const GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850D, .hex);
pub const GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850E, .hex);
pub const GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850F, .hex);
pub const GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8510, .hex);
// /usr/include/GL/glew.h:13722:9: warning: macro 'glVertexWeightPointerEXT' contains a runtime value, translated to function
pub inline fn glVertexWeightPointerEXT() @TypeOf(GLEW_GET_FUN(__glewVertexWeightPointerEXT)) {
    return GLEW_GET_FUN(__glewVertexWeightPointerEXT);
}
// /usr/include/GL/glew.h:13723:9: warning: macro 'glVertexWeightfEXT' contains a runtime value, translated to function
pub inline fn glVertexWeightfEXT() @TypeOf(GLEW_GET_FUN(__glewVertexWeightfEXT)) {
    return GLEW_GET_FUN(__glewVertexWeightfEXT);
}
// /usr/include/GL/glew.h:13724:9: warning: macro 'glVertexWeightfvEXT' contains a runtime value, translated to function
pub inline fn glVertexWeightfvEXT() @TypeOf(GLEW_GET_FUN(__glewVertexWeightfvEXT)) {
    return GLEW_GET_FUN(__glewVertexWeightfvEXT);
}
// /usr/include/GL/glew.h:13726:9: warning: macro 'GLEW_EXT_vertex_weighting' contains a runtime value, translated to function
pub inline fn GLEW_EXT_vertex_weighting() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_vertex_weighting)) {
    return GLEW_GET_VAR(__GLEW_EXT_vertex_weighting);
}
pub const GL_EXT_win32_keyed_mutex = @as(c_int, 1);
// /usr/include/GL/glew.h:13738:9: warning: macro 'glAcquireKeyedMutexWin32EXT' contains a runtime value, translated to function
pub inline fn glAcquireKeyedMutexWin32EXT() @TypeOf(GLEW_GET_FUN(__glewAcquireKeyedMutexWin32EXT)) {
    return GLEW_GET_FUN(__glewAcquireKeyedMutexWin32EXT);
}
// /usr/include/GL/glew.h:13739:9: warning: macro 'glReleaseKeyedMutexWin32EXT' contains a runtime value, translated to function
pub inline fn glReleaseKeyedMutexWin32EXT() @TypeOf(GLEW_GET_FUN(__glewReleaseKeyedMutexWin32EXT)) {
    return GLEW_GET_FUN(__glewReleaseKeyedMutexWin32EXT);
}
// /usr/include/GL/glew.h:13741:9: warning: macro 'GLEW_EXT_win32_keyed_mutex' contains a runtime value, translated to function
pub inline fn GLEW_EXT_win32_keyed_mutex() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_win32_keyed_mutex)) {
    return GLEW_GET_VAR(__GLEW_EXT_win32_keyed_mutex);
}
pub const GL_EXT_window_rectangles = @as(c_int, 1);
pub const GL_INCLUSIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F10, .hex);
pub const GL_EXCLUSIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F11, .hex);
pub const GL_WINDOW_RECTANGLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F12, .hex);
pub const GL_WINDOW_RECTANGLE_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F13, .hex);
pub const GL_MAX_WINDOW_RECTANGLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F14, .hex);
pub const GL_NUM_WINDOW_RECTANGLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F15, .hex);
// /usr/include/GL/glew.h:13759:9: warning: macro 'glWindowRectanglesEXT' contains a runtime value, translated to function
pub inline fn glWindowRectanglesEXT() @TypeOf(GLEW_GET_FUN(__glewWindowRectanglesEXT)) {
    return GLEW_GET_FUN(__glewWindowRectanglesEXT);
}
// /usr/include/GL/glew.h:13761:9: warning: macro 'GLEW_EXT_window_rectangles' contains a runtime value, translated to function
pub inline fn GLEW_EXT_window_rectangles() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_window_rectangles)) {
    return GLEW_GET_VAR(__GLEW_EXT_window_rectangles);
}
pub const GL_EXT_x11_sync_object = @as(c_int, 1);
pub const GL_SYNC_X11_FENCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90E1, .hex);
// /usr/include/GL/glew.h:13774:9: warning: macro 'glImportSyncEXT' contains a runtime value, translated to function
pub inline fn glImportSyncEXT() @TypeOf(GLEW_GET_FUN(__glewImportSyncEXT)) {
    return GLEW_GET_FUN(__glewImportSyncEXT);
}
// /usr/include/GL/glew.h:13776:9: warning: macro 'GLEW_EXT_x11_sync_object' contains a runtime value, translated to function
pub inline fn GLEW_EXT_x11_sync_object() @TypeOf(GLEW_GET_VAR(__GLEW_EXT_x11_sync_object)) {
    return GLEW_GET_VAR(__GLEW_EXT_x11_sync_object);
}
pub const GL_FJ_shader_binary_GCCSO = @as(c_int, 1);
pub const GL_GCCSO_SHADER_BINARY_FJ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9260, .hex);
// /usr/include/GL/glew.h:13787:9: warning: macro 'GLEW_FJ_shader_binary_GCCSO' contains a runtime value, translated to function
pub inline fn GLEW_FJ_shader_binary_GCCSO() @TypeOf(GLEW_GET_VAR(__GLEW_FJ_shader_binary_GCCSO)) {
    return GLEW_GET_VAR(__GLEW_FJ_shader_binary_GCCSO);
}
pub const GL_GREMEDY_frame_terminator = @as(c_int, 1);
// /usr/include/GL/glew.h:13798:9: warning: macro 'glFrameTerminatorGREMEDY' contains a runtime value, translated to function
pub inline fn glFrameTerminatorGREMEDY() @TypeOf(GLEW_GET_FUN(__glewFrameTerminatorGREMEDY)) {
    return GLEW_GET_FUN(__glewFrameTerminatorGREMEDY);
}
// /usr/include/GL/glew.h:13800:9: warning: macro 'GLEW_GREMEDY_frame_terminator' contains a runtime value, translated to function
pub inline fn GLEW_GREMEDY_frame_terminator() @TypeOf(GLEW_GET_VAR(__GLEW_GREMEDY_frame_terminator)) {
    return GLEW_GET_VAR(__GLEW_GREMEDY_frame_terminator);
}
pub const GL_GREMEDY_string_marker = @as(c_int, 1);
// /usr/include/GL/glew.h:13811:9: warning: macro 'glStringMarkerGREMEDY' contains a runtime value, translated to function
pub inline fn glStringMarkerGREMEDY() @TypeOf(GLEW_GET_FUN(__glewStringMarkerGREMEDY)) {
    return GLEW_GET_FUN(__glewStringMarkerGREMEDY);
}
// /usr/include/GL/glew.h:13813:9: warning: macro 'GLEW_GREMEDY_string_marker' contains a runtime value, translated to function
pub inline fn GLEW_GREMEDY_string_marker() @TypeOf(GLEW_GET_VAR(__GLEW_GREMEDY_string_marker)) {
    return GLEW_GET_VAR(__GLEW_GREMEDY_string_marker);
}
pub const GL_HP_convolution_border_modes = @as(c_int, 1);
// /usr/include/GL/glew.h:13822:9: warning: macro 'GLEW_HP_convolution_border_modes' contains a runtime value, translated to function
pub inline fn GLEW_HP_convolution_border_modes() @TypeOf(GLEW_GET_VAR(__GLEW_HP_convolution_border_modes)) {
    return GLEW_GET_VAR(__GLEW_HP_convolution_border_modes);
}
pub const GL_HP_image_transform = @as(c_int, 1);
// /usr/include/GL/glew.h:13838:9: warning: macro 'glGetImageTransformParameterfvHP' contains a runtime value, translated to function
pub inline fn glGetImageTransformParameterfvHP() @TypeOf(GLEW_GET_FUN(__glewGetImageTransformParameterfvHP)) {
    return GLEW_GET_FUN(__glewGetImageTransformParameterfvHP);
}
// /usr/include/GL/glew.h:13839:9: warning: macro 'glGetImageTransformParameterivHP' contains a runtime value, translated to function
pub inline fn glGetImageTransformParameterivHP() @TypeOf(GLEW_GET_FUN(__glewGetImageTransformParameterivHP)) {
    return GLEW_GET_FUN(__glewGetImageTransformParameterivHP);
}
// /usr/include/GL/glew.h:13840:9: warning: macro 'glImageTransformParameterfHP' contains a runtime value, translated to function
pub inline fn glImageTransformParameterfHP() @TypeOf(GLEW_GET_FUN(__glewImageTransformParameterfHP)) {
    return GLEW_GET_FUN(__glewImageTransformParameterfHP);
}
// /usr/include/GL/glew.h:13841:9: warning: macro 'glImageTransformParameterfvHP' contains a runtime value, translated to function
pub inline fn glImageTransformParameterfvHP() @TypeOf(GLEW_GET_FUN(__glewImageTransformParameterfvHP)) {
    return GLEW_GET_FUN(__glewImageTransformParameterfvHP);
}
// /usr/include/GL/glew.h:13842:9: warning: macro 'glImageTransformParameteriHP' contains a runtime value, translated to function
pub inline fn glImageTransformParameteriHP() @TypeOf(GLEW_GET_FUN(__glewImageTransformParameteriHP)) {
    return GLEW_GET_FUN(__glewImageTransformParameteriHP);
}
// /usr/include/GL/glew.h:13843:9: warning: macro 'glImageTransformParameterivHP' contains a runtime value, translated to function
pub inline fn glImageTransformParameterivHP() @TypeOf(GLEW_GET_FUN(__glewImageTransformParameterivHP)) {
    return GLEW_GET_FUN(__glewImageTransformParameterivHP);
}
// /usr/include/GL/glew.h:13845:9: warning: macro 'GLEW_HP_image_transform' contains a runtime value, translated to function
pub inline fn GLEW_HP_image_transform() @TypeOf(GLEW_GET_VAR(__GLEW_HP_image_transform)) {
    return GLEW_GET_VAR(__GLEW_HP_image_transform);
}
pub const GL_HP_occlusion_test = @as(c_int, 1);
// /usr/include/GL/glew.h:13854:9: warning: macro 'GLEW_HP_occlusion_test' contains a runtime value, translated to function
pub inline fn GLEW_HP_occlusion_test() @TypeOf(GLEW_GET_VAR(__GLEW_HP_occlusion_test)) {
    return GLEW_GET_VAR(__GLEW_HP_occlusion_test);
}
pub const GL_HP_texture_lighting = @as(c_int, 1);
// /usr/include/GL/glew.h:13863:9: warning: macro 'GLEW_HP_texture_lighting' contains a runtime value, translated to function
pub inline fn GLEW_HP_texture_lighting() @TypeOf(GLEW_GET_VAR(__GLEW_HP_texture_lighting)) {
    return GLEW_GET_VAR(__GLEW_HP_texture_lighting);
}
pub const GL_IBM_cull_vertex = @as(c_int, 1);
pub const GL_CULL_VERTEX_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103050, .decimal);
// /usr/include/GL/glew.h:13874:9: warning: macro 'GLEW_IBM_cull_vertex' contains a runtime value, translated to function
pub inline fn GLEW_IBM_cull_vertex() @TypeOf(GLEW_GET_VAR(__GLEW_IBM_cull_vertex)) {
    return GLEW_GET_VAR(__GLEW_IBM_cull_vertex);
}
pub const GL_IBM_multimode_draw_arrays = @as(c_int, 1);
// /usr/include/GL/glew.h:13886:9: warning: macro 'glMultiModeDrawArraysIBM' contains a runtime value, translated to function
pub inline fn glMultiModeDrawArraysIBM() @TypeOf(GLEW_GET_FUN(__glewMultiModeDrawArraysIBM)) {
    return GLEW_GET_FUN(__glewMultiModeDrawArraysIBM);
}
// /usr/include/GL/glew.h:13887:9: warning: macro 'glMultiModeDrawElementsIBM' contains a runtime value, translated to function
pub inline fn glMultiModeDrawElementsIBM() @TypeOf(GLEW_GET_FUN(__glewMultiModeDrawElementsIBM)) {
    return GLEW_GET_FUN(__glewMultiModeDrawElementsIBM);
}
// /usr/include/GL/glew.h:13889:9: warning: macro 'GLEW_IBM_multimode_draw_arrays' contains a runtime value, translated to function
pub inline fn GLEW_IBM_multimode_draw_arrays() @TypeOf(GLEW_GET_VAR(__GLEW_IBM_multimode_draw_arrays)) {
    return GLEW_GET_VAR(__GLEW_IBM_multimode_draw_arrays);
}
pub const GL_IBM_rasterpos_clip = @as(c_int, 1);
pub const GL_RASTER_POSITION_UNCLIPPED_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103010, .decimal);
// /usr/include/GL/glew.h:13900:9: warning: macro 'GLEW_IBM_rasterpos_clip' contains a runtime value, translated to function
pub inline fn GLEW_IBM_rasterpos_clip() @TypeOf(GLEW_GET_VAR(__GLEW_IBM_rasterpos_clip)) {
    return GLEW_GET_VAR(__GLEW_IBM_rasterpos_clip);
}
pub const GL_IBM_static_data = @as(c_int, 1);
pub const GL_ALL_STATIC_DATA_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103060, .decimal);
pub const GL_STATIC_VERTEX_ARRAY_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103061, .decimal);
// /usr/include/GL/glew.h:13912:9: warning: macro 'GLEW_IBM_static_data' contains a runtime value, translated to function
pub inline fn GLEW_IBM_static_data() @TypeOf(GLEW_GET_VAR(__GLEW_IBM_static_data)) {
    return GLEW_GET_VAR(__GLEW_IBM_static_data);
}
pub const GL_IBM_texture_mirrored_repeat = @as(c_int, 1);
pub const GL_MIRRORED_REPEAT_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hex);
// /usr/include/GL/glew.h:13923:9: warning: macro 'GLEW_IBM_texture_mirrored_repeat' contains a runtime value, translated to function
pub inline fn GLEW_IBM_texture_mirrored_repeat() @TypeOf(GLEW_GET_VAR(__GLEW_IBM_texture_mirrored_repeat)) {
    return GLEW_GET_VAR(__GLEW_IBM_texture_mirrored_repeat);
}
pub const GL_IBM_vertex_array_lists = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103070, .decimal);
pub const GL_NORMAL_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103071, .decimal);
pub const GL_COLOR_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103072, .decimal);
pub const GL_INDEX_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103073, .decimal);
pub const GL_TEXTURE_COORD_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103074, .decimal);
pub const GL_EDGE_FLAG_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103075, .decimal);
pub const GL_FOG_COORDINATE_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103076, .decimal);
pub const GL_SECONDARY_COLOR_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103077, .decimal);
pub const GL_VERTEX_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103080, .decimal);
pub const GL_NORMAL_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103081, .decimal);
pub const GL_COLOR_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103082, .decimal);
pub const GL_INDEX_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103083, .decimal);
pub const GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103084, .decimal);
pub const GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103085, .decimal);
pub const GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103086, .decimal);
pub const GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103087, .decimal);
// /usr/include/GL/glew.h:13958:9: warning: macro 'glColorPointerListIBM' contains a runtime value, translated to function
pub inline fn glColorPointerListIBM() @TypeOf(GLEW_GET_FUN(__glewColorPointerListIBM)) {
    return GLEW_GET_FUN(__glewColorPointerListIBM);
}
// /usr/include/GL/glew.h:13959:9: warning: macro 'glEdgeFlagPointerListIBM' contains a runtime value, translated to function
pub inline fn glEdgeFlagPointerListIBM() @TypeOf(GLEW_GET_FUN(__glewEdgeFlagPointerListIBM)) {
    return GLEW_GET_FUN(__glewEdgeFlagPointerListIBM);
}
// /usr/include/GL/glew.h:13960:9: warning: macro 'glFogCoordPointerListIBM' contains a runtime value, translated to function
pub inline fn glFogCoordPointerListIBM() @TypeOf(GLEW_GET_FUN(__glewFogCoordPointerListIBM)) {
    return GLEW_GET_FUN(__glewFogCoordPointerListIBM);
}
// /usr/include/GL/glew.h:13961:9: warning: macro 'glIndexPointerListIBM' contains a runtime value, translated to function
pub inline fn glIndexPointerListIBM() @TypeOf(GLEW_GET_FUN(__glewIndexPointerListIBM)) {
    return GLEW_GET_FUN(__glewIndexPointerListIBM);
}
// /usr/include/GL/glew.h:13962:9: warning: macro 'glNormalPointerListIBM' contains a runtime value, translated to function
pub inline fn glNormalPointerListIBM() @TypeOf(GLEW_GET_FUN(__glewNormalPointerListIBM)) {
    return GLEW_GET_FUN(__glewNormalPointerListIBM);
}
// /usr/include/GL/glew.h:13963:9: warning: macro 'glSecondaryColorPointerListIBM' contains a runtime value, translated to function
pub inline fn glSecondaryColorPointerListIBM() @TypeOf(GLEW_GET_FUN(__glewSecondaryColorPointerListIBM)) {
    return GLEW_GET_FUN(__glewSecondaryColorPointerListIBM);
}
// /usr/include/GL/glew.h:13964:9: warning: macro 'glTexCoordPointerListIBM' contains a runtime value, translated to function
pub inline fn glTexCoordPointerListIBM() @TypeOf(GLEW_GET_FUN(__glewTexCoordPointerListIBM)) {
    return GLEW_GET_FUN(__glewTexCoordPointerListIBM);
}
// /usr/include/GL/glew.h:13965:9: warning: macro 'glVertexPointerListIBM' contains a runtime value, translated to function
pub inline fn glVertexPointerListIBM() @TypeOf(GLEW_GET_FUN(__glewVertexPointerListIBM)) {
    return GLEW_GET_FUN(__glewVertexPointerListIBM);
}
// /usr/include/GL/glew.h:13967:9: warning: macro 'GLEW_IBM_vertex_array_lists' contains a runtime value, translated to function
pub inline fn GLEW_IBM_vertex_array_lists() @TypeOf(GLEW_GET_VAR(__GLEW_IBM_vertex_array_lists)) {
    return GLEW_GET_VAR(__GLEW_IBM_vertex_array_lists);
}
pub const GL_IMG_bindless_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:13983:9: warning: macro 'glGetTextureHandleIMG' contains a runtime value, translated to function
pub inline fn glGetTextureHandleIMG() @TypeOf(GLEW_GET_FUN(__glewGetTextureHandleIMG)) {
    return GLEW_GET_FUN(__glewGetTextureHandleIMG);
}
// /usr/include/GL/glew.h:13984:9: warning: macro 'glGetTextureSamplerHandleIMG' contains a runtime value, translated to function
pub inline fn glGetTextureSamplerHandleIMG() @TypeOf(GLEW_GET_FUN(__glewGetTextureSamplerHandleIMG)) {
    return GLEW_GET_FUN(__glewGetTextureSamplerHandleIMG);
}
// /usr/include/GL/glew.h:13985:9: warning: macro 'glProgramUniformHandleui64IMG' contains a runtime value, translated to function
pub inline fn glProgramUniformHandleui64IMG() @TypeOf(GLEW_GET_FUN(__glewProgramUniformHandleui64IMG)) {
    return GLEW_GET_FUN(__glewProgramUniformHandleui64IMG);
}
// /usr/include/GL/glew.h:13986:9: warning: macro 'glProgramUniformHandleui64vIMG' contains a runtime value, translated to function
pub inline fn glProgramUniformHandleui64vIMG() @TypeOf(GLEW_GET_FUN(__glewProgramUniformHandleui64vIMG)) {
    return GLEW_GET_FUN(__glewProgramUniformHandleui64vIMG);
}
// /usr/include/GL/glew.h:13987:9: warning: macro 'glUniformHandleui64IMG' contains a runtime value, translated to function
pub inline fn glUniformHandleui64IMG() @TypeOf(GLEW_GET_FUN(__glewUniformHandleui64IMG)) {
    return GLEW_GET_FUN(__glewUniformHandleui64IMG);
}
// /usr/include/GL/glew.h:13988:9: warning: macro 'glUniformHandleui64vIMG' contains a runtime value, translated to function
pub inline fn glUniformHandleui64vIMG() @TypeOf(GLEW_GET_FUN(__glewUniformHandleui64vIMG)) {
    return GLEW_GET_FUN(__glewUniformHandleui64vIMG);
}
// /usr/include/GL/glew.h:13990:9: warning: macro 'GLEW_IMG_bindless_texture' contains a runtime value, translated to function
pub inline fn GLEW_IMG_bindless_texture() @TypeOf(GLEW_GET_VAR(__GLEW_IMG_bindless_texture)) {
    return GLEW_GET_VAR(__GLEW_IMG_bindless_texture);
}
pub const GL_IMG_framebuffer_downsample = @as(c_int, 1);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913C, .hex);
pub const GL_NUM_DOWNSAMPLE_SCALES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913D, .hex);
pub const GL_DOWNSAMPLE_SCALES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913E, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913F, .hex);
// /usr/include/GL/glew.h:14007:9: warning: macro 'glFramebufferTexture2DDownsampleIMG' contains a runtime value, translated to function
pub inline fn glFramebufferTexture2DDownsampleIMG() @TypeOf(GLEW_GET_FUN(__glewFramebufferTexture2DDownsampleIMG)) {
    return GLEW_GET_FUN(__glewFramebufferTexture2DDownsampleIMG);
}
// /usr/include/GL/glew.h:14008:9: warning: macro 'glFramebufferTextureLayerDownsampleIMG' contains a runtime value, translated to function
pub inline fn glFramebufferTextureLayerDownsampleIMG() @TypeOf(GLEW_GET_FUN(__glewFramebufferTextureLayerDownsampleIMG)) {
    return GLEW_GET_FUN(__glewFramebufferTextureLayerDownsampleIMG);
}
// /usr/include/GL/glew.h:14010:9: warning: macro 'GLEW_IMG_framebuffer_downsample' contains a runtime value, translated to function
pub inline fn GLEW_IMG_framebuffer_downsample() @TypeOf(GLEW_GET_VAR(__GLEW_IMG_framebuffer_downsample)) {
    return GLEW_GET_VAR(__GLEW_IMG_framebuffer_downsample);
}
pub const GL_IMG_multisampled_render_to_texture = @as(c_int, 1);
pub const GL_RENDERBUFFER_SAMPLES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9133, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9134, .hex);
pub const GL_MAX_SAMPLES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9135, .hex);
pub const GL_TEXTURE_SAMPLES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9136, .hex);
// /usr/include/GL/glew.h:14027:9: warning: macro 'glFramebufferTexture2DMultisampleIMG' contains a runtime value, translated to function
pub inline fn glFramebufferTexture2DMultisampleIMG() @TypeOf(GLEW_GET_FUN(__glewFramebufferTexture2DMultisampleIMG)) {
    return GLEW_GET_FUN(__glewFramebufferTexture2DMultisampleIMG);
}
// /usr/include/GL/glew.h:14028:9: warning: macro 'glRenderbufferStorageMultisampleIMG' contains a runtime value, translated to function
pub inline fn glRenderbufferStorageMultisampleIMG() @TypeOf(GLEW_GET_FUN(__glewRenderbufferStorageMultisampleIMG)) {
    return GLEW_GET_FUN(__glewRenderbufferStorageMultisampleIMG);
}
// /usr/include/GL/glew.h:14030:9: warning: macro 'GLEW_IMG_multisampled_render_to_texture' contains a runtime value, translated to function
pub inline fn GLEW_IMG_multisampled_render_to_texture() @TypeOf(GLEW_GET_VAR(__GLEW_IMG_multisampled_render_to_texture)) {
    return GLEW_GET_VAR(__GLEW_IMG_multisampled_render_to_texture);
}
pub const GL_IMG_program_binary = @as(c_int, 1);
pub const GL_SGX_PROGRAM_BINARY_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9130, .hex);
// /usr/include/GL/glew.h:14041:9: warning: macro 'GLEW_IMG_program_binary' contains a runtime value, translated to function
pub inline fn GLEW_IMG_program_binary() @TypeOf(GLEW_GET_VAR(__GLEW_IMG_program_binary)) {
    return GLEW_GET_VAR(__GLEW_IMG_program_binary);
}
pub const GL_IMG_read_format = @as(c_int, 1);
pub const GL_BGRA_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hex);
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8365, .hex);
// /usr/include/GL/glew.h:14053:9: warning: macro 'GLEW_IMG_read_format' contains a runtime value, translated to function
pub inline fn GLEW_IMG_read_format() @TypeOf(GLEW_GET_VAR(__GLEW_IMG_read_format)) {
    return GLEW_GET_VAR(__GLEW_IMG_read_format);
}
pub const GL_IMG_shader_binary = @as(c_int, 1);
pub const GL_SGX_BINARY_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C0A, .hex);
// /usr/include/GL/glew.h:14064:9: warning: macro 'GLEW_IMG_shader_binary' contains a runtime value, translated to function
pub inline fn GLEW_IMG_shader_binary() @TypeOf(GLEW_GET_VAR(__GLEW_IMG_shader_binary)) {
    return GLEW_GET_VAR(__GLEW_IMG_shader_binary);
}
pub const GL_IMG_texture_compression_pvrtc = @as(c_int, 1);
pub const GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C00, .hex);
pub const GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C01, .hex);
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C02, .hex);
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C03, .hex);
// /usr/include/GL/glew.h:14078:9: warning: macro 'GLEW_IMG_texture_compression_pvrtc' contains a runtime value, translated to function
pub inline fn GLEW_IMG_texture_compression_pvrtc() @TypeOf(GLEW_GET_VAR(__GLEW_IMG_texture_compression_pvrtc)) {
    return GLEW_GET_VAR(__GLEW_IMG_texture_compression_pvrtc);
}
pub const GL_IMG_texture_compression_pvrtc2 = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9137, .hex);
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9138, .hex);
// /usr/include/GL/glew.h:14090:9: warning: macro 'GLEW_IMG_texture_compression_pvrtc2' contains a runtime value, translated to function
pub inline fn GLEW_IMG_texture_compression_pvrtc2() @TypeOf(GLEW_GET_VAR(__GLEW_IMG_texture_compression_pvrtc2)) {
    return GLEW_GET_VAR(__GLEW_IMG_texture_compression_pvrtc2);
}
pub const GL_IMG_texture_env_enhanced_fixed_function = @as(c_int, 1);
pub const GL_DOT3_RGBA_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AF, .hex);
pub const GL_MODULATE_COLOR_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C04, .hex);
pub const GL_RECIP_ADD_SIGNED_ALPHA_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C05, .hex);
pub const GL_TEXTURE_ALPHA_MODULATE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C06, .hex);
pub const GL_FACTOR_ALPHA_MODULATE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C07, .hex);
pub const GL_FRAGMENT_ALPHA_MODULATE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C08, .hex);
pub const GL_ADD_BLEND_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C09, .hex);
// /usr/include/GL/glew.h:14107:9: warning: macro 'GLEW_IMG_texture_env_enhanced_fixed_function' contains a runtime value, translated to function
pub inline fn GLEW_IMG_texture_env_enhanced_fixed_function() @TypeOf(GLEW_GET_VAR(__GLEW_IMG_texture_env_enhanced_fixed_function)) {
    return GLEW_GET_VAR(__GLEW_IMG_texture_env_enhanced_fixed_function);
}
pub const GL_IMG_texture_filter_cubic = @as(c_int, 1);
pub const GL_CUBIC_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9139, .hex);
pub const GL_CUBIC_MIPMAP_NEAREST_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913A, .hex);
pub const GL_CUBIC_MIPMAP_LINEAR_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913B, .hex);
// /usr/include/GL/glew.h:14120:9: warning: macro 'GLEW_IMG_texture_filter_cubic' contains a runtime value, translated to function
pub inline fn GLEW_IMG_texture_filter_cubic() @TypeOf(GLEW_GET_VAR(__GLEW_IMG_texture_filter_cubic)) {
    return GLEW_GET_VAR(__GLEW_IMG_texture_filter_cubic);
}
pub const GL_INGR_color_clamp = @as(c_int, 1);
pub const GL_RED_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8560, .hex);
pub const GL_GREEN_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8561, .hex);
pub const GL_BLUE_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8562, .hex);
pub const GL_ALPHA_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8563, .hex);
pub const GL_RED_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8564, .hex);
pub const GL_GREEN_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8565, .hex);
pub const GL_BLUE_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8566, .hex);
pub const GL_ALPHA_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8567, .hex);
// /usr/include/GL/glew.h:14138:9: warning: macro 'GLEW_INGR_color_clamp' contains a runtime value, translated to function
pub inline fn GLEW_INGR_color_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_INGR_color_clamp)) {
    return GLEW_GET_VAR(__GLEW_INGR_color_clamp);
}
pub const GL_INGR_interlace_read = @as(c_int, 1);
pub const GL_INTERLACE_READ_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8568, .hex);
// /usr/include/GL/glew.h:14149:9: warning: macro 'GLEW_INGR_interlace_read' contains a runtime value, translated to function
pub inline fn GLEW_INGR_interlace_read() @TypeOf(GLEW_GET_VAR(__GLEW_INGR_interlace_read)) {
    return GLEW_GET_VAR(__GLEW_INGR_interlace_read);
}
pub const GL_INTEL_blackhole_render = @as(c_int, 1);
pub const GL_BLACKHOLE_RENDER_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FC, .hex);
// /usr/include/GL/glew.h:14160:9: warning: macro 'GLEW_INTEL_blackhole_render' contains a runtime value, translated to function
pub inline fn GLEW_INTEL_blackhole_render() @TypeOf(GLEW_GET_VAR(__GLEW_INTEL_blackhole_render)) {
    return GLEW_GET_VAR(__GLEW_INTEL_blackhole_render);
}
pub const GL_INTEL_conservative_rasterization = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTERIZATION_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FE, .hex);
// /usr/include/GL/glew.h:14171:9: warning: macro 'GLEW_INTEL_conservative_rasterization' contains a runtime value, translated to function
pub inline fn GLEW_INTEL_conservative_rasterization() @TypeOf(GLEW_GET_VAR(__GLEW_INTEL_conservative_rasterization)) {
    return GLEW_GET_VAR(__GLEW_INTEL_conservative_rasterization);
}
pub const GL_INTEL_fragment_shader_ordering = @as(c_int, 1);
// /usr/include/GL/glew.h:14180:9: warning: macro 'GLEW_INTEL_fragment_shader_ordering' contains a runtime value, translated to function
pub inline fn GLEW_INTEL_fragment_shader_ordering() @TypeOf(GLEW_GET_VAR(__GLEW_INTEL_fragment_shader_ordering)) {
    return GLEW_GET_VAR(__GLEW_INTEL_fragment_shader_ordering);
}
pub const GL_INTEL_framebuffer_CMAA = @as(c_int, 1);
// /usr/include/GL/glew.h:14189:9: warning: macro 'GLEW_INTEL_framebuffer_CMAA' contains a runtime value, translated to function
pub inline fn GLEW_INTEL_framebuffer_CMAA() @TypeOf(GLEW_GET_VAR(__GLEW_INTEL_framebuffer_CMAA)) {
    return GLEW_GET_VAR(__GLEW_INTEL_framebuffer_CMAA);
}
pub const GL_INTEL_map_texture = @as(c_int, 1);
pub const GL_LAYOUT_DEFAULT_INTEL = @as(c_int, 0);
pub const GL_LAYOUT_LINEAR_INTEL = @as(c_int, 1);
pub const GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = @as(c_int, 2);
pub const GL_TEXTURE_MEMORY_LAYOUT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FF, .hex);
// /usr/include/GL/glew.h:14207:9: warning: macro 'glMapTexture2DINTEL' contains a runtime value, translated to function
pub inline fn glMapTexture2DINTEL() @TypeOf(GLEW_GET_FUN(__glewMapTexture2DINTEL)) {
    return GLEW_GET_FUN(__glewMapTexture2DINTEL);
}
// /usr/include/GL/glew.h:14208:9: warning: macro 'glSyncTextureINTEL' contains a runtime value, translated to function
pub inline fn glSyncTextureINTEL() @TypeOf(GLEW_GET_FUN(__glewSyncTextureINTEL)) {
    return GLEW_GET_FUN(__glewSyncTextureINTEL);
}
// /usr/include/GL/glew.h:14209:9: warning: macro 'glUnmapTexture2DINTEL' contains a runtime value, translated to function
pub inline fn glUnmapTexture2DINTEL() @TypeOf(GLEW_GET_FUN(__glewUnmapTexture2DINTEL)) {
    return GLEW_GET_FUN(__glewUnmapTexture2DINTEL);
}
// /usr/include/GL/glew.h:14211:9: warning: macro 'GLEW_INTEL_map_texture' contains a runtime value, translated to function
pub inline fn GLEW_INTEL_map_texture() @TypeOf(GLEW_GET_VAR(__GLEW_INTEL_map_texture)) {
    return GLEW_GET_VAR(__GLEW_INTEL_map_texture);
}
pub const GL_INTEL_parallel_arrays = @as(c_int, 1);
pub const GL_PARALLEL_ARRAYS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F4, .hex);
pub const GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F5, .hex);
pub const GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F6, .hex);
pub const GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F7, .hex);
pub const GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F8, .hex);
// /usr/include/GL/glew.h:14231:9: warning: macro 'glColorPointervINTEL' contains a runtime value, translated to function
pub inline fn glColorPointervINTEL() @TypeOf(GLEW_GET_FUN(__glewColorPointervINTEL)) {
    return GLEW_GET_FUN(__glewColorPointervINTEL);
}
// /usr/include/GL/glew.h:14232:9: warning: macro 'glNormalPointervINTEL' contains a runtime value, translated to function
pub inline fn glNormalPointervINTEL() @TypeOf(GLEW_GET_FUN(__glewNormalPointervINTEL)) {
    return GLEW_GET_FUN(__glewNormalPointervINTEL);
}
// /usr/include/GL/glew.h:14233:9: warning: macro 'glTexCoordPointervINTEL' contains a runtime value, translated to function
pub inline fn glTexCoordPointervINTEL() @TypeOf(GLEW_GET_FUN(__glewTexCoordPointervINTEL)) {
    return GLEW_GET_FUN(__glewTexCoordPointervINTEL);
}
// /usr/include/GL/glew.h:14234:9: warning: macro 'glVertexPointervINTEL' contains a runtime value, translated to function
pub inline fn glVertexPointervINTEL() @TypeOf(GLEW_GET_FUN(__glewVertexPointervINTEL)) {
    return GLEW_GET_FUN(__glewVertexPointervINTEL);
}
// /usr/include/GL/glew.h:14236:9: warning: macro 'GLEW_INTEL_parallel_arrays' contains a runtime value, translated to function
pub inline fn GLEW_INTEL_parallel_arrays() @TypeOf(GLEW_GET_VAR(__GLEW_INTEL_parallel_arrays)) {
    return GLEW_GET_VAR(__GLEW_INTEL_parallel_arrays);
}
pub const GL_INTEL_performance_query = @as(c_int, 1);
pub const GL_PERFQUERY_SINGLE_CONTEXT_INTEL = @as(c_int, 0x0000);
pub const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = @as(c_int, 0x0001);
pub const GL_PERFQUERY_DONOT_FLUSH_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F9, .hex);
pub const GL_PERFQUERY_FLUSH_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FA, .hex);
pub const GL_PERFQUERY_WAIT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FB, .hex);
pub const GL_PERFQUERY_COUNTER_EVENT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F0, .hex);
pub const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F1, .hex);
pub const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F2, .hex);
pub const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F3, .hex);
pub const GL_PERFQUERY_COUNTER_RAW_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F4, .hex);
pub const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F5, .hex);
pub const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F8, .hex);
pub const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F9, .hex);
pub const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FA, .hex);
pub const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FB, .hex);
pub const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FC, .hex);
pub const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FD, .hex);
pub const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FE, .hex);
pub const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FF, .hex);
pub const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9500, .hex);
// /usr/include/GL/glew.h:14277:9: warning: macro 'glBeginPerfQueryINTEL' contains a runtime value, translated to function
pub inline fn glBeginPerfQueryINTEL() @TypeOf(GLEW_GET_FUN(__glewBeginPerfQueryINTEL)) {
    return GLEW_GET_FUN(__glewBeginPerfQueryINTEL);
}
// /usr/include/GL/glew.h:14278:9: warning: macro 'glCreatePerfQueryINTEL' contains a runtime value, translated to function
pub inline fn glCreatePerfQueryINTEL() @TypeOf(GLEW_GET_FUN(__glewCreatePerfQueryINTEL)) {
    return GLEW_GET_FUN(__glewCreatePerfQueryINTEL);
}
// /usr/include/GL/glew.h:14279:9: warning: macro 'glDeletePerfQueryINTEL' contains a runtime value, translated to function
pub inline fn glDeletePerfQueryINTEL() @TypeOf(GLEW_GET_FUN(__glewDeletePerfQueryINTEL)) {
    return GLEW_GET_FUN(__glewDeletePerfQueryINTEL);
}
// /usr/include/GL/glew.h:14280:9: warning: macro 'glEndPerfQueryINTEL' contains a runtime value, translated to function
pub inline fn glEndPerfQueryINTEL() @TypeOf(GLEW_GET_FUN(__glewEndPerfQueryINTEL)) {
    return GLEW_GET_FUN(__glewEndPerfQueryINTEL);
}
// /usr/include/GL/glew.h:14281:9: warning: macro 'glGetFirstPerfQueryIdINTEL' contains a runtime value, translated to function
pub inline fn glGetFirstPerfQueryIdINTEL() @TypeOf(GLEW_GET_FUN(__glewGetFirstPerfQueryIdINTEL)) {
    return GLEW_GET_FUN(__glewGetFirstPerfQueryIdINTEL);
}
// /usr/include/GL/glew.h:14282:9: warning: macro 'glGetNextPerfQueryIdINTEL' contains a runtime value, translated to function
pub inline fn glGetNextPerfQueryIdINTEL() @TypeOf(GLEW_GET_FUN(__glewGetNextPerfQueryIdINTEL)) {
    return GLEW_GET_FUN(__glewGetNextPerfQueryIdINTEL);
}
// /usr/include/GL/glew.h:14283:9: warning: macro 'glGetPerfCounterInfoINTEL' contains a runtime value, translated to function
pub inline fn glGetPerfCounterInfoINTEL() @TypeOf(GLEW_GET_FUN(__glewGetPerfCounterInfoINTEL)) {
    return GLEW_GET_FUN(__glewGetPerfCounterInfoINTEL);
}
// /usr/include/GL/glew.h:14284:9: warning: macro 'glGetPerfQueryDataINTEL' contains a runtime value, translated to function
pub inline fn glGetPerfQueryDataINTEL() @TypeOf(GLEW_GET_FUN(__glewGetPerfQueryDataINTEL)) {
    return GLEW_GET_FUN(__glewGetPerfQueryDataINTEL);
}
// /usr/include/GL/glew.h:14285:9: warning: macro 'glGetPerfQueryIdByNameINTEL' contains a runtime value, translated to function
pub inline fn glGetPerfQueryIdByNameINTEL() @TypeOf(GLEW_GET_FUN(__glewGetPerfQueryIdByNameINTEL)) {
    return GLEW_GET_FUN(__glewGetPerfQueryIdByNameINTEL);
}
// /usr/include/GL/glew.h:14286:9: warning: macro 'glGetPerfQueryInfoINTEL' contains a runtime value, translated to function
pub inline fn glGetPerfQueryInfoINTEL() @TypeOf(GLEW_GET_FUN(__glewGetPerfQueryInfoINTEL)) {
    return GLEW_GET_FUN(__glewGetPerfQueryInfoINTEL);
}
// /usr/include/GL/glew.h:14288:9: warning: macro 'GLEW_INTEL_performance_query' contains a runtime value, translated to function
pub inline fn GLEW_INTEL_performance_query() @TypeOf(GLEW_GET_VAR(__GLEW_INTEL_performance_query)) {
    return GLEW_GET_VAR(__GLEW_INTEL_performance_query);
}
pub const GL_INTEL_shader_integer_functions2 = @as(c_int, 1);
// /usr/include/GL/glew.h:14297:9: warning: macro 'GLEW_INTEL_shader_integer_functions2' contains a runtime value, translated to function
pub inline fn GLEW_INTEL_shader_integer_functions2() @TypeOf(GLEW_GET_VAR(__GLEW_INTEL_shader_integer_functions2)) {
    return GLEW_GET_VAR(__GLEW_INTEL_shader_integer_functions2);
}
pub const GL_INTEL_texture_scissor = @as(c_int, 1);
// /usr/include/GL/glew.h:14309:9: warning: macro 'glTexScissorFuncINTEL' contains a runtime value, translated to function
pub inline fn glTexScissorFuncINTEL() @TypeOf(GLEW_GET_FUN(__glewTexScissorFuncINTEL)) {
    return GLEW_GET_FUN(__glewTexScissorFuncINTEL);
}
// /usr/include/GL/glew.h:14310:9: warning: macro 'glTexScissorINTEL' contains a runtime value, translated to function
pub inline fn glTexScissorINTEL() @TypeOf(GLEW_GET_FUN(__glewTexScissorINTEL)) {
    return GLEW_GET_FUN(__glewTexScissorINTEL);
}
// /usr/include/GL/glew.h:14312:9: warning: macro 'GLEW_INTEL_texture_scissor' contains a runtime value, translated to function
pub inline fn GLEW_INTEL_texture_scissor() @TypeOf(GLEW_GET_VAR(__GLEW_INTEL_texture_scissor)) {
    return GLEW_GET_VAR(__GLEW_INTEL_texture_scissor);
}
pub const GL_KHR_blend_equation_advanced = @as(c_int, 1);
pub const GL_BLEND_ADVANCED_COHERENT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9285, .hex);
pub const GL_MULTIPLY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9294, .hex);
pub const GL_SCREEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9295, .hex);
pub const GL_OVERLAY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9296, .hex);
pub const GL_DARKEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9297, .hex);
pub const GL_LIGHTEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9298, .hex);
pub const GL_COLORDODGE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9299, .hex);
pub const GL_COLORBURN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929A, .hex);
pub const GL_HARDLIGHT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929B, .hex);
pub const GL_SOFTLIGHT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929C, .hex);
pub const GL_DIFFERENCE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929E, .hex);
pub const GL_EXCLUSION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A0, .hex);
pub const GL_HSL_HUE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AD, .hex);
pub const GL_HSL_SATURATION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AE, .hex);
pub const GL_HSL_COLOR_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AF, .hex);
pub const GL_HSL_LUMINOSITY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B0, .hex);
// /usr/include/GL/glew.h:14340:9: warning: macro 'glBlendBarrierKHR' contains a runtime value, translated to function
pub inline fn glBlendBarrierKHR() @TypeOf(GLEW_GET_FUN(__glewBlendBarrierKHR)) {
    return GLEW_GET_FUN(__glewBlendBarrierKHR);
}
// /usr/include/GL/glew.h:14342:9: warning: macro 'GLEW_KHR_blend_equation_advanced' contains a runtime value, translated to function
pub inline fn GLEW_KHR_blend_equation_advanced() @TypeOf(GLEW_GET_VAR(__GLEW_KHR_blend_equation_advanced)) {
    return GLEW_GET_VAR(__GLEW_KHR_blend_equation_advanced);
}
pub const GL_KHR_blend_equation_advanced_coherent = @as(c_int, 1);
// /usr/include/GL/glew.h:14351:9: warning: macro 'GLEW_KHR_blend_equation_advanced_coherent' contains a runtime value, translated to function
pub inline fn GLEW_KHR_blend_equation_advanced_coherent() @TypeOf(GLEW_GET_VAR(__GLEW_KHR_blend_equation_advanced_coherent)) {
    return GLEW_GET_VAR(__GLEW_KHR_blend_equation_advanced_coherent);
}
pub const GL_KHR_context_flush_control = @as(c_int, 1);
pub const GL_CONTEXT_RELEASE_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FB, .hex);
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FC, .hex);
// /usr/include/GL/glew.h:14363:9: warning: macro 'GLEW_KHR_context_flush_control' contains a runtime value, translated to function
pub inline fn GLEW_KHR_context_flush_control() @TypeOf(GLEW_GET_VAR(__GLEW_KHR_context_flush_control)) {
    return GLEW_GET_VAR(__GLEW_KHR_context_flush_control);
}
pub const GL_KHR_debug = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_DEBUG_BIT = @as(c_int, 0x00000002);
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8242, .hex);
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8243, .hex);
pub const GL_DEBUG_CALLBACK_FUNCTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8244, .hex);
pub const GL_DEBUG_CALLBACK_USER_PARAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8245, .hex);
pub const GL_DEBUG_SOURCE_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8246, .hex);
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8247, .hex);
pub const GL_DEBUG_SOURCE_SHADER_COMPILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8248, .hex);
pub const GL_DEBUG_SOURCE_THIRD_PARTY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8249, .hex);
pub const GL_DEBUG_SOURCE_APPLICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824A, .hex);
pub const GL_DEBUG_SOURCE_OTHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824B, .hex);
pub const GL_DEBUG_TYPE_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824C, .hex);
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824D, .hex);
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824E, .hex);
pub const GL_DEBUG_TYPE_PORTABILITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824F, .hex);
pub const GL_DEBUG_TYPE_PERFORMANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8250, .hex);
pub const GL_DEBUG_TYPE_OTHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8251, .hex);
pub const GL_DEBUG_TYPE_MARKER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8268, .hex);
pub const GL_DEBUG_TYPE_PUSH_GROUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8269, .hex);
pub const GL_DEBUG_TYPE_POP_GROUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826A, .hex);
pub const GL_DEBUG_SEVERITY_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826B, .hex);
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826C, .hex);
pub const GL_DEBUG_GROUP_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826D, .hex);
pub const GL_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E0, .hex);
pub const GL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E1, .hex);
pub const GL_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E2, .hex);
pub const GL_QUERY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E3, .hex);
pub const GL_PROGRAM_PIPELINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E4, .hex);
pub const GL_SAMPLER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E6, .hex);
pub const GL_DISPLAY_LIST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E7, .hex);
pub const GL_MAX_LABEL_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E8, .hex);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hex);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hex);
pub const GL_DEBUG_LOGGED_MESSAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hex);
pub const GL_DEBUG_SEVERITY_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hex);
pub const GL_DEBUG_SEVERITY_MEDIUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hex);
pub const GL_DEBUG_SEVERITY_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hex);
pub const GL_DEBUG_OUTPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E0, .hex);
// /usr/include/GL/glew.h:14426:9: warning: macro 'glDebugMessageCallback' contains a runtime value, translated to function
pub inline fn glDebugMessageCallback() @TypeOf(GLEW_GET_FUN(__glewDebugMessageCallback)) {
    return GLEW_GET_FUN(__glewDebugMessageCallback);
}
// /usr/include/GL/glew.h:14427:9: warning: macro 'glDebugMessageControl' contains a runtime value, translated to function
pub inline fn glDebugMessageControl() @TypeOf(GLEW_GET_FUN(__glewDebugMessageControl)) {
    return GLEW_GET_FUN(__glewDebugMessageControl);
}
// /usr/include/GL/glew.h:14428:9: warning: macro 'glDebugMessageInsert' contains a runtime value, translated to function
pub inline fn glDebugMessageInsert() @TypeOf(GLEW_GET_FUN(__glewDebugMessageInsert)) {
    return GLEW_GET_FUN(__glewDebugMessageInsert);
}
// /usr/include/GL/glew.h:14429:9: warning: macro 'glGetDebugMessageLog' contains a runtime value, translated to function
pub inline fn glGetDebugMessageLog() @TypeOf(GLEW_GET_FUN(__glewGetDebugMessageLog)) {
    return GLEW_GET_FUN(__glewGetDebugMessageLog);
}
// /usr/include/GL/glew.h:14430:9: warning: macro 'glGetObjectLabel' contains a runtime value, translated to function
pub inline fn glGetObjectLabel() @TypeOf(GLEW_GET_FUN(__glewGetObjectLabel)) {
    return GLEW_GET_FUN(__glewGetObjectLabel);
}
// /usr/include/GL/glew.h:14431:9: warning: macro 'glGetObjectPtrLabel' contains a runtime value, translated to function
pub inline fn glGetObjectPtrLabel() @TypeOf(GLEW_GET_FUN(__glewGetObjectPtrLabel)) {
    return GLEW_GET_FUN(__glewGetObjectPtrLabel);
}
// /usr/include/GL/glew.h:14432:9: warning: macro 'glObjectLabel' contains a runtime value, translated to function
pub inline fn glObjectLabel() @TypeOf(GLEW_GET_FUN(__glewObjectLabel)) {
    return GLEW_GET_FUN(__glewObjectLabel);
}
// /usr/include/GL/glew.h:14433:9: warning: macro 'glObjectPtrLabel' contains a runtime value, translated to function
pub inline fn glObjectPtrLabel() @TypeOf(GLEW_GET_FUN(__glewObjectPtrLabel)) {
    return GLEW_GET_FUN(__glewObjectPtrLabel);
}
// /usr/include/GL/glew.h:14434:9: warning: macro 'glPopDebugGroup' contains a runtime value, translated to function
pub inline fn glPopDebugGroup() @TypeOf(GLEW_GET_FUN(__glewPopDebugGroup)) {
    return GLEW_GET_FUN(__glewPopDebugGroup);
}
// /usr/include/GL/glew.h:14435:9: warning: macro 'glPushDebugGroup' contains a runtime value, translated to function
pub inline fn glPushDebugGroup() @TypeOf(GLEW_GET_FUN(__glewPushDebugGroup)) {
    return GLEW_GET_FUN(__glewPushDebugGroup);
}
// /usr/include/GL/glew.h:14437:9: warning: macro 'GLEW_KHR_debug' contains a runtime value, translated to function
pub inline fn GLEW_KHR_debug() @TypeOf(GLEW_GET_VAR(__GLEW_KHR_debug)) {
    return GLEW_GET_VAR(__GLEW_KHR_debug);
}
pub const GL_KHR_no_error = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = @as(c_int, 0x00000008);
// /usr/include/GL/glew.h:14448:9: warning: macro 'GLEW_KHR_no_error' contains a runtime value, translated to function
pub inline fn GLEW_KHR_no_error() @TypeOf(GLEW_GET_VAR(__GLEW_KHR_no_error)) {
    return GLEW_GET_VAR(__GLEW_KHR_no_error);
}
pub const GL_KHR_parallel_shader_compile = @as(c_int, 1);
pub const GL_MAX_SHADER_COMPILER_THREADS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B0, .hex);
pub const GL_COMPLETION_STATUS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B1, .hex);
// /usr/include/GL/glew.h:14462:9: warning: macro 'glMaxShaderCompilerThreadsKHR' contains a runtime value, translated to function
pub inline fn glMaxShaderCompilerThreadsKHR() @TypeOf(GLEW_GET_FUN(__glewMaxShaderCompilerThreadsKHR)) {
    return GLEW_GET_FUN(__glewMaxShaderCompilerThreadsKHR);
}
// /usr/include/GL/glew.h:14464:9: warning: macro 'GLEW_KHR_parallel_shader_compile' contains a runtime value, translated to function
pub inline fn GLEW_KHR_parallel_shader_compile() @TypeOf(GLEW_GET_VAR(__GLEW_KHR_parallel_shader_compile)) {
    return GLEW_GET_VAR(__GLEW_KHR_parallel_shader_compile);
}
pub const GL_KHR_robust_buffer_access_behavior = @as(c_int, 1);
// /usr/include/GL/glew.h:14473:9: warning: macro 'GLEW_KHR_robust_buffer_access_behavior' contains a runtime value, translated to function
pub inline fn GLEW_KHR_robust_buffer_access_behavior() @TypeOf(GLEW_GET_VAR(__GLEW_KHR_robust_buffer_access_behavior)) {
    return GLEW_GET_VAR(__GLEW_KHR_robust_buffer_access_behavior);
}
pub const GL_KHR_robustness = @as(c_int, 1);
pub const GL_CONTEXT_LOST = @as(c_int, 0x0507);
pub const GL_LOSE_CONTEXT_ON_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hex);
pub const GL_GUILTY_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hex);
pub const GL_INNOCENT_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hex);
pub const GL_UNKNOWN_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hex);
pub const GL_RESET_NOTIFICATION_STRATEGY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hex);
pub const GL_NO_RESET_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hex);
pub const GL_CONTEXT_ROBUST_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F3, .hex);
// /usr/include/GL/glew.h:14496:9: warning: macro 'glGetnUniformfv' contains a runtime value, translated to function
pub inline fn glGetnUniformfv() @TypeOf(GLEW_GET_FUN(__glewGetnUniformfv)) {
    return GLEW_GET_FUN(__glewGetnUniformfv);
}
// /usr/include/GL/glew.h:14497:9: warning: macro 'glGetnUniformiv' contains a runtime value, translated to function
pub inline fn glGetnUniformiv() @TypeOf(GLEW_GET_FUN(__glewGetnUniformiv)) {
    return GLEW_GET_FUN(__glewGetnUniformiv);
}
// /usr/include/GL/glew.h:14498:9: warning: macro 'glGetnUniformuiv' contains a runtime value, translated to function
pub inline fn glGetnUniformuiv() @TypeOf(GLEW_GET_FUN(__glewGetnUniformuiv)) {
    return GLEW_GET_FUN(__glewGetnUniformuiv);
}
// /usr/include/GL/glew.h:14499:9: warning: macro 'glReadnPixels' contains a runtime value, translated to function
pub inline fn glReadnPixels() @TypeOf(GLEW_GET_FUN(__glewReadnPixels)) {
    return GLEW_GET_FUN(__glewReadnPixels);
}
// /usr/include/GL/glew.h:14501:9: warning: macro 'GLEW_KHR_robustness' contains a runtime value, translated to function
pub inline fn GLEW_KHR_robustness() @TypeOf(GLEW_GET_VAR(__GLEW_KHR_robustness)) {
    return GLEW_GET_VAR(__GLEW_KHR_robustness);
}
pub const GL_KHR_shader_subgroup = @as(c_int, 1);
pub const GL_SUBGROUP_FEATURE_BASIC_BIT_KHR = @as(c_int, 0x00000001);
pub const GL_SUBGROUP_FEATURE_VOTE_BIT_KHR = @as(c_int, 0x00000002);
pub const GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = @as(c_int, 0x00000004);
pub const GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR = @as(c_int, 0x00000008);
pub const GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = @as(c_int, 0x00000010);
pub const GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = @as(c_int, 0x00000020);
pub const GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = @as(c_int, 0x00000040);
pub const GL_SUBGROUP_FEATURE_QUAD_BIT_KHR = @as(c_int, 0x00000080);
pub const GL_SUBGROUP_SIZE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9532, .hex);
pub const GL_SUBGROUP_SUPPORTED_STAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9533, .hex);
pub const GL_SUBGROUP_SUPPORTED_FEATURES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9534, .hex);
pub const GL_SUBGROUP_QUAD_ALL_STAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9535, .hex);
// /usr/include/GL/glew.h:14523:9: warning: macro 'GLEW_KHR_shader_subgroup' contains a runtime value, translated to function
pub inline fn GLEW_KHR_shader_subgroup() @TypeOf(GLEW_GET_VAR(__GLEW_KHR_shader_subgroup)) {
    return GLEW_GET_VAR(__GLEW_KHR_shader_subgroup);
}
pub const GL_KHR_texture_compression_astc_hdr = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B0, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B1, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B2, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B3, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B4, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B5, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B6, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B7, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B8, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B9, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BA, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BB, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BC, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BD, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C0, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C1, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C2, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C3, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C4, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C5, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C6, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C7, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C8, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C9, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D0, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D1, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D2, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D3, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D4, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D5, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D6, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D7, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D8, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D9, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DA, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DB, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DC, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DD, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E0, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E1, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E2, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E3, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E4, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E5, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E6, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E7, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E8, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E9, .hex);
// /usr/include/GL/glew.h:14581:9: warning: macro 'GLEW_KHR_texture_compression_astc_hdr' contains a runtime value, translated to function
pub inline fn GLEW_KHR_texture_compression_astc_hdr() @TypeOf(GLEW_GET_VAR(__GLEW_KHR_texture_compression_astc_hdr)) {
    return GLEW_GET_VAR(__GLEW_KHR_texture_compression_astc_hdr);
}
pub const GL_KHR_texture_compression_astc_ldr = @as(c_int, 1);
// /usr/include/GL/glew.h:14639:9: warning: macro 'GLEW_KHR_texture_compression_astc_ldr' contains a runtime value, translated to function
pub inline fn GLEW_KHR_texture_compression_astc_ldr() @TypeOf(GLEW_GET_VAR(__GLEW_KHR_texture_compression_astc_ldr)) {
    return GLEW_GET_VAR(__GLEW_KHR_texture_compression_astc_ldr);
}
pub const GL_KHR_texture_compression_astc_sliced_3d = @as(c_int, 1);
// /usr/include/GL/glew.h:14648:9: warning: macro 'GLEW_KHR_texture_compression_astc_sliced_3d' contains a runtime value, translated to function
pub inline fn GLEW_KHR_texture_compression_astc_sliced_3d() @TypeOf(GLEW_GET_VAR(__GLEW_KHR_texture_compression_astc_sliced_3d)) {
    return GLEW_GET_VAR(__GLEW_KHR_texture_compression_astc_sliced_3d);
}
pub const GL_KTX_buffer_region = @as(c_int, 1);
pub const GL_KTX_FRONT_REGION = @as(c_int, 0x0);
pub const GL_KTX_BACK_REGION = @as(c_int, 0x1);
pub const GL_KTX_Z_REGION = @as(c_int, 0x2);
pub const GL_KTX_STENCIL_REGION = @as(c_int, 0x3);
// /usr/include/GL/glew.h:14668:9: warning: macro 'glBufferRegionEnabled' contains a runtime value, translated to function
pub inline fn glBufferRegionEnabled() @TypeOf(GLEW_GET_FUN(__glewBufferRegionEnabled)) {
    return GLEW_GET_FUN(__glewBufferRegionEnabled);
}
// /usr/include/GL/glew.h:14669:9: warning: macro 'glDeleteBufferRegion' contains a runtime value, translated to function
pub inline fn glDeleteBufferRegion() @TypeOf(GLEW_GET_FUN(__glewDeleteBufferRegion)) {
    return GLEW_GET_FUN(__glewDeleteBufferRegion);
}
// /usr/include/GL/glew.h:14670:9: warning: macro 'glDrawBufferRegion' contains a runtime value, translated to function
pub inline fn glDrawBufferRegion() @TypeOf(GLEW_GET_FUN(__glewDrawBufferRegion)) {
    return GLEW_GET_FUN(__glewDrawBufferRegion);
}
// /usr/include/GL/glew.h:14671:9: warning: macro 'glNewBufferRegion' contains a runtime value, translated to function
pub inline fn glNewBufferRegion() @TypeOf(GLEW_GET_FUN(__glewNewBufferRegion)) {
    return GLEW_GET_FUN(__glewNewBufferRegion);
}
// /usr/include/GL/glew.h:14672:9: warning: macro 'glReadBufferRegion' contains a runtime value, translated to function
pub inline fn glReadBufferRegion() @TypeOf(GLEW_GET_FUN(__glewReadBufferRegion)) {
    return GLEW_GET_FUN(__glewReadBufferRegion);
}
// /usr/include/GL/glew.h:14674:9: warning: macro 'GLEW_KTX_buffer_region' contains a runtime value, translated to function
pub inline fn GLEW_KTX_buffer_region() @TypeOf(GLEW_GET_VAR(__GLEW_KTX_buffer_region)) {
    return GLEW_GET_VAR(__GLEW_KTX_buffer_region);
}
pub const GL_MESAX_texture_stack = @as(c_int, 1);
pub const GL_TEXTURE_1D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8759, .hex);
pub const GL_TEXTURE_2D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875A, .hex);
pub const GL_PROXY_TEXTURE_1D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875B, .hex);
pub const GL_PROXY_TEXTURE_2D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875C, .hex);
pub const GL_TEXTURE_1D_STACK_BINDING_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875D, .hex);
pub const GL_TEXTURE_2D_STACK_BINDING_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875E, .hex);
// /usr/include/GL/glew.h:14690:9: warning: macro 'GLEW_MESAX_texture_stack' contains a runtime value, translated to function
pub inline fn GLEW_MESAX_texture_stack() @TypeOf(GLEW_GET_VAR(__GLEW_MESAX_texture_stack)) {
    return GLEW_GET_VAR(__GLEW_MESAX_texture_stack);
}
pub const GL_MESA_framebuffer_flip_y = @as(c_int, 1);
pub const GL_FRAMEBUFFER_FLIP_Y_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BBB, .hex);
// /usr/include/GL/glew.h:14704:9: warning: macro 'glFramebufferParameteriMESA' contains a runtime value, translated to function
pub inline fn glFramebufferParameteriMESA() @TypeOf(GLEW_GET_FUN(__glewFramebufferParameteriMESA)) {
    return GLEW_GET_FUN(__glewFramebufferParameteriMESA);
}
// /usr/include/GL/glew.h:14705:9: warning: macro 'glGetFramebufferParameterivMESA' contains a runtime value, translated to function
pub inline fn glGetFramebufferParameterivMESA() @TypeOf(GLEW_GET_FUN(__glewGetFramebufferParameterivMESA)) {
    return GLEW_GET_FUN(__glewGetFramebufferParameterivMESA);
}
// /usr/include/GL/glew.h:14707:9: warning: macro 'GLEW_MESA_framebuffer_flip_y' contains a runtime value, translated to function
pub inline fn GLEW_MESA_framebuffer_flip_y() @TypeOf(GLEW_GET_VAR(__GLEW_MESA_framebuffer_flip_y)) {
    return GLEW_GET_VAR(__GLEW_MESA_framebuffer_flip_y);
}
pub const GL_MESA_pack_invert = @as(c_int, 1);
pub const GL_PACK_INVERT_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8758, .hex);
// /usr/include/GL/glew.h:14718:9: warning: macro 'GLEW_MESA_pack_invert' contains a runtime value, translated to function
pub inline fn GLEW_MESA_pack_invert() @TypeOf(GLEW_GET_VAR(__GLEW_MESA_pack_invert)) {
    return GLEW_GET_VAR(__GLEW_MESA_pack_invert);
}
pub const GL_MESA_program_binary_formats = @as(c_int, 1);
pub const GL_PROGRAM_BINARY_FORMAT_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875F, .hex);
// /usr/include/GL/glew.h:14729:9: warning: macro 'GLEW_MESA_program_binary_formats' contains a runtime value, translated to function
pub inline fn GLEW_MESA_program_binary_formats() @TypeOf(GLEW_GET_VAR(__GLEW_MESA_program_binary_formats)) {
    return GLEW_GET_VAR(__GLEW_MESA_program_binary_formats);
}
pub const GL_MESA_resize_buffers = @as(c_int, 1);
// /usr/include/GL/glew.h:14740:9: warning: macro 'glResizeBuffersMESA' contains a runtime value, translated to function
pub inline fn glResizeBuffersMESA() @TypeOf(GLEW_GET_FUN(__glewResizeBuffersMESA)) {
    return GLEW_GET_FUN(__glewResizeBuffersMESA);
}
// /usr/include/GL/glew.h:14742:9: warning: macro 'GLEW_MESA_resize_buffers' contains a runtime value, translated to function
pub inline fn GLEW_MESA_resize_buffers() @TypeOf(GLEW_GET_VAR(__GLEW_MESA_resize_buffers)) {
    return GLEW_GET_VAR(__GLEW_MESA_resize_buffers);
}
pub const GL_MESA_shader_integer_functions = @as(c_int, 1);
// /usr/include/GL/glew.h:14751:9: warning: macro 'GLEW_MESA_shader_integer_functions' contains a runtime value, translated to function
pub inline fn GLEW_MESA_shader_integer_functions() @TypeOf(GLEW_GET_VAR(__GLEW_MESA_shader_integer_functions)) {
    return GLEW_GET_VAR(__GLEW_MESA_shader_integer_functions);
}
pub const GL_MESA_tile_raster_order = @as(c_int, 1);
// /usr/include/GL/glew.h:14760:9: warning: macro 'GLEW_MESA_tile_raster_order' contains a runtime value, translated to function
pub inline fn GLEW_MESA_tile_raster_order() @TypeOf(GLEW_GET_VAR(__GLEW_MESA_tile_raster_order)) {
    return GLEW_GET_VAR(__GLEW_MESA_tile_raster_order);
}
pub const GL_MESA_window_pos = @as(c_int, 1);
// /usr/include/GL/glew.h:14794:9: warning: macro 'glWindowPos2dMESA' contains a runtime value, translated to function
pub inline fn glWindowPos2dMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos2dMESA)) {
    return GLEW_GET_FUN(__glewWindowPos2dMESA);
}
// /usr/include/GL/glew.h:14795:9: warning: macro 'glWindowPos2dvMESA' contains a runtime value, translated to function
pub inline fn glWindowPos2dvMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos2dvMESA)) {
    return GLEW_GET_FUN(__glewWindowPos2dvMESA);
}
// /usr/include/GL/glew.h:14796:9: warning: macro 'glWindowPos2fMESA' contains a runtime value, translated to function
pub inline fn glWindowPos2fMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos2fMESA)) {
    return GLEW_GET_FUN(__glewWindowPos2fMESA);
}
// /usr/include/GL/glew.h:14797:9: warning: macro 'glWindowPos2fvMESA' contains a runtime value, translated to function
pub inline fn glWindowPos2fvMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos2fvMESA)) {
    return GLEW_GET_FUN(__glewWindowPos2fvMESA);
}
// /usr/include/GL/glew.h:14798:9: warning: macro 'glWindowPos2iMESA' contains a runtime value, translated to function
pub inline fn glWindowPos2iMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos2iMESA)) {
    return GLEW_GET_FUN(__glewWindowPos2iMESA);
}
// /usr/include/GL/glew.h:14799:9: warning: macro 'glWindowPos2ivMESA' contains a runtime value, translated to function
pub inline fn glWindowPos2ivMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos2ivMESA)) {
    return GLEW_GET_FUN(__glewWindowPos2ivMESA);
}
// /usr/include/GL/glew.h:14800:9: warning: macro 'glWindowPos2sMESA' contains a runtime value, translated to function
pub inline fn glWindowPos2sMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos2sMESA)) {
    return GLEW_GET_FUN(__glewWindowPos2sMESA);
}
// /usr/include/GL/glew.h:14801:9: warning: macro 'glWindowPos2svMESA' contains a runtime value, translated to function
pub inline fn glWindowPos2svMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos2svMESA)) {
    return GLEW_GET_FUN(__glewWindowPos2svMESA);
}
// /usr/include/GL/glew.h:14802:9: warning: macro 'glWindowPos3dMESA' contains a runtime value, translated to function
pub inline fn glWindowPos3dMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos3dMESA)) {
    return GLEW_GET_FUN(__glewWindowPos3dMESA);
}
// /usr/include/GL/glew.h:14803:9: warning: macro 'glWindowPos3dvMESA' contains a runtime value, translated to function
pub inline fn glWindowPos3dvMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos3dvMESA)) {
    return GLEW_GET_FUN(__glewWindowPos3dvMESA);
}
// /usr/include/GL/glew.h:14804:9: warning: macro 'glWindowPos3fMESA' contains a runtime value, translated to function
pub inline fn glWindowPos3fMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos3fMESA)) {
    return GLEW_GET_FUN(__glewWindowPos3fMESA);
}
// /usr/include/GL/glew.h:14805:9: warning: macro 'glWindowPos3fvMESA' contains a runtime value, translated to function
pub inline fn glWindowPos3fvMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos3fvMESA)) {
    return GLEW_GET_FUN(__glewWindowPos3fvMESA);
}
// /usr/include/GL/glew.h:14806:9: warning: macro 'glWindowPos3iMESA' contains a runtime value, translated to function
pub inline fn glWindowPos3iMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos3iMESA)) {
    return GLEW_GET_FUN(__glewWindowPos3iMESA);
}
// /usr/include/GL/glew.h:14807:9: warning: macro 'glWindowPos3ivMESA' contains a runtime value, translated to function
pub inline fn glWindowPos3ivMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos3ivMESA)) {
    return GLEW_GET_FUN(__glewWindowPos3ivMESA);
}
// /usr/include/GL/glew.h:14808:9: warning: macro 'glWindowPos3sMESA' contains a runtime value, translated to function
pub inline fn glWindowPos3sMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos3sMESA)) {
    return GLEW_GET_FUN(__glewWindowPos3sMESA);
}
// /usr/include/GL/glew.h:14809:9: warning: macro 'glWindowPos3svMESA' contains a runtime value, translated to function
pub inline fn glWindowPos3svMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos3svMESA)) {
    return GLEW_GET_FUN(__glewWindowPos3svMESA);
}
// /usr/include/GL/glew.h:14810:9: warning: macro 'glWindowPos4dMESA' contains a runtime value, translated to function
pub inline fn glWindowPos4dMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos4dMESA)) {
    return GLEW_GET_FUN(__glewWindowPos4dMESA);
}
// /usr/include/GL/glew.h:14811:9: warning: macro 'glWindowPos4dvMESA' contains a runtime value, translated to function
pub inline fn glWindowPos4dvMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos4dvMESA)) {
    return GLEW_GET_FUN(__glewWindowPos4dvMESA);
}
// /usr/include/GL/glew.h:14812:9: warning: macro 'glWindowPos4fMESA' contains a runtime value, translated to function
pub inline fn glWindowPos4fMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos4fMESA)) {
    return GLEW_GET_FUN(__glewWindowPos4fMESA);
}
// /usr/include/GL/glew.h:14813:9: warning: macro 'glWindowPos4fvMESA' contains a runtime value, translated to function
pub inline fn glWindowPos4fvMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos4fvMESA)) {
    return GLEW_GET_FUN(__glewWindowPos4fvMESA);
}
// /usr/include/GL/glew.h:14814:9: warning: macro 'glWindowPos4iMESA' contains a runtime value, translated to function
pub inline fn glWindowPos4iMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos4iMESA)) {
    return GLEW_GET_FUN(__glewWindowPos4iMESA);
}
// /usr/include/GL/glew.h:14815:9: warning: macro 'glWindowPos4ivMESA' contains a runtime value, translated to function
pub inline fn glWindowPos4ivMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos4ivMESA)) {
    return GLEW_GET_FUN(__glewWindowPos4ivMESA);
}
// /usr/include/GL/glew.h:14816:9: warning: macro 'glWindowPos4sMESA' contains a runtime value, translated to function
pub inline fn glWindowPos4sMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos4sMESA)) {
    return GLEW_GET_FUN(__glewWindowPos4sMESA);
}
// /usr/include/GL/glew.h:14817:9: warning: macro 'glWindowPos4svMESA' contains a runtime value, translated to function
pub inline fn glWindowPos4svMESA() @TypeOf(GLEW_GET_FUN(__glewWindowPos4svMESA)) {
    return GLEW_GET_FUN(__glewWindowPos4svMESA);
}
// /usr/include/GL/glew.h:14819:9: warning: macro 'GLEW_MESA_window_pos' contains a runtime value, translated to function
pub inline fn GLEW_MESA_window_pos() @TypeOf(GLEW_GET_VAR(__GLEW_MESA_window_pos)) {
    return GLEW_GET_VAR(__GLEW_MESA_window_pos);
}
pub const GL_MESA_ycbcr_texture = @as(c_int, 1);
pub const GL_UNSIGNED_SHORT_8_8_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BA, .hex);
pub const GL_UNSIGNED_SHORT_8_8_REV_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BB, .hex);
pub const GL_YCBCR_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8757, .hex);
// /usr/include/GL/glew.h:14832:9: warning: macro 'GLEW_MESA_ycbcr_texture' contains a runtime value, translated to function
pub inline fn GLEW_MESA_ycbcr_texture() @TypeOf(GLEW_GET_VAR(__GLEW_MESA_ycbcr_texture)) {
    return GLEW_GET_VAR(__GLEW_MESA_ycbcr_texture);
}
pub const GL_NVX_blend_equation_advanced_multi_draw_buffers = @as(c_int, 1);
// /usr/include/GL/glew.h:14841:9: warning: macro 'GLEW_NVX_blend_equation_advanced_multi_draw_buffers' contains a runtime value, translated to function
pub inline fn GLEW_NVX_blend_equation_advanced_multi_draw_buffers() @TypeOf(GLEW_GET_VAR(__GLEW_NVX_blend_equation_advanced_multi_draw_buffers)) {
    return GLEW_GET_VAR(__GLEW_NVX_blend_equation_advanced_multi_draw_buffers);
}
pub const GL_NVX_conditional_render = @as(c_int, 1);
// /usr/include/GL/glew.h:14853:9: warning: macro 'glBeginConditionalRenderNVX' contains a runtime value, translated to function
pub inline fn glBeginConditionalRenderNVX() @TypeOf(GLEW_GET_FUN(__glewBeginConditionalRenderNVX)) {
    return GLEW_GET_FUN(__glewBeginConditionalRenderNVX);
}
// /usr/include/GL/glew.h:14854:9: warning: macro 'glEndConditionalRenderNVX' contains a runtime value, translated to function
pub inline fn glEndConditionalRenderNVX() @TypeOf(GLEW_GET_FUN(__glewEndConditionalRenderNVX)) {
    return GLEW_GET_FUN(__glewEndConditionalRenderNVX);
}
// /usr/include/GL/glew.h:14856:9: warning: macro 'GLEW_NVX_conditional_render' contains a runtime value, translated to function
pub inline fn GLEW_NVX_conditional_render() @TypeOf(GLEW_GET_VAR(__GLEW_NVX_conditional_render)) {
    return GLEW_GET_VAR(__GLEW_NVX_conditional_render);
}
pub const GL_NVX_gpu_memory_info = @as(c_int, 1);
pub const GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9047, .hex);
pub const GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9048, .hex);
pub const GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9049, .hex);
pub const GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904A, .hex);
pub const GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904B, .hex);
// /usr/include/GL/glew.h:14871:9: warning: macro 'GLEW_NVX_gpu_memory_info' contains a runtime value, translated to function
pub inline fn GLEW_NVX_gpu_memory_info() @TypeOf(GLEW_GET_VAR(__GLEW_NVX_gpu_memory_info)) {
    return GLEW_GET_VAR(__GLEW_NVX_gpu_memory_info);
}
pub const GL_NVX_gpu_multicast2 = @as(c_int, 1);
pub const GL_UPLOAD_GPU_MASK_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954A, .hex);
// /usr/include/GL/glew.h:14889:9: warning: macro 'glAsyncCopyBufferSubDataNVX' contains a runtime value, translated to function
pub inline fn glAsyncCopyBufferSubDataNVX() @TypeOf(GLEW_GET_FUN(__glewAsyncCopyBufferSubDataNVX)) {
    return GLEW_GET_FUN(__glewAsyncCopyBufferSubDataNVX);
}
// /usr/include/GL/glew.h:14890:9: warning: macro 'glAsyncCopyImageSubDataNVX' contains a runtime value, translated to function
pub inline fn glAsyncCopyImageSubDataNVX() @TypeOf(GLEW_GET_FUN(__glewAsyncCopyImageSubDataNVX)) {
    return GLEW_GET_FUN(__glewAsyncCopyImageSubDataNVX);
}
// /usr/include/GL/glew.h:14891:9: warning: macro 'glMulticastScissorArrayvNVX' contains a runtime value, translated to function
pub inline fn glMulticastScissorArrayvNVX() @TypeOf(GLEW_GET_FUN(__glewMulticastScissorArrayvNVX)) {
    return GLEW_GET_FUN(__glewMulticastScissorArrayvNVX);
}
// /usr/include/GL/glew.h:14892:9: warning: macro 'glMulticastViewportArrayvNVX' contains a runtime value, translated to function
pub inline fn glMulticastViewportArrayvNVX() @TypeOf(GLEW_GET_FUN(__glewMulticastViewportArrayvNVX)) {
    return GLEW_GET_FUN(__glewMulticastViewportArrayvNVX);
}
// /usr/include/GL/glew.h:14893:9: warning: macro 'glMulticastViewportPositionWScaleNVX' contains a runtime value, translated to function
pub inline fn glMulticastViewportPositionWScaleNVX() @TypeOf(GLEW_GET_FUN(__glewMulticastViewportPositionWScaleNVX)) {
    return GLEW_GET_FUN(__glewMulticastViewportPositionWScaleNVX);
}
// /usr/include/GL/glew.h:14894:9: warning: macro 'glUploadGpuMaskNVX' contains a runtime value, translated to function
pub inline fn glUploadGpuMaskNVX() @TypeOf(GLEW_GET_FUN(__glewUploadGpuMaskNVX)) {
    return GLEW_GET_FUN(__glewUploadGpuMaskNVX);
}
// /usr/include/GL/glew.h:14896:9: warning: macro 'GLEW_NVX_gpu_multicast2' contains a runtime value, translated to function
pub inline fn GLEW_NVX_gpu_multicast2() @TypeOf(GLEW_GET_VAR(__GLEW_NVX_gpu_multicast2)) {
    return GLEW_GET_VAR(__GLEW_NVX_gpu_multicast2);
}
pub const GL_NVX_linked_gpu_multicast = @as(c_int, 1);
pub const GL_LGPU_SEPARATE_STORAGE_BIT_NVX = @as(c_int, 0x0800);
pub const GL_MAX_LGPU_GPUS_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BA, .hex);
// /usr/include/GL/glew.h:14912:9: warning: macro 'glLGPUCopyImageSubDataNVX' contains a runtime value, translated to function
pub inline fn glLGPUCopyImageSubDataNVX() @TypeOf(GLEW_GET_FUN(__glewLGPUCopyImageSubDataNVX)) {
    return GLEW_GET_FUN(__glewLGPUCopyImageSubDataNVX);
}
// /usr/include/GL/glew.h:14913:9: warning: macro 'glLGPUInterlockNVX' contains a runtime value, translated to function
pub inline fn glLGPUInterlockNVX() @TypeOf(GLEW_GET_FUN(__glewLGPUInterlockNVX)) {
    return GLEW_GET_FUN(__glewLGPUInterlockNVX);
}
// /usr/include/GL/glew.h:14914:9: warning: macro 'glLGPUNamedBufferSubDataNVX' contains a runtime value, translated to function
pub inline fn glLGPUNamedBufferSubDataNVX() @TypeOf(GLEW_GET_FUN(__glewLGPUNamedBufferSubDataNVX)) {
    return GLEW_GET_FUN(__glewLGPUNamedBufferSubDataNVX);
}
// /usr/include/GL/glew.h:14916:9: warning: macro 'GLEW_NVX_linked_gpu_multicast' contains a runtime value, translated to function
pub inline fn GLEW_NVX_linked_gpu_multicast() @TypeOf(GLEW_GET_VAR(__GLEW_NVX_linked_gpu_multicast)) {
    return GLEW_GET_VAR(__GLEW_NVX_linked_gpu_multicast);
}
pub const GL_NVX_progress_fence = @as(c_int, 1);
// /usr/include/GL/glew.h:14929:9: warning: macro 'glClientWaitSemaphoreui64NVX' contains a runtime value, translated to function
pub inline fn glClientWaitSemaphoreui64NVX() @TypeOf(GLEW_GET_FUN(__glewClientWaitSemaphoreui64NVX)) {
    return GLEW_GET_FUN(__glewClientWaitSemaphoreui64NVX);
}
// /usr/include/GL/glew.h:14930:9: warning: macro 'glSignalSemaphoreui64NVX' contains a runtime value, translated to function
pub inline fn glSignalSemaphoreui64NVX() @TypeOf(GLEW_GET_FUN(__glewSignalSemaphoreui64NVX)) {
    return GLEW_GET_FUN(__glewSignalSemaphoreui64NVX);
}
// /usr/include/GL/glew.h:14931:9: warning: macro 'glWaitSemaphoreui64NVX' contains a runtime value, translated to function
pub inline fn glWaitSemaphoreui64NVX() @TypeOf(GLEW_GET_FUN(__glewWaitSemaphoreui64NVX)) {
    return GLEW_GET_FUN(__glewWaitSemaphoreui64NVX);
}
// /usr/include/GL/glew.h:14933:9: warning: macro 'GLEW_NVX_progress_fence' contains a runtime value, translated to function
pub inline fn GLEW_NVX_progress_fence() @TypeOf(GLEW_GET_VAR(__GLEW_NVX_progress_fence)) {
    return GLEW_GET_VAR(__GLEW_NVX_progress_fence);
}
pub const GL_NV_3dvision_settings = @as(c_int, 1);
pub const GL_3DVISION_STEREO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F4, .hex);
pub const GL_STEREO_SEPARATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F5, .hex);
pub const GL_STEREO_CONVERGENCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F6, .hex);
pub const GL_STEREO_CUTOFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F7, .hex);
pub const GL_STEREO_PROJECTION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F8, .hex);
pub const GL_STEREO_PROJECTION_PERSPECTIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F9, .hex);
pub const GL_STEREO_PROJECTION_ORTHO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90FA, .hex);
// /usr/include/GL/glew.h:14953:9: warning: macro 'glStereoParameterfNV' contains a runtime value, translated to function
pub inline fn glStereoParameterfNV() @TypeOf(GLEW_GET_FUN(__glewStereoParameterfNV)) {
    return GLEW_GET_FUN(__glewStereoParameterfNV);
}
// /usr/include/GL/glew.h:14954:9: warning: macro 'glStereoParameteriNV' contains a runtime value, translated to function
pub inline fn glStereoParameteriNV() @TypeOf(GLEW_GET_FUN(__glewStereoParameteriNV)) {
    return GLEW_GET_FUN(__glewStereoParameteriNV);
}
// /usr/include/GL/glew.h:14956:9: warning: macro 'GLEW_NV_3dvision_settings' contains a runtime value, translated to function
pub inline fn GLEW_NV_3dvision_settings() @TypeOf(GLEW_GET_VAR(__GLEW_NV_3dvision_settings)) {
    return GLEW_GET_VAR(__GLEW_NV_3dvision_settings);
}
pub const GL_NV_EGL_stream_consumer_external = @as(c_int, 1);
pub const GL_TEXTURE_EXTERNAL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D65, .hex);
pub const GL_SAMPLER_EXTERNAL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D66, .hex);
pub const GL_TEXTURE_BINDING_EXTERNAL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D67, .hex);
pub const GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D68, .hex);
// /usr/include/GL/glew.h:14970:9: warning: macro 'GLEW_NV_EGL_stream_consumer_external' contains a runtime value, translated to function
pub inline fn GLEW_NV_EGL_stream_consumer_external() @TypeOf(GLEW_GET_VAR(__GLEW_NV_EGL_stream_consumer_external)) {
    return GLEW_GET_VAR(__GLEW_NV_EGL_stream_consumer_external);
}
pub const GL_NV_alpha_to_coverage_dither_control = @as(c_int, 1);
pub const GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BF, .hex);
pub const GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934D, .hex);
pub const GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934E, .hex);
pub const GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934F, .hex);
// /usr/include/GL/glew.h:14986:9: warning: macro 'glAlphaToCoverageDitherControlNV' contains a runtime value, translated to function
pub inline fn glAlphaToCoverageDitherControlNV() @TypeOf(GLEW_GET_FUN(__glewAlphaToCoverageDitherControlNV)) {
    return GLEW_GET_FUN(__glewAlphaToCoverageDitherControlNV);
}
// /usr/include/GL/glew.h:14988:9: warning: macro 'GLEW_NV_alpha_to_coverage_dither_control' contains a runtime value, translated to function
pub inline fn GLEW_NV_alpha_to_coverage_dither_control() @TypeOf(GLEW_GET_VAR(__GLEW_NV_alpha_to_coverage_dither_control)) {
    return GLEW_GET_VAR(__GLEW_NV_alpha_to_coverage_dither_control);
}
pub const GL_NV_bgr = @as(c_int, 1);
pub const GL_BGR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E0, .hex);
// /usr/include/GL/glew.h:14999:9: warning: macro 'GLEW_NV_bgr' contains a runtime value, translated to function
pub inline fn GLEW_NV_bgr() @TypeOf(GLEW_GET_VAR(__GLEW_NV_bgr)) {
    return GLEW_GET_VAR(__GLEW_NV_bgr);
}
pub const GL_NV_bindless_multi_draw_indirect = @as(c_int, 1);
// /usr/include/GL/glew.h:15011:9: warning: macro 'glMultiDrawArraysIndirectBindlessNV' contains a runtime value, translated to function
pub inline fn glMultiDrawArraysIndirectBindlessNV() @TypeOf(GLEW_GET_FUN(__glewMultiDrawArraysIndirectBindlessNV)) {
    return GLEW_GET_FUN(__glewMultiDrawArraysIndirectBindlessNV);
}
// /usr/include/GL/glew.h:15012:9: warning: macro 'glMultiDrawElementsIndirectBindlessNV' contains a runtime value, translated to function
pub inline fn glMultiDrawElementsIndirectBindlessNV() @TypeOf(GLEW_GET_FUN(__glewMultiDrawElementsIndirectBindlessNV)) {
    return GLEW_GET_FUN(__glewMultiDrawElementsIndirectBindlessNV);
}
// /usr/include/GL/glew.h:15014:9: warning: macro 'GLEW_NV_bindless_multi_draw_indirect' contains a runtime value, translated to function
pub inline fn GLEW_NV_bindless_multi_draw_indirect() @TypeOf(GLEW_GET_VAR(__GLEW_NV_bindless_multi_draw_indirect)) {
    return GLEW_GET_VAR(__GLEW_NV_bindless_multi_draw_indirect);
}
pub const GL_NV_bindless_multi_draw_indirect_count = @as(c_int, 1);
// /usr/include/GL/glew.h:15026:9: warning: macro 'glMultiDrawArraysIndirectBindlessCountNV' contains a runtime value, translated to function
pub inline fn glMultiDrawArraysIndirectBindlessCountNV() @TypeOf(GLEW_GET_FUN(__glewMultiDrawArraysIndirectBindlessCountNV)) {
    return GLEW_GET_FUN(__glewMultiDrawArraysIndirectBindlessCountNV);
}
// /usr/include/GL/glew.h:15027:9: warning: macro 'glMultiDrawElementsIndirectBindlessCountNV' contains a runtime value, translated to function
pub inline fn glMultiDrawElementsIndirectBindlessCountNV() @TypeOf(GLEW_GET_FUN(__glewMultiDrawElementsIndirectBindlessCountNV)) {
    return GLEW_GET_FUN(__glewMultiDrawElementsIndirectBindlessCountNV);
}
// /usr/include/GL/glew.h:15029:9: warning: macro 'GLEW_NV_bindless_multi_draw_indirect_count' contains a runtime value, translated to function
pub inline fn GLEW_NV_bindless_multi_draw_indirect_count() @TypeOf(GLEW_GET_VAR(__GLEW_NV_bindless_multi_draw_indirect_count)) {
    return GLEW_GET_VAR(__GLEW_NV_bindless_multi_draw_indirect_count);
}
pub const GL_NV_bindless_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:15052:9: warning: macro 'glGetImageHandleNV' contains a runtime value, translated to function
pub inline fn glGetImageHandleNV() @TypeOf(GLEW_GET_FUN(__glewGetImageHandleNV)) {
    return GLEW_GET_FUN(__glewGetImageHandleNV);
}
// /usr/include/GL/glew.h:15053:9: warning: macro 'glGetTextureHandleNV' contains a runtime value, translated to function
pub inline fn glGetTextureHandleNV() @TypeOf(GLEW_GET_FUN(__glewGetTextureHandleNV)) {
    return GLEW_GET_FUN(__glewGetTextureHandleNV);
}
// /usr/include/GL/glew.h:15054:9: warning: macro 'glGetTextureSamplerHandleNV' contains a runtime value, translated to function
pub inline fn glGetTextureSamplerHandleNV() @TypeOf(GLEW_GET_FUN(__glewGetTextureSamplerHandleNV)) {
    return GLEW_GET_FUN(__glewGetTextureSamplerHandleNV);
}
// /usr/include/GL/glew.h:15055:9: warning: macro 'glIsImageHandleResidentNV' contains a runtime value, translated to function
pub inline fn glIsImageHandleResidentNV() @TypeOf(GLEW_GET_FUN(__glewIsImageHandleResidentNV)) {
    return GLEW_GET_FUN(__glewIsImageHandleResidentNV);
}
// /usr/include/GL/glew.h:15056:9: warning: macro 'glIsTextureHandleResidentNV' contains a runtime value, translated to function
pub inline fn glIsTextureHandleResidentNV() @TypeOf(GLEW_GET_FUN(__glewIsTextureHandleResidentNV)) {
    return GLEW_GET_FUN(__glewIsTextureHandleResidentNV);
}
// /usr/include/GL/glew.h:15057:9: warning: macro 'glMakeImageHandleNonResidentNV' contains a runtime value, translated to function
pub inline fn glMakeImageHandleNonResidentNV() @TypeOf(GLEW_GET_FUN(__glewMakeImageHandleNonResidentNV)) {
    return GLEW_GET_FUN(__glewMakeImageHandleNonResidentNV);
}
// /usr/include/GL/glew.h:15058:9: warning: macro 'glMakeImageHandleResidentNV' contains a runtime value, translated to function
pub inline fn glMakeImageHandleResidentNV() @TypeOf(GLEW_GET_FUN(__glewMakeImageHandleResidentNV)) {
    return GLEW_GET_FUN(__glewMakeImageHandleResidentNV);
}
// /usr/include/GL/glew.h:15059:9: warning: macro 'glMakeTextureHandleNonResidentNV' contains a runtime value, translated to function
pub inline fn glMakeTextureHandleNonResidentNV() @TypeOf(GLEW_GET_FUN(__glewMakeTextureHandleNonResidentNV)) {
    return GLEW_GET_FUN(__glewMakeTextureHandleNonResidentNV);
}
// /usr/include/GL/glew.h:15060:9: warning: macro 'glMakeTextureHandleResidentNV' contains a runtime value, translated to function
pub inline fn glMakeTextureHandleResidentNV() @TypeOf(GLEW_GET_FUN(__glewMakeTextureHandleResidentNV)) {
    return GLEW_GET_FUN(__glewMakeTextureHandleResidentNV);
}
// /usr/include/GL/glew.h:15061:9: warning: macro 'glProgramUniformHandleui64NV' contains a runtime value, translated to function
pub inline fn glProgramUniformHandleui64NV() @TypeOf(GLEW_GET_FUN(__glewProgramUniformHandleui64NV)) {
    return GLEW_GET_FUN(__glewProgramUniformHandleui64NV);
}
// /usr/include/GL/glew.h:15062:9: warning: macro 'glProgramUniformHandleui64vNV' contains a runtime value, translated to function
pub inline fn glProgramUniformHandleui64vNV() @TypeOf(GLEW_GET_FUN(__glewProgramUniformHandleui64vNV)) {
    return GLEW_GET_FUN(__glewProgramUniformHandleui64vNV);
}
// /usr/include/GL/glew.h:15063:9: warning: macro 'glUniformHandleui64NV' contains a runtime value, translated to function
pub inline fn glUniformHandleui64NV() @TypeOf(GLEW_GET_FUN(__glewUniformHandleui64NV)) {
    return GLEW_GET_FUN(__glewUniformHandleui64NV);
}
// /usr/include/GL/glew.h:15064:9: warning: macro 'glUniformHandleui64vNV' contains a runtime value, translated to function
pub inline fn glUniformHandleui64vNV() @TypeOf(GLEW_GET_FUN(__glewUniformHandleui64vNV)) {
    return GLEW_GET_FUN(__glewUniformHandleui64vNV);
}
// /usr/include/GL/glew.h:15066:9: warning: macro 'GLEW_NV_bindless_texture' contains a runtime value, translated to function
pub inline fn GLEW_NV_bindless_texture() @TypeOf(GLEW_GET_VAR(__GLEW_NV_bindless_texture)) {
    return GLEW_GET_VAR(__GLEW_NV_bindless_texture);
}
pub const GL_NV_blend_equation_advanced = @as(c_int, 1);
pub const GL_XOR_NV = @as(c_int, 0x1506);
pub const GL_RED_NV = @as(c_int, 0x1903);
pub const GL_GREEN_NV = @as(c_int, 0x1904);
pub const GL_BLUE_NV = @as(c_int, 0x1905);
pub const GL_BLEND_PREMULTIPLIED_SRC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9280, .hex);
pub const GL_BLEND_OVERLAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9281, .hex);
pub const GL_UNCORRELATED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9282, .hex);
pub const GL_DISJOINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9283, .hex);
pub const GL_CONJOINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9284, .hex);
pub const GL_BLEND_ADVANCED_COHERENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9285, .hex);
pub const GL_SRC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9286, .hex);
pub const GL_DST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9287, .hex);
pub const GL_SRC_OVER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9288, .hex);
pub const GL_DST_OVER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9289, .hex);
pub const GL_SRC_IN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928A, .hex);
pub const GL_DST_IN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928B, .hex);
pub const GL_SRC_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928C, .hex);
pub const GL_DST_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928D, .hex);
pub const GL_SRC_ATOP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928E, .hex);
pub const GL_DST_ATOP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928F, .hex);
pub const GL_PLUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9291, .hex);
pub const GL_PLUS_DARKER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9292, .hex);
pub const GL_MULTIPLY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9294, .hex);
pub const GL_SCREEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9295, .hex);
pub const GL_OVERLAY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9296, .hex);
pub const GL_DARKEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9297, .hex);
pub const GL_LIGHTEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9298, .hex);
pub const GL_COLORDODGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9299, .hex);
pub const GL_COLORBURN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929A, .hex);
pub const GL_HARDLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929B, .hex);
pub const GL_SOFTLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929C, .hex);
pub const GL_DIFFERENCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929E, .hex);
pub const GL_MINUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929F, .hex);
pub const GL_EXCLUSION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A0, .hex);
pub const GL_CONTRAST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A1, .hex);
pub const GL_INVERT_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A3, .hex);
pub const GL_LINEARDODGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A4, .hex);
pub const GL_LINEARBURN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A5, .hex);
pub const GL_VIVIDLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A6, .hex);
pub const GL_LINEARLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A7, .hex);
pub const GL_PINLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A8, .hex);
pub const GL_HARDMIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A9, .hex);
pub const GL_HSL_HUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AD, .hex);
pub const GL_HSL_SATURATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AE, .hex);
pub const GL_HSL_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AF, .hex);
pub const GL_HSL_LUMINOSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B0, .hex);
pub const GL_PLUS_CLAMPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B1, .hex);
pub const GL_PLUS_CLAMPED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B2, .hex);
pub const GL_MINUS_CLAMPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B3, .hex);
pub const GL_INVERT_OVG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B4, .hex);
// /usr/include/GL/glew.h:15129:9: warning: macro 'glBlendBarrierNV' contains a runtime value, translated to function
pub inline fn glBlendBarrierNV() @TypeOf(GLEW_GET_FUN(__glewBlendBarrierNV)) {
    return GLEW_GET_FUN(__glewBlendBarrierNV);
}
// /usr/include/GL/glew.h:15130:9: warning: macro 'glBlendParameteriNV' contains a runtime value, translated to function
pub inline fn glBlendParameteriNV() @TypeOf(GLEW_GET_FUN(__glewBlendParameteriNV)) {
    return GLEW_GET_FUN(__glewBlendParameteriNV);
}
// /usr/include/GL/glew.h:15132:9: warning: macro 'GLEW_NV_blend_equation_advanced' contains a runtime value, translated to function
pub inline fn GLEW_NV_blend_equation_advanced() @TypeOf(GLEW_GET_VAR(__GLEW_NV_blend_equation_advanced)) {
    return GLEW_GET_VAR(__GLEW_NV_blend_equation_advanced);
}
pub const GL_NV_blend_equation_advanced_coherent = @as(c_int, 1);
// /usr/include/GL/glew.h:15141:9: warning: macro 'GLEW_NV_blend_equation_advanced_coherent' contains a runtime value, translated to function
pub inline fn GLEW_NV_blend_equation_advanced_coherent() @TypeOf(GLEW_GET_VAR(__GLEW_NV_blend_equation_advanced_coherent)) {
    return GLEW_GET_VAR(__GLEW_NV_blend_equation_advanced_coherent);
}
pub const GL_NV_blend_minmax_factor = @as(c_int, 1);
// /usr/include/GL/glew.h:15153:9: warning: macro 'GLEW_NV_blend_minmax_factor' contains a runtime value, translated to function
pub inline fn GLEW_NV_blend_minmax_factor() @TypeOf(GLEW_GET_VAR(__GLEW_NV_blend_minmax_factor)) {
    return GLEW_GET_VAR(__GLEW_NV_blend_minmax_factor);
}
pub const GL_NV_blend_square = @as(c_int, 1);
// /usr/include/GL/glew.h:15162:9: warning: macro 'GLEW_NV_blend_square' contains a runtime value, translated to function
pub inline fn GLEW_NV_blend_square() @TypeOf(GLEW_GET_VAR(__GLEW_NV_blend_square)) {
    return GLEW_GET_VAR(__GLEW_NV_blend_square);
}
pub const GL_NV_clip_space_w_scaling = @as(c_int, 1);
pub const GL_VIEWPORT_POSITION_W_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937C, .hex);
pub const GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937D, .hex);
pub const GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937E, .hex);
// /usr/include/GL/glew.h:15177:9: warning: macro 'glViewportPositionWScaleNV' contains a runtime value, translated to function
pub inline fn glViewportPositionWScaleNV() @TypeOf(GLEW_GET_FUN(__glewViewportPositionWScaleNV)) {
    return GLEW_GET_FUN(__glewViewportPositionWScaleNV);
}
// /usr/include/GL/glew.h:15179:9: warning: macro 'GLEW_NV_clip_space_w_scaling' contains a runtime value, translated to function
pub inline fn GLEW_NV_clip_space_w_scaling() @TypeOf(GLEW_GET_VAR(__GLEW_NV_clip_space_w_scaling)) {
    return GLEW_GET_VAR(__GLEW_NV_clip_space_w_scaling);
}
pub const GL_NV_command_list = @as(c_int, 1);
pub const GL_TERMINATE_SEQUENCE_COMMAND_NV = @as(c_int, 0x0000);
pub const GL_NOP_COMMAND_NV = @as(c_int, 0x0001);
pub const GL_DRAW_ELEMENTS_COMMAND_NV = @as(c_int, 0x0002);
pub const GL_DRAW_ARRAYS_COMMAND_NV = @as(c_int, 0x0003);
pub const GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = @as(c_int, 0x0004);
pub const GL_DRAW_ARRAYS_STRIP_COMMAND_NV = @as(c_int, 0x0005);
pub const GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = @as(c_int, 0x0006);
pub const GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = @as(c_int, 0x0007);
pub const GL_ELEMENT_ADDRESS_COMMAND_NV = @as(c_int, 0x0008);
pub const GL_ATTRIBUTE_ADDRESS_COMMAND_NV = @as(c_int, 0x0009);
pub const GL_UNIFORM_ADDRESS_COMMAND_NV = @as(c_int, 0x000a);
pub const GL_BLEND_COLOR_COMMAND_NV = @as(c_int, 0x000b);
pub const GL_STENCIL_REF_COMMAND_NV = @as(c_int, 0x000c);
pub const GL_LINE_WIDTH_COMMAND_NV = @as(c_int, 0x000d);
pub const GL_POLYGON_OFFSET_COMMAND_NV = @as(c_int, 0x000e);
pub const GL_ALPHA_REF_COMMAND_NV = @as(c_int, 0x000f);
pub const GL_VIEWPORT_COMMAND_NV = @as(c_int, 0x0010);
pub const GL_SCISSOR_COMMAND_NV = @as(c_int, 0x0011);
pub const GL_FRONT_FACE_COMMAND_NV = @as(c_int, 0x0012);
// /usr/include/GL/glew.h:15226:9: warning: macro 'glCallCommandListNV' contains a runtime value, translated to function
pub inline fn glCallCommandListNV() @TypeOf(GLEW_GET_FUN(__glewCallCommandListNV)) {
    return GLEW_GET_FUN(__glewCallCommandListNV);
}
// /usr/include/GL/glew.h:15227:9: warning: macro 'glCommandListSegmentsNV' contains a runtime value, translated to function
pub inline fn glCommandListSegmentsNV() @TypeOf(GLEW_GET_FUN(__glewCommandListSegmentsNV)) {
    return GLEW_GET_FUN(__glewCommandListSegmentsNV);
}
// /usr/include/GL/glew.h:15228:9: warning: macro 'glCompileCommandListNV' contains a runtime value, translated to function
pub inline fn glCompileCommandListNV() @TypeOf(GLEW_GET_FUN(__glewCompileCommandListNV)) {
    return GLEW_GET_FUN(__glewCompileCommandListNV);
}
// /usr/include/GL/glew.h:15229:9: warning: macro 'glCreateCommandListsNV' contains a runtime value, translated to function
pub inline fn glCreateCommandListsNV() @TypeOf(GLEW_GET_FUN(__glewCreateCommandListsNV)) {
    return GLEW_GET_FUN(__glewCreateCommandListsNV);
}
// /usr/include/GL/glew.h:15230:9: warning: macro 'glCreateStatesNV' contains a runtime value, translated to function
pub inline fn glCreateStatesNV() @TypeOf(GLEW_GET_FUN(__glewCreateStatesNV)) {
    return GLEW_GET_FUN(__glewCreateStatesNV);
}
// /usr/include/GL/glew.h:15231:9: warning: macro 'glDeleteCommandListsNV' contains a runtime value, translated to function
pub inline fn glDeleteCommandListsNV() @TypeOf(GLEW_GET_FUN(__glewDeleteCommandListsNV)) {
    return GLEW_GET_FUN(__glewDeleteCommandListsNV);
}
// /usr/include/GL/glew.h:15232:9: warning: macro 'glDeleteStatesNV' contains a runtime value, translated to function
pub inline fn glDeleteStatesNV() @TypeOf(GLEW_GET_FUN(__glewDeleteStatesNV)) {
    return GLEW_GET_FUN(__glewDeleteStatesNV);
}
// /usr/include/GL/glew.h:15233:9: warning: macro 'glDrawCommandsAddressNV' contains a runtime value, translated to function
pub inline fn glDrawCommandsAddressNV() @TypeOf(GLEW_GET_FUN(__glewDrawCommandsAddressNV)) {
    return GLEW_GET_FUN(__glewDrawCommandsAddressNV);
}
// /usr/include/GL/glew.h:15234:9: warning: macro 'glDrawCommandsNV' contains a runtime value, translated to function
pub inline fn glDrawCommandsNV() @TypeOf(GLEW_GET_FUN(__glewDrawCommandsNV)) {
    return GLEW_GET_FUN(__glewDrawCommandsNV);
}
// /usr/include/GL/glew.h:15235:9: warning: macro 'glDrawCommandsStatesAddressNV' contains a runtime value, translated to function
pub inline fn glDrawCommandsStatesAddressNV() @TypeOf(GLEW_GET_FUN(__glewDrawCommandsStatesAddressNV)) {
    return GLEW_GET_FUN(__glewDrawCommandsStatesAddressNV);
}
// /usr/include/GL/glew.h:15236:9: warning: macro 'glDrawCommandsStatesNV' contains a runtime value, translated to function
pub inline fn glDrawCommandsStatesNV() @TypeOf(GLEW_GET_FUN(__glewDrawCommandsStatesNV)) {
    return GLEW_GET_FUN(__glewDrawCommandsStatesNV);
}
// /usr/include/GL/glew.h:15237:9: warning: macro 'glGetCommandHeaderNV' contains a runtime value, translated to function
pub inline fn glGetCommandHeaderNV() @TypeOf(GLEW_GET_FUN(__glewGetCommandHeaderNV)) {
    return GLEW_GET_FUN(__glewGetCommandHeaderNV);
}
// /usr/include/GL/glew.h:15238:9: warning: macro 'glGetStageIndexNV' contains a runtime value, translated to function
pub inline fn glGetStageIndexNV() @TypeOf(GLEW_GET_FUN(__glewGetStageIndexNV)) {
    return GLEW_GET_FUN(__glewGetStageIndexNV);
}
// /usr/include/GL/glew.h:15239:9: warning: macro 'glIsCommandListNV' contains a runtime value, translated to function
pub inline fn glIsCommandListNV() @TypeOf(GLEW_GET_FUN(__glewIsCommandListNV)) {
    return GLEW_GET_FUN(__glewIsCommandListNV);
}
// /usr/include/GL/glew.h:15240:9: warning: macro 'glIsStateNV' contains a runtime value, translated to function
pub inline fn glIsStateNV() @TypeOf(GLEW_GET_FUN(__glewIsStateNV)) {
    return GLEW_GET_FUN(__glewIsStateNV);
}
// /usr/include/GL/glew.h:15241:9: warning: macro 'glListDrawCommandsStatesClientNV' contains a runtime value, translated to function
pub inline fn glListDrawCommandsStatesClientNV() @TypeOf(GLEW_GET_FUN(__glewListDrawCommandsStatesClientNV)) {
    return GLEW_GET_FUN(__glewListDrawCommandsStatesClientNV);
}
// /usr/include/GL/glew.h:15242:9: warning: macro 'glStateCaptureNV' contains a runtime value, translated to function
pub inline fn glStateCaptureNV() @TypeOf(GLEW_GET_FUN(__glewStateCaptureNV)) {
    return GLEW_GET_FUN(__glewStateCaptureNV);
}
// /usr/include/GL/glew.h:15244:9: warning: macro 'GLEW_NV_command_list' contains a runtime value, translated to function
pub inline fn GLEW_NV_command_list() @TypeOf(GLEW_GET_VAR(__GLEW_NV_command_list)) {
    return GLEW_GET_VAR(__GLEW_NV_command_list);
}
pub const GL_NV_compute_program5 = @as(c_int, 1);
pub const GL_COMPUTE_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90FB, .hex);
pub const GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90FC, .hex);
// /usr/include/GL/glew.h:15256:9: warning: macro 'GLEW_NV_compute_program5' contains a runtime value, translated to function
pub inline fn GLEW_NV_compute_program5() @TypeOf(GLEW_GET_VAR(__GLEW_NV_compute_program5)) {
    return GLEW_GET_VAR(__GLEW_NV_compute_program5);
}
pub const GL_NV_compute_shader_derivatives = @as(c_int, 1);
// /usr/include/GL/glew.h:15265:9: warning: macro 'GLEW_NV_compute_shader_derivatives' contains a runtime value, translated to function
pub inline fn GLEW_NV_compute_shader_derivatives() @TypeOf(GLEW_GET_VAR(__GLEW_NV_compute_shader_derivatives)) {
    return GLEW_GET_VAR(__GLEW_NV_compute_shader_derivatives);
}
pub const GL_NV_conditional_render = @as(c_int, 1);
pub const GL_QUERY_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E13, .hex);
pub const GL_QUERY_NO_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E14, .hex);
pub const GL_QUERY_BY_REGION_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E15, .hex);
pub const GL_QUERY_BY_REGION_NO_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E16, .hex);
// /usr/include/GL/glew.h:15282:9: warning: macro 'glBeginConditionalRenderNV' contains a runtime value, translated to function
pub inline fn glBeginConditionalRenderNV() @TypeOf(GLEW_GET_FUN(__glewBeginConditionalRenderNV)) {
    return GLEW_GET_FUN(__glewBeginConditionalRenderNV);
}
// /usr/include/GL/glew.h:15283:9: warning: macro 'glEndConditionalRenderNV' contains a runtime value, translated to function
pub inline fn glEndConditionalRenderNV() @TypeOf(GLEW_GET_FUN(__glewEndConditionalRenderNV)) {
    return GLEW_GET_FUN(__glewEndConditionalRenderNV);
}
// /usr/include/GL/glew.h:15285:9: warning: macro 'GLEW_NV_conditional_render' contains a runtime value, translated to function
pub inline fn GLEW_NV_conditional_render() @TypeOf(GLEW_GET_VAR(__GLEW_NV_conditional_render)) {
    return GLEW_GET_VAR(__GLEW_NV_conditional_render);
}
pub const GL_NV_conservative_raster = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTERIZATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9346, .hex);
pub const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9347, .hex);
pub const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9348, .hex);
pub const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9349, .hex);
// /usr/include/GL/glew.h:15301:9: warning: macro 'glSubpixelPrecisionBiasNV' contains a runtime value, translated to function
pub inline fn glSubpixelPrecisionBiasNV() @TypeOf(GLEW_GET_FUN(__glewSubpixelPrecisionBiasNV)) {
    return GLEW_GET_FUN(__glewSubpixelPrecisionBiasNV);
}
// /usr/include/GL/glew.h:15303:9: warning: macro 'GLEW_NV_conservative_raster' contains a runtime value, translated to function
pub inline fn GLEW_NV_conservative_raster() @TypeOf(GLEW_GET_VAR(__GLEW_NV_conservative_raster)) {
    return GLEW_GET_VAR(__GLEW_NV_conservative_raster);
}
pub const GL_NV_conservative_raster_dilate = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTER_DILATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9379, .hex);
pub const GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937A, .hex);
pub const GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937B, .hex);
// /usr/include/GL/glew.h:15318:9: warning: macro 'glConservativeRasterParameterfNV' contains a runtime value, translated to function
pub inline fn glConservativeRasterParameterfNV() @TypeOf(GLEW_GET_FUN(__glewConservativeRasterParameterfNV)) {
    return GLEW_GET_FUN(__glewConservativeRasterParameterfNV);
}
// /usr/include/GL/glew.h:15320:9: warning: macro 'GLEW_NV_conservative_raster_dilate' contains a runtime value, translated to function
pub inline fn GLEW_NV_conservative_raster_dilate() @TypeOf(GLEW_GET_VAR(__GLEW_NV_conservative_raster_dilate)) {
    return GLEW_GET_VAR(__GLEW_NV_conservative_raster_dilate);
}
pub const GL_NV_conservative_raster_pre_snap = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9550, .hex);
// /usr/include/GL/glew.h:15331:9: warning: macro 'GLEW_NV_conservative_raster_pre_snap' contains a runtime value, translated to function
pub inline fn GLEW_NV_conservative_raster_pre_snap() @TypeOf(GLEW_GET_VAR(__GLEW_NV_conservative_raster_pre_snap)) {
    return GLEW_GET_VAR(__GLEW_NV_conservative_raster_pre_snap);
}
pub const GL_NV_conservative_raster_pre_snap_triangles = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954D, .hex);
pub const GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954E, .hex);
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954F, .hex);
// /usr/include/GL/glew.h:15346:9: warning: macro 'glConservativeRasterParameteriNV' contains a runtime value, translated to function
pub inline fn glConservativeRasterParameteriNV() @TypeOf(GLEW_GET_FUN(__glewConservativeRasterParameteriNV)) {
    return GLEW_GET_FUN(__glewConservativeRasterParameteriNV);
}
// /usr/include/GL/glew.h:15348:9: warning: macro 'GLEW_NV_conservative_raster_pre_snap_triangles' contains a runtime value, translated to function
pub inline fn GLEW_NV_conservative_raster_pre_snap_triangles() @TypeOf(GLEW_GET_VAR(__GLEW_NV_conservative_raster_pre_snap_triangles)) {
    return GLEW_GET_VAR(__GLEW_NV_conservative_raster_pre_snap_triangles);
}
pub const GL_NV_conservative_raster_underestimation = @as(c_int, 1);
// /usr/include/GL/glew.h:15357:9: warning: macro 'GLEW_NV_conservative_raster_underestimation' contains a runtime value, translated to function
pub inline fn GLEW_NV_conservative_raster_underestimation() @TypeOf(GLEW_GET_VAR(__GLEW_NV_conservative_raster_underestimation)) {
    return GLEW_GET_VAR(__GLEW_NV_conservative_raster_underestimation);
}
pub const GL_NV_copy_buffer = @as(c_int, 1);
pub const GL_COPY_READ_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hex);
pub const GL_COPY_WRITE_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hex);
// /usr/include/GL/glew.h:15371:9: warning: macro 'glCopyBufferSubDataNV' contains a runtime value, translated to function
pub inline fn glCopyBufferSubDataNV() @TypeOf(GLEW_GET_FUN(__glewCopyBufferSubDataNV)) {
    return GLEW_GET_FUN(__glewCopyBufferSubDataNV);
}
// /usr/include/GL/glew.h:15373:9: warning: macro 'GLEW_NV_copy_buffer' contains a runtime value, translated to function
pub inline fn GLEW_NV_copy_buffer() @TypeOf(GLEW_GET_VAR(__GLEW_NV_copy_buffer)) {
    return GLEW_GET_VAR(__GLEW_NV_copy_buffer);
}
pub const GL_NV_copy_depth_to_color = @as(c_int, 1);
pub const GL_DEPTH_STENCIL_TO_RGBA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886E, .hex);
pub const GL_DEPTH_STENCIL_TO_BGRA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886F, .hex);
// /usr/include/GL/glew.h:15385:9: warning: macro 'GLEW_NV_copy_depth_to_color' contains a runtime value, translated to function
pub inline fn GLEW_NV_copy_depth_to_color() @TypeOf(GLEW_GET_VAR(__GLEW_NV_copy_depth_to_color)) {
    return GLEW_GET_VAR(__GLEW_NV_copy_depth_to_color);
}
pub const GL_NV_copy_image = @as(c_int, 1);
// /usr/include/GL/glew.h:15396:9: warning: macro 'glCopyImageSubDataNV' contains a runtime value, translated to function
pub inline fn glCopyImageSubDataNV() @TypeOf(GLEW_GET_FUN(__glewCopyImageSubDataNV)) {
    return GLEW_GET_FUN(__glewCopyImageSubDataNV);
}
// /usr/include/GL/glew.h:15398:9: warning: macro 'GLEW_NV_copy_image' contains a runtime value, translated to function
pub inline fn GLEW_NV_copy_image() @TypeOf(GLEW_GET_VAR(__GLEW_NV_copy_image)) {
    return GLEW_GET_VAR(__GLEW_NV_copy_image);
}
pub const GL_NV_deep_texture3D = @as(c_int, 1);
pub const GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D0, .hex);
pub const GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D1, .hex);
// /usr/include/GL/glew.h:15410:9: warning: macro 'GLEW_NV_deep_texture3D' contains a runtime value, translated to function
pub inline fn GLEW_NV_deep_texture3D() @TypeOf(GLEW_GET_VAR(__GLEW_NV_deep_texture3D)) {
    return GLEW_GET_VAR(__GLEW_NV_deep_texture3D);
}
pub const GL_NV_depth_buffer_float = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT32F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAB, .hex);
pub const GL_DEPTH32F_STENCIL8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAC, .hex);
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAD, .hex);
pub const GL_DEPTH_BUFFER_FLOAT_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAF, .hex);
// /usr/include/GL/glew.h:15428:9: warning: macro 'glClearDepthdNV' contains a runtime value, translated to function
pub inline fn glClearDepthdNV() @TypeOf(GLEW_GET_FUN(__glewClearDepthdNV)) {
    return GLEW_GET_FUN(__glewClearDepthdNV);
}
// /usr/include/GL/glew.h:15429:9: warning: macro 'glDepthBoundsdNV' contains a runtime value, translated to function
pub inline fn glDepthBoundsdNV() @TypeOf(GLEW_GET_FUN(__glewDepthBoundsdNV)) {
    return GLEW_GET_FUN(__glewDepthBoundsdNV);
}
// /usr/include/GL/glew.h:15430:9: warning: macro 'glDepthRangedNV' contains a runtime value, translated to function
pub inline fn glDepthRangedNV() @TypeOf(GLEW_GET_FUN(__glewDepthRangedNV)) {
    return GLEW_GET_FUN(__glewDepthRangedNV);
}
// /usr/include/GL/glew.h:15432:9: warning: macro 'GLEW_NV_depth_buffer_float' contains a runtime value, translated to function
pub inline fn GLEW_NV_depth_buffer_float() @TypeOf(GLEW_GET_VAR(__GLEW_NV_depth_buffer_float)) {
    return GLEW_GET_VAR(__GLEW_NV_depth_buffer_float);
}
pub const GL_NV_depth_clamp = @as(c_int, 1);
pub const GL_DEPTH_CLAMP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864F, .hex);
// /usr/include/GL/glew.h:15443:9: warning: macro 'GLEW_NV_depth_clamp' contains a runtime value, translated to function
pub inline fn GLEW_NV_depth_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_NV_depth_clamp)) {
    return GLEW_GET_VAR(__GLEW_NV_depth_clamp);
}
pub const GL_NV_depth_nonlinear = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT16_NONLINEAR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2C, .hex);
// /usr/include/GL/glew.h:15454:9: warning: macro 'GLEW_NV_depth_nonlinear' contains a runtime value, translated to function
pub inline fn GLEW_NV_depth_nonlinear() @TypeOf(GLEW_GET_VAR(__GLEW_NV_depth_nonlinear)) {
    return GLEW_GET_VAR(__GLEW_NV_depth_nonlinear);
}
pub const GL_NV_depth_range_unclamped = @as(c_int, 1);
pub const GL_SAMPLE_COUNT_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hex);
pub const GL_CURRENT_SAMPLE_COUNT_QUERY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hex);
pub const GL_QUERY_RESULT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hex);
pub const GL_QUERY_RESULT_AVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hex);
pub const GL_SAMPLE_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8914, .hex);
// /usr/include/GL/glew.h:15469:9: warning: macro 'GLEW_NV_depth_range_unclamped' contains a runtime value, translated to function
pub inline fn GLEW_NV_depth_range_unclamped() @TypeOf(GLEW_GET_VAR(__GLEW_NV_depth_range_unclamped)) {
    return GLEW_GET_VAR(__GLEW_NV_depth_range_unclamped);
}
pub const GL_NV_draw_buffers = @as(c_int, 1);
pub const GL_MAX_DRAW_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hex);
pub const GL_DRAW_BUFFER0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hex);
pub const GL_DRAW_BUFFER1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hex);
pub const GL_DRAW_BUFFER2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hex);
pub const GL_DRAW_BUFFER3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hex);
pub const GL_DRAW_BUFFER4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hex);
pub const GL_DRAW_BUFFER5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hex);
pub const GL_DRAW_BUFFER6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hex);
pub const GL_DRAW_BUFFER7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hex);
pub const GL_DRAW_BUFFER8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hex);
pub const GL_DRAW_BUFFER9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hex);
pub const GL_DRAW_BUFFER10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hex);
pub const GL_DRAW_BUFFER11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hex);
pub const GL_DRAW_BUFFER12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hex);
pub const GL_DRAW_BUFFER13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hex);
pub const GL_DRAW_BUFFER14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hex);
pub const GL_DRAW_BUFFER15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hex);
pub const GL_COLOR_ATTACHMENT0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hex);
pub const GL_COLOR_ATTACHMENT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hex);
pub const GL_COLOR_ATTACHMENT2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hex);
pub const GL_COLOR_ATTACHMENT3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hex);
pub const GL_COLOR_ATTACHMENT4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hex);
pub const GL_COLOR_ATTACHMENT5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hex);
pub const GL_COLOR_ATTACHMENT6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hex);
pub const GL_COLOR_ATTACHMENT7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hex);
pub const GL_COLOR_ATTACHMENT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hex);
pub const GL_COLOR_ATTACHMENT9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hex);
pub const GL_COLOR_ATTACHMENT10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hex);
pub const GL_COLOR_ATTACHMENT11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hex);
pub const GL_COLOR_ATTACHMENT12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hex);
pub const GL_COLOR_ATTACHMENT13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hex);
pub const GL_COLOR_ATTACHMENT14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hex);
pub const GL_COLOR_ATTACHMENT15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hex);
// /usr/include/GL/glew.h:15514:9: warning: macro 'glDrawBuffersNV' contains a runtime value, translated to function
pub inline fn glDrawBuffersNV() @TypeOf(GLEW_GET_FUN(__glewDrawBuffersNV)) {
    return GLEW_GET_FUN(__glewDrawBuffersNV);
}
// /usr/include/GL/glew.h:15516:9: warning: macro 'GLEW_NV_draw_buffers' contains a runtime value, translated to function
pub inline fn GLEW_NV_draw_buffers() @TypeOf(GLEW_GET_VAR(__GLEW_NV_draw_buffers)) {
    return GLEW_GET_VAR(__GLEW_NV_draw_buffers);
}
pub const GL_NV_draw_instanced = @as(c_int, 1);
// /usr/include/GL/glew.h:15528:9: warning: macro 'glDrawArraysInstancedNV' contains a runtime value, translated to function
pub inline fn glDrawArraysInstancedNV() @TypeOf(GLEW_GET_FUN(__glewDrawArraysInstancedNV)) {
    return GLEW_GET_FUN(__glewDrawArraysInstancedNV);
}
// /usr/include/GL/glew.h:15529:9: warning: macro 'glDrawElementsInstancedNV' contains a runtime value, translated to function
pub inline fn glDrawElementsInstancedNV() @TypeOf(GLEW_GET_FUN(__glewDrawElementsInstancedNV)) {
    return GLEW_GET_FUN(__glewDrawElementsInstancedNV);
}
// /usr/include/GL/glew.h:15531:9: warning: macro 'GLEW_NV_draw_instanced' contains a runtime value, translated to function
pub inline fn GLEW_NV_draw_instanced() @TypeOf(GLEW_GET_VAR(__GLEW_NV_draw_instanced)) {
    return GLEW_GET_VAR(__GLEW_NV_draw_instanced);
}
pub const GL_NV_draw_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:15542:9: warning: macro 'glDrawTextureNV' contains a runtime value, translated to function
pub inline fn glDrawTextureNV() @TypeOf(GLEW_GET_FUN(__glewDrawTextureNV)) {
    return GLEW_GET_FUN(__glewDrawTextureNV);
}
// /usr/include/GL/glew.h:15544:9: warning: macro 'GLEW_NV_draw_texture' contains a runtime value, translated to function
pub inline fn GLEW_NV_draw_texture() @TypeOf(GLEW_GET_VAR(__GLEW_NV_draw_texture)) {
    return GLEW_GET_VAR(__GLEW_NV_draw_texture);
}
pub const GL_NV_draw_vulkan_image = @as(c_int, 1);
// /usr/include/GL/glew.h:15561:9: warning: macro 'glDrawVkImageNV' contains a runtime value, translated to function
pub inline fn glDrawVkImageNV() @TypeOf(GLEW_GET_FUN(__glewDrawVkImageNV)) {
    return GLEW_GET_FUN(__glewDrawVkImageNV);
}
// /usr/include/GL/glew.h:15562:9: warning: macro 'glGetVkProcAddrNV' contains a runtime value, translated to function
pub inline fn glGetVkProcAddrNV() @TypeOf(GLEW_GET_FUN(__glewGetVkProcAddrNV)) {
    return GLEW_GET_FUN(__glewGetVkProcAddrNV);
}
// /usr/include/GL/glew.h:15563:9: warning: macro 'glSignalVkFenceNV' contains a runtime value, translated to function
pub inline fn glSignalVkFenceNV() @TypeOf(GLEW_GET_FUN(__glewSignalVkFenceNV)) {
    return GLEW_GET_FUN(__glewSignalVkFenceNV);
}
// /usr/include/GL/glew.h:15564:9: warning: macro 'glSignalVkSemaphoreNV' contains a runtime value, translated to function
pub inline fn glSignalVkSemaphoreNV() @TypeOf(GLEW_GET_FUN(__glewSignalVkSemaphoreNV)) {
    return GLEW_GET_FUN(__glewSignalVkSemaphoreNV);
}
// /usr/include/GL/glew.h:15565:9: warning: macro 'glWaitVkSemaphoreNV' contains a runtime value, translated to function
pub inline fn glWaitVkSemaphoreNV() @TypeOf(GLEW_GET_FUN(__glewWaitVkSemaphoreNV)) {
    return GLEW_GET_FUN(__glewWaitVkSemaphoreNV);
}
// /usr/include/GL/glew.h:15567:9: warning: macro 'GLEW_NV_draw_vulkan_image' contains a runtime value, translated to function
pub inline fn GLEW_NV_draw_vulkan_image() @TypeOf(GLEW_GET_VAR(__GLEW_NV_draw_vulkan_image)) {
    return GLEW_GET_VAR(__GLEW_NV_draw_vulkan_image);
}
pub const GL_NV_evaluators = @as(c_int, 1);
pub const GL_EVAL_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C0, .hex);
pub const GL_EVAL_TRIANGULAR_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C1, .hex);
pub const GL_MAP_TESSELLATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C2, .hex);
pub const GL_MAP_ATTRIB_U_ORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C3, .hex);
pub const GL_MAP_ATTRIB_V_ORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C4, .hex);
pub const GL_EVAL_FRACTIONAL_TESSELLATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C5, .hex);
pub const GL_EVAL_VERTEX_ATTRIB0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C6, .hex);
pub const GL_EVAL_VERTEX_ATTRIB1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C7, .hex);
pub const GL_EVAL_VERTEX_ATTRIB2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C8, .hex);
pub const GL_EVAL_VERTEX_ATTRIB3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C9, .hex);
pub const GL_EVAL_VERTEX_ATTRIB4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CA, .hex);
pub const GL_EVAL_VERTEX_ATTRIB5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CB, .hex);
pub const GL_EVAL_VERTEX_ATTRIB6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CC, .hex);
pub const GL_EVAL_VERTEX_ATTRIB7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CD, .hex);
pub const GL_EVAL_VERTEX_ATTRIB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CE, .hex);
pub const GL_EVAL_VERTEX_ATTRIB9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CF, .hex);
pub const GL_EVAL_VERTEX_ATTRIB10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D0, .hex);
pub const GL_EVAL_VERTEX_ATTRIB11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D1, .hex);
pub const GL_EVAL_VERTEX_ATTRIB12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D2, .hex);
pub const GL_EVAL_VERTEX_ATTRIB13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D3, .hex);
pub const GL_EVAL_VERTEX_ATTRIB14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D4, .hex);
pub const GL_EVAL_VERTEX_ATTRIB15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D5, .hex);
pub const GL_MAX_MAP_TESSELLATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D6, .hex);
pub const GL_MAX_RATIONAL_EVAL_ORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D7, .hex);
// /usr/include/GL/glew.h:15611:9: warning: macro 'glEvalMapsNV' contains a runtime value, translated to function
pub inline fn glEvalMapsNV() @TypeOf(GLEW_GET_FUN(__glewEvalMapsNV)) {
    return GLEW_GET_FUN(__glewEvalMapsNV);
}
// /usr/include/GL/glew.h:15612:9: warning: macro 'glGetMapAttribParameterfvNV' contains a runtime value, translated to function
pub inline fn glGetMapAttribParameterfvNV() @TypeOf(GLEW_GET_FUN(__glewGetMapAttribParameterfvNV)) {
    return GLEW_GET_FUN(__glewGetMapAttribParameterfvNV);
}
// /usr/include/GL/glew.h:15613:9: warning: macro 'glGetMapAttribParameterivNV' contains a runtime value, translated to function
pub inline fn glGetMapAttribParameterivNV() @TypeOf(GLEW_GET_FUN(__glewGetMapAttribParameterivNV)) {
    return GLEW_GET_FUN(__glewGetMapAttribParameterivNV);
}
// /usr/include/GL/glew.h:15614:9: warning: macro 'glGetMapControlPointsNV' contains a runtime value, translated to function
pub inline fn glGetMapControlPointsNV() @TypeOf(GLEW_GET_FUN(__glewGetMapControlPointsNV)) {
    return GLEW_GET_FUN(__glewGetMapControlPointsNV);
}
// /usr/include/GL/glew.h:15615:9: warning: macro 'glGetMapParameterfvNV' contains a runtime value, translated to function
pub inline fn glGetMapParameterfvNV() @TypeOf(GLEW_GET_FUN(__glewGetMapParameterfvNV)) {
    return GLEW_GET_FUN(__glewGetMapParameterfvNV);
}
// /usr/include/GL/glew.h:15616:9: warning: macro 'glGetMapParameterivNV' contains a runtime value, translated to function
pub inline fn glGetMapParameterivNV() @TypeOf(GLEW_GET_FUN(__glewGetMapParameterivNV)) {
    return GLEW_GET_FUN(__glewGetMapParameterivNV);
}
// /usr/include/GL/glew.h:15617:9: warning: macro 'glMapControlPointsNV' contains a runtime value, translated to function
pub inline fn glMapControlPointsNV() @TypeOf(GLEW_GET_FUN(__glewMapControlPointsNV)) {
    return GLEW_GET_FUN(__glewMapControlPointsNV);
}
// /usr/include/GL/glew.h:15618:9: warning: macro 'glMapParameterfvNV' contains a runtime value, translated to function
pub inline fn glMapParameterfvNV() @TypeOf(GLEW_GET_FUN(__glewMapParameterfvNV)) {
    return GLEW_GET_FUN(__glewMapParameterfvNV);
}
// /usr/include/GL/glew.h:15619:9: warning: macro 'glMapParameterivNV' contains a runtime value, translated to function
pub inline fn glMapParameterivNV() @TypeOf(GLEW_GET_FUN(__glewMapParameterivNV)) {
    return GLEW_GET_FUN(__glewMapParameterivNV);
}
// /usr/include/GL/glew.h:15621:9: warning: macro 'GLEW_NV_evaluators' contains a runtime value, translated to function
pub inline fn GLEW_NV_evaluators() @TypeOf(GLEW_GET_VAR(__GLEW_NV_evaluators)) {
    return GLEW_GET_VAR(__GLEW_NV_evaluators);
}
pub const GL_NV_explicit_attrib_location = @as(c_int, 1);
// /usr/include/GL/glew.h:15630:9: warning: macro 'GLEW_NV_explicit_attrib_location' contains a runtime value, translated to function
pub inline fn GLEW_NV_explicit_attrib_location() @TypeOf(GLEW_GET_VAR(__GLEW_NV_explicit_attrib_location)) {
    return GLEW_GET_VAR(__GLEW_NV_explicit_attrib_location);
}
pub const GL_NV_explicit_multisample = @as(c_int, 1);
pub const GL_SAMPLE_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hex);
pub const GL_SAMPLE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E51, .hex);
pub const GL_SAMPLE_MASK_VALUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E52, .hex);
pub const GL_TEXTURE_BINDING_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E53, .hex);
pub const GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E54, .hex);
pub const GL_TEXTURE_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E55, .hex);
pub const GL_SAMPLER_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E56, .hex);
pub const GL_INT_SAMPLER_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E57, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E58, .hex);
pub const GL_MAX_SAMPLE_MASK_WORDS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E59, .hex);
// /usr/include/GL/glew.h:15654:9: warning: macro 'glGetMultisamplefvNV' contains a runtime value, translated to function
pub inline fn glGetMultisamplefvNV() @TypeOf(GLEW_GET_FUN(__glewGetMultisamplefvNV)) {
    return GLEW_GET_FUN(__glewGetMultisamplefvNV);
}
// /usr/include/GL/glew.h:15655:9: warning: macro 'glSampleMaskIndexedNV' contains a runtime value, translated to function
pub inline fn glSampleMaskIndexedNV() @TypeOf(GLEW_GET_FUN(__glewSampleMaskIndexedNV)) {
    return GLEW_GET_FUN(__glewSampleMaskIndexedNV);
}
// /usr/include/GL/glew.h:15656:9: warning: macro 'glTexRenderbufferNV' contains a runtime value, translated to function
pub inline fn glTexRenderbufferNV() @TypeOf(GLEW_GET_FUN(__glewTexRenderbufferNV)) {
    return GLEW_GET_FUN(__glewTexRenderbufferNV);
}
// /usr/include/GL/glew.h:15658:9: warning: macro 'GLEW_NV_explicit_multisample' contains a runtime value, translated to function
pub inline fn GLEW_NV_explicit_multisample() @TypeOf(GLEW_GET_VAR(__GLEW_NV_explicit_multisample)) {
    return GLEW_GET_VAR(__GLEW_NV_explicit_multisample);
}
pub const GL_NV_fbo_color_attachments = @as(c_int, 1);
pub const GL_MAX_COLOR_ATTACHMENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hex);
// /usr/include/GL/glew.h:15685:9: warning: macro 'GLEW_NV_fbo_color_attachments' contains a runtime value, translated to function
pub inline fn GLEW_NV_fbo_color_attachments() @TypeOf(GLEW_GET_VAR(__GLEW_NV_fbo_color_attachments)) {
    return GLEW_GET_VAR(__GLEW_NV_fbo_color_attachments);
}
pub const GL_NV_fence = @as(c_int, 1);
pub const GL_ALL_COMPLETED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F2, .hex);
pub const GL_FENCE_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F3, .hex);
pub const GL_FENCE_CONDITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F4, .hex);
// /usr/include/GL/glew.h:15706:9: warning: macro 'glDeleteFencesNV' contains a runtime value, translated to function
pub inline fn glDeleteFencesNV() @TypeOf(GLEW_GET_FUN(__glewDeleteFencesNV)) {
    return GLEW_GET_FUN(__glewDeleteFencesNV);
}
// /usr/include/GL/glew.h:15707:9: warning: macro 'glFinishFenceNV' contains a runtime value, translated to function
pub inline fn glFinishFenceNV() @TypeOf(GLEW_GET_FUN(__glewFinishFenceNV)) {
    return GLEW_GET_FUN(__glewFinishFenceNV);
}
// /usr/include/GL/glew.h:15708:9: warning: macro 'glGenFencesNV' contains a runtime value, translated to function
pub inline fn glGenFencesNV() @TypeOf(GLEW_GET_FUN(__glewGenFencesNV)) {
    return GLEW_GET_FUN(__glewGenFencesNV);
}
// /usr/include/GL/glew.h:15709:9: warning: macro 'glGetFenceivNV' contains a runtime value, translated to function
pub inline fn glGetFenceivNV() @TypeOf(GLEW_GET_FUN(__glewGetFenceivNV)) {
    return GLEW_GET_FUN(__glewGetFenceivNV);
}
// /usr/include/GL/glew.h:15710:9: warning: macro 'glIsFenceNV' contains a runtime value, translated to function
pub inline fn glIsFenceNV() @TypeOf(GLEW_GET_FUN(__glewIsFenceNV)) {
    return GLEW_GET_FUN(__glewIsFenceNV);
}
// /usr/include/GL/glew.h:15711:9: warning: macro 'glSetFenceNV' contains a runtime value, translated to function
pub inline fn glSetFenceNV() @TypeOf(GLEW_GET_FUN(__glewSetFenceNV)) {
    return GLEW_GET_FUN(__glewSetFenceNV);
}
// /usr/include/GL/glew.h:15712:9: warning: macro 'glTestFenceNV' contains a runtime value, translated to function
pub inline fn glTestFenceNV() @TypeOf(GLEW_GET_FUN(__glewTestFenceNV)) {
    return GLEW_GET_FUN(__glewTestFenceNV);
}
// /usr/include/GL/glew.h:15714:9: warning: macro 'GLEW_NV_fence' contains a runtime value, translated to function
pub inline fn GLEW_NV_fence() @TypeOf(GLEW_GET_VAR(__GLEW_NV_fence)) {
    return GLEW_GET_VAR(__GLEW_NV_fence);
}
pub const GL_NV_fill_rectangle = @as(c_int, 1);
pub const GL_FILL_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933C, .hex);
// /usr/include/GL/glew.h:15725:9: warning: macro 'GLEW_NV_fill_rectangle' contains a runtime value, translated to function
pub inline fn GLEW_NV_fill_rectangle() @TypeOf(GLEW_GET_VAR(__GLEW_NV_fill_rectangle)) {
    return GLEW_GET_VAR(__GLEW_NV_fill_rectangle);
}
pub const GL_NV_float_buffer = @as(c_int, 1);
pub const GL_FLOAT_R_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8880, .hex);
pub const GL_FLOAT_RG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8881, .hex);
pub const GL_FLOAT_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8882, .hex);
pub const GL_FLOAT_RGBA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8883, .hex);
pub const GL_FLOAT_R16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8884, .hex);
pub const GL_FLOAT_R32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8885, .hex);
pub const GL_FLOAT_RG16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8886, .hex);
pub const GL_FLOAT_RG32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8887, .hex);
pub const GL_FLOAT_RGB16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8888, .hex);
pub const GL_FLOAT_RGB32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8889, .hex);
pub const GL_FLOAT_RGBA16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888A, .hex);
pub const GL_FLOAT_RGBA32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888B, .hex);
pub const GL_TEXTURE_FLOAT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888C, .hex);
pub const GL_FLOAT_CLEAR_COLOR_VALUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888D, .hex);
pub const GL_FLOAT_RGBA_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888E, .hex);
// /usr/include/GL/glew.h:15750:9: warning: macro 'GLEW_NV_float_buffer' contains a runtime value, translated to function
pub inline fn GLEW_NV_float_buffer() @TypeOf(GLEW_GET_VAR(__GLEW_NV_float_buffer)) {
    return GLEW_GET_VAR(__GLEW_NV_float_buffer);
}
pub const GL_NV_fog_distance = @as(c_int, 1);
pub const GL_FOG_DISTANCE_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855A, .hex);
pub const GL_EYE_RADIAL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855B, .hex);
pub const GL_EYE_PLANE_ABSOLUTE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855C, .hex);
// /usr/include/GL/glew.h:15763:9: warning: macro 'GLEW_NV_fog_distance' contains a runtime value, translated to function
pub inline fn GLEW_NV_fog_distance() @TypeOf(GLEW_GET_VAR(__GLEW_NV_fog_distance)) {
    return GLEW_GET_VAR(__GLEW_NV_fog_distance);
}
pub const GL_NV_fragment_coverage_to_color = @as(c_int, 1);
pub const GL_FRAGMENT_COVERAGE_TO_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DD, .hex);
pub const GL_FRAGMENT_COVERAGE_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DE, .hex);
// /usr/include/GL/glew.h:15777:9: warning: macro 'glFragmentCoverageColorNV' contains a runtime value, translated to function
pub inline fn glFragmentCoverageColorNV() @TypeOf(GLEW_GET_FUN(__glewFragmentCoverageColorNV)) {
    return GLEW_GET_FUN(__glewFragmentCoverageColorNV);
}
// /usr/include/GL/glew.h:15779:9: warning: macro 'GLEW_NV_fragment_coverage_to_color' contains a runtime value, translated to function
pub inline fn GLEW_NV_fragment_coverage_to_color() @TypeOf(GLEW_GET_VAR(__GLEW_NV_fragment_coverage_to_color)) {
    return GLEW_GET_VAR(__GLEW_NV_fragment_coverage_to_color);
}
pub const GL_NV_fragment_program = @as(c_int, 1);
pub const GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8868, .hex);
pub const GL_FRAGMENT_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8870, .hex);
pub const GL_MAX_TEXTURE_COORDS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hex);
pub const GL_MAX_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hex);
pub const GL_FRAGMENT_PROGRAM_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8873, .hex);
pub const GL_PROGRAM_ERROR_STRING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8874, .hex);
// /usr/include/GL/glew.h:15802:9: warning: macro 'glGetProgramNamedParameterdvNV' contains a runtime value, translated to function
pub inline fn glGetProgramNamedParameterdvNV() @TypeOf(GLEW_GET_FUN(__glewGetProgramNamedParameterdvNV)) {
    return GLEW_GET_FUN(__glewGetProgramNamedParameterdvNV);
}
// /usr/include/GL/glew.h:15803:9: warning: macro 'glGetProgramNamedParameterfvNV' contains a runtime value, translated to function
pub inline fn glGetProgramNamedParameterfvNV() @TypeOf(GLEW_GET_FUN(__glewGetProgramNamedParameterfvNV)) {
    return GLEW_GET_FUN(__glewGetProgramNamedParameterfvNV);
}
// /usr/include/GL/glew.h:15804:9: warning: macro 'glProgramNamedParameter4dNV' contains a runtime value, translated to function
pub inline fn glProgramNamedParameter4dNV() @TypeOf(GLEW_GET_FUN(__glewProgramNamedParameter4dNV)) {
    return GLEW_GET_FUN(__glewProgramNamedParameter4dNV);
}
// /usr/include/GL/glew.h:15805:9: warning: macro 'glProgramNamedParameter4dvNV' contains a runtime value, translated to function
pub inline fn glProgramNamedParameter4dvNV() @TypeOf(GLEW_GET_FUN(__glewProgramNamedParameter4dvNV)) {
    return GLEW_GET_FUN(__glewProgramNamedParameter4dvNV);
}
// /usr/include/GL/glew.h:15806:9: warning: macro 'glProgramNamedParameter4fNV' contains a runtime value, translated to function
pub inline fn glProgramNamedParameter4fNV() @TypeOf(GLEW_GET_FUN(__glewProgramNamedParameter4fNV)) {
    return GLEW_GET_FUN(__glewProgramNamedParameter4fNV);
}
// /usr/include/GL/glew.h:15807:9: warning: macro 'glProgramNamedParameter4fvNV' contains a runtime value, translated to function
pub inline fn glProgramNamedParameter4fvNV() @TypeOf(GLEW_GET_FUN(__glewProgramNamedParameter4fvNV)) {
    return GLEW_GET_FUN(__glewProgramNamedParameter4fvNV);
}
// /usr/include/GL/glew.h:15809:9: warning: macro 'GLEW_NV_fragment_program' contains a runtime value, translated to function
pub inline fn GLEW_NV_fragment_program() @TypeOf(GLEW_GET_VAR(__GLEW_NV_fragment_program)) {
    return GLEW_GET_VAR(__GLEW_NV_fragment_program);
}
pub const GL_NV_fragment_program2 = @as(c_int, 1);
pub const GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F4, .hex);
pub const GL_MAX_PROGRAM_CALL_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F5, .hex);
pub const GL_MAX_PROGRAM_IF_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F6, .hex);
pub const GL_MAX_PROGRAM_LOOP_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F7, .hex);
pub const GL_MAX_PROGRAM_LOOP_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F8, .hex);
// /usr/include/GL/glew.h:15824:9: warning: macro 'GLEW_NV_fragment_program2' contains a runtime value, translated to function
pub inline fn GLEW_NV_fragment_program2() @TypeOf(GLEW_GET_VAR(__GLEW_NV_fragment_program2)) {
    return GLEW_GET_VAR(__GLEW_NV_fragment_program2);
}
pub const GL_NV_fragment_program4 = @as(c_int, 1);
// /usr/include/GL/glew.h:15833:9: warning: macro 'GLEW_NV_fragment_program4' contains a runtime value, translated to function
pub inline fn GLEW_NV_fragment_program4() @TypeOf(GLEW_GET_VAR(__GLEW_NV_fragment_program4)) {
    return GLEW_GET_VAR(__GLEW_NV_fragment_program4);
}
pub const GL_NV_fragment_program_option = @as(c_int, 1);
// /usr/include/GL/glew.h:15842:9: warning: macro 'GLEW_NV_fragment_program_option' contains a runtime value, translated to function
pub inline fn GLEW_NV_fragment_program_option() @TypeOf(GLEW_GET_VAR(__GLEW_NV_fragment_program_option)) {
    return GLEW_GET_VAR(__GLEW_NV_fragment_program_option);
}
pub const GL_NV_fragment_shader_barycentric = @as(c_int, 1);
// /usr/include/GL/glew.h:15851:9: warning: macro 'GLEW_NV_fragment_shader_barycentric' contains a runtime value, translated to function
pub inline fn GLEW_NV_fragment_shader_barycentric() @TypeOf(GLEW_GET_VAR(__GLEW_NV_fragment_shader_barycentric)) {
    return GLEW_GET_VAR(__GLEW_NV_fragment_shader_barycentric);
}
pub const GL_NV_fragment_shader_interlock = @as(c_int, 1);
// /usr/include/GL/glew.h:15860:9: warning: macro 'GLEW_NV_fragment_shader_interlock' contains a runtime value, translated to function
pub inline fn GLEW_NV_fragment_shader_interlock() @TypeOf(GLEW_GET_VAR(__GLEW_NV_fragment_shader_interlock)) {
    return GLEW_GET_VAR(__GLEW_NV_fragment_shader_interlock);
}
pub const GL_NV_framebuffer_blit = @as(c_int, 1);
pub const GL_DRAW_FRAMEBUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_READ_FRAMEBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hex);
pub const GL_DRAW_FRAMEBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hex);
pub const GL_READ_FRAMEBUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hex);
// /usr/include/GL/glew.h:15876:9: warning: macro 'glBlitFramebufferNV' contains a runtime value, translated to function
pub inline fn glBlitFramebufferNV() @TypeOf(GLEW_GET_FUN(__glewBlitFramebufferNV)) {
    return GLEW_GET_FUN(__glewBlitFramebufferNV);
}
// /usr/include/GL/glew.h:15878:9: warning: macro 'GLEW_NV_framebuffer_blit' contains a runtime value, translated to function
pub inline fn GLEW_NV_framebuffer_blit() @TypeOf(GLEW_GET_VAR(__GLEW_NV_framebuffer_blit)) {
    return GLEW_GET_VAR(__GLEW_NV_framebuffer_blit);
}
pub const GL_NV_framebuffer_mixed_samples = @as(c_int, 1);
// /usr/include/GL/glew.h:15902:9: warning: macro 'GLEW_NV_framebuffer_mixed_samples' contains a runtime value, translated to function
pub inline fn GLEW_NV_framebuffer_mixed_samples() @TypeOf(GLEW_GET_VAR(__GLEW_NV_framebuffer_mixed_samples)) {
    return GLEW_GET_VAR(__GLEW_NV_framebuffer_mixed_samples);
}
pub const GL_NV_framebuffer_multisample = @as(c_int, 1);
pub const GL_RENDERBUFFER_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hex);
pub const GL_MAX_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hex);
// /usr/include/GL/glew.h:15917:9: warning: macro 'glRenderbufferStorageMultisampleNV' contains a runtime value, translated to function
pub inline fn glRenderbufferStorageMultisampleNV() @TypeOf(GLEW_GET_FUN(__glewRenderbufferStorageMultisampleNV)) {
    return GLEW_GET_FUN(__glewRenderbufferStorageMultisampleNV);
}
// /usr/include/GL/glew.h:15919:9: warning: macro 'GLEW_NV_framebuffer_multisample' contains a runtime value, translated to function
pub inline fn GLEW_NV_framebuffer_multisample() @TypeOf(GLEW_GET_VAR(__GLEW_NV_framebuffer_multisample)) {
    return GLEW_GET_VAR(__GLEW_NV_framebuffer_multisample);
}
pub const GL_NV_framebuffer_multisample_coverage = @as(c_int, 1);
pub const GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hex);
pub const GL_RENDERBUFFER_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E10, .hex);
pub const GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E11, .hex);
pub const GL_MULTISAMPLE_COVERAGE_MODES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E12, .hex);
// /usr/include/GL/glew.h:15935:9: warning: macro 'glRenderbufferStorageMultisampleCoverageNV' contains a runtime value, translated to function
pub inline fn glRenderbufferStorageMultisampleCoverageNV() @TypeOf(GLEW_GET_FUN(__glewRenderbufferStorageMultisampleCoverageNV)) {
    return GLEW_GET_FUN(__glewRenderbufferStorageMultisampleCoverageNV);
}
// /usr/include/GL/glew.h:15937:9: warning: macro 'GLEW_NV_framebuffer_multisample_coverage' contains a runtime value, translated to function
pub inline fn GLEW_NV_framebuffer_multisample_coverage() @TypeOf(GLEW_GET_VAR(__GLEW_NV_framebuffer_multisample_coverage)) {
    return GLEW_GET_VAR(__GLEW_NV_framebuffer_multisample_coverage);
}
pub const GL_NV_generate_mipmap_sRGB = @as(c_int, 1);
// /usr/include/GL/glew.h:15946:9: warning: macro 'GLEW_NV_generate_mipmap_sRGB' contains a runtime value, translated to function
pub inline fn GLEW_NV_generate_mipmap_sRGB() @TypeOf(GLEW_GET_VAR(__GLEW_NV_generate_mipmap_sRGB)) {
    return GLEW_GET_VAR(__GLEW_NV_generate_mipmap_sRGB);
}
pub const GL_NV_geometry_program4 = @as(c_int, 1);
pub const GL_GEOMETRY_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C26, .hex);
pub const GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C27, .hex);
pub const GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C28, .hex);
// /usr/include/GL/glew.h:15961:9: warning: macro 'glProgramVertexLimitNV' contains a runtime value, translated to function
pub inline fn glProgramVertexLimitNV() @TypeOf(GLEW_GET_FUN(__glewProgramVertexLimitNV)) {
    return GLEW_GET_FUN(__glewProgramVertexLimitNV);
}
// /usr/include/GL/glew.h:15963:9: warning: macro 'GLEW_NV_geometry_program4' contains a runtime value, translated to function
pub inline fn GLEW_NV_geometry_program4() @TypeOf(GLEW_GET_VAR(__GLEW_NV_geometry_program4)) {
    return GLEW_GET_VAR(__GLEW_NV_geometry_program4);
}
pub const GL_NV_geometry_shader4 = @as(c_int, 1);
// /usr/include/GL/glew.h:15972:9: warning: macro 'GLEW_NV_geometry_shader4' contains a runtime value, translated to function
pub inline fn GLEW_NV_geometry_shader4() @TypeOf(GLEW_GET_VAR(__GLEW_NV_geometry_shader4)) {
    return GLEW_GET_VAR(__GLEW_NV_geometry_shader4);
}
pub const GL_NV_geometry_shader_passthrough = @as(c_int, 1);
// /usr/include/GL/glew.h:15981:9: warning: macro 'GLEW_NV_geometry_shader_passthrough' contains a runtime value, translated to function
pub inline fn GLEW_NV_geometry_shader_passthrough() @TypeOf(GLEW_GET_VAR(__GLEW_NV_geometry_shader_passthrough)) {
    return GLEW_GET_VAR(__GLEW_NV_geometry_shader_passthrough);
}
pub const GL_NV_gpu_multicast = @as(c_int, 1);
pub const GL_PER_GPU_STORAGE_BIT_NV = @as(c_int, 0x0800);
pub const GL_MULTICAST_GPUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BA, .hex);
pub const GL_PER_GPU_STORAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9548, .hex);
pub const GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9549, .hex);
pub const GL_RENDER_GPU_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9558, .hex);
// /usr/include/GL/glew.h:16009:9: warning: macro 'glMulticastBarrierNV' contains a runtime value, translated to function
pub inline fn glMulticastBarrierNV() @TypeOf(GLEW_GET_FUN(__glewMulticastBarrierNV)) {
    return GLEW_GET_FUN(__glewMulticastBarrierNV);
}
// /usr/include/GL/glew.h:16010:9: warning: macro 'glMulticastBlitFramebufferNV' contains a runtime value, translated to function
pub inline fn glMulticastBlitFramebufferNV() @TypeOf(GLEW_GET_FUN(__glewMulticastBlitFramebufferNV)) {
    return GLEW_GET_FUN(__glewMulticastBlitFramebufferNV);
}
// /usr/include/GL/glew.h:16011:9: warning: macro 'glMulticastBufferSubDataNV' contains a runtime value, translated to function
pub inline fn glMulticastBufferSubDataNV() @TypeOf(GLEW_GET_FUN(__glewMulticastBufferSubDataNV)) {
    return GLEW_GET_FUN(__glewMulticastBufferSubDataNV);
}
// /usr/include/GL/glew.h:16012:9: warning: macro 'glMulticastCopyBufferSubDataNV' contains a runtime value, translated to function
pub inline fn glMulticastCopyBufferSubDataNV() @TypeOf(GLEW_GET_FUN(__glewMulticastCopyBufferSubDataNV)) {
    return GLEW_GET_FUN(__glewMulticastCopyBufferSubDataNV);
}
// /usr/include/GL/glew.h:16013:9: warning: macro 'glMulticastCopyImageSubDataNV' contains a runtime value, translated to function
pub inline fn glMulticastCopyImageSubDataNV() @TypeOf(GLEW_GET_FUN(__glewMulticastCopyImageSubDataNV)) {
    return GLEW_GET_FUN(__glewMulticastCopyImageSubDataNV);
}
// /usr/include/GL/glew.h:16014:9: warning: macro 'glMulticastFramebufferSampleLocationsfvNV' contains a runtime value, translated to function
pub inline fn glMulticastFramebufferSampleLocationsfvNV() @TypeOf(GLEW_GET_FUN(__glewMulticastFramebufferSampleLocationsfvNV)) {
    return GLEW_GET_FUN(__glewMulticastFramebufferSampleLocationsfvNV);
}
// /usr/include/GL/glew.h:16015:9: warning: macro 'glMulticastGetQueryObjecti64vNV' contains a runtime value, translated to function
pub inline fn glMulticastGetQueryObjecti64vNV() @TypeOf(GLEW_GET_FUN(__glewMulticastGetQueryObjecti64vNV)) {
    return GLEW_GET_FUN(__glewMulticastGetQueryObjecti64vNV);
}
// /usr/include/GL/glew.h:16016:9: warning: macro 'glMulticastGetQueryObjectivNV' contains a runtime value, translated to function
pub inline fn glMulticastGetQueryObjectivNV() @TypeOf(GLEW_GET_FUN(__glewMulticastGetQueryObjectivNV)) {
    return GLEW_GET_FUN(__glewMulticastGetQueryObjectivNV);
}
// /usr/include/GL/glew.h:16017:9: warning: macro 'glMulticastGetQueryObjectui64vNV' contains a runtime value, translated to function
pub inline fn glMulticastGetQueryObjectui64vNV() @TypeOf(GLEW_GET_FUN(__glewMulticastGetQueryObjectui64vNV)) {
    return GLEW_GET_FUN(__glewMulticastGetQueryObjectui64vNV);
}
// /usr/include/GL/glew.h:16018:9: warning: macro 'glMulticastGetQueryObjectuivNV' contains a runtime value, translated to function
pub inline fn glMulticastGetQueryObjectuivNV() @TypeOf(GLEW_GET_FUN(__glewMulticastGetQueryObjectuivNV)) {
    return GLEW_GET_FUN(__glewMulticastGetQueryObjectuivNV);
}
// /usr/include/GL/glew.h:16019:9: warning: macro 'glMulticastWaitSyncNV' contains a runtime value, translated to function
pub inline fn glMulticastWaitSyncNV() @TypeOf(GLEW_GET_FUN(__glewMulticastWaitSyncNV)) {
    return GLEW_GET_FUN(__glewMulticastWaitSyncNV);
}
// /usr/include/GL/glew.h:16020:9: warning: macro 'glRenderGpuMaskNV' contains a runtime value, translated to function
pub inline fn glRenderGpuMaskNV() @TypeOf(GLEW_GET_FUN(__glewRenderGpuMaskNV)) {
    return GLEW_GET_FUN(__glewRenderGpuMaskNV);
}
// /usr/include/GL/glew.h:16022:9: warning: macro 'GLEW_NV_gpu_multicast' contains a runtime value, translated to function
pub inline fn GLEW_NV_gpu_multicast() @TypeOf(GLEW_GET_VAR(__GLEW_NV_gpu_multicast)) {
    return GLEW_GET_VAR(__GLEW_NV_gpu_multicast);
}
pub const GL_NV_gpu_program4 = @as(c_int, 1);
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8904, .hex);
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8905, .hex);
pub const GL_PROGRAM_ATTRIB_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8906, .hex);
pub const GL_PROGRAM_RESULT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8907, .hex);
pub const GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8908, .hex);
pub const GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8909, .hex);
pub const GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA5, .hex);
pub const GL_MAX_PROGRAM_GENERIC_RESULTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA6, .hex);
// /usr/include/GL/glew.h:16053:9: warning: macro 'glProgramEnvParameterI4iNV' contains a runtime value, translated to function
pub inline fn glProgramEnvParameterI4iNV() @TypeOf(GLEW_GET_FUN(__glewProgramEnvParameterI4iNV)) {
    return GLEW_GET_FUN(__glewProgramEnvParameterI4iNV);
}
// /usr/include/GL/glew.h:16054:9: warning: macro 'glProgramEnvParameterI4ivNV' contains a runtime value, translated to function
pub inline fn glProgramEnvParameterI4ivNV() @TypeOf(GLEW_GET_FUN(__glewProgramEnvParameterI4ivNV)) {
    return GLEW_GET_FUN(__glewProgramEnvParameterI4ivNV);
}
// /usr/include/GL/glew.h:16055:9: warning: macro 'glProgramEnvParameterI4uiNV' contains a runtime value, translated to function
pub inline fn glProgramEnvParameterI4uiNV() @TypeOf(GLEW_GET_FUN(__glewProgramEnvParameterI4uiNV)) {
    return GLEW_GET_FUN(__glewProgramEnvParameterI4uiNV);
}
// /usr/include/GL/glew.h:16056:9: warning: macro 'glProgramEnvParameterI4uivNV' contains a runtime value, translated to function
pub inline fn glProgramEnvParameterI4uivNV() @TypeOf(GLEW_GET_FUN(__glewProgramEnvParameterI4uivNV)) {
    return GLEW_GET_FUN(__glewProgramEnvParameterI4uivNV);
}
// /usr/include/GL/glew.h:16057:9: warning: macro 'glProgramEnvParametersI4ivNV' contains a runtime value, translated to function
pub inline fn glProgramEnvParametersI4ivNV() @TypeOf(GLEW_GET_FUN(__glewProgramEnvParametersI4ivNV)) {
    return GLEW_GET_FUN(__glewProgramEnvParametersI4ivNV);
}
// /usr/include/GL/glew.h:16058:9: warning: macro 'glProgramEnvParametersI4uivNV' contains a runtime value, translated to function
pub inline fn glProgramEnvParametersI4uivNV() @TypeOf(GLEW_GET_FUN(__glewProgramEnvParametersI4uivNV)) {
    return GLEW_GET_FUN(__glewProgramEnvParametersI4uivNV);
}
// /usr/include/GL/glew.h:16059:9: warning: macro 'glProgramLocalParameterI4iNV' contains a runtime value, translated to function
pub inline fn glProgramLocalParameterI4iNV() @TypeOf(GLEW_GET_FUN(__glewProgramLocalParameterI4iNV)) {
    return GLEW_GET_FUN(__glewProgramLocalParameterI4iNV);
}
// /usr/include/GL/glew.h:16060:9: warning: macro 'glProgramLocalParameterI4ivNV' contains a runtime value, translated to function
pub inline fn glProgramLocalParameterI4ivNV() @TypeOf(GLEW_GET_FUN(__glewProgramLocalParameterI4ivNV)) {
    return GLEW_GET_FUN(__glewProgramLocalParameterI4ivNV);
}
// /usr/include/GL/glew.h:16061:9: warning: macro 'glProgramLocalParameterI4uiNV' contains a runtime value, translated to function
pub inline fn glProgramLocalParameterI4uiNV() @TypeOf(GLEW_GET_FUN(__glewProgramLocalParameterI4uiNV)) {
    return GLEW_GET_FUN(__glewProgramLocalParameterI4uiNV);
}
// /usr/include/GL/glew.h:16062:9: warning: macro 'glProgramLocalParameterI4uivNV' contains a runtime value, translated to function
pub inline fn glProgramLocalParameterI4uivNV() @TypeOf(GLEW_GET_FUN(__glewProgramLocalParameterI4uivNV)) {
    return GLEW_GET_FUN(__glewProgramLocalParameterI4uivNV);
}
// /usr/include/GL/glew.h:16063:9: warning: macro 'glProgramLocalParametersI4ivNV' contains a runtime value, translated to function
pub inline fn glProgramLocalParametersI4ivNV() @TypeOf(GLEW_GET_FUN(__glewProgramLocalParametersI4ivNV)) {
    return GLEW_GET_FUN(__glewProgramLocalParametersI4ivNV);
}
// /usr/include/GL/glew.h:16064:9: warning: macro 'glProgramLocalParametersI4uivNV' contains a runtime value, translated to function
pub inline fn glProgramLocalParametersI4uivNV() @TypeOf(GLEW_GET_FUN(__glewProgramLocalParametersI4uivNV)) {
    return GLEW_GET_FUN(__glewProgramLocalParametersI4uivNV);
}
// /usr/include/GL/glew.h:16066:9: warning: macro 'GLEW_NV_gpu_program4' contains a runtime value, translated to function
pub inline fn GLEW_NV_gpu_program4() @TypeOf(GLEW_GET_VAR(__GLEW_NV_gpu_program4)) {
    return GLEW_GET_VAR(__GLEW_NV_gpu_program4);
}
pub const GL_NV_gpu_program5 = @as(c_int, 1);
pub const GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hex);
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5B, .hex);
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5C, .hex);
pub const GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5D, .hex);
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hex);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hex);
// /usr/include/GL/glew.h:16082:9: warning: macro 'GLEW_NV_gpu_program5' contains a runtime value, translated to function
pub inline fn GLEW_NV_gpu_program5() @TypeOf(GLEW_GET_VAR(__GLEW_NV_gpu_program5)) {
    return GLEW_GET_VAR(__GLEW_NV_gpu_program5);
}
pub const GL_NV_gpu_program5_mem_extended = @as(c_int, 1);
// /usr/include/GL/glew.h:16091:9: warning: macro 'GLEW_NV_gpu_program5_mem_extended' contains a runtime value, translated to function
pub inline fn GLEW_NV_gpu_program5_mem_extended() @TypeOf(GLEW_GET_VAR(__GLEW_NV_gpu_program5_mem_extended)) {
    return GLEW_GET_VAR(__GLEW_NV_gpu_program5_mem_extended);
}
pub const GL_NV_gpu_program_fp64 = @as(c_int, 1);
// /usr/include/GL/glew.h:16100:9: warning: macro 'GLEW_NV_gpu_program_fp64' contains a runtime value, translated to function
pub inline fn GLEW_NV_gpu_program_fp64() @TypeOf(GLEW_GET_VAR(__GLEW_NV_gpu_program_fp64)) {
    return GLEW_GET_VAR(__GLEW_NV_gpu_program_fp64);
}
pub const GL_NV_gpu_shader5 = @as(c_int, 1);
pub const GL_INT64_NV = @as(c_int, 0x140E);
pub const GL_UNSIGNED_INT64_NV = @as(c_int, 0x140F);
pub const GL_INT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE0, .hex);
pub const GL_INT8_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE1, .hex);
pub const GL_INT8_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE2, .hex);
pub const GL_INT8_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE3, .hex);
pub const GL_INT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE4, .hex);
pub const GL_INT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE5, .hex);
pub const GL_INT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE6, .hex);
pub const GL_INT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE7, .hex);
pub const GL_INT64_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE9, .hex);
pub const GL_INT64_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEA, .hex);
pub const GL_INT64_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEB, .hex);
pub const GL_UNSIGNED_INT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEC, .hex);
pub const GL_UNSIGNED_INT8_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FED, .hex);
pub const GL_UNSIGNED_INT8_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEE, .hex);
pub const GL_UNSIGNED_INT8_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEF, .hex);
pub const GL_UNSIGNED_INT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF0, .hex);
pub const GL_UNSIGNED_INT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF1, .hex);
pub const GL_UNSIGNED_INT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF2, .hex);
pub const GL_UNSIGNED_INT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF3, .hex);
pub const GL_UNSIGNED_INT64_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF5, .hex);
pub const GL_UNSIGNED_INT64_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF6, .hex);
pub const GL_UNSIGNED_INT64_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF7, .hex);
// /usr/include/GL/glew.h:16173:9: warning: macro 'glGetUniformi64vNV' contains a runtime value, translated to function
pub inline fn glGetUniformi64vNV() @TypeOf(GLEW_GET_FUN(__glewGetUniformi64vNV)) {
    return GLEW_GET_FUN(__glewGetUniformi64vNV);
}
// /usr/include/GL/glew.h:16174:9: warning: macro 'glGetUniformui64vNV' contains a runtime value, translated to function
pub inline fn glGetUniformui64vNV() @TypeOf(GLEW_GET_FUN(__glewGetUniformui64vNV)) {
    return GLEW_GET_FUN(__glewGetUniformui64vNV);
}
// /usr/include/GL/glew.h:16175:9: warning: macro 'glProgramUniform1i64NV' contains a runtime value, translated to function
pub inline fn glProgramUniform1i64NV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1i64NV)) {
    return GLEW_GET_FUN(__glewProgramUniform1i64NV);
}
// /usr/include/GL/glew.h:16176:9: warning: macro 'glProgramUniform1i64vNV' contains a runtime value, translated to function
pub inline fn glProgramUniform1i64vNV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1i64vNV)) {
    return GLEW_GET_FUN(__glewProgramUniform1i64vNV);
}
// /usr/include/GL/glew.h:16177:9: warning: macro 'glProgramUniform1ui64NV' contains a runtime value, translated to function
pub inline fn glProgramUniform1ui64NV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1ui64NV)) {
    return GLEW_GET_FUN(__glewProgramUniform1ui64NV);
}
// /usr/include/GL/glew.h:16178:9: warning: macro 'glProgramUniform1ui64vNV' contains a runtime value, translated to function
pub inline fn glProgramUniform1ui64vNV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform1ui64vNV)) {
    return GLEW_GET_FUN(__glewProgramUniform1ui64vNV);
}
// /usr/include/GL/glew.h:16179:9: warning: macro 'glProgramUniform2i64NV' contains a runtime value, translated to function
pub inline fn glProgramUniform2i64NV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2i64NV)) {
    return GLEW_GET_FUN(__glewProgramUniform2i64NV);
}
// /usr/include/GL/glew.h:16180:9: warning: macro 'glProgramUniform2i64vNV' contains a runtime value, translated to function
pub inline fn glProgramUniform2i64vNV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2i64vNV)) {
    return GLEW_GET_FUN(__glewProgramUniform2i64vNV);
}
// /usr/include/GL/glew.h:16181:9: warning: macro 'glProgramUniform2ui64NV' contains a runtime value, translated to function
pub inline fn glProgramUniform2ui64NV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2ui64NV)) {
    return GLEW_GET_FUN(__glewProgramUniform2ui64NV);
}
// /usr/include/GL/glew.h:16182:9: warning: macro 'glProgramUniform2ui64vNV' contains a runtime value, translated to function
pub inline fn glProgramUniform2ui64vNV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform2ui64vNV)) {
    return GLEW_GET_FUN(__glewProgramUniform2ui64vNV);
}
// /usr/include/GL/glew.h:16183:9: warning: macro 'glProgramUniform3i64NV' contains a runtime value, translated to function
pub inline fn glProgramUniform3i64NV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3i64NV)) {
    return GLEW_GET_FUN(__glewProgramUniform3i64NV);
}
// /usr/include/GL/glew.h:16184:9: warning: macro 'glProgramUniform3i64vNV' contains a runtime value, translated to function
pub inline fn glProgramUniform3i64vNV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3i64vNV)) {
    return GLEW_GET_FUN(__glewProgramUniform3i64vNV);
}
// /usr/include/GL/glew.h:16185:9: warning: macro 'glProgramUniform3ui64NV' contains a runtime value, translated to function
pub inline fn glProgramUniform3ui64NV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3ui64NV)) {
    return GLEW_GET_FUN(__glewProgramUniform3ui64NV);
}
// /usr/include/GL/glew.h:16186:9: warning: macro 'glProgramUniform3ui64vNV' contains a runtime value, translated to function
pub inline fn glProgramUniform3ui64vNV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform3ui64vNV)) {
    return GLEW_GET_FUN(__glewProgramUniform3ui64vNV);
}
// /usr/include/GL/glew.h:16187:9: warning: macro 'glProgramUniform4i64NV' contains a runtime value, translated to function
pub inline fn glProgramUniform4i64NV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4i64NV)) {
    return GLEW_GET_FUN(__glewProgramUniform4i64NV);
}
// /usr/include/GL/glew.h:16188:9: warning: macro 'glProgramUniform4i64vNV' contains a runtime value, translated to function
pub inline fn glProgramUniform4i64vNV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4i64vNV)) {
    return GLEW_GET_FUN(__glewProgramUniform4i64vNV);
}
// /usr/include/GL/glew.h:16189:9: warning: macro 'glProgramUniform4ui64NV' contains a runtime value, translated to function
pub inline fn glProgramUniform4ui64NV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4ui64NV)) {
    return GLEW_GET_FUN(__glewProgramUniform4ui64NV);
}
// /usr/include/GL/glew.h:16190:9: warning: macro 'glProgramUniform4ui64vNV' contains a runtime value, translated to function
pub inline fn glProgramUniform4ui64vNV() @TypeOf(GLEW_GET_FUN(__glewProgramUniform4ui64vNV)) {
    return GLEW_GET_FUN(__glewProgramUniform4ui64vNV);
}
// /usr/include/GL/glew.h:16191:9: warning: macro 'glUniform1i64NV' contains a runtime value, translated to function
pub inline fn glUniform1i64NV() @TypeOf(GLEW_GET_FUN(__glewUniform1i64NV)) {
    return GLEW_GET_FUN(__glewUniform1i64NV);
}
// /usr/include/GL/glew.h:16192:9: warning: macro 'glUniform1i64vNV' contains a runtime value, translated to function
pub inline fn glUniform1i64vNV() @TypeOf(GLEW_GET_FUN(__glewUniform1i64vNV)) {
    return GLEW_GET_FUN(__glewUniform1i64vNV);
}
// /usr/include/GL/glew.h:16193:9: warning: macro 'glUniform1ui64NV' contains a runtime value, translated to function
pub inline fn glUniform1ui64NV() @TypeOf(GLEW_GET_FUN(__glewUniform1ui64NV)) {
    return GLEW_GET_FUN(__glewUniform1ui64NV);
}
// /usr/include/GL/glew.h:16194:9: warning: macro 'glUniform1ui64vNV' contains a runtime value, translated to function
pub inline fn glUniform1ui64vNV() @TypeOf(GLEW_GET_FUN(__glewUniform1ui64vNV)) {
    return GLEW_GET_FUN(__glewUniform1ui64vNV);
}
// /usr/include/GL/glew.h:16195:9: warning: macro 'glUniform2i64NV' contains a runtime value, translated to function
pub inline fn glUniform2i64NV() @TypeOf(GLEW_GET_FUN(__glewUniform2i64NV)) {
    return GLEW_GET_FUN(__glewUniform2i64NV);
}
// /usr/include/GL/glew.h:16196:9: warning: macro 'glUniform2i64vNV' contains a runtime value, translated to function
pub inline fn glUniform2i64vNV() @TypeOf(GLEW_GET_FUN(__glewUniform2i64vNV)) {
    return GLEW_GET_FUN(__glewUniform2i64vNV);
}
// /usr/include/GL/glew.h:16197:9: warning: macro 'glUniform2ui64NV' contains a runtime value, translated to function
pub inline fn glUniform2ui64NV() @TypeOf(GLEW_GET_FUN(__glewUniform2ui64NV)) {
    return GLEW_GET_FUN(__glewUniform2ui64NV);
}
// /usr/include/GL/glew.h:16198:9: warning: macro 'glUniform2ui64vNV' contains a runtime value, translated to function
pub inline fn glUniform2ui64vNV() @TypeOf(GLEW_GET_FUN(__glewUniform2ui64vNV)) {
    return GLEW_GET_FUN(__glewUniform2ui64vNV);
}
// /usr/include/GL/glew.h:16199:9: warning: macro 'glUniform3i64NV' contains a runtime value, translated to function
pub inline fn glUniform3i64NV() @TypeOf(GLEW_GET_FUN(__glewUniform3i64NV)) {
    return GLEW_GET_FUN(__glewUniform3i64NV);
}
// /usr/include/GL/glew.h:16200:9: warning: macro 'glUniform3i64vNV' contains a runtime value, translated to function
pub inline fn glUniform3i64vNV() @TypeOf(GLEW_GET_FUN(__glewUniform3i64vNV)) {
    return GLEW_GET_FUN(__glewUniform3i64vNV);
}
// /usr/include/GL/glew.h:16201:9: warning: macro 'glUniform3ui64NV' contains a runtime value, translated to function
pub inline fn glUniform3ui64NV() @TypeOf(GLEW_GET_FUN(__glewUniform3ui64NV)) {
    return GLEW_GET_FUN(__glewUniform3ui64NV);
}
// /usr/include/GL/glew.h:16202:9: warning: macro 'glUniform3ui64vNV' contains a runtime value, translated to function
pub inline fn glUniform3ui64vNV() @TypeOf(GLEW_GET_FUN(__glewUniform3ui64vNV)) {
    return GLEW_GET_FUN(__glewUniform3ui64vNV);
}
// /usr/include/GL/glew.h:16203:9: warning: macro 'glUniform4i64NV' contains a runtime value, translated to function
pub inline fn glUniform4i64NV() @TypeOf(GLEW_GET_FUN(__glewUniform4i64NV)) {
    return GLEW_GET_FUN(__glewUniform4i64NV);
}
// /usr/include/GL/glew.h:16204:9: warning: macro 'glUniform4i64vNV' contains a runtime value, translated to function
pub inline fn glUniform4i64vNV() @TypeOf(GLEW_GET_FUN(__glewUniform4i64vNV)) {
    return GLEW_GET_FUN(__glewUniform4i64vNV);
}
// /usr/include/GL/glew.h:16205:9: warning: macro 'glUniform4ui64NV' contains a runtime value, translated to function
pub inline fn glUniform4ui64NV() @TypeOf(GLEW_GET_FUN(__glewUniform4ui64NV)) {
    return GLEW_GET_FUN(__glewUniform4ui64NV);
}
// /usr/include/GL/glew.h:16206:9: warning: macro 'glUniform4ui64vNV' contains a runtime value, translated to function
pub inline fn glUniform4ui64vNV() @TypeOf(GLEW_GET_FUN(__glewUniform4ui64vNV)) {
    return GLEW_GET_FUN(__glewUniform4ui64vNV);
}
// /usr/include/GL/glew.h:16208:9: warning: macro 'GLEW_NV_gpu_shader5' contains a runtime value, translated to function
pub inline fn GLEW_NV_gpu_shader5() @TypeOf(GLEW_GET_VAR(__GLEW_NV_gpu_shader5)) {
    return GLEW_GET_VAR(__GLEW_NV_gpu_shader5);
}
pub const GL_NV_half_float = @as(c_int, 1);
pub const GL_HALF_FLOAT_NV = @as(c_int, 0x140B);
// /usr/include/GL/glew.h:16268:9: warning: macro 'glColor3hNV' contains a runtime value, translated to function
pub inline fn glColor3hNV() @TypeOf(GLEW_GET_FUN(__glewColor3hNV)) {
    return GLEW_GET_FUN(__glewColor3hNV);
}
// /usr/include/GL/glew.h:16269:9: warning: macro 'glColor3hvNV' contains a runtime value, translated to function
pub inline fn glColor3hvNV() @TypeOf(GLEW_GET_FUN(__glewColor3hvNV)) {
    return GLEW_GET_FUN(__glewColor3hvNV);
}
// /usr/include/GL/glew.h:16270:9: warning: macro 'glColor4hNV' contains a runtime value, translated to function
pub inline fn glColor4hNV() @TypeOf(GLEW_GET_FUN(__glewColor4hNV)) {
    return GLEW_GET_FUN(__glewColor4hNV);
}
// /usr/include/GL/glew.h:16271:9: warning: macro 'glColor4hvNV' contains a runtime value, translated to function
pub inline fn glColor4hvNV() @TypeOf(GLEW_GET_FUN(__glewColor4hvNV)) {
    return GLEW_GET_FUN(__glewColor4hvNV);
}
// /usr/include/GL/glew.h:16272:9: warning: macro 'glFogCoordhNV' contains a runtime value, translated to function
pub inline fn glFogCoordhNV() @TypeOf(GLEW_GET_FUN(__glewFogCoordhNV)) {
    return GLEW_GET_FUN(__glewFogCoordhNV);
}
// /usr/include/GL/glew.h:16273:9: warning: macro 'glFogCoordhvNV' contains a runtime value, translated to function
pub inline fn glFogCoordhvNV() @TypeOf(GLEW_GET_FUN(__glewFogCoordhvNV)) {
    return GLEW_GET_FUN(__glewFogCoordhvNV);
}
// /usr/include/GL/glew.h:16274:9: warning: macro 'glMultiTexCoord1hNV' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1hNV() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1hNV)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1hNV);
}
// /usr/include/GL/glew.h:16275:9: warning: macro 'glMultiTexCoord1hvNV' contains a runtime value, translated to function
pub inline fn glMultiTexCoord1hvNV() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord1hvNV)) {
    return GLEW_GET_FUN(__glewMultiTexCoord1hvNV);
}
// /usr/include/GL/glew.h:16276:9: warning: macro 'glMultiTexCoord2hNV' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2hNV() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2hNV)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2hNV);
}
// /usr/include/GL/glew.h:16277:9: warning: macro 'glMultiTexCoord2hvNV' contains a runtime value, translated to function
pub inline fn glMultiTexCoord2hvNV() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord2hvNV)) {
    return GLEW_GET_FUN(__glewMultiTexCoord2hvNV);
}
// /usr/include/GL/glew.h:16278:9: warning: macro 'glMultiTexCoord3hNV' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3hNV() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3hNV)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3hNV);
}
// /usr/include/GL/glew.h:16279:9: warning: macro 'glMultiTexCoord3hvNV' contains a runtime value, translated to function
pub inline fn glMultiTexCoord3hvNV() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord3hvNV)) {
    return GLEW_GET_FUN(__glewMultiTexCoord3hvNV);
}
// /usr/include/GL/glew.h:16280:9: warning: macro 'glMultiTexCoord4hNV' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4hNV() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4hNV)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4hNV);
}
// /usr/include/GL/glew.h:16281:9: warning: macro 'glMultiTexCoord4hvNV' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4hvNV() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4hvNV)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4hvNV);
}
// /usr/include/GL/glew.h:16282:9: warning: macro 'glNormal3hNV' contains a runtime value, translated to function
pub inline fn glNormal3hNV() @TypeOf(GLEW_GET_FUN(__glewNormal3hNV)) {
    return GLEW_GET_FUN(__glewNormal3hNV);
}
// /usr/include/GL/glew.h:16283:9: warning: macro 'glNormal3hvNV' contains a runtime value, translated to function
pub inline fn glNormal3hvNV() @TypeOf(GLEW_GET_FUN(__glewNormal3hvNV)) {
    return GLEW_GET_FUN(__glewNormal3hvNV);
}
// /usr/include/GL/glew.h:16284:9: warning: macro 'glSecondaryColor3hNV' contains a runtime value, translated to function
pub inline fn glSecondaryColor3hNV() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3hNV)) {
    return GLEW_GET_FUN(__glewSecondaryColor3hNV);
}
// /usr/include/GL/glew.h:16285:9: warning: macro 'glSecondaryColor3hvNV' contains a runtime value, translated to function
pub inline fn glSecondaryColor3hvNV() @TypeOf(GLEW_GET_FUN(__glewSecondaryColor3hvNV)) {
    return GLEW_GET_FUN(__glewSecondaryColor3hvNV);
}
// /usr/include/GL/glew.h:16286:9: warning: macro 'glTexCoord1hNV' contains a runtime value, translated to function
pub inline fn glTexCoord1hNV() @TypeOf(GLEW_GET_FUN(__glewTexCoord1hNV)) {
    return GLEW_GET_FUN(__glewTexCoord1hNV);
}
// /usr/include/GL/glew.h:16287:9: warning: macro 'glTexCoord1hvNV' contains a runtime value, translated to function
pub inline fn glTexCoord1hvNV() @TypeOf(GLEW_GET_FUN(__glewTexCoord1hvNV)) {
    return GLEW_GET_FUN(__glewTexCoord1hvNV);
}
// /usr/include/GL/glew.h:16288:9: warning: macro 'glTexCoord2hNV' contains a runtime value, translated to function
pub inline fn glTexCoord2hNV() @TypeOf(GLEW_GET_FUN(__glewTexCoord2hNV)) {
    return GLEW_GET_FUN(__glewTexCoord2hNV);
}
// /usr/include/GL/glew.h:16289:9: warning: macro 'glTexCoord2hvNV' contains a runtime value, translated to function
pub inline fn glTexCoord2hvNV() @TypeOf(GLEW_GET_FUN(__glewTexCoord2hvNV)) {
    return GLEW_GET_FUN(__glewTexCoord2hvNV);
}
// /usr/include/GL/glew.h:16290:9: warning: macro 'glTexCoord3hNV' contains a runtime value, translated to function
pub inline fn glTexCoord3hNV() @TypeOf(GLEW_GET_FUN(__glewTexCoord3hNV)) {
    return GLEW_GET_FUN(__glewTexCoord3hNV);
}
// /usr/include/GL/glew.h:16291:9: warning: macro 'glTexCoord3hvNV' contains a runtime value, translated to function
pub inline fn glTexCoord3hvNV() @TypeOf(GLEW_GET_FUN(__glewTexCoord3hvNV)) {
    return GLEW_GET_FUN(__glewTexCoord3hvNV);
}
// /usr/include/GL/glew.h:16292:9: warning: macro 'glTexCoord4hNV' contains a runtime value, translated to function
pub inline fn glTexCoord4hNV() @TypeOf(GLEW_GET_FUN(__glewTexCoord4hNV)) {
    return GLEW_GET_FUN(__glewTexCoord4hNV);
}
// /usr/include/GL/glew.h:16293:9: warning: macro 'glTexCoord4hvNV' contains a runtime value, translated to function
pub inline fn glTexCoord4hvNV() @TypeOf(GLEW_GET_FUN(__glewTexCoord4hvNV)) {
    return GLEW_GET_FUN(__glewTexCoord4hvNV);
}
// /usr/include/GL/glew.h:16294:9: warning: macro 'glVertex2hNV' contains a runtime value, translated to function
pub inline fn glVertex2hNV() @TypeOf(GLEW_GET_FUN(__glewVertex2hNV)) {
    return GLEW_GET_FUN(__glewVertex2hNV);
}
// /usr/include/GL/glew.h:16295:9: warning: macro 'glVertex2hvNV' contains a runtime value, translated to function
pub inline fn glVertex2hvNV() @TypeOf(GLEW_GET_FUN(__glewVertex2hvNV)) {
    return GLEW_GET_FUN(__glewVertex2hvNV);
}
// /usr/include/GL/glew.h:16296:9: warning: macro 'glVertex3hNV' contains a runtime value, translated to function
pub inline fn glVertex3hNV() @TypeOf(GLEW_GET_FUN(__glewVertex3hNV)) {
    return GLEW_GET_FUN(__glewVertex3hNV);
}
// /usr/include/GL/glew.h:16297:9: warning: macro 'glVertex3hvNV' contains a runtime value, translated to function
pub inline fn glVertex3hvNV() @TypeOf(GLEW_GET_FUN(__glewVertex3hvNV)) {
    return GLEW_GET_FUN(__glewVertex3hvNV);
}
// /usr/include/GL/glew.h:16298:9: warning: macro 'glVertex4hNV' contains a runtime value, translated to function
pub inline fn glVertex4hNV() @TypeOf(GLEW_GET_FUN(__glewVertex4hNV)) {
    return GLEW_GET_FUN(__glewVertex4hNV);
}
// /usr/include/GL/glew.h:16299:9: warning: macro 'glVertex4hvNV' contains a runtime value, translated to function
pub inline fn glVertex4hvNV() @TypeOf(GLEW_GET_FUN(__glewVertex4hvNV)) {
    return GLEW_GET_FUN(__glewVertex4hvNV);
}
// /usr/include/GL/glew.h:16300:9: warning: macro 'glVertexAttrib1hNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib1hNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1hNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib1hNV);
}
// /usr/include/GL/glew.h:16301:9: warning: macro 'glVertexAttrib1hvNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib1hvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1hvNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib1hvNV);
}
// /usr/include/GL/glew.h:16302:9: warning: macro 'glVertexAttrib2hNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib2hNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2hNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib2hNV);
}
// /usr/include/GL/glew.h:16303:9: warning: macro 'glVertexAttrib2hvNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib2hvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2hvNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib2hvNV);
}
// /usr/include/GL/glew.h:16304:9: warning: macro 'glVertexAttrib3hNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib3hNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3hNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib3hNV);
}
// /usr/include/GL/glew.h:16305:9: warning: macro 'glVertexAttrib3hvNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib3hvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3hvNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib3hvNV);
}
// /usr/include/GL/glew.h:16306:9: warning: macro 'glVertexAttrib4hNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib4hNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4hNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib4hNV);
}
// /usr/include/GL/glew.h:16307:9: warning: macro 'glVertexAttrib4hvNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib4hvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4hvNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib4hvNV);
}
// /usr/include/GL/glew.h:16308:9: warning: macro 'glVertexAttribs1hvNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs1hvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs1hvNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs1hvNV);
}
// /usr/include/GL/glew.h:16309:9: warning: macro 'glVertexAttribs2hvNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs2hvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs2hvNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs2hvNV);
}
// /usr/include/GL/glew.h:16310:9: warning: macro 'glVertexAttribs3hvNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs3hvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs3hvNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs3hvNV);
}
// /usr/include/GL/glew.h:16311:9: warning: macro 'glVertexAttribs4hvNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs4hvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs4hvNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs4hvNV);
}
// /usr/include/GL/glew.h:16312:9: warning: macro 'glVertexWeighthNV' contains a runtime value, translated to function
pub inline fn glVertexWeighthNV() @TypeOf(GLEW_GET_FUN(__glewVertexWeighthNV)) {
    return GLEW_GET_FUN(__glewVertexWeighthNV);
}
// /usr/include/GL/glew.h:16313:9: warning: macro 'glVertexWeighthvNV' contains a runtime value, translated to function
pub inline fn glVertexWeighthvNV() @TypeOf(GLEW_GET_FUN(__glewVertexWeighthvNV)) {
    return GLEW_GET_FUN(__glewVertexWeighthvNV);
}
// /usr/include/GL/glew.h:16315:9: warning: macro 'GLEW_NV_half_float' contains a runtime value, translated to function
pub inline fn GLEW_NV_half_float() @TypeOf(GLEW_GET_VAR(__GLEW_NV_half_float)) {
    return GLEW_GET_VAR(__GLEW_NV_half_float);
}
pub const GL_NV_image_formats = @as(c_int, 1);
// /usr/include/GL/glew.h:16324:9: warning: macro 'GLEW_NV_image_formats' contains a runtime value, translated to function
pub inline fn GLEW_NV_image_formats() @TypeOf(GLEW_GET_VAR(__GLEW_NV_image_formats)) {
    return GLEW_GET_VAR(__GLEW_NV_image_formats);
}
pub const GL_NV_instanced_arrays = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hex);
// /usr/include/GL/glew.h:16337:9: warning: macro 'glVertexAttribDivisorNV' contains a runtime value, translated to function
pub inline fn glVertexAttribDivisorNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribDivisorNV)) {
    return GLEW_GET_FUN(__glewVertexAttribDivisorNV);
}
// /usr/include/GL/glew.h:16339:9: warning: macro 'GLEW_NV_instanced_arrays' contains a runtime value, translated to function
pub inline fn GLEW_NV_instanced_arrays() @TypeOf(GLEW_GET_VAR(__GLEW_NV_instanced_arrays)) {
    return GLEW_GET_VAR(__GLEW_NV_instanced_arrays);
}
pub const GL_NV_internalformat_sample_query = @as(c_int, 1);
pub const GL_MULTISAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9371, .hex);
pub const GL_SUPERSAMPLE_SCALE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9372, .hex);
pub const GL_SUPERSAMPLE_SCALE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9373, .hex);
pub const GL_CONFORMANT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9374, .hex);
// /usr/include/GL/glew.h:16355:9: warning: macro 'glGetInternalformatSampleivNV' contains a runtime value, translated to function
pub inline fn glGetInternalformatSampleivNV() @TypeOf(GLEW_GET_FUN(__glewGetInternalformatSampleivNV)) {
    return GLEW_GET_FUN(__glewGetInternalformatSampleivNV);
}
// /usr/include/GL/glew.h:16357:9: warning: macro 'GLEW_NV_internalformat_sample_query' contains a runtime value, translated to function
pub inline fn GLEW_NV_internalformat_sample_query() @TypeOf(GLEW_GET_VAR(__GLEW_NV_internalformat_sample_query)) {
    return GLEW_GET_VAR(__GLEW_NV_internalformat_sample_query);
}
pub const GL_NV_light_max_exponent = @as(c_int, 1);
pub const GL_MAX_SHININESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8504, .hex);
pub const GL_MAX_SPOT_EXPONENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8505, .hex);
// /usr/include/GL/glew.h:16369:9: warning: macro 'GLEW_NV_light_max_exponent' contains a runtime value, translated to function
pub inline fn GLEW_NV_light_max_exponent() @TypeOf(GLEW_GET_VAR(__GLEW_NV_light_max_exponent)) {
    return GLEW_GET_VAR(__GLEW_NV_light_max_exponent);
}
pub const GL_NV_memory_attachment = @as(c_int, 1);
pub const GL_ATTACHED_MEMORY_OBJECT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A4, .hex);
pub const GL_ATTACHED_MEMORY_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A5, .hex);
pub const GL_MEMORY_ATTACHABLE_ALIGNMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A6, .hex);
pub const GL_MEMORY_ATTACHABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A7, .hex);
pub const GL_MEMORY_ATTACHABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A8, .hex);
pub const GL_DETACHED_MEMORY_INCARNATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A9, .hex);
pub const GL_DETACHED_TEXTURES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AA, .hex);
pub const GL_DETACHED_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AB, .hex);
pub const GL_MAX_DETACHED_TEXTURES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AC, .hex);
pub const GL_MAX_DETACHED_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AD, .hex);
// /usr/include/GL/glew.h:16396:9: warning: macro 'glBufferAttachMemoryNV' contains a runtime value, translated to function
pub inline fn glBufferAttachMemoryNV() @TypeOf(GLEW_GET_FUN(__glewBufferAttachMemoryNV)) {
    return GLEW_GET_FUN(__glewBufferAttachMemoryNV);
}
// /usr/include/GL/glew.h:16397:9: warning: macro 'glGetMemoryObjectDetachedResourcesuivNV' contains a runtime value, translated to function
pub inline fn glGetMemoryObjectDetachedResourcesuivNV() @TypeOf(GLEW_GET_FUN(__glewGetMemoryObjectDetachedResourcesuivNV)) {
    return GLEW_GET_FUN(__glewGetMemoryObjectDetachedResourcesuivNV);
}
// /usr/include/GL/glew.h:16398:9: warning: macro 'glNamedBufferAttachMemoryNV' contains a runtime value, translated to function
pub inline fn glNamedBufferAttachMemoryNV() @TypeOf(GLEW_GET_FUN(__glewNamedBufferAttachMemoryNV)) {
    return GLEW_GET_FUN(__glewNamedBufferAttachMemoryNV);
}
// /usr/include/GL/glew.h:16399:9: warning: macro 'glResetMemoryObjectParameterNV' contains a runtime value, translated to function
pub inline fn glResetMemoryObjectParameterNV() @TypeOf(GLEW_GET_FUN(__glewResetMemoryObjectParameterNV)) {
    return GLEW_GET_FUN(__glewResetMemoryObjectParameterNV);
}
// /usr/include/GL/glew.h:16400:9: warning: macro 'glTexAttachMemoryNV' contains a runtime value, translated to function
pub inline fn glTexAttachMemoryNV() @TypeOf(GLEW_GET_FUN(__glewTexAttachMemoryNV)) {
    return GLEW_GET_FUN(__glewTexAttachMemoryNV);
}
// /usr/include/GL/glew.h:16401:9: warning: macro 'glTextureAttachMemoryNV' contains a runtime value, translated to function
pub inline fn glTextureAttachMemoryNV() @TypeOf(GLEW_GET_FUN(__glewTextureAttachMemoryNV)) {
    return GLEW_GET_FUN(__glewTextureAttachMemoryNV);
}
// /usr/include/GL/glew.h:16403:9: warning: macro 'GLEW_NV_memory_attachment' contains a runtime value, translated to function
pub inline fn GLEW_NV_memory_attachment() @TypeOf(GLEW_GET_VAR(__GLEW_NV_memory_attachment)) {
    return GLEW_GET_VAR(__GLEW_NV_memory_attachment);
}
pub const GL_NV_mesh_shader = @as(c_int, 1);
pub const GL_MESH_SHADER_BIT_NV = @as(c_int, 0x00000040);
pub const GL_TASK_SHADER_BIT_NV = @as(c_int, 0x00000080);
pub const GL_MAX_MESH_UNIFORM_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E60, .hex);
pub const GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E61, .hex);
pub const GL_MAX_MESH_IMAGE_UNIFORMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E62, .hex);
pub const GL_MAX_MESH_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E63, .hex);
pub const GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E64, .hex);
pub const GL_MAX_MESH_ATOMIC_COUNTERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E65, .hex);
pub const GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E66, .hex);
pub const GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E67, .hex);
pub const GL_MAX_TASK_UNIFORM_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E68, .hex);
pub const GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E69, .hex);
pub const GL_MAX_TASK_IMAGE_UNIFORMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6A, .hex);
pub const GL_MAX_TASK_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6B, .hex);
pub const GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6C, .hex);
pub const GL_MAX_TASK_ATOMIC_COUNTERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6D, .hex);
pub const GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6E, .hex);
pub const GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6F, .hex);
pub const GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DF, .hex);
pub const GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9536, .hex);
pub const GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9537, .hex);
pub const GL_MAX_MESH_OUTPUT_VERTICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9538, .hex);
pub const GL_MAX_MESH_OUTPUT_PRIMITIVES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9539, .hex);
pub const GL_MAX_TASK_OUTPUT_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953A, .hex);
pub const GL_MAX_MESH_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953B, .hex);
pub const GL_MAX_TASK_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953C, .hex);
pub const GL_MAX_DRAW_MESH_TASKS_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953D, .hex);
pub const GL_MESH_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953E, .hex);
pub const GL_TASK_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953F, .hex);
pub const GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9543, .hex);
pub const GL_MAX_MESH_VIEWS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9557, .hex);
pub const GL_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9559, .hex);
pub const GL_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955A, .hex);
pub const GL_MESH_VERTICES_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9579, .hex);
pub const GL_MESH_PRIMITIVES_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957A, .hex);
pub const GL_MESH_OUTPUT_TYPE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957B, .hex);
pub const GL_MESH_SUBROUTINE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957C, .hex);
pub const GL_TASK_SUBROUTINE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957D, .hex);
pub const GL_MESH_SUBROUTINE_UNIFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957E, .hex);
pub const GL_TASK_SUBROUTINE_UNIFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957F, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959C, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959D, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959E, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959F, .hex);
pub const GL_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A0, .hex);
pub const GL_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A1, .hex);
pub const GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A2, .hex);
pub const GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A3, .hex);
// /usr/include/GL/glew.h:16466:9: warning: macro 'glDrawMeshTasksIndirectNV' contains a runtime value, translated to function
pub inline fn glDrawMeshTasksIndirectNV() @TypeOf(GLEW_GET_FUN(__glewDrawMeshTasksIndirectNV)) {
    return GLEW_GET_FUN(__glewDrawMeshTasksIndirectNV);
}
// /usr/include/GL/glew.h:16467:9: warning: macro 'glDrawMeshTasksNV' contains a runtime value, translated to function
pub inline fn glDrawMeshTasksNV() @TypeOf(GLEW_GET_FUN(__glewDrawMeshTasksNV)) {
    return GLEW_GET_FUN(__glewDrawMeshTasksNV);
}
// /usr/include/GL/glew.h:16468:9: warning: macro 'glMultiDrawMeshTasksIndirectCountNV' contains a runtime value, translated to function
pub inline fn glMultiDrawMeshTasksIndirectCountNV() @TypeOf(GLEW_GET_FUN(__glewMultiDrawMeshTasksIndirectCountNV)) {
    return GLEW_GET_FUN(__glewMultiDrawMeshTasksIndirectCountNV);
}
// /usr/include/GL/glew.h:16469:9: warning: macro 'glMultiDrawMeshTasksIndirectNV' contains a runtime value, translated to function
pub inline fn glMultiDrawMeshTasksIndirectNV() @TypeOf(GLEW_GET_FUN(__glewMultiDrawMeshTasksIndirectNV)) {
    return GLEW_GET_FUN(__glewMultiDrawMeshTasksIndirectNV);
}
// /usr/include/GL/glew.h:16471:9: warning: macro 'GLEW_NV_mesh_shader' contains a runtime value, translated to function
pub inline fn GLEW_NV_mesh_shader() @TypeOf(GLEW_GET_VAR(__GLEW_NV_mesh_shader)) {
    return GLEW_GET_VAR(__GLEW_NV_mesh_shader);
}
pub const GL_NV_multisample_coverage = @as(c_int, 1);
// /usr/include/GL/glew.h:16482:9: warning: macro 'GLEW_NV_multisample_coverage' contains a runtime value, translated to function
pub inline fn GLEW_NV_multisample_coverage() @TypeOf(GLEW_GET_VAR(__GLEW_NV_multisample_coverage)) {
    return GLEW_GET_VAR(__GLEW_NV_multisample_coverage);
}
pub const GL_NV_multisample_filter_hint = @as(c_int, 1);
pub const GL_MULTISAMPLE_FILTER_HINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8534, .hex);
// /usr/include/GL/glew.h:16493:9: warning: macro 'GLEW_NV_multisample_filter_hint' contains a runtime value, translated to function
pub inline fn GLEW_NV_multisample_filter_hint() @TypeOf(GLEW_GET_VAR(__GLEW_NV_multisample_filter_hint)) {
    return GLEW_GET_VAR(__GLEW_NV_multisample_filter_hint);
}
pub const GL_NV_non_square_matrices = @as(c_int, 1);
pub const GL_FLOAT_MAT2x3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B65, .hex);
pub const GL_FLOAT_MAT2x4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B66, .hex);
pub const GL_FLOAT_MAT3x2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B67, .hex);
pub const GL_FLOAT_MAT3x4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B68, .hex);
pub const GL_FLOAT_MAT4x2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B69, .hex);
pub const GL_FLOAT_MAT4x3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B6A, .hex);
// /usr/include/GL/glew.h:16516:9: warning: macro 'glUniformMatrix2x3fvNV' contains a runtime value, translated to function
pub inline fn glUniformMatrix2x3fvNV() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix2x3fvNV)) {
    return GLEW_GET_FUN(__glewUniformMatrix2x3fvNV);
}
// /usr/include/GL/glew.h:16517:9: warning: macro 'glUniformMatrix2x4fvNV' contains a runtime value, translated to function
pub inline fn glUniformMatrix2x4fvNV() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix2x4fvNV)) {
    return GLEW_GET_FUN(__glewUniformMatrix2x4fvNV);
}
// /usr/include/GL/glew.h:16518:9: warning: macro 'glUniformMatrix3x2fvNV' contains a runtime value, translated to function
pub inline fn glUniformMatrix3x2fvNV() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix3x2fvNV)) {
    return GLEW_GET_FUN(__glewUniformMatrix3x2fvNV);
}
// /usr/include/GL/glew.h:16519:9: warning: macro 'glUniformMatrix3x4fvNV' contains a runtime value, translated to function
pub inline fn glUniformMatrix3x4fvNV() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix3x4fvNV)) {
    return GLEW_GET_FUN(__glewUniformMatrix3x4fvNV);
}
// /usr/include/GL/glew.h:16520:9: warning: macro 'glUniformMatrix4x2fvNV' contains a runtime value, translated to function
pub inline fn glUniformMatrix4x2fvNV() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix4x2fvNV)) {
    return GLEW_GET_FUN(__glewUniformMatrix4x2fvNV);
}
// /usr/include/GL/glew.h:16521:9: warning: macro 'glUniformMatrix4x3fvNV' contains a runtime value, translated to function
pub inline fn glUniformMatrix4x3fvNV() @TypeOf(GLEW_GET_FUN(__glewUniformMatrix4x3fvNV)) {
    return GLEW_GET_FUN(__glewUniformMatrix4x3fvNV);
}
// /usr/include/GL/glew.h:16523:9: warning: macro 'GLEW_NV_non_square_matrices' contains a runtime value, translated to function
pub inline fn GLEW_NV_non_square_matrices() @TypeOf(GLEW_GET_VAR(__GLEW_NV_non_square_matrices)) {
    return GLEW_GET_VAR(__GLEW_NV_non_square_matrices);
}
pub const GL_NV_occlusion_query = @as(c_int, 1);
pub const GL_PIXEL_COUNTER_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hex);
pub const GL_CURRENT_OCCLUSION_QUERY_ID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hex);
pub const GL_PIXEL_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hex);
pub const GL_PIXEL_COUNT_AVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hex);
// /usr/include/GL/glew.h:16545:9: warning: macro 'glBeginOcclusionQueryNV' contains a runtime value, translated to function
pub inline fn glBeginOcclusionQueryNV() @TypeOf(GLEW_GET_FUN(__glewBeginOcclusionQueryNV)) {
    return GLEW_GET_FUN(__glewBeginOcclusionQueryNV);
}
// /usr/include/GL/glew.h:16546:9: warning: macro 'glDeleteOcclusionQueriesNV' contains a runtime value, translated to function
pub inline fn glDeleteOcclusionQueriesNV() @TypeOf(GLEW_GET_FUN(__glewDeleteOcclusionQueriesNV)) {
    return GLEW_GET_FUN(__glewDeleteOcclusionQueriesNV);
}
// /usr/include/GL/glew.h:16547:9: warning: macro 'glEndOcclusionQueryNV' contains a runtime value, translated to function
pub inline fn glEndOcclusionQueryNV() @TypeOf(GLEW_GET_FUN(__glewEndOcclusionQueryNV)) {
    return GLEW_GET_FUN(__glewEndOcclusionQueryNV);
}
// /usr/include/GL/glew.h:16548:9: warning: macro 'glGenOcclusionQueriesNV' contains a runtime value, translated to function
pub inline fn glGenOcclusionQueriesNV() @TypeOf(GLEW_GET_FUN(__glewGenOcclusionQueriesNV)) {
    return GLEW_GET_FUN(__glewGenOcclusionQueriesNV);
}
// /usr/include/GL/glew.h:16549:9: warning: macro 'glGetOcclusionQueryivNV' contains a runtime value, translated to function
pub inline fn glGetOcclusionQueryivNV() @TypeOf(GLEW_GET_FUN(__glewGetOcclusionQueryivNV)) {
    return GLEW_GET_FUN(__glewGetOcclusionQueryivNV);
}
// /usr/include/GL/glew.h:16550:9: warning: macro 'glGetOcclusionQueryuivNV' contains a runtime value, translated to function
pub inline fn glGetOcclusionQueryuivNV() @TypeOf(GLEW_GET_FUN(__glewGetOcclusionQueryuivNV)) {
    return GLEW_GET_FUN(__glewGetOcclusionQueryuivNV);
}
// /usr/include/GL/glew.h:16551:9: warning: macro 'glIsOcclusionQueryNV' contains a runtime value, translated to function
pub inline fn glIsOcclusionQueryNV() @TypeOf(GLEW_GET_FUN(__glewIsOcclusionQueryNV)) {
    return GLEW_GET_FUN(__glewIsOcclusionQueryNV);
}
// /usr/include/GL/glew.h:16553:9: warning: macro 'GLEW_NV_occlusion_query' contains a runtime value, translated to function
pub inline fn GLEW_NV_occlusion_query() @TypeOf(GLEW_GET_VAR(__GLEW_NV_occlusion_query)) {
    return GLEW_GET_VAR(__GLEW_NV_occlusion_query);
}
pub const GL_NV_pack_subimage = @as(c_int, 1);
pub const GL_PACK_ROW_LENGTH_NV = @as(c_int, 0x0D02);
pub const GL_PACK_SKIP_ROWS_NV = @as(c_int, 0x0D03);
pub const GL_PACK_SKIP_PIXELS_NV = @as(c_int, 0x0D04);
// /usr/include/GL/glew.h:16566:9: warning: macro 'GLEW_NV_pack_subimage' contains a runtime value, translated to function
pub inline fn GLEW_NV_pack_subimage() @TypeOf(GLEW_GET_VAR(__GLEW_NV_pack_subimage)) {
    return GLEW_GET_VAR(__GLEW_NV_pack_subimage);
}
pub const GL_NV_packed_depth_stencil = @as(c_int, 1);
pub const GL_DEPTH_STENCIL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hex);
pub const GL_UNSIGNED_INT_24_8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hex);
// /usr/include/GL/glew.h:16578:9: warning: macro 'GLEW_NV_packed_depth_stencil' contains a runtime value, translated to function
pub inline fn GLEW_NV_packed_depth_stencil() @TypeOf(GLEW_GET_VAR(__GLEW_NV_packed_depth_stencil)) {
    return GLEW_GET_VAR(__GLEW_NV_packed_depth_stencil);
}
pub const GL_NV_packed_float = @as(c_int, 1);
pub const GL_R11F_G11F_B10F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hex);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hex);
// /usr/include/GL/glew.h:16590:9: warning: macro 'GLEW_NV_packed_float' contains a runtime value, translated to function
pub inline fn GLEW_NV_packed_float() @TypeOf(GLEW_GET_VAR(__GLEW_NV_packed_float)) {
    return GLEW_GET_VAR(__GLEW_NV_packed_float);
}
pub const GL_NV_packed_float_linear = @as(c_int, 1);
// /usr/include/GL/glew.h:16602:9: warning: macro 'GLEW_NV_packed_float_linear' contains a runtime value, translated to function
pub inline fn GLEW_NV_packed_float_linear() @TypeOf(GLEW_GET_VAR(__GLEW_NV_packed_float_linear)) {
    return GLEW_GET_VAR(__GLEW_NV_packed_float_linear);
}
pub const GL_NV_parameter_buffer_object = @as(c_int, 1);
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA0, .hex);
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA1, .hex);
pub const GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA2, .hex);
pub const GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA3, .hex);
pub const GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA4, .hex);
// /usr/include/GL/glew.h:16621:9: warning: macro 'glProgramBufferParametersIivNV' contains a runtime value, translated to function
pub inline fn glProgramBufferParametersIivNV() @TypeOf(GLEW_GET_FUN(__glewProgramBufferParametersIivNV)) {
    return GLEW_GET_FUN(__glewProgramBufferParametersIivNV);
}
// /usr/include/GL/glew.h:16622:9: warning: macro 'glProgramBufferParametersIuivNV' contains a runtime value, translated to function
pub inline fn glProgramBufferParametersIuivNV() @TypeOf(GLEW_GET_FUN(__glewProgramBufferParametersIuivNV)) {
    return GLEW_GET_FUN(__glewProgramBufferParametersIuivNV);
}
// /usr/include/GL/glew.h:16623:9: warning: macro 'glProgramBufferParametersfvNV' contains a runtime value, translated to function
pub inline fn glProgramBufferParametersfvNV() @TypeOf(GLEW_GET_FUN(__glewProgramBufferParametersfvNV)) {
    return GLEW_GET_FUN(__glewProgramBufferParametersfvNV);
}
// /usr/include/GL/glew.h:16625:9: warning: macro 'GLEW_NV_parameter_buffer_object' contains a runtime value, translated to function
pub inline fn GLEW_NV_parameter_buffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_NV_parameter_buffer_object)) {
    return GLEW_GET_VAR(__GLEW_NV_parameter_buffer_object);
}
pub const GL_NV_parameter_buffer_object2 = @as(c_int, 1);
// /usr/include/GL/glew.h:16634:9: warning: macro 'GLEW_NV_parameter_buffer_object2' contains a runtime value, translated to function
pub inline fn GLEW_NV_parameter_buffer_object2() @TypeOf(GLEW_GET_VAR(__GLEW_NV_parameter_buffer_object2)) {
    return GLEW_GET_VAR(__GLEW_NV_parameter_buffer_object2);
}
pub const GL_NV_path_rendering = @as(c_int, 1);
pub const GL_CLOSE_PATH_NV = @as(c_int, 0x00);
pub const GL_BOLD_BIT_NV = @as(c_int, 0x01);
pub const GL_GLYPH_WIDTH_BIT_NV = @as(c_int, 0x01);
pub const GL_GLYPH_HEIGHT_BIT_NV = @as(c_int, 0x02);
pub const GL_ITALIC_BIT_NV = @as(c_int, 0x02);
pub const GL_MOVE_TO_NV = @as(c_int, 0x02);
pub const GL_RELATIVE_MOVE_TO_NV = @as(c_int, 0x03);
pub const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = @as(c_int, 0x04);
pub const GL_LINE_TO_NV = @as(c_int, 0x04);
pub const GL_RELATIVE_LINE_TO_NV = @as(c_int, 0x05);
pub const GL_HORIZONTAL_LINE_TO_NV = @as(c_int, 0x06);
pub const GL_RELATIVE_HORIZONTAL_LINE_TO_NV = @as(c_int, 0x07);
pub const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = @as(c_int, 0x08);
pub const GL_VERTICAL_LINE_TO_NV = @as(c_int, 0x08);
pub const GL_RELATIVE_VERTICAL_LINE_TO_NV = @as(c_int, 0x09);
pub const GL_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0A);
pub const GL_RELATIVE_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0B);
pub const GL_CUBIC_CURVE_TO_NV = @as(c_int, 0x0C);
pub const GL_RELATIVE_CUBIC_CURVE_TO_NV = @as(c_int, 0x0D);
pub const GL_SMOOTH_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0E);
pub const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0F);
pub const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = @as(c_int, 0x10);
pub const GL_SMOOTH_CUBIC_CURVE_TO_NV = @as(c_int, 0x10);
pub const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = @as(c_int, 0x11);
pub const GL_SMALL_CCW_ARC_TO_NV = @as(c_int, 0x12);
pub const GL_RELATIVE_SMALL_CCW_ARC_TO_NV = @as(c_int, 0x13);
pub const GL_SMALL_CW_ARC_TO_NV = @as(c_int, 0x14);
pub const GL_RELATIVE_SMALL_CW_ARC_TO_NV = @as(c_int, 0x15);
pub const GL_LARGE_CCW_ARC_TO_NV = @as(c_int, 0x16);
pub const GL_RELATIVE_LARGE_CCW_ARC_TO_NV = @as(c_int, 0x17);
pub const GL_LARGE_CW_ARC_TO_NV = @as(c_int, 0x18);
pub const GL_RELATIVE_LARGE_CW_ARC_TO_NV = @as(c_int, 0x19);
pub const GL_CONIC_CURVE_TO_NV = @as(c_int, 0x1A);
pub const GL_RELATIVE_CONIC_CURVE_TO_NV = @as(c_int, 0x1B);
pub const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = @as(c_int, 0x20);
pub const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = @as(c_int, 0x40);
pub const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = @as(c_int, 0x80);
pub const GL_ROUNDED_RECT_NV = @as(c_int, 0xE8);
pub const GL_RELATIVE_ROUNDED_RECT_NV = @as(c_int, 0xE9);
pub const GL_ROUNDED_RECT2_NV = @as(c_int, 0xEA);
pub const GL_RELATIVE_ROUNDED_RECT2_NV = @as(c_int, 0xEB);
pub const GL_ROUNDED_RECT4_NV = @as(c_int, 0xEC);
pub const GL_RELATIVE_ROUNDED_RECT4_NV = @as(c_int, 0xED);
pub const GL_ROUNDED_RECT8_NV = @as(c_int, 0xEE);
pub const GL_RELATIVE_ROUNDED_RECT8_NV = @as(c_int, 0xEF);
pub const GL_RESTART_PATH_NV = @as(c_int, 0xF0);
pub const GL_DUP_FIRST_CUBIC_CURVE_TO_NV = @as(c_int, 0xF2);
pub const GL_DUP_LAST_CUBIC_CURVE_TO_NV = @as(c_int, 0xF4);
pub const GL_RECT_NV = @as(c_int, 0xF6);
pub const GL_RELATIVE_RECT_NV = @as(c_int, 0xF7);
pub const GL_CIRCULAR_CCW_ARC_TO_NV = @as(c_int, 0xF8);
pub const GL_CIRCULAR_CW_ARC_TO_NV = @as(c_int, 0xFA);
pub const GL_CIRCULAR_TANGENT_ARC_TO_NV = @as(c_int, 0xFC);
pub const GL_ARC_TO_NV = @as(c_int, 0xFE);
pub const GL_RELATIVE_ARC_TO_NV = @as(c_int, 0xFF);
pub const GL_GLYPH_HAS_KERNING_BIT_NV = @as(c_int, 0x100);
pub const GL_PRIMARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852C, .hex);
pub const GL_SECONDARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852D, .hex);
pub const GL_PATH_FORMAT_SVG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9070, .hex);
pub const GL_PATH_FORMAT_PS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9071, .hex);
pub const GL_STANDARD_FONT_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9072, .hex);
pub const GL_SYSTEM_FONT_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9073, .hex);
pub const GL_FILE_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9074, .hex);
pub const GL_PATH_STROKE_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9075, .hex);
pub const GL_PATH_END_CAPS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9076, .hex);
pub const GL_PATH_INITIAL_END_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9077, .hex);
pub const GL_PATH_TERMINAL_END_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9078, .hex);
pub const GL_PATH_JOIN_STYLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9079, .hex);
pub const GL_PATH_MITER_LIMIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907A, .hex);
pub const GL_PATH_DASH_CAPS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907B, .hex);
pub const GL_PATH_INITIAL_DASH_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907C, .hex);
pub const GL_PATH_TERMINAL_DASH_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907D, .hex);
pub const GL_PATH_DASH_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907E, .hex);
pub const GL_PATH_CLIENT_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907F, .hex);
pub const GL_PATH_FILL_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9080, .hex);
pub const GL_PATH_FILL_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9081, .hex);
pub const GL_PATH_FILL_COVER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9082, .hex);
pub const GL_PATH_STROKE_COVER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9083, .hex);
pub const GL_PATH_STROKE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9084, .hex);
pub const GL_PATH_STROKE_BOUND_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9086, .hex);
pub const GL_COUNT_UP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9088, .hex);
pub const GL_COUNT_DOWN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9089, .hex);
pub const GL_PATH_OBJECT_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908A, .hex);
pub const GL_CONVEX_HULL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908B, .hex);
pub const GL_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908D, .hex);
pub const GL_TRANSLATE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908E, .hex);
pub const GL_TRANSLATE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908F, .hex);
pub const GL_TRANSLATE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9090, .hex);
pub const GL_TRANSLATE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9091, .hex);
pub const GL_AFFINE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9092, .hex);
pub const GL_AFFINE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9094, .hex);
pub const GL_TRANSPOSE_AFFINE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9096, .hex);
pub const GL_TRANSPOSE_AFFINE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9098, .hex);
pub const GL_UTF8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909A, .hex);
pub const GL_UTF16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909B, .hex);
pub const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909C, .hex);
pub const GL_PATH_COMMAND_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909D, .hex);
pub const GL_PATH_COORD_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909E, .hex);
pub const GL_PATH_DASH_ARRAY_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909F, .hex);
pub const GL_PATH_COMPUTED_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A0, .hex);
pub const GL_PATH_FILL_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A1, .hex);
pub const GL_PATH_STROKE_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A2, .hex);
pub const GL_SQUARE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A3, .hex);
pub const GL_ROUND_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A4, .hex);
pub const GL_TRIANGULAR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A5, .hex);
pub const GL_BEVEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A6, .hex);
pub const GL_MITER_REVERT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A7, .hex);
pub const GL_MITER_TRUNCATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A8, .hex);
pub const GL_SKIP_MISSING_GLYPH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A9, .hex);
pub const GL_USE_MISSING_GLYPH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AA, .hex);
pub const GL_PATH_ERROR_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AB, .hex);
pub const GL_PATH_FOG_GEN_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AC, .hex);
pub const GL_ACCUM_ADJACENT_PAIRS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AD, .hex);
pub const GL_ADJACENT_PAIRS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AE, .hex);
pub const GL_FIRST_TO_REST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AF, .hex);
pub const GL_PATH_GEN_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B0, .hex);
pub const GL_PATH_GEN_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B1, .hex);
pub const GL_PATH_GEN_COLOR_FORMAT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B2, .hex);
pub const GL_PATH_GEN_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B3, .hex);
pub const GL_PATH_DASH_OFFSET_RESET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B4, .hex);
pub const GL_MOVE_TO_RESETS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B5, .hex);
pub const GL_MOVE_TO_CONTINUES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B6, .hex);
pub const GL_PATH_STENCIL_FUNC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B7, .hex);
pub const GL_PATH_STENCIL_REF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B8, .hex);
pub const GL_PATH_STENCIL_VALUE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B9, .hex);
pub const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BD, .hex);
pub const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BE, .hex);
pub const GL_PATH_COVER_DEPTH_FUNC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BF, .hex);
pub const GL_FONT_GLYPHS_AVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9368, .hex);
pub const GL_FONT_TARGET_UNAVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9369, .hex);
pub const GL_FONT_UNAVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936A, .hex);
pub const GL_FONT_UNINTELLIGIBLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936B, .hex);
pub const GL_STANDARD_FONT_FORMAT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936C, .hex);
pub const GL_FRAGMENT_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936D, .hex);
pub const GL_FONT_X_MIN_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const GL_FONT_Y_MIN_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex);
pub const GL_FONT_X_MAX_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex);
pub const GL_FONT_Y_MAX_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex);
pub const GL_FONT_UNITS_PER_EM_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex);
pub const GL_FONT_ASCENDER_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex);
pub const GL_FONT_DESCENDER_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex);
pub const GL_FONT_HEIGHT_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex);
pub const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex);
pub const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex);
pub const GL_FONT_UNDERLINE_POSITION_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex);
pub const GL_FONT_UNDERLINE_THICKNESS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex);
pub const GL_FONT_HAS_KERNING_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex);
pub const GL_FONT_NUM_GLYPH_INDICES_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
// /usr/include/GL/glew.h:16858:9: warning: macro 'glCopyPathNV' contains a runtime value, translated to function
pub inline fn glCopyPathNV() @TypeOf(GLEW_GET_FUN(__glewCopyPathNV)) {
    return GLEW_GET_FUN(__glewCopyPathNV);
}
// /usr/include/GL/glew.h:16859:9: warning: macro 'glCoverFillPathInstancedNV' contains a runtime value, translated to function
pub inline fn glCoverFillPathInstancedNV() @TypeOf(GLEW_GET_FUN(__glewCoverFillPathInstancedNV)) {
    return GLEW_GET_FUN(__glewCoverFillPathInstancedNV);
}
// /usr/include/GL/glew.h:16860:9: warning: macro 'glCoverFillPathNV' contains a runtime value, translated to function
pub inline fn glCoverFillPathNV() @TypeOf(GLEW_GET_FUN(__glewCoverFillPathNV)) {
    return GLEW_GET_FUN(__glewCoverFillPathNV);
}
// /usr/include/GL/glew.h:16861:9: warning: macro 'glCoverStrokePathInstancedNV' contains a runtime value, translated to function
pub inline fn glCoverStrokePathInstancedNV() @TypeOf(GLEW_GET_FUN(__glewCoverStrokePathInstancedNV)) {
    return GLEW_GET_FUN(__glewCoverStrokePathInstancedNV);
}
// /usr/include/GL/glew.h:16862:9: warning: macro 'glCoverStrokePathNV' contains a runtime value, translated to function
pub inline fn glCoverStrokePathNV() @TypeOf(GLEW_GET_FUN(__glewCoverStrokePathNV)) {
    return GLEW_GET_FUN(__glewCoverStrokePathNV);
}
// /usr/include/GL/glew.h:16863:9: warning: macro 'glDeletePathsNV' contains a runtime value, translated to function
pub inline fn glDeletePathsNV() @TypeOf(GLEW_GET_FUN(__glewDeletePathsNV)) {
    return GLEW_GET_FUN(__glewDeletePathsNV);
}
// /usr/include/GL/glew.h:16864:9: warning: macro 'glGenPathsNV' contains a runtime value, translated to function
pub inline fn glGenPathsNV() @TypeOf(GLEW_GET_FUN(__glewGenPathsNV)) {
    return GLEW_GET_FUN(__glewGenPathsNV);
}
// /usr/include/GL/glew.h:16865:9: warning: macro 'glGetPathColorGenfvNV' contains a runtime value, translated to function
pub inline fn glGetPathColorGenfvNV() @TypeOf(GLEW_GET_FUN(__glewGetPathColorGenfvNV)) {
    return GLEW_GET_FUN(__glewGetPathColorGenfvNV);
}
// /usr/include/GL/glew.h:16866:9: warning: macro 'glGetPathColorGenivNV' contains a runtime value, translated to function
pub inline fn glGetPathColorGenivNV() @TypeOf(GLEW_GET_FUN(__glewGetPathColorGenivNV)) {
    return GLEW_GET_FUN(__glewGetPathColorGenivNV);
}
// /usr/include/GL/glew.h:16867:9: warning: macro 'glGetPathCommandsNV' contains a runtime value, translated to function
pub inline fn glGetPathCommandsNV() @TypeOf(GLEW_GET_FUN(__glewGetPathCommandsNV)) {
    return GLEW_GET_FUN(__glewGetPathCommandsNV);
}
// /usr/include/GL/glew.h:16868:9: warning: macro 'glGetPathCoordsNV' contains a runtime value, translated to function
pub inline fn glGetPathCoordsNV() @TypeOf(GLEW_GET_FUN(__glewGetPathCoordsNV)) {
    return GLEW_GET_FUN(__glewGetPathCoordsNV);
}
// /usr/include/GL/glew.h:16869:9: warning: macro 'glGetPathDashArrayNV' contains a runtime value, translated to function
pub inline fn glGetPathDashArrayNV() @TypeOf(GLEW_GET_FUN(__glewGetPathDashArrayNV)) {
    return GLEW_GET_FUN(__glewGetPathDashArrayNV);
}
// /usr/include/GL/glew.h:16870:9: warning: macro 'glGetPathLengthNV' contains a runtime value, translated to function
pub inline fn glGetPathLengthNV() @TypeOf(GLEW_GET_FUN(__glewGetPathLengthNV)) {
    return GLEW_GET_FUN(__glewGetPathLengthNV);
}
// /usr/include/GL/glew.h:16871:9: warning: macro 'glGetPathMetricRangeNV' contains a runtime value, translated to function
pub inline fn glGetPathMetricRangeNV() @TypeOf(GLEW_GET_FUN(__glewGetPathMetricRangeNV)) {
    return GLEW_GET_FUN(__glewGetPathMetricRangeNV);
}
// /usr/include/GL/glew.h:16872:9: warning: macro 'glGetPathMetricsNV' contains a runtime value, translated to function
pub inline fn glGetPathMetricsNV() @TypeOf(GLEW_GET_FUN(__glewGetPathMetricsNV)) {
    return GLEW_GET_FUN(__glewGetPathMetricsNV);
}
// /usr/include/GL/glew.h:16873:9: warning: macro 'glGetPathParameterfvNV' contains a runtime value, translated to function
pub inline fn glGetPathParameterfvNV() @TypeOf(GLEW_GET_FUN(__glewGetPathParameterfvNV)) {
    return GLEW_GET_FUN(__glewGetPathParameterfvNV);
}
// /usr/include/GL/glew.h:16874:9: warning: macro 'glGetPathParameterivNV' contains a runtime value, translated to function
pub inline fn glGetPathParameterivNV() @TypeOf(GLEW_GET_FUN(__glewGetPathParameterivNV)) {
    return GLEW_GET_FUN(__glewGetPathParameterivNV);
}
// /usr/include/GL/glew.h:16875:9: warning: macro 'glGetPathSpacingNV' contains a runtime value, translated to function
pub inline fn glGetPathSpacingNV() @TypeOf(GLEW_GET_FUN(__glewGetPathSpacingNV)) {
    return GLEW_GET_FUN(__glewGetPathSpacingNV);
}
// /usr/include/GL/glew.h:16876:9: warning: macro 'glGetPathTexGenfvNV' contains a runtime value, translated to function
pub inline fn glGetPathTexGenfvNV() @TypeOf(GLEW_GET_FUN(__glewGetPathTexGenfvNV)) {
    return GLEW_GET_FUN(__glewGetPathTexGenfvNV);
}
// /usr/include/GL/glew.h:16877:9: warning: macro 'glGetPathTexGenivNV' contains a runtime value, translated to function
pub inline fn glGetPathTexGenivNV() @TypeOf(GLEW_GET_FUN(__glewGetPathTexGenivNV)) {
    return GLEW_GET_FUN(__glewGetPathTexGenivNV);
}
// /usr/include/GL/glew.h:16878:9: warning: macro 'glGetProgramResourcefvNV' contains a runtime value, translated to function
pub inline fn glGetProgramResourcefvNV() @TypeOf(GLEW_GET_FUN(__glewGetProgramResourcefvNV)) {
    return GLEW_GET_FUN(__glewGetProgramResourcefvNV);
}
// /usr/include/GL/glew.h:16879:9: warning: macro 'glInterpolatePathsNV' contains a runtime value, translated to function
pub inline fn glInterpolatePathsNV() @TypeOf(GLEW_GET_FUN(__glewInterpolatePathsNV)) {
    return GLEW_GET_FUN(__glewInterpolatePathsNV);
}
// /usr/include/GL/glew.h:16880:9: warning: macro 'glIsPathNV' contains a runtime value, translated to function
pub inline fn glIsPathNV() @TypeOf(GLEW_GET_FUN(__glewIsPathNV)) {
    return GLEW_GET_FUN(__glewIsPathNV);
}
// /usr/include/GL/glew.h:16881:9: warning: macro 'glIsPointInFillPathNV' contains a runtime value, translated to function
pub inline fn glIsPointInFillPathNV() @TypeOf(GLEW_GET_FUN(__glewIsPointInFillPathNV)) {
    return GLEW_GET_FUN(__glewIsPointInFillPathNV);
}
// /usr/include/GL/glew.h:16882:9: warning: macro 'glIsPointInStrokePathNV' contains a runtime value, translated to function
pub inline fn glIsPointInStrokePathNV() @TypeOf(GLEW_GET_FUN(__glewIsPointInStrokePathNV)) {
    return GLEW_GET_FUN(__glewIsPointInStrokePathNV);
}
// /usr/include/GL/glew.h:16883:9: warning: macro 'glMatrixLoad3x2fNV' contains a runtime value, translated to function
pub inline fn glMatrixLoad3x2fNV() @TypeOf(GLEW_GET_FUN(__glewMatrixLoad3x2fNV)) {
    return GLEW_GET_FUN(__glewMatrixLoad3x2fNV);
}
// /usr/include/GL/glew.h:16884:9: warning: macro 'glMatrixLoad3x3fNV' contains a runtime value, translated to function
pub inline fn glMatrixLoad3x3fNV() @TypeOf(GLEW_GET_FUN(__glewMatrixLoad3x3fNV)) {
    return GLEW_GET_FUN(__glewMatrixLoad3x3fNV);
}
// /usr/include/GL/glew.h:16885:9: warning: macro 'glMatrixLoadTranspose3x3fNV' contains a runtime value, translated to function
pub inline fn glMatrixLoadTranspose3x3fNV() @TypeOf(GLEW_GET_FUN(__glewMatrixLoadTranspose3x3fNV)) {
    return GLEW_GET_FUN(__glewMatrixLoadTranspose3x3fNV);
}
// /usr/include/GL/glew.h:16886:9: warning: macro 'glMatrixMult3x2fNV' contains a runtime value, translated to function
pub inline fn glMatrixMult3x2fNV() @TypeOf(GLEW_GET_FUN(__glewMatrixMult3x2fNV)) {
    return GLEW_GET_FUN(__glewMatrixMult3x2fNV);
}
// /usr/include/GL/glew.h:16887:9: warning: macro 'glMatrixMult3x3fNV' contains a runtime value, translated to function
pub inline fn glMatrixMult3x3fNV() @TypeOf(GLEW_GET_FUN(__glewMatrixMult3x3fNV)) {
    return GLEW_GET_FUN(__glewMatrixMult3x3fNV);
}
// /usr/include/GL/glew.h:16888:9: warning: macro 'glMatrixMultTranspose3x3fNV' contains a runtime value, translated to function
pub inline fn glMatrixMultTranspose3x3fNV() @TypeOf(GLEW_GET_FUN(__glewMatrixMultTranspose3x3fNV)) {
    return GLEW_GET_FUN(__glewMatrixMultTranspose3x3fNV);
}
// /usr/include/GL/glew.h:16889:9: warning: macro 'glPathColorGenNV' contains a runtime value, translated to function
pub inline fn glPathColorGenNV() @TypeOf(GLEW_GET_FUN(__glewPathColorGenNV)) {
    return GLEW_GET_FUN(__glewPathColorGenNV);
}
// /usr/include/GL/glew.h:16890:9: warning: macro 'glPathCommandsNV' contains a runtime value, translated to function
pub inline fn glPathCommandsNV() @TypeOf(GLEW_GET_FUN(__glewPathCommandsNV)) {
    return GLEW_GET_FUN(__glewPathCommandsNV);
}
// /usr/include/GL/glew.h:16891:9: warning: macro 'glPathCoordsNV' contains a runtime value, translated to function
pub inline fn glPathCoordsNV() @TypeOf(GLEW_GET_FUN(__glewPathCoordsNV)) {
    return GLEW_GET_FUN(__glewPathCoordsNV);
}
// /usr/include/GL/glew.h:16892:9: warning: macro 'glPathCoverDepthFuncNV' contains a runtime value, translated to function
pub inline fn glPathCoverDepthFuncNV() @TypeOf(GLEW_GET_FUN(__glewPathCoverDepthFuncNV)) {
    return GLEW_GET_FUN(__glewPathCoverDepthFuncNV);
}
// /usr/include/GL/glew.h:16893:9: warning: macro 'glPathDashArrayNV' contains a runtime value, translated to function
pub inline fn glPathDashArrayNV() @TypeOf(GLEW_GET_FUN(__glewPathDashArrayNV)) {
    return GLEW_GET_FUN(__glewPathDashArrayNV);
}
// /usr/include/GL/glew.h:16894:9: warning: macro 'glPathFogGenNV' contains a runtime value, translated to function
pub inline fn glPathFogGenNV() @TypeOf(GLEW_GET_FUN(__glewPathFogGenNV)) {
    return GLEW_GET_FUN(__glewPathFogGenNV);
}
// /usr/include/GL/glew.h:16895:9: warning: macro 'glPathGlyphIndexArrayNV' contains a runtime value, translated to function
pub inline fn glPathGlyphIndexArrayNV() @TypeOf(GLEW_GET_FUN(__glewPathGlyphIndexArrayNV)) {
    return GLEW_GET_FUN(__glewPathGlyphIndexArrayNV);
}
// /usr/include/GL/glew.h:16896:9: warning: macro 'glPathGlyphIndexRangeNV' contains a runtime value, translated to function
pub inline fn glPathGlyphIndexRangeNV() @TypeOf(GLEW_GET_FUN(__glewPathGlyphIndexRangeNV)) {
    return GLEW_GET_FUN(__glewPathGlyphIndexRangeNV);
}
// /usr/include/GL/glew.h:16897:9: warning: macro 'glPathGlyphRangeNV' contains a runtime value, translated to function
pub inline fn glPathGlyphRangeNV() @TypeOf(GLEW_GET_FUN(__glewPathGlyphRangeNV)) {
    return GLEW_GET_FUN(__glewPathGlyphRangeNV);
}
// /usr/include/GL/glew.h:16898:9: warning: macro 'glPathGlyphsNV' contains a runtime value, translated to function
pub inline fn glPathGlyphsNV() @TypeOf(GLEW_GET_FUN(__glewPathGlyphsNV)) {
    return GLEW_GET_FUN(__glewPathGlyphsNV);
}
// /usr/include/GL/glew.h:16899:9: warning: macro 'glPathMemoryGlyphIndexArrayNV' contains a runtime value, translated to function
pub inline fn glPathMemoryGlyphIndexArrayNV() @TypeOf(GLEW_GET_FUN(__glewPathMemoryGlyphIndexArrayNV)) {
    return GLEW_GET_FUN(__glewPathMemoryGlyphIndexArrayNV);
}
// /usr/include/GL/glew.h:16900:9: warning: macro 'glPathParameterfNV' contains a runtime value, translated to function
pub inline fn glPathParameterfNV() @TypeOf(GLEW_GET_FUN(__glewPathParameterfNV)) {
    return GLEW_GET_FUN(__glewPathParameterfNV);
}
// /usr/include/GL/glew.h:16901:9: warning: macro 'glPathParameterfvNV' contains a runtime value, translated to function
pub inline fn glPathParameterfvNV() @TypeOf(GLEW_GET_FUN(__glewPathParameterfvNV)) {
    return GLEW_GET_FUN(__glewPathParameterfvNV);
}
// /usr/include/GL/glew.h:16902:9: warning: macro 'glPathParameteriNV' contains a runtime value, translated to function
pub inline fn glPathParameteriNV() @TypeOf(GLEW_GET_FUN(__glewPathParameteriNV)) {
    return GLEW_GET_FUN(__glewPathParameteriNV);
}
// /usr/include/GL/glew.h:16903:9: warning: macro 'glPathParameterivNV' contains a runtime value, translated to function
pub inline fn glPathParameterivNV() @TypeOf(GLEW_GET_FUN(__glewPathParameterivNV)) {
    return GLEW_GET_FUN(__glewPathParameterivNV);
}
// /usr/include/GL/glew.h:16904:9: warning: macro 'glPathStencilDepthOffsetNV' contains a runtime value, translated to function
pub inline fn glPathStencilDepthOffsetNV() @TypeOf(GLEW_GET_FUN(__glewPathStencilDepthOffsetNV)) {
    return GLEW_GET_FUN(__glewPathStencilDepthOffsetNV);
}
// /usr/include/GL/glew.h:16905:9: warning: macro 'glPathStencilFuncNV' contains a runtime value, translated to function
pub inline fn glPathStencilFuncNV() @TypeOf(GLEW_GET_FUN(__glewPathStencilFuncNV)) {
    return GLEW_GET_FUN(__glewPathStencilFuncNV);
}
// /usr/include/GL/glew.h:16906:9: warning: macro 'glPathStringNV' contains a runtime value, translated to function
pub inline fn glPathStringNV() @TypeOf(GLEW_GET_FUN(__glewPathStringNV)) {
    return GLEW_GET_FUN(__glewPathStringNV);
}
// /usr/include/GL/glew.h:16907:9: warning: macro 'glPathSubCommandsNV' contains a runtime value, translated to function
pub inline fn glPathSubCommandsNV() @TypeOf(GLEW_GET_FUN(__glewPathSubCommandsNV)) {
    return GLEW_GET_FUN(__glewPathSubCommandsNV);
}
// /usr/include/GL/glew.h:16908:9: warning: macro 'glPathSubCoordsNV' contains a runtime value, translated to function
pub inline fn glPathSubCoordsNV() @TypeOf(GLEW_GET_FUN(__glewPathSubCoordsNV)) {
    return GLEW_GET_FUN(__glewPathSubCoordsNV);
}
// /usr/include/GL/glew.h:16909:9: warning: macro 'glPathTexGenNV' contains a runtime value, translated to function
pub inline fn glPathTexGenNV() @TypeOf(GLEW_GET_FUN(__glewPathTexGenNV)) {
    return GLEW_GET_FUN(__glewPathTexGenNV);
}
// /usr/include/GL/glew.h:16910:9: warning: macro 'glPointAlongPathNV' contains a runtime value, translated to function
pub inline fn glPointAlongPathNV() @TypeOf(GLEW_GET_FUN(__glewPointAlongPathNV)) {
    return GLEW_GET_FUN(__glewPointAlongPathNV);
}
// /usr/include/GL/glew.h:16911:9: warning: macro 'glProgramPathFragmentInputGenNV' contains a runtime value, translated to function
pub inline fn glProgramPathFragmentInputGenNV() @TypeOf(GLEW_GET_FUN(__glewProgramPathFragmentInputGenNV)) {
    return GLEW_GET_FUN(__glewProgramPathFragmentInputGenNV);
}
// /usr/include/GL/glew.h:16912:9: warning: macro 'glStencilFillPathInstancedNV' contains a runtime value, translated to function
pub inline fn glStencilFillPathInstancedNV() @TypeOf(GLEW_GET_FUN(__glewStencilFillPathInstancedNV)) {
    return GLEW_GET_FUN(__glewStencilFillPathInstancedNV);
}
// /usr/include/GL/glew.h:16913:9: warning: macro 'glStencilFillPathNV' contains a runtime value, translated to function
pub inline fn glStencilFillPathNV() @TypeOf(GLEW_GET_FUN(__glewStencilFillPathNV)) {
    return GLEW_GET_FUN(__glewStencilFillPathNV);
}
// /usr/include/GL/glew.h:16914:9: warning: macro 'glStencilStrokePathInstancedNV' contains a runtime value, translated to function
pub inline fn glStencilStrokePathInstancedNV() @TypeOf(GLEW_GET_FUN(__glewStencilStrokePathInstancedNV)) {
    return GLEW_GET_FUN(__glewStencilStrokePathInstancedNV);
}
// /usr/include/GL/glew.h:16915:9: warning: macro 'glStencilStrokePathNV' contains a runtime value, translated to function
pub inline fn glStencilStrokePathNV() @TypeOf(GLEW_GET_FUN(__glewStencilStrokePathNV)) {
    return GLEW_GET_FUN(__glewStencilStrokePathNV);
}
// /usr/include/GL/glew.h:16916:9: warning: macro 'glStencilThenCoverFillPathInstancedNV' contains a runtime value, translated to function
pub inline fn glStencilThenCoverFillPathInstancedNV() @TypeOf(GLEW_GET_FUN(__glewStencilThenCoverFillPathInstancedNV)) {
    return GLEW_GET_FUN(__glewStencilThenCoverFillPathInstancedNV);
}
// /usr/include/GL/glew.h:16917:9: warning: macro 'glStencilThenCoverFillPathNV' contains a runtime value, translated to function
pub inline fn glStencilThenCoverFillPathNV() @TypeOf(GLEW_GET_FUN(__glewStencilThenCoverFillPathNV)) {
    return GLEW_GET_FUN(__glewStencilThenCoverFillPathNV);
}
// /usr/include/GL/glew.h:16918:9: warning: macro 'glStencilThenCoverStrokePathInstancedNV' contains a runtime value, translated to function
pub inline fn glStencilThenCoverStrokePathInstancedNV() @TypeOf(GLEW_GET_FUN(__glewStencilThenCoverStrokePathInstancedNV)) {
    return GLEW_GET_FUN(__glewStencilThenCoverStrokePathInstancedNV);
}
// /usr/include/GL/glew.h:16919:9: warning: macro 'glStencilThenCoverStrokePathNV' contains a runtime value, translated to function
pub inline fn glStencilThenCoverStrokePathNV() @TypeOf(GLEW_GET_FUN(__glewStencilThenCoverStrokePathNV)) {
    return GLEW_GET_FUN(__glewStencilThenCoverStrokePathNV);
}
// /usr/include/GL/glew.h:16920:9: warning: macro 'glTransformPathNV' contains a runtime value, translated to function
pub inline fn glTransformPathNV() @TypeOf(GLEW_GET_FUN(__glewTransformPathNV)) {
    return GLEW_GET_FUN(__glewTransformPathNV);
}
// /usr/include/GL/glew.h:16921:9: warning: macro 'glWeightPathsNV' contains a runtime value, translated to function
pub inline fn glWeightPathsNV() @TypeOf(GLEW_GET_FUN(__glewWeightPathsNV)) {
    return GLEW_GET_FUN(__glewWeightPathsNV);
}
// /usr/include/GL/glew.h:16923:9: warning: macro 'GLEW_NV_path_rendering' contains a runtime value, translated to function
pub inline fn GLEW_NV_path_rendering() @TypeOf(GLEW_GET_VAR(__GLEW_NV_path_rendering)) {
    return GLEW_GET_VAR(__GLEW_NV_path_rendering);
}
pub const GL_NV_path_rendering_shared_edge = @as(c_int, 1);
pub const GL_SHARED_EDGE_NV = @as(c_int, 0xC0);
// /usr/include/GL/glew.h:16934:9: warning: macro 'GLEW_NV_path_rendering_shared_edge' contains a runtime value, translated to function
pub inline fn GLEW_NV_path_rendering_shared_edge() @TypeOf(GLEW_GET_VAR(__GLEW_NV_path_rendering_shared_edge)) {
    return GLEW_GET_VAR(__GLEW_NV_path_rendering_shared_edge);
}
pub const GL_NV_pixel_buffer_object = @as(c_int, 1);
pub const GL_PIXEL_PACK_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hex);
pub const GL_PIXEL_UNPACK_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hex);
pub const GL_PIXEL_PACK_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hex);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hex);
// /usr/include/GL/glew.h:16948:9: warning: macro 'GLEW_NV_pixel_buffer_object' contains a runtime value, translated to function
pub inline fn GLEW_NV_pixel_buffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_NV_pixel_buffer_object)) {
    return GLEW_GET_VAR(__GLEW_NV_pixel_buffer_object);
}
pub const GL_NV_pixel_data_range = @as(c_int, 1);
pub const GL_WRITE_PIXEL_DATA_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8878, .hex);
pub const GL_READ_PIXEL_DATA_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8879, .hex);
pub const GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887A, .hex);
pub const GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887B, .hex);
pub const GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887C, .hex);
pub const GL_READ_PIXEL_DATA_RANGE_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887D, .hex);
// /usr/include/GL/glew.h:16967:9: warning: macro 'glFlushPixelDataRangeNV' contains a runtime value, translated to function
pub inline fn glFlushPixelDataRangeNV() @TypeOf(GLEW_GET_FUN(__glewFlushPixelDataRangeNV)) {
    return GLEW_GET_FUN(__glewFlushPixelDataRangeNV);
}
// /usr/include/GL/glew.h:16968:9: warning: macro 'glPixelDataRangeNV' contains a runtime value, translated to function
pub inline fn glPixelDataRangeNV() @TypeOf(GLEW_GET_FUN(__glewPixelDataRangeNV)) {
    return GLEW_GET_FUN(__glewPixelDataRangeNV);
}
// /usr/include/GL/glew.h:16970:9: warning: macro 'GLEW_NV_pixel_data_range' contains a runtime value, translated to function
pub inline fn GLEW_NV_pixel_data_range() @TypeOf(GLEW_GET_VAR(__GLEW_NV_pixel_data_range)) {
    return GLEW_GET_VAR(__GLEW_NV_pixel_data_range);
}
pub const GL_NV_platform_binary = @as(c_int, 1);
pub const GL_NVIDIA_PLATFORM_BINARY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x890B, .hex);
// /usr/include/GL/glew.h:16981:9: warning: macro 'GLEW_NV_platform_binary' contains a runtime value, translated to function
pub inline fn GLEW_NV_platform_binary() @TypeOf(GLEW_GET_VAR(__GLEW_NV_platform_binary)) {
    return GLEW_GET_VAR(__GLEW_NV_platform_binary);
}
pub const GL_NV_point_sprite = @as(c_int, 1);
pub const GL_POINT_SPRITE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hex);
pub const GL_COORD_REPLACE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hex);
pub const GL_POINT_SPRITE_R_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8863, .hex);
// /usr/include/GL/glew.h:16997:9: warning: macro 'glPointParameteriNV' contains a runtime value, translated to function
pub inline fn glPointParameteriNV() @TypeOf(GLEW_GET_FUN(__glewPointParameteriNV)) {
    return GLEW_GET_FUN(__glewPointParameteriNV);
}
// /usr/include/GL/glew.h:16998:9: warning: macro 'glPointParameterivNV' contains a runtime value, translated to function
pub inline fn glPointParameterivNV() @TypeOf(GLEW_GET_FUN(__glewPointParameterivNV)) {
    return GLEW_GET_FUN(__glewPointParameterivNV);
}
// /usr/include/GL/glew.h:17000:9: warning: macro 'GLEW_NV_point_sprite' contains a runtime value, translated to function
pub inline fn GLEW_NV_point_sprite() @TypeOf(GLEW_GET_VAR(__GLEW_NV_point_sprite)) {
    return GLEW_GET_VAR(__GLEW_NV_point_sprite);
}
pub const GL_NV_polygon_mode = @as(c_int, 1);
pub const GL_POLYGON_MODE_NV = @as(c_int, 0x0B40);
pub const GL_POINT_NV = @as(c_int, 0x1B00);
pub const GL_LINE_NV = @as(c_int, 0x1B01);
pub const GL_FILL_NV = @as(c_int, 0x1B02);
pub const GL_POLYGON_OFFSET_POINT_NV = @as(c_int, 0x2A01);
pub const GL_POLYGON_OFFSET_LINE_NV = @as(c_int, 0x2A02);
// /usr/include/GL/glew.h:17018:9: warning: macro 'glPolygonModeNV' contains a runtime value, translated to function
pub inline fn glPolygonModeNV() @TypeOf(GLEW_GET_FUN(__glewPolygonModeNV)) {
    return GLEW_GET_FUN(__glewPolygonModeNV);
}
// /usr/include/GL/glew.h:17020:9: warning: macro 'GLEW_NV_polygon_mode' contains a runtime value, translated to function
pub inline fn GLEW_NV_polygon_mode() @TypeOf(GLEW_GET_VAR(__GLEW_NV_polygon_mode)) {
    return GLEW_GET_VAR(__GLEW_NV_polygon_mode);
}
pub const GL_NV_present_video = @as(c_int, 1);
pub const GL_FRAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E26, .hex);
pub const GL_FIELDS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E27, .hex);
pub const GL_CURRENT_TIME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hex);
pub const GL_NUM_FILL_STREAMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E29, .hex);
pub const GL_PRESENT_TIME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2A, .hex);
pub const GL_PRESENT_DURATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2B, .hex);
// /usr/include/GL/glew.h:17043:9: warning: macro 'glGetVideoi64vNV' contains a runtime value, translated to function
pub inline fn glGetVideoi64vNV() @TypeOf(GLEW_GET_FUN(__glewGetVideoi64vNV)) {
    return GLEW_GET_FUN(__glewGetVideoi64vNV);
}
// /usr/include/GL/glew.h:17044:9: warning: macro 'glGetVideoivNV' contains a runtime value, translated to function
pub inline fn glGetVideoivNV() @TypeOf(GLEW_GET_FUN(__glewGetVideoivNV)) {
    return GLEW_GET_FUN(__glewGetVideoivNV);
}
// /usr/include/GL/glew.h:17045:9: warning: macro 'glGetVideoui64vNV' contains a runtime value, translated to function
pub inline fn glGetVideoui64vNV() @TypeOf(GLEW_GET_FUN(__glewGetVideoui64vNV)) {
    return GLEW_GET_FUN(__glewGetVideoui64vNV);
}
// /usr/include/GL/glew.h:17046:9: warning: macro 'glGetVideouivNV' contains a runtime value, translated to function
pub inline fn glGetVideouivNV() @TypeOf(GLEW_GET_FUN(__glewGetVideouivNV)) {
    return GLEW_GET_FUN(__glewGetVideouivNV);
}
// /usr/include/GL/glew.h:17047:9: warning: macro 'glPresentFrameDualFillNV' contains a runtime value, translated to function
pub inline fn glPresentFrameDualFillNV() @TypeOf(GLEW_GET_FUN(__glewPresentFrameDualFillNV)) {
    return GLEW_GET_FUN(__glewPresentFrameDualFillNV);
}
// /usr/include/GL/glew.h:17048:9: warning: macro 'glPresentFrameKeyedNV' contains a runtime value, translated to function
pub inline fn glPresentFrameKeyedNV() @TypeOf(GLEW_GET_FUN(__glewPresentFrameKeyedNV)) {
    return GLEW_GET_FUN(__glewPresentFrameKeyedNV);
}
// /usr/include/GL/glew.h:17050:9: warning: macro 'GLEW_NV_present_video' contains a runtime value, translated to function
pub inline fn GLEW_NV_present_video() @TypeOf(GLEW_GET_VAR(__GLEW_NV_present_video)) {
    return GLEW_GET_VAR(__GLEW_NV_present_video);
}
pub const GL_NV_primitive_restart = @as(c_int, 1);
pub const GL_PRIMITIVE_RESTART_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8558, .hex);
pub const GL_PRIMITIVE_RESTART_INDEX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8559, .hex);
// /usr/include/GL/glew.h:17065:9: warning: macro 'glPrimitiveRestartIndexNV' contains a runtime value, translated to function
pub inline fn glPrimitiveRestartIndexNV() @TypeOf(GLEW_GET_FUN(__glewPrimitiveRestartIndexNV)) {
    return GLEW_GET_FUN(__glewPrimitiveRestartIndexNV);
}
// /usr/include/GL/glew.h:17066:9: warning: macro 'glPrimitiveRestartNV' contains a runtime value, translated to function
pub inline fn glPrimitiveRestartNV() @TypeOf(GLEW_GET_FUN(__glewPrimitiveRestartNV)) {
    return GLEW_GET_FUN(__glewPrimitiveRestartNV);
}
// /usr/include/GL/glew.h:17068:9: warning: macro 'GLEW_NV_primitive_restart' contains a runtime value, translated to function
pub inline fn GLEW_NV_primitive_restart() @TypeOf(GLEW_GET_VAR(__GLEW_NV_primitive_restart)) {
    return GLEW_GET_VAR(__GLEW_NV_primitive_restart);
}
pub const GL_NV_query_resource_tag = @as(c_int, 1);
// /usr/include/GL/glew.h:17077:9: warning: macro 'GLEW_NV_query_resource_tag' contains a runtime value, translated to function
pub inline fn GLEW_NV_query_resource_tag() @TypeOf(GLEW_GET_VAR(__GLEW_NV_query_resource_tag)) {
    return GLEW_GET_VAR(__GLEW_NV_query_resource_tag);
}
pub const GL_NV_read_buffer = @as(c_int, 1);
pub const GL_READ_BUFFER_NV = @as(c_int, 0x0C02);
// /usr/include/GL/glew.h:17090:9: warning: macro 'glReadBufferNV' contains a runtime value, translated to function
pub inline fn glReadBufferNV() @TypeOf(GLEW_GET_FUN(__glewReadBufferNV)) {
    return GLEW_GET_FUN(__glewReadBufferNV);
}
// /usr/include/GL/glew.h:17092:9: warning: macro 'GLEW_NV_read_buffer' contains a runtime value, translated to function
pub inline fn GLEW_NV_read_buffer() @TypeOf(GLEW_GET_VAR(__GLEW_NV_read_buffer)) {
    return GLEW_GET_VAR(__GLEW_NV_read_buffer);
}
pub const GL_NV_read_buffer_front = @as(c_int, 1);
// /usr/include/GL/glew.h:17103:9: warning: macro 'GLEW_NV_read_buffer_front' contains a runtime value, translated to function
pub inline fn GLEW_NV_read_buffer_front() @TypeOf(GLEW_GET_VAR(__GLEW_NV_read_buffer_front)) {
    return GLEW_GET_VAR(__GLEW_NV_read_buffer_front);
}
pub const GL_NV_read_depth = @as(c_int, 1);
// /usr/include/GL/glew.h:17112:9: warning: macro 'GLEW_NV_read_depth' contains a runtime value, translated to function
pub inline fn GLEW_NV_read_depth() @TypeOf(GLEW_GET_VAR(__GLEW_NV_read_depth)) {
    return GLEW_GET_VAR(__GLEW_NV_read_depth);
}
pub const GL_NV_read_depth_stencil = @as(c_int, 1);
// /usr/include/GL/glew.h:17121:9: warning: macro 'GLEW_NV_read_depth_stencil' contains a runtime value, translated to function
pub inline fn GLEW_NV_read_depth_stencil() @TypeOf(GLEW_GET_VAR(__GLEW_NV_read_depth_stencil)) {
    return GLEW_GET_VAR(__GLEW_NV_read_depth_stencil);
}
pub const GL_NV_read_stencil = @as(c_int, 1);
// /usr/include/GL/glew.h:17130:9: warning: macro 'GLEW_NV_read_stencil' contains a runtime value, translated to function
pub inline fn GLEW_NV_read_stencil() @TypeOf(GLEW_GET_VAR(__GLEW_NV_read_stencil)) {
    return GLEW_GET_VAR(__GLEW_NV_read_stencil);
}
pub const GL_NV_register_combiners = @as(c_int, 1);
pub const GL_REGISTER_COMBINERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8522, .hex);
pub const GL_VARIABLE_A_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8523, .hex);
pub const GL_VARIABLE_B_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8524, .hex);
pub const GL_VARIABLE_C_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8525, .hex);
pub const GL_VARIABLE_D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8526, .hex);
pub const GL_VARIABLE_E_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8527, .hex);
pub const GL_VARIABLE_F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8528, .hex);
pub const GL_VARIABLE_G_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8529, .hex);
pub const GL_CONSTANT_COLOR0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852A, .hex);
pub const GL_CONSTANT_COLOR1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852B, .hex);
pub const GL_SPARE0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852E, .hex);
pub const GL_SPARE1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852F, .hex);
pub const GL_DISCARD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8530, .hex);
pub const GL_E_TIMES_F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8531, .hex);
pub const GL_SPARE0_PLUS_SECONDARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8532, .hex);
pub const GL_UNSIGNED_IDENTITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8536, .hex);
pub const GL_UNSIGNED_INVERT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8537, .hex);
pub const GL_EXPAND_NORMAL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8538, .hex);
pub const GL_EXPAND_NEGATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8539, .hex);
pub const GL_HALF_BIAS_NORMAL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853A, .hex);
pub const GL_HALF_BIAS_NEGATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853B, .hex);
pub const GL_SIGNED_IDENTITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853C, .hex);
pub const GL_SIGNED_NEGATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853D, .hex);
pub const GL_SCALE_BY_TWO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853E, .hex);
pub const GL_SCALE_BY_FOUR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853F, .hex);
pub const GL_SCALE_BY_ONE_HALF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8540, .hex);
pub const GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8541, .hex);
pub const GL_COMBINER_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8542, .hex);
pub const GL_COMBINER_MAPPING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8543, .hex);
pub const GL_COMBINER_COMPONENT_USAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8544, .hex);
pub const GL_COMBINER_AB_DOT_PRODUCT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8545, .hex);
pub const GL_COMBINER_CD_DOT_PRODUCT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8546, .hex);
pub const GL_COMBINER_MUX_SUM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8547, .hex);
pub const GL_COMBINER_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8548, .hex);
pub const GL_COMBINER_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8549, .hex);
pub const GL_COMBINER_AB_OUTPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854A, .hex);
pub const GL_COMBINER_CD_OUTPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854B, .hex);
pub const GL_COMBINER_SUM_OUTPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854C, .hex);
pub const GL_MAX_GENERAL_COMBINERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854D, .hex);
pub const GL_NUM_GENERAL_COMBINERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854E, .hex);
pub const GL_COLOR_SUM_CLAMP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854F, .hex);
pub const GL_COMBINER0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8550, .hex);
pub const GL_COMBINER1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8551, .hex);
pub const GL_COMBINER2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8552, .hex);
pub const GL_COMBINER3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8553, .hex);
pub const GL_COMBINER4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8554, .hex);
pub const GL_COMBINER5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8555, .hex);
pub const GL_COMBINER6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8556, .hex);
pub const GL_COMBINER7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8557, .hex);
// /usr/include/GL/glew.h:17205:9: warning: macro 'glCombinerInputNV' contains a runtime value, translated to function
pub inline fn glCombinerInputNV() @TypeOf(GLEW_GET_FUN(__glewCombinerInputNV)) {
    return GLEW_GET_FUN(__glewCombinerInputNV);
}
// /usr/include/GL/glew.h:17206:9: warning: macro 'glCombinerOutputNV' contains a runtime value, translated to function
pub inline fn glCombinerOutputNV() @TypeOf(GLEW_GET_FUN(__glewCombinerOutputNV)) {
    return GLEW_GET_FUN(__glewCombinerOutputNV);
}
// /usr/include/GL/glew.h:17207:9: warning: macro 'glCombinerParameterfNV' contains a runtime value, translated to function
pub inline fn glCombinerParameterfNV() @TypeOf(GLEW_GET_FUN(__glewCombinerParameterfNV)) {
    return GLEW_GET_FUN(__glewCombinerParameterfNV);
}
// /usr/include/GL/glew.h:17208:9: warning: macro 'glCombinerParameterfvNV' contains a runtime value, translated to function
pub inline fn glCombinerParameterfvNV() @TypeOf(GLEW_GET_FUN(__glewCombinerParameterfvNV)) {
    return GLEW_GET_FUN(__glewCombinerParameterfvNV);
}
// /usr/include/GL/glew.h:17209:9: warning: macro 'glCombinerParameteriNV' contains a runtime value, translated to function
pub inline fn glCombinerParameteriNV() @TypeOf(GLEW_GET_FUN(__glewCombinerParameteriNV)) {
    return GLEW_GET_FUN(__glewCombinerParameteriNV);
}
// /usr/include/GL/glew.h:17210:9: warning: macro 'glCombinerParameterivNV' contains a runtime value, translated to function
pub inline fn glCombinerParameterivNV() @TypeOf(GLEW_GET_FUN(__glewCombinerParameterivNV)) {
    return GLEW_GET_FUN(__glewCombinerParameterivNV);
}
// /usr/include/GL/glew.h:17211:9: warning: macro 'glFinalCombinerInputNV' contains a runtime value, translated to function
pub inline fn glFinalCombinerInputNV() @TypeOf(GLEW_GET_FUN(__glewFinalCombinerInputNV)) {
    return GLEW_GET_FUN(__glewFinalCombinerInputNV);
}
// /usr/include/GL/glew.h:17212:9: warning: macro 'glGetCombinerInputParameterfvNV' contains a runtime value, translated to function
pub inline fn glGetCombinerInputParameterfvNV() @TypeOf(GLEW_GET_FUN(__glewGetCombinerInputParameterfvNV)) {
    return GLEW_GET_FUN(__glewGetCombinerInputParameterfvNV);
}
// /usr/include/GL/glew.h:17213:9: warning: macro 'glGetCombinerInputParameterivNV' contains a runtime value, translated to function
pub inline fn glGetCombinerInputParameterivNV() @TypeOf(GLEW_GET_FUN(__glewGetCombinerInputParameterivNV)) {
    return GLEW_GET_FUN(__glewGetCombinerInputParameterivNV);
}
// /usr/include/GL/glew.h:17214:9: warning: macro 'glGetCombinerOutputParameterfvNV' contains a runtime value, translated to function
pub inline fn glGetCombinerOutputParameterfvNV() @TypeOf(GLEW_GET_FUN(__glewGetCombinerOutputParameterfvNV)) {
    return GLEW_GET_FUN(__glewGetCombinerOutputParameterfvNV);
}
// /usr/include/GL/glew.h:17215:9: warning: macro 'glGetCombinerOutputParameterivNV' contains a runtime value, translated to function
pub inline fn glGetCombinerOutputParameterivNV() @TypeOf(GLEW_GET_FUN(__glewGetCombinerOutputParameterivNV)) {
    return GLEW_GET_FUN(__glewGetCombinerOutputParameterivNV);
}
// /usr/include/GL/glew.h:17216:9: warning: macro 'glGetFinalCombinerInputParameterfvNV' contains a runtime value, translated to function
pub inline fn glGetFinalCombinerInputParameterfvNV() @TypeOf(GLEW_GET_FUN(__glewGetFinalCombinerInputParameterfvNV)) {
    return GLEW_GET_FUN(__glewGetFinalCombinerInputParameterfvNV);
}
// /usr/include/GL/glew.h:17217:9: warning: macro 'glGetFinalCombinerInputParameterivNV' contains a runtime value, translated to function
pub inline fn glGetFinalCombinerInputParameterivNV() @TypeOf(GLEW_GET_FUN(__glewGetFinalCombinerInputParameterivNV)) {
    return GLEW_GET_FUN(__glewGetFinalCombinerInputParameterivNV);
}
// /usr/include/GL/glew.h:17219:9: warning: macro 'GLEW_NV_register_combiners' contains a runtime value, translated to function
pub inline fn GLEW_NV_register_combiners() @TypeOf(GLEW_GET_VAR(__GLEW_NV_register_combiners)) {
    return GLEW_GET_VAR(__GLEW_NV_register_combiners);
}
pub const GL_NV_register_combiners2 = @as(c_int, 1);
pub const GL_PER_STAGE_CONSTANTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8535, .hex);
// /usr/include/GL/glew.h:17233:9: warning: macro 'glCombinerStageParameterfvNV' contains a runtime value, translated to function
pub inline fn glCombinerStageParameterfvNV() @TypeOf(GLEW_GET_FUN(__glewCombinerStageParameterfvNV)) {
    return GLEW_GET_FUN(__glewCombinerStageParameterfvNV);
}
// /usr/include/GL/glew.h:17234:9: warning: macro 'glGetCombinerStageParameterfvNV' contains a runtime value, translated to function
pub inline fn glGetCombinerStageParameterfvNV() @TypeOf(GLEW_GET_FUN(__glewGetCombinerStageParameterfvNV)) {
    return GLEW_GET_FUN(__glewGetCombinerStageParameterfvNV);
}
// /usr/include/GL/glew.h:17236:9: warning: macro 'GLEW_NV_register_combiners2' contains a runtime value, translated to function
pub inline fn GLEW_NV_register_combiners2() @TypeOf(GLEW_GET_VAR(__GLEW_NV_register_combiners2)) {
    return GLEW_GET_VAR(__GLEW_NV_register_combiners2);
}
pub const GL_NV_representative_fragment_test = @as(c_int, 1);
pub const GL_REPRESENTATIVE_FRAGMENT_TEST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937F, .hex);
// /usr/include/GL/glew.h:17247:9: warning: macro 'GLEW_NV_representative_fragment_test' contains a runtime value, translated to function
pub inline fn GLEW_NV_representative_fragment_test() @TypeOf(GLEW_GET_VAR(__GLEW_NV_representative_fragment_test)) {
    return GLEW_GET_VAR(__GLEW_NV_representative_fragment_test);
}
pub const GL_NV_robustness_video_memory_purge = @as(c_int, 1);
pub const GL_PURGED_CONTEXT_RESET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BB, .hex);
// /usr/include/GL/glew.h:17258:9: warning: macro 'GLEW_NV_robustness_video_memory_purge' contains a runtime value, translated to function
pub inline fn GLEW_NV_robustness_video_memory_purge() @TypeOf(GLEW_GET_VAR(__GLEW_NV_robustness_video_memory_purge)) {
    return GLEW_GET_VAR(__GLEW_NV_robustness_video_memory_purge);
}
pub const GL_NV_sRGB_formats = @as(c_int, 1);
pub const GL_ETC1_SRGB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EE, .hex);
pub const GL_SRGB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hex);
pub const GL_SLUMINANCE_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C44, .hex);
pub const GL_SLUMINANCE8_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C45, .hex);
pub const GL_SLUMINANCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C46, .hex);
pub const GL_SLUMINANCE8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C47, .hex);
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4C, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4D, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4E, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4F, .hex);
// /usr/include/GL/glew.h:17278:9: warning: macro 'GLEW_NV_sRGB_formats' contains a runtime value, translated to function
pub inline fn GLEW_NV_sRGB_formats() @TypeOf(GLEW_GET_VAR(__GLEW_NV_sRGB_formats)) {
    return GLEW_GET_VAR(__GLEW_NV_sRGB_formats);
}
pub const GL_NV_sample_locations = @as(c_int, 1);
pub const GL_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hex);
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933D, .hex);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933E, .hex);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933F, .hex);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9340, .hex);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9341, .hex);
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9342, .hex);
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9343, .hex);
// /usr/include/GL/glew.h:17300:9: warning: macro 'glFramebufferSampleLocationsfvNV' contains a runtime value, translated to function
pub inline fn glFramebufferSampleLocationsfvNV() @TypeOf(GLEW_GET_FUN(__glewFramebufferSampleLocationsfvNV)) {
    return GLEW_GET_FUN(__glewFramebufferSampleLocationsfvNV);
}
// /usr/include/GL/glew.h:17301:9: warning: macro 'glNamedFramebufferSampleLocationsfvNV' contains a runtime value, translated to function
pub inline fn glNamedFramebufferSampleLocationsfvNV() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferSampleLocationsfvNV)) {
    return GLEW_GET_FUN(__glewNamedFramebufferSampleLocationsfvNV);
}
// /usr/include/GL/glew.h:17302:9: warning: macro 'glResolveDepthValuesNV' contains a runtime value, translated to function
pub inline fn glResolveDepthValuesNV() @TypeOf(GLEW_GET_FUN(__glewResolveDepthValuesNV)) {
    return GLEW_GET_FUN(__glewResolveDepthValuesNV);
}
// /usr/include/GL/glew.h:17304:9: warning: macro 'GLEW_NV_sample_locations' contains a runtime value, translated to function
pub inline fn GLEW_NV_sample_locations() @TypeOf(GLEW_GET_VAR(__GLEW_NV_sample_locations)) {
    return GLEW_GET_VAR(__GLEW_NV_sample_locations);
}
pub const GL_NV_sample_mask_override_coverage = @as(c_int, 1);
// /usr/include/GL/glew.h:17313:9: warning: macro 'GLEW_NV_sample_mask_override_coverage' contains a runtime value, translated to function
pub inline fn GLEW_NV_sample_mask_override_coverage() @TypeOf(GLEW_GET_VAR(__GLEW_NV_sample_mask_override_coverage)) {
    return GLEW_GET_VAR(__GLEW_NV_sample_mask_override_coverage);
}
pub const GL_NV_scissor_exclusive = @as(c_int, 1);
pub const GL_SCISSOR_TEST_EXCLUSIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9555, .hex);
pub const GL_SCISSOR_BOX_EXCLUSIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9556, .hex);
// /usr/include/GL/glew.h:17328:9: warning: macro 'glScissorExclusiveArrayvNV' contains a runtime value, translated to function
pub inline fn glScissorExclusiveArrayvNV() @TypeOf(GLEW_GET_FUN(__glewScissorExclusiveArrayvNV)) {
    return GLEW_GET_FUN(__glewScissorExclusiveArrayvNV);
}
// /usr/include/GL/glew.h:17329:9: warning: macro 'glScissorExclusiveNV' contains a runtime value, translated to function
pub inline fn glScissorExclusiveNV() @TypeOf(GLEW_GET_FUN(__glewScissorExclusiveNV)) {
    return GLEW_GET_FUN(__glewScissorExclusiveNV);
}
// /usr/include/GL/glew.h:17331:9: warning: macro 'GLEW_NV_scissor_exclusive' contains a runtime value, translated to function
pub inline fn GLEW_NV_scissor_exclusive() @TypeOf(GLEW_GET_VAR(__GLEW_NV_scissor_exclusive)) {
    return GLEW_GET_VAR(__GLEW_NV_scissor_exclusive);
}
pub const GL_NV_shader_atomic_counters = @as(c_int, 1);
// /usr/include/GL/glew.h:17340:9: warning: macro 'GLEW_NV_shader_atomic_counters' contains a runtime value, translated to function
pub inline fn GLEW_NV_shader_atomic_counters() @TypeOf(GLEW_GET_VAR(__GLEW_NV_shader_atomic_counters)) {
    return GLEW_GET_VAR(__GLEW_NV_shader_atomic_counters);
}
pub const GL_NV_shader_atomic_float = @as(c_int, 1);
// /usr/include/GL/glew.h:17349:9: warning: macro 'GLEW_NV_shader_atomic_float' contains a runtime value, translated to function
pub inline fn GLEW_NV_shader_atomic_float() @TypeOf(GLEW_GET_VAR(__GLEW_NV_shader_atomic_float)) {
    return GLEW_GET_VAR(__GLEW_NV_shader_atomic_float);
}
pub const GL_NV_shader_atomic_float64 = @as(c_int, 1);
// /usr/include/GL/glew.h:17358:9: warning: macro 'GLEW_NV_shader_atomic_float64' contains a runtime value, translated to function
pub inline fn GLEW_NV_shader_atomic_float64() @TypeOf(GLEW_GET_VAR(__GLEW_NV_shader_atomic_float64)) {
    return GLEW_GET_VAR(__GLEW_NV_shader_atomic_float64);
}
pub const GL_NV_shader_atomic_fp16_vector = @as(c_int, 1);
// /usr/include/GL/glew.h:17367:9: warning: macro 'GLEW_NV_shader_atomic_fp16_vector' contains a runtime value, translated to function
pub inline fn GLEW_NV_shader_atomic_fp16_vector() @TypeOf(GLEW_GET_VAR(__GLEW_NV_shader_atomic_fp16_vector)) {
    return GLEW_GET_VAR(__GLEW_NV_shader_atomic_fp16_vector);
}
pub const GL_NV_shader_atomic_int64 = @as(c_int, 1);
// /usr/include/GL/glew.h:17376:9: warning: macro 'GLEW_NV_shader_atomic_int64' contains a runtime value, translated to function
pub inline fn GLEW_NV_shader_atomic_int64() @TypeOf(GLEW_GET_VAR(__GLEW_NV_shader_atomic_int64)) {
    return GLEW_GET_VAR(__GLEW_NV_shader_atomic_int64);
}
pub const GL_NV_shader_buffer_load = @as(c_int, 1);
pub const GL_BUFFER_GPU_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F1D, .hex);
pub const GL_GPU_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F34, .hex);
pub const GL_MAX_SHADER_BUFFER_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F35, .hex);
// /usr/include/GL/glew.h:17403:9: warning: macro 'glGetBufferParameterui64vNV' contains a runtime value, translated to function
pub inline fn glGetBufferParameterui64vNV() @TypeOf(GLEW_GET_FUN(__glewGetBufferParameterui64vNV)) {
    return GLEW_GET_FUN(__glewGetBufferParameterui64vNV);
}
// /usr/include/GL/glew.h:17404:9: warning: macro 'glGetIntegerui64vNV' contains a runtime value, translated to function
pub inline fn glGetIntegerui64vNV() @TypeOf(GLEW_GET_FUN(__glewGetIntegerui64vNV)) {
    return GLEW_GET_FUN(__glewGetIntegerui64vNV);
}
// /usr/include/GL/glew.h:17405:9: warning: macro 'glGetNamedBufferParameterui64vNV' contains a runtime value, translated to function
pub inline fn glGetNamedBufferParameterui64vNV() @TypeOf(GLEW_GET_FUN(__glewGetNamedBufferParameterui64vNV)) {
    return GLEW_GET_FUN(__glewGetNamedBufferParameterui64vNV);
}
// /usr/include/GL/glew.h:17406:9: warning: macro 'glIsBufferResidentNV' contains a runtime value, translated to function
pub inline fn glIsBufferResidentNV() @TypeOf(GLEW_GET_FUN(__glewIsBufferResidentNV)) {
    return GLEW_GET_FUN(__glewIsBufferResidentNV);
}
// /usr/include/GL/glew.h:17407:9: warning: macro 'glIsNamedBufferResidentNV' contains a runtime value, translated to function
pub inline fn glIsNamedBufferResidentNV() @TypeOf(GLEW_GET_FUN(__glewIsNamedBufferResidentNV)) {
    return GLEW_GET_FUN(__glewIsNamedBufferResidentNV);
}
// /usr/include/GL/glew.h:17408:9: warning: macro 'glMakeBufferNonResidentNV' contains a runtime value, translated to function
pub inline fn glMakeBufferNonResidentNV() @TypeOf(GLEW_GET_FUN(__glewMakeBufferNonResidentNV)) {
    return GLEW_GET_FUN(__glewMakeBufferNonResidentNV);
}
// /usr/include/GL/glew.h:17409:9: warning: macro 'glMakeBufferResidentNV' contains a runtime value, translated to function
pub inline fn glMakeBufferResidentNV() @TypeOf(GLEW_GET_FUN(__glewMakeBufferResidentNV)) {
    return GLEW_GET_FUN(__glewMakeBufferResidentNV);
}
// /usr/include/GL/glew.h:17410:9: warning: macro 'glMakeNamedBufferNonResidentNV' contains a runtime value, translated to function
pub inline fn glMakeNamedBufferNonResidentNV() @TypeOf(GLEW_GET_FUN(__glewMakeNamedBufferNonResidentNV)) {
    return GLEW_GET_FUN(__glewMakeNamedBufferNonResidentNV);
}
// /usr/include/GL/glew.h:17411:9: warning: macro 'glMakeNamedBufferResidentNV' contains a runtime value, translated to function
pub inline fn glMakeNamedBufferResidentNV() @TypeOf(GLEW_GET_FUN(__glewMakeNamedBufferResidentNV)) {
    return GLEW_GET_FUN(__glewMakeNamedBufferResidentNV);
}
// /usr/include/GL/glew.h:17412:9: warning: macro 'glProgramUniformui64NV' contains a runtime value, translated to function
pub inline fn glProgramUniformui64NV() @TypeOf(GLEW_GET_FUN(__glewProgramUniformui64NV)) {
    return GLEW_GET_FUN(__glewProgramUniformui64NV);
}
// /usr/include/GL/glew.h:17413:9: warning: macro 'glProgramUniformui64vNV' contains a runtime value, translated to function
pub inline fn glProgramUniformui64vNV() @TypeOf(GLEW_GET_FUN(__glewProgramUniformui64vNV)) {
    return GLEW_GET_FUN(__glewProgramUniformui64vNV);
}
// /usr/include/GL/glew.h:17414:9: warning: macro 'glUniformui64NV' contains a runtime value, translated to function
pub inline fn glUniformui64NV() @TypeOf(GLEW_GET_FUN(__glewUniformui64NV)) {
    return GLEW_GET_FUN(__glewUniformui64NV);
}
// /usr/include/GL/glew.h:17415:9: warning: macro 'glUniformui64vNV' contains a runtime value, translated to function
pub inline fn glUniformui64vNV() @TypeOf(GLEW_GET_FUN(__glewUniformui64vNV)) {
    return GLEW_GET_FUN(__glewUniformui64vNV);
}
// /usr/include/GL/glew.h:17417:9: warning: macro 'GLEW_NV_shader_buffer_load' contains a runtime value, translated to function
pub inline fn GLEW_NV_shader_buffer_load() @TypeOf(GLEW_GET_VAR(__GLEW_NV_shader_buffer_load)) {
    return GLEW_GET_VAR(__GLEW_NV_shader_buffer_load);
}
pub const GL_NV_shader_noperspective_interpolation = @as(c_int, 1);
// /usr/include/GL/glew.h:17426:9: warning: macro 'GLEW_NV_shader_noperspective_interpolation' contains a runtime value, translated to function
pub inline fn GLEW_NV_shader_noperspective_interpolation() @TypeOf(GLEW_GET_VAR(__GLEW_NV_shader_noperspective_interpolation)) {
    return GLEW_GET_VAR(__GLEW_NV_shader_noperspective_interpolation);
}
pub const GL_NV_shader_storage_buffer_object = @as(c_int, 1);
// /usr/include/GL/glew.h:17435:9: warning: macro 'GLEW_NV_shader_storage_buffer_object' contains a runtime value, translated to function
pub inline fn GLEW_NV_shader_storage_buffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_NV_shader_storage_buffer_object)) {
    return GLEW_GET_VAR(__GLEW_NV_shader_storage_buffer_object);
}
pub const GL_NV_shader_subgroup_partitioned = @as(c_int, 1);
pub const GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = @as(c_int, 0x00000100);
// /usr/include/GL/glew.h:17446:9: warning: macro 'GLEW_NV_shader_subgroup_partitioned' contains a runtime value, translated to function
pub inline fn GLEW_NV_shader_subgroup_partitioned() @TypeOf(GLEW_GET_VAR(__GLEW_NV_shader_subgroup_partitioned)) {
    return GLEW_GET_VAR(__GLEW_NV_shader_subgroup_partitioned);
}
pub const GL_NV_shader_texture_footprint = @as(c_int, 1);
// /usr/include/GL/glew.h:17455:9: warning: macro 'GLEW_NV_shader_texture_footprint' contains a runtime value, translated to function
pub inline fn GLEW_NV_shader_texture_footprint() @TypeOf(GLEW_GET_VAR(__GLEW_NV_shader_texture_footprint)) {
    return GLEW_GET_VAR(__GLEW_NV_shader_texture_footprint);
}
pub const GL_NV_shader_thread_group = @as(c_int, 1);
pub const GL_WARP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9339, .hex);
pub const GL_WARPS_PER_SM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933A, .hex);
pub const GL_SM_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933B, .hex);
// /usr/include/GL/glew.h:17468:9: warning: macro 'GLEW_NV_shader_thread_group' contains a runtime value, translated to function
pub inline fn GLEW_NV_shader_thread_group() @TypeOf(GLEW_GET_VAR(__GLEW_NV_shader_thread_group)) {
    return GLEW_GET_VAR(__GLEW_NV_shader_thread_group);
}
pub const GL_NV_shader_thread_shuffle = @as(c_int, 1);
// /usr/include/GL/glew.h:17477:9: warning: macro 'GLEW_NV_shader_thread_shuffle' contains a runtime value, translated to function
pub inline fn GLEW_NV_shader_thread_shuffle() @TypeOf(GLEW_GET_VAR(__GLEW_NV_shader_thread_shuffle)) {
    return GLEW_GET_VAR(__GLEW_NV_shader_thread_shuffle);
}
pub const GL_NV_shading_rate_image = @as(c_int, 1);
pub const GL_SHADING_RATE_IMAGE_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955B, .hex);
pub const GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955C, .hex);
pub const GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955D, .hex);
pub const GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955E, .hex);
pub const GL_MAX_COARSE_FRAGMENT_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955F, .hex);
pub const GL_SHADING_RATE_IMAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9563, .hex);
pub const GL_SHADING_RATE_NO_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9564, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9565, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9566, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9567, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9568, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9569, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956A, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956B, .hex);
pub const GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956C, .hex);
pub const GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956D, .hex);
pub const GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956E, .hex);
pub const GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956F, .hex);
pub const GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AE, .hex);
pub const GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AF, .hex);
pub const GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B0, .hex);
// /usr/include/GL/glew.h:17515:9: warning: macro 'glBindShadingRateImageNV' contains a runtime value, translated to function
pub inline fn glBindShadingRateImageNV() @TypeOf(GLEW_GET_FUN(__glewBindShadingRateImageNV)) {
    return GLEW_GET_FUN(__glewBindShadingRateImageNV);
}
// /usr/include/GL/glew.h:17516:9: warning: macro 'glGetShadingRateImagePaletteNV' contains a runtime value, translated to function
pub inline fn glGetShadingRateImagePaletteNV() @TypeOf(GLEW_GET_FUN(__glewGetShadingRateImagePaletteNV)) {
    return GLEW_GET_FUN(__glewGetShadingRateImagePaletteNV);
}
// /usr/include/GL/glew.h:17517:9: warning: macro 'glGetShadingRateSampleLocationivNV' contains a runtime value, translated to function
pub inline fn glGetShadingRateSampleLocationivNV() @TypeOf(GLEW_GET_FUN(__glewGetShadingRateSampleLocationivNV)) {
    return GLEW_GET_FUN(__glewGetShadingRateSampleLocationivNV);
}
// /usr/include/GL/glew.h:17518:9: warning: macro 'glShadingRateImageBarrierNV' contains a runtime value, translated to function
pub inline fn glShadingRateImageBarrierNV() @TypeOf(GLEW_GET_FUN(__glewShadingRateImageBarrierNV)) {
    return GLEW_GET_FUN(__glewShadingRateImageBarrierNV);
}
// /usr/include/GL/glew.h:17519:9: warning: macro 'glShadingRateImagePaletteNV' contains a runtime value, translated to function
pub inline fn glShadingRateImagePaletteNV() @TypeOf(GLEW_GET_FUN(__glewShadingRateImagePaletteNV)) {
    return GLEW_GET_FUN(__glewShadingRateImagePaletteNV);
}
// /usr/include/GL/glew.h:17520:9: warning: macro 'glShadingRateSampleOrderCustomNV' contains a runtime value, translated to function
pub inline fn glShadingRateSampleOrderCustomNV() @TypeOf(GLEW_GET_FUN(__glewShadingRateSampleOrderCustomNV)) {
    return GLEW_GET_FUN(__glewShadingRateSampleOrderCustomNV);
}
// /usr/include/GL/glew.h:17522:9: warning: macro 'GLEW_NV_shading_rate_image' contains a runtime value, translated to function
pub inline fn GLEW_NV_shading_rate_image() @TypeOf(GLEW_GET_VAR(__GLEW_NV_shading_rate_image)) {
    return GLEW_GET_VAR(__GLEW_NV_shading_rate_image);
}
pub const GL_NV_shadow_samplers_array = @as(c_int, 1);
pub const GL_SAMPLER_2D_ARRAY_SHADOW_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC4, .hex);
// /usr/include/GL/glew.h:17533:9: warning: macro 'GLEW_NV_shadow_samplers_array' contains a runtime value, translated to function
pub inline fn GLEW_NV_shadow_samplers_array() @TypeOf(GLEW_GET_VAR(__GLEW_NV_shadow_samplers_array)) {
    return GLEW_GET_VAR(__GLEW_NV_shadow_samplers_array);
}
pub const GL_NV_shadow_samplers_cube = @as(c_int, 1);
pub const GL_SAMPLER_CUBE_SHADOW_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC5, .hex);
// /usr/include/GL/glew.h:17544:9: warning: macro 'GLEW_NV_shadow_samplers_cube' contains a runtime value, translated to function
pub inline fn GLEW_NV_shadow_samplers_cube() @TypeOf(GLEW_GET_VAR(__GLEW_NV_shadow_samplers_cube)) {
    return GLEW_GET_VAR(__GLEW_NV_shadow_samplers_cube);
}
pub const GL_NV_stereo_view_rendering = @as(c_int, 1);
// /usr/include/GL/glew.h:17553:9: warning: macro 'GLEW_NV_stereo_view_rendering' contains a runtime value, translated to function
pub inline fn GLEW_NV_stereo_view_rendering() @TypeOf(GLEW_GET_VAR(__GLEW_NV_stereo_view_rendering)) {
    return GLEW_GET_VAR(__GLEW_NV_stereo_view_rendering);
}
pub const GL_NV_tessellation_program5 = @as(c_int, 1);
pub const GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D8, .hex);
pub const GL_TESS_CONTROL_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891E, .hex);
pub const GL_TESS_EVALUATION_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891F, .hex);
pub const GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C74, .hex);
pub const GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C75, .hex);
// /usr/include/GL/glew.h:17568:9: warning: macro 'GLEW_NV_tessellation_program5' contains a runtime value, translated to function
pub inline fn GLEW_NV_tessellation_program5() @TypeOf(GLEW_GET_VAR(__GLEW_NV_tessellation_program5)) {
    return GLEW_GET_VAR(__GLEW_NV_tessellation_program5);
}
pub const GL_NV_texgen_emboss = @as(c_int, 1);
pub const GL_EMBOSS_LIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855D, .hex);
pub const GL_EMBOSS_CONSTANT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855E, .hex);
pub const GL_EMBOSS_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855F, .hex);
// /usr/include/GL/glew.h:17581:9: warning: macro 'GLEW_NV_texgen_emboss' contains a runtime value, translated to function
pub inline fn GLEW_NV_texgen_emboss() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texgen_emboss)) {
    return GLEW_GET_VAR(__GLEW_NV_texgen_emboss);
}
pub const GL_NV_texgen_reflection = @as(c_int, 1);
pub const GL_NORMAL_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hex);
pub const GL_REFLECTION_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hex);
// /usr/include/GL/glew.h:17593:9: warning: macro 'GLEW_NV_texgen_reflection' contains a runtime value, translated to function
pub inline fn GLEW_NV_texgen_reflection() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texgen_reflection)) {
    return GLEW_GET_VAR(__GLEW_NV_texgen_reflection);
}
pub const GL_NV_texture_array = @as(c_int, 1);
pub const GL_UNPACK_SKIP_IMAGES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806D, .hex);
pub const GL_UNPACK_IMAGE_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806E, .hex);
pub const GL_MAX_ARRAY_TEXTURE_LAYERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FF, .hex);
pub const GL_TEXTURE_2D_ARRAY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1A, .hex);
pub const GL_TEXTURE_BINDING_2D_ARRAY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1D, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hex);
pub const GL_SAMPLER_2D_ARRAY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC1, .hex);
// /usr/include/GL/glew.h:17617:9: warning: macro 'glCompressedTexImage3DNV' contains a runtime value, translated to function
pub inline fn glCompressedTexImage3DNV() @TypeOf(GLEW_GET_FUN(__glewCompressedTexImage3DNV)) {
    return GLEW_GET_FUN(__glewCompressedTexImage3DNV);
}
// /usr/include/GL/glew.h:17618:9: warning: macro 'glCompressedTexSubImage3DNV' contains a runtime value, translated to function
pub inline fn glCompressedTexSubImage3DNV() @TypeOf(GLEW_GET_FUN(__glewCompressedTexSubImage3DNV)) {
    return GLEW_GET_FUN(__glewCompressedTexSubImage3DNV);
}
// /usr/include/GL/glew.h:17619:9: warning: macro 'glCopyTexSubImage3DNV' contains a runtime value, translated to function
pub inline fn glCopyTexSubImage3DNV() @TypeOf(GLEW_GET_FUN(__glewCopyTexSubImage3DNV)) {
    return GLEW_GET_FUN(__glewCopyTexSubImage3DNV);
}
// /usr/include/GL/glew.h:17620:9: warning: macro 'glFramebufferTextureLayerNV' contains a runtime value, translated to function
pub inline fn glFramebufferTextureLayerNV() @TypeOf(GLEW_GET_FUN(__glewFramebufferTextureLayerNV)) {
    return GLEW_GET_FUN(__glewFramebufferTextureLayerNV);
}
// /usr/include/GL/glew.h:17621:9: warning: macro 'glTexImage3DNV' contains a runtime value, translated to function
pub inline fn glTexImage3DNV() @TypeOf(GLEW_GET_FUN(__glewTexImage3DNV)) {
    return GLEW_GET_FUN(__glewTexImage3DNV);
}
// /usr/include/GL/glew.h:17622:9: warning: macro 'glTexSubImage3DNV' contains a runtime value, translated to function
pub inline fn glTexSubImage3DNV() @TypeOf(GLEW_GET_FUN(__glewTexSubImage3DNV)) {
    return GLEW_GET_FUN(__glewTexSubImage3DNV);
}
// /usr/include/GL/glew.h:17624:9: warning: macro 'GLEW_NV_texture_array' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_array() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_array)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_array);
}
pub const GL_NV_texture_barrier = @as(c_int, 1);
// /usr/include/GL/glew.h:17635:9: warning: macro 'glTextureBarrierNV' contains a runtime value, translated to function
pub inline fn glTextureBarrierNV() @TypeOf(GLEW_GET_FUN(__glewTextureBarrierNV)) {
    return GLEW_GET_FUN(__glewTextureBarrierNV);
}
// /usr/include/GL/glew.h:17637:9: warning: macro 'GLEW_NV_texture_barrier' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_barrier() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_barrier)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_barrier);
}
pub const GL_NV_texture_border_clamp = @as(c_int, 1);
pub const GL_TEXTURE_BORDER_COLOR_NV = @as(c_int, 0x1004);
pub const GL_CLAMP_TO_BORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hex);
// /usr/include/GL/glew.h:17649:9: warning: macro 'GLEW_NV_texture_border_clamp' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_border_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_border_clamp)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_border_clamp);
}
pub const GL_NV_texture_compression_latc = @as(c_int, 1);
pub const GL_COMPRESSED_LUMINANCE_LATC1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C70, .hex);
pub const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C71, .hex);
pub const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C72, .hex);
pub const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C73, .hex);
// /usr/include/GL/glew.h:17663:9: warning: macro 'GLEW_NV_texture_compression_latc' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_compression_latc() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_compression_latc)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_compression_latc);
}
pub const GL_NV_texture_compression_s3tc = @as(c_int, 1);
pub const GL_COMPRESSED_RGB_S3TC_DXT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F0, .hex);
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F1, .hex);
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F2, .hex);
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F3, .hex);
// /usr/include/GL/glew.h:17677:9: warning: macro 'GLEW_NV_texture_compression_s3tc' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_compression_s3tc() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_compression_s3tc)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_compression_s3tc);
}
pub const GL_NV_texture_compression_s3tc_update = @as(c_int, 1);
// /usr/include/GL/glew.h:17686:9: warning: macro 'GLEW_NV_texture_compression_s3tc_update' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_compression_s3tc_update() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_compression_s3tc_update)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_compression_s3tc_update);
}
pub const GL_NV_texture_compression_vtc = @as(c_int, 1);
// /usr/include/GL/glew.h:17695:9: warning: macro 'GLEW_NV_texture_compression_vtc' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_compression_vtc() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_compression_vtc)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_compression_vtc);
}
pub const GL_NV_texture_env_combine4 = @as(c_int, 1);
pub const GL_COMBINE4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8503, .hex);
pub const GL_SOURCE3_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8583, .hex);
pub const GL_SOURCE3_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858B, .hex);
pub const GL_OPERAND3_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8593, .hex);
pub const GL_OPERAND3_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859B, .hex);
// /usr/include/GL/glew.h:17710:9: warning: macro 'GLEW_NV_texture_env_combine4' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_env_combine4() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_env_combine4)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_env_combine4);
}
pub const GL_NV_texture_expand_normal = @as(c_int, 1);
pub const GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888F, .hex);
// /usr/include/GL/glew.h:17721:9: warning: macro 'GLEW_NV_texture_expand_normal' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_expand_normal() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_expand_normal)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_expand_normal);
}
pub const GL_NV_texture_multisample = @as(c_int, 1);
pub const GL_TEXTURE_COVERAGE_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9045, .hex);
pub const GL_TEXTURE_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9046, .hex);
// /usr/include/GL/glew.h:17740:9: warning: macro 'glTexImage2DMultisampleCoverageNV' contains a runtime value, translated to function
pub inline fn glTexImage2DMultisampleCoverageNV() @TypeOf(GLEW_GET_FUN(__glewTexImage2DMultisampleCoverageNV)) {
    return GLEW_GET_FUN(__glewTexImage2DMultisampleCoverageNV);
}
// /usr/include/GL/glew.h:17741:9: warning: macro 'glTexImage3DMultisampleCoverageNV' contains a runtime value, translated to function
pub inline fn glTexImage3DMultisampleCoverageNV() @TypeOf(GLEW_GET_FUN(__glewTexImage3DMultisampleCoverageNV)) {
    return GLEW_GET_FUN(__glewTexImage3DMultisampleCoverageNV);
}
// /usr/include/GL/glew.h:17742:9: warning: macro 'glTextureImage2DMultisampleCoverageNV' contains a runtime value, translated to function
pub inline fn glTextureImage2DMultisampleCoverageNV() @TypeOf(GLEW_GET_FUN(__glewTextureImage2DMultisampleCoverageNV)) {
    return GLEW_GET_FUN(__glewTextureImage2DMultisampleCoverageNV);
}
// /usr/include/GL/glew.h:17743:9: warning: macro 'glTextureImage2DMultisampleNV' contains a runtime value, translated to function
pub inline fn glTextureImage2DMultisampleNV() @TypeOf(GLEW_GET_FUN(__glewTextureImage2DMultisampleNV)) {
    return GLEW_GET_FUN(__glewTextureImage2DMultisampleNV);
}
// /usr/include/GL/glew.h:17744:9: warning: macro 'glTextureImage3DMultisampleCoverageNV' contains a runtime value, translated to function
pub inline fn glTextureImage3DMultisampleCoverageNV() @TypeOf(GLEW_GET_FUN(__glewTextureImage3DMultisampleCoverageNV)) {
    return GLEW_GET_FUN(__glewTextureImage3DMultisampleCoverageNV);
}
// /usr/include/GL/glew.h:17745:9: warning: macro 'glTextureImage3DMultisampleNV' contains a runtime value, translated to function
pub inline fn glTextureImage3DMultisampleNV() @TypeOf(GLEW_GET_FUN(__glewTextureImage3DMultisampleNV)) {
    return GLEW_GET_FUN(__glewTextureImage3DMultisampleNV);
}
// /usr/include/GL/glew.h:17747:9: warning: macro 'GLEW_NV_texture_multisample' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_multisample() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_multisample)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_multisample);
}
pub const GL_NV_texture_npot_2D_mipmap = @as(c_int, 1);
// /usr/include/GL/glew.h:17756:9: warning: macro 'GLEW_NV_texture_npot_2D_mipmap' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_npot_2D_mipmap() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_npot_2D_mipmap)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_npot_2D_mipmap);
}
pub const GL_NV_texture_rectangle = @as(c_int, 1);
pub const GL_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hex);
pub const GL_TEXTURE_BINDING_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hex);
pub const GL_PROXY_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hex);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hex);
// /usr/include/GL/glew.h:17770:9: warning: macro 'GLEW_NV_texture_rectangle' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_rectangle() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_rectangle)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_rectangle);
}
pub const GL_NV_texture_rectangle_compressed = @as(c_int, 1);
// /usr/include/GL/glew.h:17779:9: warning: macro 'GLEW_NV_texture_rectangle_compressed' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_rectangle_compressed() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_rectangle_compressed)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_rectangle_compressed);
}
pub const GL_NV_texture_shader = @as(c_int, 1);
pub const GL_OFFSET_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864C, .hex);
pub const GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864D, .hex);
pub const GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864E, .hex);
pub const GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D9, .hex);
pub const GL_UNSIGNED_INT_S8_S8_8_8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DA, .hex);
pub const GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DB, .hex);
pub const GL_DSDT_MAG_INTENSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DC, .hex);
pub const GL_SHADER_CONSISTENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DD, .hex);
pub const GL_TEXTURE_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DE, .hex);
pub const GL_SHADER_OPERATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DF, .hex);
pub const GL_CULL_MODES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E0, .hex);
pub const GL_OFFSET_TEXTURE_2D_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E1, .hex);
pub const GL_OFFSET_TEXTURE_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E1, .hex);
pub const GL_OFFSET_TEXTURE_2D_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E2, .hex);
pub const GL_OFFSET_TEXTURE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E2, .hex);
pub const GL_OFFSET_TEXTURE_2D_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E3, .hex);
pub const GL_OFFSET_TEXTURE_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E3, .hex);
pub const GL_PREVIOUS_TEXTURE_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E4, .hex);
pub const GL_CONST_EYE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E5, .hex);
pub const GL_PASS_THROUGH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E6, .hex);
pub const GL_CULL_FRAGMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E7, .hex);
pub const GL_OFFSET_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E8, .hex);
pub const GL_DEPENDENT_AR_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E9, .hex);
pub const GL_DEPENDENT_GB_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EA, .hex);
pub const GL_DOT_PRODUCT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EC, .hex);
pub const GL_DOT_PRODUCT_DEPTH_REPLACE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86ED, .hex);
pub const GL_DOT_PRODUCT_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EE, .hex);
pub const GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F0, .hex);
pub const GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F1, .hex);
pub const GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F2, .hex);
pub const GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F3, .hex);
pub const GL_HILO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F4, .hex);
pub const GL_DSDT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F5, .hex);
pub const GL_DSDT_MAG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F6, .hex);
pub const GL_DSDT_MAG_VIB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F7, .hex);
pub const GL_HILO16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F8, .hex);
pub const GL_SIGNED_HILO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F9, .hex);
pub const GL_SIGNED_HILO16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FA, .hex);
pub const GL_SIGNED_RGBA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FB, .hex);
pub const GL_SIGNED_RGBA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FC, .hex);
pub const GL_SIGNED_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FE, .hex);
pub const GL_SIGNED_RGB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FF, .hex);
pub const GL_SIGNED_LUMINANCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8701, .hex);
pub const GL_SIGNED_LUMINANCE8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8702, .hex);
pub const GL_SIGNED_LUMINANCE_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8703, .hex);
pub const GL_SIGNED_LUMINANCE8_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8704, .hex);
pub const GL_SIGNED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8705, .hex);
pub const GL_SIGNED_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8706, .hex);
pub const GL_SIGNED_INTENSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8707, .hex);
pub const GL_SIGNED_INTENSITY8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8708, .hex);
pub const GL_DSDT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8709, .hex);
pub const GL_DSDT8_MAG8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870A, .hex);
pub const GL_DSDT8_MAG8_INTENSITY8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870B, .hex);
pub const GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870C, .hex);
pub const GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870D, .hex);
pub const GL_HI_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870E, .hex);
pub const GL_LO_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870F, .hex);
pub const GL_DS_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8710, .hex);
pub const GL_DT_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8711, .hex);
pub const GL_MAGNITUDE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8712, .hex);
pub const GL_VIBRANCE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8713, .hex);
pub const GL_HI_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8714, .hex);
pub const GL_LO_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8715, .hex);
pub const GL_DS_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8716, .hex);
pub const GL_DT_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8717, .hex);
pub const GL_MAGNITUDE_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8718, .hex);
pub const GL_VIBRANCE_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8719, .hex);
pub const GL_TEXTURE_BORDER_VALUES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871A, .hex);
pub const GL_TEXTURE_HI_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871B, .hex);
pub const GL_TEXTURE_LO_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871C, .hex);
pub const GL_TEXTURE_DS_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871D, .hex);
pub const GL_TEXTURE_DT_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871E, .hex);
pub const GL_TEXTURE_MAG_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871F, .hex);
// /usr/include/GL/glew.h:17862:9: warning: macro 'GLEW_NV_texture_shader' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_shader() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_shader)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_shader);
}
pub const GL_NV_texture_shader2 = @as(c_int, 1);
pub const GL_DOT_PRODUCT_TEXTURE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EF, .hex);
// /usr/include/GL/glew.h:17900:9: warning: macro 'GLEW_NV_texture_shader2' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_shader2() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_shader2)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_shader2);
}
pub const GL_NV_texture_shader3 = @as(c_int, 1);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8850, .hex);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8851, .hex);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8852, .hex);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8853, .hex);
pub const GL_OFFSET_HILO_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8854, .hex);
pub const GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8855, .hex);
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8856, .hex);
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8857, .hex);
pub const GL_DEPENDENT_HILO_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8858, .hex);
pub const GL_DEPENDENT_RGB_TEXTURE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8859, .hex);
pub const GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885A, .hex);
pub const GL_DOT_PRODUCT_PASS_THROUGH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885B, .hex);
pub const GL_DOT_PRODUCT_TEXTURE_1D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885C, .hex);
pub const GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885D, .hex);
pub const GL_HILO8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885E, .hex);
pub const GL_SIGNED_HILO8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885F, .hex);
pub const GL_FORCE_BLUE_TO_ONE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8860, .hex);
// /usr/include/GL/glew.h:17927:9: warning: macro 'GLEW_NV_texture_shader3' contains a runtime value, translated to function
pub inline fn GLEW_NV_texture_shader3() @TypeOf(GLEW_GET_VAR(__GLEW_NV_texture_shader3)) {
    return GLEW_GET_VAR(__GLEW_NV_texture_shader3);
}
pub const GL_NV_transform_feedback = @as(c_int, 1);
pub const GL_BACK_PRIMARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C77, .hex);
pub const GL_BACK_SECONDARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C78, .hex);
pub const GL_TEXTURE_COORD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C79, .hex);
pub const GL_CLIP_DISTANCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7A, .hex);
pub const GL_VERTEX_ID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7B, .hex);
pub const GL_PRIMITIVE_ID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7C, .hex);
pub const GL_GENERIC_ATTRIB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7D, .hex);
pub const GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7E, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hex);
pub const GL_ACTIVE_VARYINGS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C81, .hex);
pub const GL_ACTIVE_VARYING_MAX_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C82, .hex);
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hex);
pub const GL_TRANSFORM_FEEDBACK_RECORD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C86, .hex);
pub const GL_PRIMITIVES_GENERATED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hex);
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hex);
pub const GL_RASTERIZER_DISCARD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hex);
pub const GL_INTERLEAVED_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hex);
pub const GL_SEPARATE_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hex);
// /usr/include/GL/glew.h:17974:9: warning: macro 'glActiveVaryingNV' contains a runtime value, translated to function
pub inline fn glActiveVaryingNV() @TypeOf(GLEW_GET_FUN(__glewActiveVaryingNV)) {
    return GLEW_GET_FUN(__glewActiveVaryingNV);
}
// /usr/include/GL/glew.h:17975:9: warning: macro 'glBeginTransformFeedbackNV' contains a runtime value, translated to function
pub inline fn glBeginTransformFeedbackNV() @TypeOf(GLEW_GET_FUN(__glewBeginTransformFeedbackNV)) {
    return GLEW_GET_FUN(__glewBeginTransformFeedbackNV);
}
// /usr/include/GL/glew.h:17976:9: warning: macro 'glBindBufferBaseNV' contains a runtime value, translated to function
pub inline fn glBindBufferBaseNV() @TypeOf(GLEW_GET_FUN(__glewBindBufferBaseNV)) {
    return GLEW_GET_FUN(__glewBindBufferBaseNV);
}
// /usr/include/GL/glew.h:17977:9: warning: macro 'glBindBufferOffsetNV' contains a runtime value, translated to function
pub inline fn glBindBufferOffsetNV() @TypeOf(GLEW_GET_FUN(__glewBindBufferOffsetNV)) {
    return GLEW_GET_FUN(__glewBindBufferOffsetNV);
}
// /usr/include/GL/glew.h:17978:9: warning: macro 'glBindBufferRangeNV' contains a runtime value, translated to function
pub inline fn glBindBufferRangeNV() @TypeOf(GLEW_GET_FUN(__glewBindBufferRangeNV)) {
    return GLEW_GET_FUN(__glewBindBufferRangeNV);
}
// /usr/include/GL/glew.h:17979:9: warning: macro 'glEndTransformFeedbackNV' contains a runtime value, translated to function
pub inline fn glEndTransformFeedbackNV() @TypeOf(GLEW_GET_FUN(__glewEndTransformFeedbackNV)) {
    return GLEW_GET_FUN(__glewEndTransformFeedbackNV);
}
// /usr/include/GL/glew.h:17980:9: warning: macro 'glGetActiveVaryingNV' contains a runtime value, translated to function
pub inline fn glGetActiveVaryingNV() @TypeOf(GLEW_GET_FUN(__glewGetActiveVaryingNV)) {
    return GLEW_GET_FUN(__glewGetActiveVaryingNV);
}
// /usr/include/GL/glew.h:17981:9: warning: macro 'glGetTransformFeedbackVaryingNV' contains a runtime value, translated to function
pub inline fn glGetTransformFeedbackVaryingNV() @TypeOf(GLEW_GET_FUN(__glewGetTransformFeedbackVaryingNV)) {
    return GLEW_GET_FUN(__glewGetTransformFeedbackVaryingNV);
}
// /usr/include/GL/glew.h:17982:9: warning: macro 'glGetVaryingLocationNV' contains a runtime value, translated to function
pub inline fn glGetVaryingLocationNV() @TypeOf(GLEW_GET_FUN(__glewGetVaryingLocationNV)) {
    return GLEW_GET_FUN(__glewGetVaryingLocationNV);
}
// /usr/include/GL/glew.h:17983:9: warning: macro 'glTransformFeedbackAttribsNV' contains a runtime value, translated to function
pub inline fn glTransformFeedbackAttribsNV() @TypeOf(GLEW_GET_FUN(__glewTransformFeedbackAttribsNV)) {
    return GLEW_GET_FUN(__glewTransformFeedbackAttribsNV);
}
// /usr/include/GL/glew.h:17984:9: warning: macro 'glTransformFeedbackVaryingsNV' contains a runtime value, translated to function
pub inline fn glTransformFeedbackVaryingsNV() @TypeOf(GLEW_GET_FUN(__glewTransformFeedbackVaryingsNV)) {
    return GLEW_GET_FUN(__glewTransformFeedbackVaryingsNV);
}
// /usr/include/GL/glew.h:17986:9: warning: macro 'GLEW_NV_transform_feedback' contains a runtime value, translated to function
pub inline fn GLEW_NV_transform_feedback() @TypeOf(GLEW_GET_VAR(__GLEW_NV_transform_feedback)) {
    return GLEW_GET_VAR(__GLEW_NV_transform_feedback);
}
pub const GL_NV_transform_feedback2 = @as(c_int, 1);
pub const GL_TRANSFORM_FEEDBACK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E22, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hex);
pub const GL_TRANSFORM_FEEDBACK_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E25, .hex);
// /usr/include/GL/glew.h:18008:9: warning: macro 'glBindTransformFeedbackNV' contains a runtime value, translated to function
pub inline fn glBindTransformFeedbackNV() @TypeOf(GLEW_GET_FUN(__glewBindTransformFeedbackNV)) {
    return GLEW_GET_FUN(__glewBindTransformFeedbackNV);
}
// /usr/include/GL/glew.h:18009:9: warning: macro 'glDeleteTransformFeedbacksNV' contains a runtime value, translated to function
pub inline fn glDeleteTransformFeedbacksNV() @TypeOf(GLEW_GET_FUN(__glewDeleteTransformFeedbacksNV)) {
    return GLEW_GET_FUN(__glewDeleteTransformFeedbacksNV);
}
// /usr/include/GL/glew.h:18010:9: warning: macro 'glDrawTransformFeedbackNV' contains a runtime value, translated to function
pub inline fn glDrawTransformFeedbackNV() @TypeOf(GLEW_GET_FUN(__glewDrawTransformFeedbackNV)) {
    return GLEW_GET_FUN(__glewDrawTransformFeedbackNV);
}
// /usr/include/GL/glew.h:18011:9: warning: macro 'glGenTransformFeedbacksNV' contains a runtime value, translated to function
pub inline fn glGenTransformFeedbacksNV() @TypeOf(GLEW_GET_FUN(__glewGenTransformFeedbacksNV)) {
    return GLEW_GET_FUN(__glewGenTransformFeedbacksNV);
}
// /usr/include/GL/glew.h:18012:9: warning: macro 'glIsTransformFeedbackNV' contains a runtime value, translated to function
pub inline fn glIsTransformFeedbackNV() @TypeOf(GLEW_GET_FUN(__glewIsTransformFeedbackNV)) {
    return GLEW_GET_FUN(__glewIsTransformFeedbackNV);
}
// /usr/include/GL/glew.h:18013:9: warning: macro 'glPauseTransformFeedbackNV' contains a runtime value, translated to function
pub inline fn glPauseTransformFeedbackNV() @TypeOf(GLEW_GET_FUN(__glewPauseTransformFeedbackNV)) {
    return GLEW_GET_FUN(__glewPauseTransformFeedbackNV);
}
// /usr/include/GL/glew.h:18014:9: warning: macro 'glResumeTransformFeedbackNV' contains a runtime value, translated to function
pub inline fn glResumeTransformFeedbackNV() @TypeOf(GLEW_GET_FUN(__glewResumeTransformFeedbackNV)) {
    return GLEW_GET_FUN(__glewResumeTransformFeedbackNV);
}
// /usr/include/GL/glew.h:18016:9: warning: macro 'GLEW_NV_transform_feedback2' contains a runtime value, translated to function
pub inline fn GLEW_NV_transform_feedback2() @TypeOf(GLEW_GET_VAR(__GLEW_NV_transform_feedback2)) {
    return GLEW_GET_VAR(__GLEW_NV_transform_feedback2);
}
pub const GL_NV_uniform_buffer_unified_memory = @as(c_int, 1);
pub const GL_UNIFORM_BUFFER_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936E, .hex);
pub const GL_UNIFORM_BUFFER_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936F, .hex);
pub const GL_UNIFORM_BUFFER_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9370, .hex);
// /usr/include/GL/glew.h:18029:9: warning: macro 'GLEW_NV_uniform_buffer_unified_memory' contains a runtime value, translated to function
pub inline fn GLEW_NV_uniform_buffer_unified_memory() @TypeOf(GLEW_GET_VAR(__GLEW_NV_uniform_buffer_unified_memory)) {
    return GLEW_GET_VAR(__GLEW_NV_uniform_buffer_unified_memory);
}
pub const GL_NV_vdpau_interop = @as(c_int, 1);
pub const GL_SURFACE_STATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EB, .hex);
pub const GL_SURFACE_REGISTERED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FD, .hex);
pub const GL_SURFACE_MAPPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8700, .hex);
pub const GL_WRITE_DISCARD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BE, .hex);
// /usr/include/GL/glew.h:18056:9: warning: macro 'glVDPAUFiniNV' contains a runtime value, translated to function
pub inline fn glVDPAUFiniNV() @TypeOf(GLEW_GET_FUN(__glewVDPAUFiniNV)) {
    return GLEW_GET_FUN(__glewVDPAUFiniNV);
}
// /usr/include/GL/glew.h:18057:9: warning: macro 'glVDPAUGetSurfaceivNV' contains a runtime value, translated to function
pub inline fn glVDPAUGetSurfaceivNV() @TypeOf(GLEW_GET_FUN(__glewVDPAUGetSurfaceivNV)) {
    return GLEW_GET_FUN(__glewVDPAUGetSurfaceivNV);
}
// /usr/include/GL/glew.h:18058:9: warning: macro 'glVDPAUInitNV' contains a runtime value, translated to function
pub inline fn glVDPAUInitNV() @TypeOf(GLEW_GET_FUN(__glewVDPAUInitNV)) {
    return GLEW_GET_FUN(__glewVDPAUInitNV);
}
// /usr/include/GL/glew.h:18059:9: warning: macro 'glVDPAUIsSurfaceNV' contains a runtime value, translated to function
pub inline fn glVDPAUIsSurfaceNV() @TypeOf(GLEW_GET_FUN(__glewVDPAUIsSurfaceNV)) {
    return GLEW_GET_FUN(__glewVDPAUIsSurfaceNV);
}
// /usr/include/GL/glew.h:18060:9: warning: macro 'glVDPAUMapSurfacesNV' contains a runtime value, translated to function
pub inline fn glVDPAUMapSurfacesNV() @TypeOf(GLEW_GET_FUN(__glewVDPAUMapSurfacesNV)) {
    return GLEW_GET_FUN(__glewVDPAUMapSurfacesNV);
}
// /usr/include/GL/glew.h:18061:9: warning: macro 'glVDPAURegisterOutputSurfaceNV' contains a runtime value, translated to function
pub inline fn glVDPAURegisterOutputSurfaceNV() @TypeOf(GLEW_GET_FUN(__glewVDPAURegisterOutputSurfaceNV)) {
    return GLEW_GET_FUN(__glewVDPAURegisterOutputSurfaceNV);
}
// /usr/include/GL/glew.h:18062:9: warning: macro 'glVDPAURegisterVideoSurfaceNV' contains a runtime value, translated to function
pub inline fn glVDPAURegisterVideoSurfaceNV() @TypeOf(GLEW_GET_FUN(__glewVDPAURegisterVideoSurfaceNV)) {
    return GLEW_GET_FUN(__glewVDPAURegisterVideoSurfaceNV);
}
// /usr/include/GL/glew.h:18063:9: warning: macro 'glVDPAUSurfaceAccessNV' contains a runtime value, translated to function
pub inline fn glVDPAUSurfaceAccessNV() @TypeOf(GLEW_GET_FUN(__glewVDPAUSurfaceAccessNV)) {
    return GLEW_GET_FUN(__glewVDPAUSurfaceAccessNV);
}
// /usr/include/GL/glew.h:18064:9: warning: macro 'glVDPAUUnmapSurfacesNV' contains a runtime value, translated to function
pub inline fn glVDPAUUnmapSurfacesNV() @TypeOf(GLEW_GET_FUN(__glewVDPAUUnmapSurfacesNV)) {
    return GLEW_GET_FUN(__glewVDPAUUnmapSurfacesNV);
}
// /usr/include/GL/glew.h:18065:9: warning: macro 'glVDPAUUnregisterSurfaceNV' contains a runtime value, translated to function
pub inline fn glVDPAUUnregisterSurfaceNV() @TypeOf(GLEW_GET_FUN(__glewVDPAUUnregisterSurfaceNV)) {
    return GLEW_GET_FUN(__glewVDPAUUnregisterSurfaceNV);
}
// /usr/include/GL/glew.h:18067:9: warning: macro 'GLEW_NV_vdpau_interop' contains a runtime value, translated to function
pub inline fn GLEW_NV_vdpau_interop() @TypeOf(GLEW_GET_VAR(__GLEW_NV_vdpau_interop)) {
    return GLEW_GET_VAR(__GLEW_NV_vdpau_interop);
}
pub const GL_NV_vdpau_interop2 = @as(c_int, 1);
// /usr/include/GL/glew.h:18078:9: warning: macro 'glVDPAURegisterVideoSurfaceWithPictureStructureNV' contains a runtime value, translated to function
pub inline fn glVDPAURegisterVideoSurfaceWithPictureStructureNV() @TypeOf(GLEW_GET_FUN(__glewVDPAURegisterVideoSurfaceWithPictureStructureNV)) {
    return GLEW_GET_FUN(__glewVDPAURegisterVideoSurfaceWithPictureStructureNV);
}
// /usr/include/GL/glew.h:18080:9: warning: macro 'GLEW_NV_vdpau_interop2' contains a runtime value, translated to function
pub inline fn GLEW_NV_vdpau_interop2() @TypeOf(GLEW_GET_VAR(__GLEW_NV_vdpau_interop2)) {
    return GLEW_GET_VAR(__GLEW_NV_vdpau_interop2);
}
pub const GL_NV_vertex_array_range = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851D, .hex);
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851E, .hex);
pub const GL_VERTEX_ARRAY_RANGE_VALID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851F, .hex);
pub const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8520, .hex);
pub const GL_VERTEX_ARRAY_RANGE_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8521, .hex);
// /usr/include/GL/glew.h:18098:9: warning: macro 'glFlushVertexArrayRangeNV' contains a runtime value, translated to function
pub inline fn glFlushVertexArrayRangeNV() @TypeOf(GLEW_GET_FUN(__glewFlushVertexArrayRangeNV)) {
    return GLEW_GET_FUN(__glewFlushVertexArrayRangeNV);
}
// /usr/include/GL/glew.h:18099:9: warning: macro 'glVertexArrayRangeNV' contains a runtime value, translated to function
pub inline fn glVertexArrayRangeNV() @TypeOf(GLEW_GET_FUN(__glewVertexArrayRangeNV)) {
    return GLEW_GET_FUN(__glewVertexArrayRangeNV);
}
// /usr/include/GL/glew.h:18101:9: warning: macro 'GLEW_NV_vertex_array_range' contains a runtime value, translated to function
pub inline fn GLEW_NV_vertex_array_range() @TypeOf(GLEW_GET_VAR(__GLEW_NV_vertex_array_range)) {
    return GLEW_GET_VAR(__GLEW_NV_vertex_array_range);
}
pub const GL_NV_vertex_array_range2 = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8533, .hex);
// /usr/include/GL/glew.h:18112:9: warning: macro 'GLEW_NV_vertex_array_range2' contains a runtime value, translated to function
pub inline fn GLEW_NV_vertex_array_range2() @TypeOf(GLEW_GET_VAR(__GLEW_NV_vertex_array_range2)) {
    return GLEW_GET_VAR(__GLEW_NV_vertex_array_range2);
}
pub const GL_NV_vertex_attrib_integer_64bit = @as(c_int, 1);
// /usr/include/GL/glew.h:18144:9: warning: macro 'glGetVertexAttribLi64vNV' contains a runtime value, translated to function
pub inline fn glGetVertexAttribLi64vNV() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribLi64vNV)) {
    return GLEW_GET_FUN(__glewGetVertexAttribLi64vNV);
}
// /usr/include/GL/glew.h:18145:9: warning: macro 'glGetVertexAttribLui64vNV' contains a runtime value, translated to function
pub inline fn glGetVertexAttribLui64vNV() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribLui64vNV)) {
    return GLEW_GET_FUN(__glewGetVertexAttribLui64vNV);
}
// /usr/include/GL/glew.h:18146:9: warning: macro 'glVertexAttribL1i64NV' contains a runtime value, translated to function
pub inline fn glVertexAttribL1i64NV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL1i64NV)) {
    return GLEW_GET_FUN(__glewVertexAttribL1i64NV);
}
// /usr/include/GL/glew.h:18147:9: warning: macro 'glVertexAttribL1i64vNV' contains a runtime value, translated to function
pub inline fn glVertexAttribL1i64vNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL1i64vNV)) {
    return GLEW_GET_FUN(__glewVertexAttribL1i64vNV);
}
// /usr/include/GL/glew.h:18148:9: warning: macro 'glVertexAttribL1ui64NV' contains a runtime value, translated to function
pub inline fn glVertexAttribL1ui64NV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL1ui64NV)) {
    return GLEW_GET_FUN(__glewVertexAttribL1ui64NV);
}
// /usr/include/GL/glew.h:18149:9: warning: macro 'glVertexAttribL1ui64vNV' contains a runtime value, translated to function
pub inline fn glVertexAttribL1ui64vNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL1ui64vNV)) {
    return GLEW_GET_FUN(__glewVertexAttribL1ui64vNV);
}
// /usr/include/GL/glew.h:18150:9: warning: macro 'glVertexAttribL2i64NV' contains a runtime value, translated to function
pub inline fn glVertexAttribL2i64NV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL2i64NV)) {
    return GLEW_GET_FUN(__glewVertexAttribL2i64NV);
}
// /usr/include/GL/glew.h:18151:9: warning: macro 'glVertexAttribL2i64vNV' contains a runtime value, translated to function
pub inline fn glVertexAttribL2i64vNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL2i64vNV)) {
    return GLEW_GET_FUN(__glewVertexAttribL2i64vNV);
}
// /usr/include/GL/glew.h:18152:9: warning: macro 'glVertexAttribL2ui64NV' contains a runtime value, translated to function
pub inline fn glVertexAttribL2ui64NV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL2ui64NV)) {
    return GLEW_GET_FUN(__glewVertexAttribL2ui64NV);
}
// /usr/include/GL/glew.h:18153:9: warning: macro 'glVertexAttribL2ui64vNV' contains a runtime value, translated to function
pub inline fn glVertexAttribL2ui64vNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL2ui64vNV)) {
    return GLEW_GET_FUN(__glewVertexAttribL2ui64vNV);
}
// /usr/include/GL/glew.h:18154:9: warning: macro 'glVertexAttribL3i64NV' contains a runtime value, translated to function
pub inline fn glVertexAttribL3i64NV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL3i64NV)) {
    return GLEW_GET_FUN(__glewVertexAttribL3i64NV);
}
// /usr/include/GL/glew.h:18155:9: warning: macro 'glVertexAttribL3i64vNV' contains a runtime value, translated to function
pub inline fn glVertexAttribL3i64vNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL3i64vNV)) {
    return GLEW_GET_FUN(__glewVertexAttribL3i64vNV);
}
// /usr/include/GL/glew.h:18156:9: warning: macro 'glVertexAttribL3ui64NV' contains a runtime value, translated to function
pub inline fn glVertexAttribL3ui64NV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL3ui64NV)) {
    return GLEW_GET_FUN(__glewVertexAttribL3ui64NV);
}
// /usr/include/GL/glew.h:18157:9: warning: macro 'glVertexAttribL3ui64vNV' contains a runtime value, translated to function
pub inline fn glVertexAttribL3ui64vNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL3ui64vNV)) {
    return GLEW_GET_FUN(__glewVertexAttribL3ui64vNV);
}
// /usr/include/GL/glew.h:18158:9: warning: macro 'glVertexAttribL4i64NV' contains a runtime value, translated to function
pub inline fn glVertexAttribL4i64NV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL4i64NV)) {
    return GLEW_GET_FUN(__glewVertexAttribL4i64NV);
}
// /usr/include/GL/glew.h:18159:9: warning: macro 'glVertexAttribL4i64vNV' contains a runtime value, translated to function
pub inline fn glVertexAttribL4i64vNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL4i64vNV)) {
    return GLEW_GET_FUN(__glewVertexAttribL4i64vNV);
}
// /usr/include/GL/glew.h:18160:9: warning: macro 'glVertexAttribL4ui64NV' contains a runtime value, translated to function
pub inline fn glVertexAttribL4ui64NV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL4ui64NV)) {
    return GLEW_GET_FUN(__glewVertexAttribL4ui64NV);
}
// /usr/include/GL/glew.h:18161:9: warning: macro 'glVertexAttribL4ui64vNV' contains a runtime value, translated to function
pub inline fn glVertexAttribL4ui64vNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribL4ui64vNV)) {
    return GLEW_GET_FUN(__glewVertexAttribL4ui64vNV);
}
// /usr/include/GL/glew.h:18162:9: warning: macro 'glVertexAttribLFormatNV' contains a runtime value, translated to function
pub inline fn glVertexAttribLFormatNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribLFormatNV)) {
    return GLEW_GET_FUN(__glewVertexAttribLFormatNV);
}
// /usr/include/GL/glew.h:18164:9: warning: macro 'GLEW_NV_vertex_attrib_integer_64bit' contains a runtime value, translated to function
pub inline fn GLEW_NV_vertex_attrib_integer_64bit() @TypeOf(GLEW_GET_VAR(__GLEW_NV_vertex_attrib_integer_64bit)) {
    return GLEW_GET_VAR(__GLEW_NV_vertex_attrib_integer_64bit);
}
pub const GL_NV_vertex_buffer_unified_memory = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F1E, .hex);
pub const GL_ELEMENT_ARRAY_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F1F, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F20, .hex);
pub const GL_VERTEX_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F21, .hex);
pub const GL_NORMAL_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F22, .hex);
pub const GL_COLOR_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F23, .hex);
pub const GL_INDEX_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F24, .hex);
pub const GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F25, .hex);
pub const GL_EDGE_FLAG_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F26, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F27, .hex);
pub const GL_FOG_COORD_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F28, .hex);
pub const GL_ELEMENT_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F29, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2A, .hex);
pub const GL_VERTEX_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2B, .hex);
pub const GL_NORMAL_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2C, .hex);
pub const GL_COLOR_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2D, .hex);
pub const GL_INDEX_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2E, .hex);
pub const GL_TEXTURE_COORD_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2F, .hex);
pub const GL_EDGE_FLAG_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F30, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F31, .hex);
pub const GL_FOG_COORD_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F32, .hex);
pub const GL_ELEMENT_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F33, .hex);
pub const GL_DRAW_INDIRECT_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F40, .hex);
pub const GL_DRAW_INDIRECT_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F41, .hex);
pub const GL_DRAW_INDIRECT_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F42, .hex);
// /usr/include/GL/glew.h:18212:9: warning: macro 'glBufferAddressRangeNV' contains a runtime value, translated to function
pub inline fn glBufferAddressRangeNV() @TypeOf(GLEW_GET_FUN(__glewBufferAddressRangeNV)) {
    return GLEW_GET_FUN(__glewBufferAddressRangeNV);
}
// /usr/include/GL/glew.h:18213:9: warning: macro 'glColorFormatNV' contains a runtime value, translated to function
pub inline fn glColorFormatNV() @TypeOf(GLEW_GET_FUN(__glewColorFormatNV)) {
    return GLEW_GET_FUN(__glewColorFormatNV);
}
// /usr/include/GL/glew.h:18214:9: warning: macro 'glEdgeFlagFormatNV' contains a runtime value, translated to function
pub inline fn glEdgeFlagFormatNV() @TypeOf(GLEW_GET_FUN(__glewEdgeFlagFormatNV)) {
    return GLEW_GET_FUN(__glewEdgeFlagFormatNV);
}
// /usr/include/GL/glew.h:18215:9: warning: macro 'glFogCoordFormatNV' contains a runtime value, translated to function
pub inline fn glFogCoordFormatNV() @TypeOf(GLEW_GET_FUN(__glewFogCoordFormatNV)) {
    return GLEW_GET_FUN(__glewFogCoordFormatNV);
}
// /usr/include/GL/glew.h:18216:9: warning: macro 'glGetIntegerui64i_vNV' contains a runtime value, translated to function
pub inline fn glGetIntegerui64i_vNV() @TypeOf(GLEW_GET_FUN(__glewGetIntegerui64i_vNV)) {
    return GLEW_GET_FUN(__glewGetIntegerui64i_vNV);
}
// /usr/include/GL/glew.h:18217:9: warning: macro 'glIndexFormatNV' contains a runtime value, translated to function
pub inline fn glIndexFormatNV() @TypeOf(GLEW_GET_FUN(__glewIndexFormatNV)) {
    return GLEW_GET_FUN(__glewIndexFormatNV);
}
// /usr/include/GL/glew.h:18218:9: warning: macro 'glNormalFormatNV' contains a runtime value, translated to function
pub inline fn glNormalFormatNV() @TypeOf(GLEW_GET_FUN(__glewNormalFormatNV)) {
    return GLEW_GET_FUN(__glewNormalFormatNV);
}
// /usr/include/GL/glew.h:18219:9: warning: macro 'glSecondaryColorFormatNV' contains a runtime value, translated to function
pub inline fn glSecondaryColorFormatNV() @TypeOf(GLEW_GET_FUN(__glewSecondaryColorFormatNV)) {
    return GLEW_GET_FUN(__glewSecondaryColorFormatNV);
}
// /usr/include/GL/glew.h:18220:9: warning: macro 'glTexCoordFormatNV' contains a runtime value, translated to function
pub inline fn glTexCoordFormatNV() @TypeOf(GLEW_GET_FUN(__glewTexCoordFormatNV)) {
    return GLEW_GET_FUN(__glewTexCoordFormatNV);
}
// /usr/include/GL/glew.h:18221:9: warning: macro 'glVertexAttribFormatNV' contains a runtime value, translated to function
pub inline fn glVertexAttribFormatNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribFormatNV)) {
    return GLEW_GET_FUN(__glewVertexAttribFormatNV);
}
// /usr/include/GL/glew.h:18222:9: warning: macro 'glVertexAttribIFormatNV' contains a runtime value, translated to function
pub inline fn glVertexAttribIFormatNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribIFormatNV)) {
    return GLEW_GET_FUN(__glewVertexAttribIFormatNV);
}
// /usr/include/GL/glew.h:18223:9: warning: macro 'glVertexFormatNV' contains a runtime value, translated to function
pub inline fn glVertexFormatNV() @TypeOf(GLEW_GET_FUN(__glewVertexFormatNV)) {
    return GLEW_GET_FUN(__glewVertexFormatNV);
}
// /usr/include/GL/glew.h:18225:9: warning: macro 'GLEW_NV_vertex_buffer_unified_memory' contains a runtime value, translated to function
pub inline fn GLEW_NV_vertex_buffer_unified_memory() @TypeOf(GLEW_GET_VAR(__GLEW_NV_vertex_buffer_unified_memory)) {
    return GLEW_GET_VAR(__GLEW_NV_vertex_buffer_unified_memory);
}
pub const GL_NV_vertex_program = @as(c_int, 1);
pub const GL_VERTEX_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8620, .hex);
pub const GL_VERTEX_STATE_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8621, .hex);
pub const GL_ATTRIB_ARRAY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hex);
pub const GL_ATTRIB_ARRAY_STRIDE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hex);
pub const GL_ATTRIB_ARRAY_TYPE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hex);
pub const GL_CURRENT_ATTRIB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hex);
pub const GL_PROGRAM_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8627, .hex);
pub const GL_PROGRAM_STRING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8628, .hex);
pub const GL_MODELVIEW_PROJECTION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8629, .hex);
pub const GL_IDENTITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862A, .hex);
pub const GL_INVERSE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862B, .hex);
pub const GL_TRANSPOSE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862C, .hex);
pub const GL_INVERSE_TRANSPOSE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862D, .hex);
pub const GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862E, .hex);
pub const GL_MAX_TRACK_MATRICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862F, .hex);
pub const GL_MATRIX0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8630, .hex);
pub const GL_MATRIX1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8631, .hex);
pub const GL_MATRIX2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8632, .hex);
pub const GL_MATRIX3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8633, .hex);
pub const GL_MATRIX4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8634, .hex);
pub const GL_MATRIX5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8635, .hex);
pub const GL_MATRIX6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8636, .hex);
pub const GL_MATRIX7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8637, .hex);
pub const GL_CURRENT_MATRIX_STACK_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8640, .hex);
pub const GL_CURRENT_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8641, .hex);
pub const GL_VERTEX_PROGRAM_POINT_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hex);
pub const GL_VERTEX_PROGRAM_TWO_SIDE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hex);
pub const GL_PROGRAM_PARAMETER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8644, .hex);
pub const GL_ATTRIB_ARRAY_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hex);
pub const GL_PROGRAM_TARGET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8646, .hex);
pub const GL_PROGRAM_RESIDENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8647, .hex);
pub const GL_TRACK_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8648, .hex);
pub const GL_TRACK_MATRIX_TRANSFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8649, .hex);
pub const GL_VERTEX_PROGRAM_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864A, .hex);
pub const GL_PROGRAM_ERROR_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864B, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8650, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8651, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8652, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8653, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8654, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8655, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8656, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8657, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8658, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8659, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865A, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865B, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865C, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865D, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865E, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865F, .hex);
pub const GL_MAP1_VERTEX_ATTRIB0_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8660, .hex);
pub const GL_MAP1_VERTEX_ATTRIB1_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8661, .hex);
pub const GL_MAP1_VERTEX_ATTRIB2_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8662, .hex);
pub const GL_MAP1_VERTEX_ATTRIB3_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8663, .hex);
pub const GL_MAP1_VERTEX_ATTRIB4_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8664, .hex);
pub const GL_MAP1_VERTEX_ATTRIB5_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8665, .hex);
pub const GL_MAP1_VERTEX_ATTRIB6_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8666, .hex);
pub const GL_MAP1_VERTEX_ATTRIB7_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8667, .hex);
pub const GL_MAP1_VERTEX_ATTRIB8_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8668, .hex);
pub const GL_MAP1_VERTEX_ATTRIB9_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8669, .hex);
pub const GL_MAP1_VERTEX_ATTRIB10_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866A, .hex);
pub const GL_MAP1_VERTEX_ATTRIB11_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866B, .hex);
pub const GL_MAP1_VERTEX_ATTRIB12_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866C, .hex);
pub const GL_MAP1_VERTEX_ATTRIB13_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866D, .hex);
pub const GL_MAP1_VERTEX_ATTRIB14_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866E, .hex);
pub const GL_MAP1_VERTEX_ATTRIB15_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866F, .hex);
pub const GL_MAP2_VERTEX_ATTRIB0_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8670, .hex);
pub const GL_MAP2_VERTEX_ATTRIB1_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8671, .hex);
pub const GL_MAP2_VERTEX_ATTRIB2_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8672, .hex);
pub const GL_MAP2_VERTEX_ATTRIB3_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8673, .hex);
pub const GL_MAP2_VERTEX_ATTRIB4_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8674, .hex);
pub const GL_MAP2_VERTEX_ATTRIB5_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8675, .hex);
pub const GL_MAP2_VERTEX_ATTRIB6_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8676, .hex);
pub const GL_MAP2_VERTEX_ATTRIB7_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8677, .hex);
pub const GL_MAP2_VERTEX_ATTRIB8_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8678, .hex);
pub const GL_MAP2_VERTEX_ATTRIB9_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8679, .hex);
pub const GL_MAP2_VERTEX_ATTRIB10_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867A, .hex);
pub const GL_MAP2_VERTEX_ATTRIB11_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867B, .hex);
pub const GL_MAP2_VERTEX_ATTRIB12_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867C, .hex);
pub const GL_MAP2_VERTEX_ATTRIB13_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867D, .hex);
pub const GL_MAP2_VERTEX_ATTRIB14_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867E, .hex);
pub const GL_MAP2_VERTEX_ATTRIB15_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867F, .hex);
// /usr/include/GL/glew.h:18383:9: warning: macro 'glAreProgramsResidentNV' contains a runtime value, translated to function
pub inline fn glAreProgramsResidentNV() @TypeOf(GLEW_GET_FUN(__glewAreProgramsResidentNV)) {
    return GLEW_GET_FUN(__glewAreProgramsResidentNV);
}
// /usr/include/GL/glew.h:18384:9: warning: macro 'glBindProgramNV' contains a runtime value, translated to function
pub inline fn glBindProgramNV() @TypeOf(GLEW_GET_FUN(__glewBindProgramNV)) {
    return GLEW_GET_FUN(__glewBindProgramNV);
}
// /usr/include/GL/glew.h:18385:9: warning: macro 'glDeleteProgramsNV' contains a runtime value, translated to function
pub inline fn glDeleteProgramsNV() @TypeOf(GLEW_GET_FUN(__glewDeleteProgramsNV)) {
    return GLEW_GET_FUN(__glewDeleteProgramsNV);
}
// /usr/include/GL/glew.h:18386:9: warning: macro 'glExecuteProgramNV' contains a runtime value, translated to function
pub inline fn glExecuteProgramNV() @TypeOf(GLEW_GET_FUN(__glewExecuteProgramNV)) {
    return GLEW_GET_FUN(__glewExecuteProgramNV);
}
// /usr/include/GL/glew.h:18387:9: warning: macro 'glGenProgramsNV' contains a runtime value, translated to function
pub inline fn glGenProgramsNV() @TypeOf(GLEW_GET_FUN(__glewGenProgramsNV)) {
    return GLEW_GET_FUN(__glewGenProgramsNV);
}
// /usr/include/GL/glew.h:18388:9: warning: macro 'glGetProgramParameterdvNV' contains a runtime value, translated to function
pub inline fn glGetProgramParameterdvNV() @TypeOf(GLEW_GET_FUN(__glewGetProgramParameterdvNV)) {
    return GLEW_GET_FUN(__glewGetProgramParameterdvNV);
}
// /usr/include/GL/glew.h:18389:9: warning: macro 'glGetProgramParameterfvNV' contains a runtime value, translated to function
pub inline fn glGetProgramParameterfvNV() @TypeOf(GLEW_GET_FUN(__glewGetProgramParameterfvNV)) {
    return GLEW_GET_FUN(__glewGetProgramParameterfvNV);
}
// /usr/include/GL/glew.h:18390:9: warning: macro 'glGetProgramStringNV' contains a runtime value, translated to function
pub inline fn glGetProgramStringNV() @TypeOf(GLEW_GET_FUN(__glewGetProgramStringNV)) {
    return GLEW_GET_FUN(__glewGetProgramStringNV);
}
// /usr/include/GL/glew.h:18391:9: warning: macro 'glGetProgramivNV' contains a runtime value, translated to function
pub inline fn glGetProgramivNV() @TypeOf(GLEW_GET_FUN(__glewGetProgramivNV)) {
    return GLEW_GET_FUN(__glewGetProgramivNV);
}
// /usr/include/GL/glew.h:18392:9: warning: macro 'glGetTrackMatrixivNV' contains a runtime value, translated to function
pub inline fn glGetTrackMatrixivNV() @TypeOf(GLEW_GET_FUN(__glewGetTrackMatrixivNV)) {
    return GLEW_GET_FUN(__glewGetTrackMatrixivNV);
}
// /usr/include/GL/glew.h:18393:9: warning: macro 'glGetVertexAttribPointervNV' contains a runtime value, translated to function
pub inline fn glGetVertexAttribPointervNV() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribPointervNV)) {
    return GLEW_GET_FUN(__glewGetVertexAttribPointervNV);
}
// /usr/include/GL/glew.h:18394:9: warning: macro 'glGetVertexAttribdvNV' contains a runtime value, translated to function
pub inline fn glGetVertexAttribdvNV() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribdvNV)) {
    return GLEW_GET_FUN(__glewGetVertexAttribdvNV);
}
// /usr/include/GL/glew.h:18395:9: warning: macro 'glGetVertexAttribfvNV' contains a runtime value, translated to function
pub inline fn glGetVertexAttribfvNV() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribfvNV)) {
    return GLEW_GET_FUN(__glewGetVertexAttribfvNV);
}
// /usr/include/GL/glew.h:18396:9: warning: macro 'glGetVertexAttribivNV' contains a runtime value, translated to function
pub inline fn glGetVertexAttribivNV() @TypeOf(GLEW_GET_FUN(__glewGetVertexAttribivNV)) {
    return GLEW_GET_FUN(__glewGetVertexAttribivNV);
}
// /usr/include/GL/glew.h:18397:9: warning: macro 'glIsProgramNV' contains a runtime value, translated to function
pub inline fn glIsProgramNV() @TypeOf(GLEW_GET_FUN(__glewIsProgramNV)) {
    return GLEW_GET_FUN(__glewIsProgramNV);
}
// /usr/include/GL/glew.h:18398:9: warning: macro 'glLoadProgramNV' contains a runtime value, translated to function
pub inline fn glLoadProgramNV() @TypeOf(GLEW_GET_FUN(__glewLoadProgramNV)) {
    return GLEW_GET_FUN(__glewLoadProgramNV);
}
// /usr/include/GL/glew.h:18399:9: warning: macro 'glProgramParameter4dNV' contains a runtime value, translated to function
pub inline fn glProgramParameter4dNV() @TypeOf(GLEW_GET_FUN(__glewProgramParameter4dNV)) {
    return GLEW_GET_FUN(__glewProgramParameter4dNV);
}
// /usr/include/GL/glew.h:18400:9: warning: macro 'glProgramParameter4dvNV' contains a runtime value, translated to function
pub inline fn glProgramParameter4dvNV() @TypeOf(GLEW_GET_FUN(__glewProgramParameter4dvNV)) {
    return GLEW_GET_FUN(__glewProgramParameter4dvNV);
}
// /usr/include/GL/glew.h:18401:9: warning: macro 'glProgramParameter4fNV' contains a runtime value, translated to function
pub inline fn glProgramParameter4fNV() @TypeOf(GLEW_GET_FUN(__glewProgramParameter4fNV)) {
    return GLEW_GET_FUN(__glewProgramParameter4fNV);
}
// /usr/include/GL/glew.h:18402:9: warning: macro 'glProgramParameter4fvNV' contains a runtime value, translated to function
pub inline fn glProgramParameter4fvNV() @TypeOf(GLEW_GET_FUN(__glewProgramParameter4fvNV)) {
    return GLEW_GET_FUN(__glewProgramParameter4fvNV);
}
// /usr/include/GL/glew.h:18403:9: warning: macro 'glProgramParameters4dvNV' contains a runtime value, translated to function
pub inline fn glProgramParameters4dvNV() @TypeOf(GLEW_GET_FUN(__glewProgramParameters4dvNV)) {
    return GLEW_GET_FUN(__glewProgramParameters4dvNV);
}
// /usr/include/GL/glew.h:18404:9: warning: macro 'glProgramParameters4fvNV' contains a runtime value, translated to function
pub inline fn glProgramParameters4fvNV() @TypeOf(GLEW_GET_FUN(__glewProgramParameters4fvNV)) {
    return GLEW_GET_FUN(__glewProgramParameters4fvNV);
}
// /usr/include/GL/glew.h:18405:9: warning: macro 'glRequestResidentProgramsNV' contains a runtime value, translated to function
pub inline fn glRequestResidentProgramsNV() @TypeOf(GLEW_GET_FUN(__glewRequestResidentProgramsNV)) {
    return GLEW_GET_FUN(__glewRequestResidentProgramsNV);
}
// /usr/include/GL/glew.h:18406:9: warning: macro 'glTrackMatrixNV' contains a runtime value, translated to function
pub inline fn glTrackMatrixNV() @TypeOf(GLEW_GET_FUN(__glewTrackMatrixNV)) {
    return GLEW_GET_FUN(__glewTrackMatrixNV);
}
// /usr/include/GL/glew.h:18407:9: warning: macro 'glVertexAttrib1dNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib1dNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1dNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib1dNV);
}
// /usr/include/GL/glew.h:18408:9: warning: macro 'glVertexAttrib1dvNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib1dvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1dvNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib1dvNV);
}
// /usr/include/GL/glew.h:18409:9: warning: macro 'glVertexAttrib1fNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib1fNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1fNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib1fNV);
}
// /usr/include/GL/glew.h:18410:9: warning: macro 'glVertexAttrib1fvNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib1fvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1fvNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib1fvNV);
}
// /usr/include/GL/glew.h:18411:9: warning: macro 'glVertexAttrib1sNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib1sNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1sNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib1sNV);
}
// /usr/include/GL/glew.h:18412:9: warning: macro 'glVertexAttrib1svNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib1svNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib1svNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib1svNV);
}
// /usr/include/GL/glew.h:18413:9: warning: macro 'glVertexAttrib2dNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib2dNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2dNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib2dNV);
}
// /usr/include/GL/glew.h:18414:9: warning: macro 'glVertexAttrib2dvNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib2dvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2dvNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib2dvNV);
}
// /usr/include/GL/glew.h:18415:9: warning: macro 'glVertexAttrib2fNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib2fNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2fNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib2fNV);
}
// /usr/include/GL/glew.h:18416:9: warning: macro 'glVertexAttrib2fvNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib2fvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2fvNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib2fvNV);
}
// /usr/include/GL/glew.h:18417:9: warning: macro 'glVertexAttrib2sNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib2sNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2sNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib2sNV);
}
// /usr/include/GL/glew.h:18418:9: warning: macro 'glVertexAttrib2svNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib2svNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib2svNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib2svNV);
}
// /usr/include/GL/glew.h:18419:9: warning: macro 'glVertexAttrib3dNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib3dNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3dNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib3dNV);
}
// /usr/include/GL/glew.h:18420:9: warning: macro 'glVertexAttrib3dvNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib3dvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3dvNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib3dvNV);
}
// /usr/include/GL/glew.h:18421:9: warning: macro 'glVertexAttrib3fNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib3fNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3fNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib3fNV);
}
// /usr/include/GL/glew.h:18422:9: warning: macro 'glVertexAttrib3fvNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib3fvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3fvNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib3fvNV);
}
// /usr/include/GL/glew.h:18423:9: warning: macro 'glVertexAttrib3sNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib3sNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3sNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib3sNV);
}
// /usr/include/GL/glew.h:18424:9: warning: macro 'glVertexAttrib3svNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib3svNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib3svNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib3svNV);
}
// /usr/include/GL/glew.h:18425:9: warning: macro 'glVertexAttrib4dNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib4dNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4dNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib4dNV);
}
// /usr/include/GL/glew.h:18426:9: warning: macro 'glVertexAttrib4dvNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib4dvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4dvNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib4dvNV);
}
// /usr/include/GL/glew.h:18427:9: warning: macro 'glVertexAttrib4fNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib4fNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4fNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib4fNV);
}
// /usr/include/GL/glew.h:18428:9: warning: macro 'glVertexAttrib4fvNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib4fvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4fvNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib4fvNV);
}
// /usr/include/GL/glew.h:18429:9: warning: macro 'glVertexAttrib4sNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib4sNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4sNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib4sNV);
}
// /usr/include/GL/glew.h:18430:9: warning: macro 'glVertexAttrib4svNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib4svNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4svNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib4svNV);
}
// /usr/include/GL/glew.h:18431:9: warning: macro 'glVertexAttrib4ubNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib4ubNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4ubNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib4ubNV);
}
// /usr/include/GL/glew.h:18432:9: warning: macro 'glVertexAttrib4ubvNV' contains a runtime value, translated to function
pub inline fn glVertexAttrib4ubvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttrib4ubvNV)) {
    return GLEW_GET_FUN(__glewVertexAttrib4ubvNV);
}
// /usr/include/GL/glew.h:18433:9: warning: macro 'glVertexAttribPointerNV' contains a runtime value, translated to function
pub inline fn glVertexAttribPointerNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribPointerNV)) {
    return GLEW_GET_FUN(__glewVertexAttribPointerNV);
}
// /usr/include/GL/glew.h:18434:9: warning: macro 'glVertexAttribs1dvNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs1dvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs1dvNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs1dvNV);
}
// /usr/include/GL/glew.h:18435:9: warning: macro 'glVertexAttribs1fvNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs1fvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs1fvNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs1fvNV);
}
// /usr/include/GL/glew.h:18436:9: warning: macro 'glVertexAttribs1svNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs1svNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs1svNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs1svNV);
}
// /usr/include/GL/glew.h:18437:9: warning: macro 'glVertexAttribs2dvNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs2dvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs2dvNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs2dvNV);
}
// /usr/include/GL/glew.h:18438:9: warning: macro 'glVertexAttribs2fvNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs2fvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs2fvNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs2fvNV);
}
// /usr/include/GL/glew.h:18439:9: warning: macro 'glVertexAttribs2svNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs2svNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs2svNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs2svNV);
}
// /usr/include/GL/glew.h:18440:9: warning: macro 'glVertexAttribs3dvNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs3dvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs3dvNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs3dvNV);
}
// /usr/include/GL/glew.h:18441:9: warning: macro 'glVertexAttribs3fvNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs3fvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs3fvNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs3fvNV);
}
// /usr/include/GL/glew.h:18442:9: warning: macro 'glVertexAttribs3svNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs3svNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs3svNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs3svNV);
}
// /usr/include/GL/glew.h:18443:9: warning: macro 'glVertexAttribs4dvNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs4dvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs4dvNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs4dvNV);
}
// /usr/include/GL/glew.h:18444:9: warning: macro 'glVertexAttribs4fvNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs4fvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs4fvNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs4fvNV);
}
// /usr/include/GL/glew.h:18445:9: warning: macro 'glVertexAttribs4svNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs4svNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs4svNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs4svNV);
}
// /usr/include/GL/glew.h:18446:9: warning: macro 'glVertexAttribs4ubvNV' contains a runtime value, translated to function
pub inline fn glVertexAttribs4ubvNV() @TypeOf(GLEW_GET_FUN(__glewVertexAttribs4ubvNV)) {
    return GLEW_GET_FUN(__glewVertexAttribs4ubvNV);
}
// /usr/include/GL/glew.h:18448:9: warning: macro 'GLEW_NV_vertex_program' contains a runtime value, translated to function
pub inline fn GLEW_NV_vertex_program() @TypeOf(GLEW_GET_VAR(__GLEW_NV_vertex_program)) {
    return GLEW_GET_VAR(__GLEW_NV_vertex_program);
}
pub const GL_NV_vertex_program1_1 = @as(c_int, 1);
// /usr/include/GL/glew.h:18457:9: warning: macro 'GLEW_NV_vertex_program1_1' contains a runtime value, translated to function
pub inline fn GLEW_NV_vertex_program1_1() @TypeOf(GLEW_GET_VAR(__GLEW_NV_vertex_program1_1)) {
    return GLEW_GET_VAR(__GLEW_NV_vertex_program1_1);
}
pub const GL_NV_vertex_program2 = @as(c_int, 1);
// /usr/include/GL/glew.h:18466:9: warning: macro 'GLEW_NV_vertex_program2' contains a runtime value, translated to function
pub inline fn GLEW_NV_vertex_program2() @TypeOf(GLEW_GET_VAR(__GLEW_NV_vertex_program2)) {
    return GLEW_GET_VAR(__GLEW_NV_vertex_program2);
}
pub const GL_NV_vertex_program2_option = @as(c_int, 1);
// /usr/include/GL/glew.h:18478:9: warning: macro 'GLEW_NV_vertex_program2_option' contains a runtime value, translated to function
pub inline fn GLEW_NV_vertex_program2_option() @TypeOf(GLEW_GET_VAR(__GLEW_NV_vertex_program2_option)) {
    return GLEW_GET_VAR(__GLEW_NV_vertex_program2_option);
}
pub const GL_NV_vertex_program3 = @as(c_int, 1);
pub const MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4C, .hex);
// /usr/include/GL/glew.h:18489:9: warning: macro 'GLEW_NV_vertex_program3' contains a runtime value, translated to function
pub inline fn GLEW_NV_vertex_program3() @TypeOf(GLEW_GET_VAR(__GLEW_NV_vertex_program3)) {
    return GLEW_GET_VAR(__GLEW_NV_vertex_program3);
}
pub const GL_NV_vertex_program4 = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hex);
// /usr/include/GL/glew.h:18500:9: warning: macro 'GLEW_NV_vertex_program4' contains a runtime value, translated to function
pub inline fn GLEW_NV_vertex_program4() @TypeOf(GLEW_GET_VAR(__GLEW_NV_vertex_program4)) {
    return GLEW_GET_VAR(__GLEW_NV_vertex_program4);
}
pub const GL_NV_video_capture = @as(c_int, 1);
pub const GL_VIDEO_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9020, .hex);
pub const GL_VIDEO_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9021, .hex);
pub const GL_FIELD_UPPER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9022, .hex);
pub const GL_FIELD_LOWER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9023, .hex);
pub const GL_NUM_VIDEO_CAPTURE_STREAMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9024, .hex);
pub const GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9025, .hex);
pub const GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9026, .hex);
pub const GL_LAST_VIDEO_CAPTURE_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9027, .hex);
pub const GL_VIDEO_BUFFER_PITCH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9028, .hex);
pub const GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9029, .hex);
pub const GL_VIDEO_COLOR_CONVERSION_MAX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902A, .hex);
pub const GL_VIDEO_COLOR_CONVERSION_MIN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902B, .hex);
pub const GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902C, .hex);
pub const GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902D, .hex);
pub const GL_PARTIAL_SUCCESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902E, .hex);
pub const GL_SUCCESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902F, .hex);
pub const GL_FAILURE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9030, .hex);
pub const GL_YCBYCR8_422_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9031, .hex);
pub const GL_YCBAYCR8A_4224_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9032, .hex);
pub const GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9033, .hex);
pub const GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9034, .hex);
pub const GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9035, .hex);
pub const GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9036, .hex);
pub const GL_Z4Y12Z4CB12Z4CR12_444_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9037, .hex);
pub const GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9038, .hex);
pub const GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9039, .hex);
pub const GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x903A, .hex);
pub const GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x903B, .hex);
pub const GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x903C, .hex);
// /usr/include/GL/glew.h:18552:9: warning: macro 'glBeginVideoCaptureNV' contains a runtime value, translated to function
pub inline fn glBeginVideoCaptureNV() @TypeOf(GLEW_GET_FUN(__glewBeginVideoCaptureNV)) {
    return GLEW_GET_FUN(__glewBeginVideoCaptureNV);
}
// /usr/include/GL/glew.h:18553:9: warning: macro 'glBindVideoCaptureStreamBufferNV' contains a runtime value, translated to function
pub inline fn glBindVideoCaptureStreamBufferNV() @TypeOf(GLEW_GET_FUN(__glewBindVideoCaptureStreamBufferNV)) {
    return GLEW_GET_FUN(__glewBindVideoCaptureStreamBufferNV);
}
// /usr/include/GL/glew.h:18554:9: warning: macro 'glBindVideoCaptureStreamTextureNV' contains a runtime value, translated to function
pub inline fn glBindVideoCaptureStreamTextureNV() @TypeOf(GLEW_GET_FUN(__glewBindVideoCaptureStreamTextureNV)) {
    return GLEW_GET_FUN(__glewBindVideoCaptureStreamTextureNV);
}
// /usr/include/GL/glew.h:18555:9: warning: macro 'glEndVideoCaptureNV' contains a runtime value, translated to function
pub inline fn glEndVideoCaptureNV() @TypeOf(GLEW_GET_FUN(__glewEndVideoCaptureNV)) {
    return GLEW_GET_FUN(__glewEndVideoCaptureNV);
}
// /usr/include/GL/glew.h:18556:9: warning: macro 'glGetVideoCaptureStreamdvNV' contains a runtime value, translated to function
pub inline fn glGetVideoCaptureStreamdvNV() @TypeOf(GLEW_GET_FUN(__glewGetVideoCaptureStreamdvNV)) {
    return GLEW_GET_FUN(__glewGetVideoCaptureStreamdvNV);
}
// /usr/include/GL/glew.h:18557:9: warning: macro 'glGetVideoCaptureStreamfvNV' contains a runtime value, translated to function
pub inline fn glGetVideoCaptureStreamfvNV() @TypeOf(GLEW_GET_FUN(__glewGetVideoCaptureStreamfvNV)) {
    return GLEW_GET_FUN(__glewGetVideoCaptureStreamfvNV);
}
// /usr/include/GL/glew.h:18558:9: warning: macro 'glGetVideoCaptureStreamivNV' contains a runtime value, translated to function
pub inline fn glGetVideoCaptureStreamivNV() @TypeOf(GLEW_GET_FUN(__glewGetVideoCaptureStreamivNV)) {
    return GLEW_GET_FUN(__glewGetVideoCaptureStreamivNV);
}
// /usr/include/GL/glew.h:18559:9: warning: macro 'glGetVideoCaptureivNV' contains a runtime value, translated to function
pub inline fn glGetVideoCaptureivNV() @TypeOf(GLEW_GET_FUN(__glewGetVideoCaptureivNV)) {
    return GLEW_GET_FUN(__glewGetVideoCaptureivNV);
}
// /usr/include/GL/glew.h:18560:9: warning: macro 'glVideoCaptureNV' contains a runtime value, translated to function
pub inline fn glVideoCaptureNV() @TypeOf(GLEW_GET_FUN(__glewVideoCaptureNV)) {
    return GLEW_GET_FUN(__glewVideoCaptureNV);
}
// /usr/include/GL/glew.h:18561:9: warning: macro 'glVideoCaptureStreamParameterdvNV' contains a runtime value, translated to function
pub inline fn glVideoCaptureStreamParameterdvNV() @TypeOf(GLEW_GET_FUN(__glewVideoCaptureStreamParameterdvNV)) {
    return GLEW_GET_FUN(__glewVideoCaptureStreamParameterdvNV);
}
// /usr/include/GL/glew.h:18562:9: warning: macro 'glVideoCaptureStreamParameterfvNV' contains a runtime value, translated to function
pub inline fn glVideoCaptureStreamParameterfvNV() @TypeOf(GLEW_GET_FUN(__glewVideoCaptureStreamParameterfvNV)) {
    return GLEW_GET_FUN(__glewVideoCaptureStreamParameterfvNV);
}
// /usr/include/GL/glew.h:18563:9: warning: macro 'glVideoCaptureStreamParameterivNV' contains a runtime value, translated to function
pub inline fn glVideoCaptureStreamParameterivNV() @TypeOf(GLEW_GET_FUN(__glewVideoCaptureStreamParameterivNV)) {
    return GLEW_GET_FUN(__glewVideoCaptureStreamParameterivNV);
}
// /usr/include/GL/glew.h:18565:9: warning: macro 'GLEW_NV_video_capture' contains a runtime value, translated to function
pub inline fn GLEW_NV_video_capture() @TypeOf(GLEW_GET_VAR(__GLEW_NV_video_capture)) {
    return GLEW_GET_VAR(__GLEW_NV_video_capture);
}
pub const GL_NV_viewport_array = @as(c_int, 1);
pub const GL_MAX_VIEWPORTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825B, .hex);
pub const GL_VIEWPORT_SUBPIXEL_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825C, .hex);
pub const GL_VIEWPORT_BOUNDS_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825D, .hex);
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825F, .hex);
// /usr/include/GL/glew.h:18596:9: warning: macro 'glDepthRangeArrayfvNV' contains a runtime value, translated to function
pub inline fn glDepthRangeArrayfvNV() @TypeOf(GLEW_GET_FUN(__glewDepthRangeArrayfvNV)) {
    return GLEW_GET_FUN(__glewDepthRangeArrayfvNV);
}
// /usr/include/GL/glew.h:18597:9: warning: macro 'glDepthRangeIndexedfNV' contains a runtime value, translated to function
pub inline fn glDepthRangeIndexedfNV() @TypeOf(GLEW_GET_FUN(__glewDepthRangeIndexedfNV)) {
    return GLEW_GET_FUN(__glewDepthRangeIndexedfNV);
}
// /usr/include/GL/glew.h:18598:9: warning: macro 'glDisableiNV' contains a runtime value, translated to function
pub inline fn glDisableiNV() @TypeOf(GLEW_GET_FUN(__glewDisableiNV)) {
    return GLEW_GET_FUN(__glewDisableiNV);
}
// /usr/include/GL/glew.h:18599:9: warning: macro 'glEnableiNV' contains a runtime value, translated to function
pub inline fn glEnableiNV() @TypeOf(GLEW_GET_FUN(__glewEnableiNV)) {
    return GLEW_GET_FUN(__glewEnableiNV);
}
// /usr/include/GL/glew.h:18600:9: warning: macro 'glGetFloati_vNV' contains a runtime value, translated to function
pub inline fn glGetFloati_vNV() @TypeOf(GLEW_GET_FUN(__glewGetFloati_vNV)) {
    return GLEW_GET_FUN(__glewGetFloati_vNV);
}
// /usr/include/GL/glew.h:18601:9: warning: macro 'glIsEnablediNV' contains a runtime value, translated to function
pub inline fn glIsEnablediNV() @TypeOf(GLEW_GET_FUN(__glewIsEnablediNV)) {
    return GLEW_GET_FUN(__glewIsEnablediNV);
}
// /usr/include/GL/glew.h:18602:9: warning: macro 'glScissorArrayvNV' contains a runtime value, translated to function
pub inline fn glScissorArrayvNV() @TypeOf(GLEW_GET_FUN(__glewScissorArrayvNV)) {
    return GLEW_GET_FUN(__glewScissorArrayvNV);
}
// /usr/include/GL/glew.h:18603:9: warning: macro 'glScissorIndexedNV' contains a runtime value, translated to function
pub inline fn glScissorIndexedNV() @TypeOf(GLEW_GET_FUN(__glewScissorIndexedNV)) {
    return GLEW_GET_FUN(__glewScissorIndexedNV);
}
// /usr/include/GL/glew.h:18604:9: warning: macro 'glScissorIndexedvNV' contains a runtime value, translated to function
pub inline fn glScissorIndexedvNV() @TypeOf(GLEW_GET_FUN(__glewScissorIndexedvNV)) {
    return GLEW_GET_FUN(__glewScissorIndexedvNV);
}
// /usr/include/GL/glew.h:18605:9: warning: macro 'glViewportArrayvNV' contains a runtime value, translated to function
pub inline fn glViewportArrayvNV() @TypeOf(GLEW_GET_FUN(__glewViewportArrayvNV)) {
    return GLEW_GET_FUN(__glewViewportArrayvNV);
}
// /usr/include/GL/glew.h:18606:9: warning: macro 'glViewportIndexedfNV' contains a runtime value, translated to function
pub inline fn glViewportIndexedfNV() @TypeOf(GLEW_GET_FUN(__glewViewportIndexedfNV)) {
    return GLEW_GET_FUN(__glewViewportIndexedfNV);
}
// /usr/include/GL/glew.h:18607:9: warning: macro 'glViewportIndexedfvNV' contains a runtime value, translated to function
pub inline fn glViewportIndexedfvNV() @TypeOf(GLEW_GET_FUN(__glewViewportIndexedfvNV)) {
    return GLEW_GET_FUN(__glewViewportIndexedfvNV);
}
// /usr/include/GL/glew.h:18609:9: warning: macro 'GLEW_NV_viewport_array' contains a runtime value, translated to function
pub inline fn GLEW_NV_viewport_array() @TypeOf(GLEW_GET_VAR(__GLEW_NV_viewport_array)) {
    return GLEW_GET_VAR(__GLEW_NV_viewport_array);
}
pub const GL_NV_viewport_array2 = @as(c_int, 1);
// /usr/include/GL/glew.h:18618:9: warning: macro 'GLEW_NV_viewport_array2' contains a runtime value, translated to function
pub inline fn GLEW_NV_viewport_array2() @TypeOf(GLEW_GET_VAR(__GLEW_NV_viewport_array2)) {
    return GLEW_GET_VAR(__GLEW_NV_viewport_array2);
}
pub const GL_NV_viewport_swizzle = @as(c_int, 1);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9350, .hex);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9351, .hex);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9352, .hex);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9353, .hex);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9354, .hex);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9355, .hex);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9356, .hex);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9357, .hex);
pub const GL_VIEWPORT_SWIZZLE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9358, .hex);
pub const GL_VIEWPORT_SWIZZLE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9359, .hex);
pub const GL_VIEWPORT_SWIZZLE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935A, .hex);
pub const GL_VIEWPORT_SWIZZLE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935B, .hex);
// /usr/include/GL/glew.h:18642:9: warning: macro 'glViewportSwizzleNV' contains a runtime value, translated to function
pub inline fn glViewportSwizzleNV() @TypeOf(GLEW_GET_FUN(__glewViewportSwizzleNV)) {
    return GLEW_GET_FUN(__glewViewportSwizzleNV);
}
// /usr/include/GL/glew.h:18644:9: warning: macro 'GLEW_NV_viewport_swizzle' contains a runtime value, translated to function
pub inline fn GLEW_NV_viewport_swizzle() @TypeOf(GLEW_GET_VAR(__GLEW_NV_viewport_swizzle)) {
    return GLEW_GET_VAR(__GLEW_NV_viewport_swizzle);
}
pub const GL_OES_EGL_image = @as(c_int, 1);
// /usr/include/GL/glew.h:18656:9: warning: macro 'glEGLImageTargetRenderbufferStorageOES' contains a runtime value, translated to function
pub inline fn glEGLImageTargetRenderbufferStorageOES() @TypeOf(GLEW_GET_FUN(__glewEGLImageTargetRenderbufferStorageOES)) {
    return GLEW_GET_FUN(__glewEGLImageTargetRenderbufferStorageOES);
}
// /usr/include/GL/glew.h:18657:9: warning: macro 'glEGLImageTargetTexture2DOES' contains a runtime value, translated to function
pub inline fn glEGLImageTargetTexture2DOES() @TypeOf(GLEW_GET_FUN(__glewEGLImageTargetTexture2DOES)) {
    return GLEW_GET_FUN(__glewEGLImageTargetTexture2DOES);
}
// /usr/include/GL/glew.h:18659:9: warning: macro 'GLEW_OES_EGL_image' contains a runtime value, translated to function
pub inline fn GLEW_OES_EGL_image() @TypeOf(GLEW_GET_VAR(__GLEW_OES_EGL_image)) {
    return GLEW_GET_VAR(__GLEW_OES_EGL_image);
}
pub const GL_OES_EGL_image_external = @as(c_int, 1);
// /usr/include/GL/glew.h:18673:9: warning: macro 'GLEW_OES_EGL_image_external' contains a runtime value, translated to function
pub inline fn GLEW_OES_EGL_image_external() @TypeOf(GLEW_GET_VAR(__GLEW_OES_EGL_image_external)) {
    return GLEW_GET_VAR(__GLEW_OES_EGL_image_external);
}
pub const GL_OES_EGL_image_external_essl3 = @as(c_int, 1);
// /usr/include/GL/glew.h:18682:9: warning: macro 'GLEW_OES_EGL_image_external_essl3' contains a runtime value, translated to function
pub inline fn GLEW_OES_EGL_image_external_essl3() @TypeOf(GLEW_GET_VAR(__GLEW_OES_EGL_image_external_essl3)) {
    return GLEW_GET_VAR(__GLEW_OES_EGL_image_external_essl3);
}
pub const GL_OES_blend_equation_separate = @as(c_int, 1);
pub const GL_BLEND_EQUATION_RGB_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hex);
pub const GL_BLEND_EQUATION_ALPHA_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hex);
// /usr/include/GL/glew.h:18696:9: warning: macro 'glBlendEquationSeparateOES' contains a runtime value, translated to function
pub inline fn glBlendEquationSeparateOES() @TypeOf(GLEW_GET_FUN(__glewBlendEquationSeparateOES)) {
    return GLEW_GET_FUN(__glewBlendEquationSeparateOES);
}
// /usr/include/GL/glew.h:18698:9: warning: macro 'GLEW_OES_blend_equation_separate' contains a runtime value, translated to function
pub inline fn GLEW_OES_blend_equation_separate() @TypeOf(GLEW_GET_VAR(__GLEW_OES_blend_equation_separate)) {
    return GLEW_GET_VAR(__GLEW_OES_blend_equation_separate);
}
pub const GL_OES_blend_func_separate = @as(c_int, 1);
pub const GL_BLEND_DST_RGB_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hex);
pub const GL_BLEND_SRC_RGB_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hex);
pub const GL_BLEND_DST_ALPHA_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hex);
pub const GL_BLEND_SRC_ALPHA_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hex);
// /usr/include/GL/glew.h:18714:9: warning: macro 'glBlendFuncSeparateOES' contains a runtime value, translated to function
pub inline fn glBlendFuncSeparateOES() @TypeOf(GLEW_GET_FUN(__glewBlendFuncSeparateOES)) {
    return GLEW_GET_FUN(__glewBlendFuncSeparateOES);
}
// /usr/include/GL/glew.h:18716:9: warning: macro 'GLEW_OES_blend_func_separate' contains a runtime value, translated to function
pub inline fn GLEW_OES_blend_func_separate() @TypeOf(GLEW_GET_VAR(__GLEW_OES_blend_func_separate)) {
    return GLEW_GET_VAR(__GLEW_OES_blend_func_separate);
}
pub const GL_OES_blend_subtract = @as(c_int, 1);
pub const GL_FUNC_ADD_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hex);
pub const GL_BLEND_EQUATION_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hex);
pub const GL_FUNC_SUBTRACT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hex);
pub const GL_FUNC_REVERSE_SUBTRACT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hex);
// /usr/include/GL/glew.h:18732:9: warning: macro 'glBlendEquationOES' contains a runtime value, translated to function
pub inline fn glBlendEquationOES() @TypeOf(GLEW_GET_FUN(__glewBlendEquationOES)) {
    return GLEW_GET_FUN(__glewBlendEquationOES);
}
// /usr/include/GL/glew.h:18734:9: warning: macro 'GLEW_OES_blend_subtract' contains a runtime value, translated to function
pub inline fn GLEW_OES_blend_subtract() @TypeOf(GLEW_GET_VAR(__GLEW_OES_blend_subtract)) {
    return GLEW_GET_VAR(__GLEW_OES_blend_subtract);
}
pub const GL_OES_byte_coordinates = @as(c_int, 1);
// /usr/include/GL/glew.h:18743:9: warning: macro 'GLEW_OES_byte_coordinates' contains a runtime value, translated to function
pub inline fn GLEW_OES_byte_coordinates() @TypeOf(GLEW_GET_VAR(__GLEW_OES_byte_coordinates)) {
    return GLEW_GET_VAR(__GLEW_OES_byte_coordinates);
}
pub const GL_OES_compressed_ETC1_RGB8_texture = @as(c_int, 1);
pub const GL_ETC1_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D64, .hex);
// /usr/include/GL/glew.h:18754:9: warning: macro 'GLEW_OES_compressed_ETC1_RGB8_texture' contains a runtime value, translated to function
pub inline fn GLEW_OES_compressed_ETC1_RGB8_texture() @TypeOf(GLEW_GET_VAR(__GLEW_OES_compressed_ETC1_RGB8_texture)) {
    return GLEW_GET_VAR(__GLEW_OES_compressed_ETC1_RGB8_texture);
}
pub const GL_OES_compressed_paletted_texture = @as(c_int, 1);
pub const GL_PALETTE4_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B90, .hex);
pub const GL_PALETTE4_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B91, .hex);
pub const GL_PALETTE4_R5_G6_B5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B92, .hex);
pub const GL_PALETTE4_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B93, .hex);
pub const GL_PALETTE4_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B94, .hex);
pub const GL_PALETTE8_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B95, .hex);
pub const GL_PALETTE8_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B96, .hex);
pub const GL_PALETTE8_R5_G6_B5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B97, .hex);
pub const GL_PALETTE8_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B98, .hex);
pub const GL_PALETTE8_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B99, .hex);
// /usr/include/GL/glew.h:18774:9: warning: macro 'GLEW_OES_compressed_paletted_texture' contains a runtime value, translated to function
pub inline fn GLEW_OES_compressed_paletted_texture() @TypeOf(GLEW_GET_VAR(__GLEW_OES_compressed_paletted_texture)) {
    return GLEW_GET_VAR(__GLEW_OES_compressed_paletted_texture);
}
pub const GL_OES_copy_image = @as(c_int, 1);
// /usr/include/GL/glew.h:18785:9: warning: macro 'glCopyImageSubDataOES' contains a runtime value, translated to function
pub inline fn glCopyImageSubDataOES() @TypeOf(GLEW_GET_FUN(__glewCopyImageSubDataOES)) {
    return GLEW_GET_FUN(__glewCopyImageSubDataOES);
}
// /usr/include/GL/glew.h:18787:9: warning: macro 'GLEW_OES_copy_image' contains a runtime value, translated to function
pub inline fn GLEW_OES_copy_image() @TypeOf(GLEW_GET_VAR(__GLEW_OES_copy_image)) {
    return GLEW_GET_VAR(__GLEW_OES_copy_image);
}
pub const GL_OES_depth24 = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT24_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hex);
// /usr/include/GL/glew.h:18798:9: warning: macro 'GLEW_OES_depth24' contains a runtime value, translated to function
pub inline fn GLEW_OES_depth24() @TypeOf(GLEW_GET_VAR(__GLEW_OES_depth24)) {
    return GLEW_GET_VAR(__GLEW_OES_depth24);
}
pub const GL_OES_depth32 = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT32_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hex);
// /usr/include/GL/glew.h:18809:9: warning: macro 'GLEW_OES_depth32' contains a runtime value, translated to function
pub inline fn GLEW_OES_depth32() @TypeOf(GLEW_GET_VAR(__GLEW_OES_depth32)) {
    return GLEW_GET_VAR(__GLEW_OES_depth32);
}
pub const GL_OES_depth_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:18822:9: warning: macro 'GLEW_OES_depth_texture' contains a runtime value, translated to function
pub inline fn GLEW_OES_depth_texture() @TypeOf(GLEW_GET_VAR(__GLEW_OES_depth_texture)) {
    return GLEW_GET_VAR(__GLEW_OES_depth_texture);
}
pub const GL_OES_depth_texture_cube_map = @as(c_int, 1);
pub const GL_DEPTH_STENCIL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hex);
pub const GL_DEPTH24_STENCIL8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F0, .hex);
// /usr/include/GL/glew.h:18837:9: warning: macro 'GLEW_OES_depth_texture_cube_map' contains a runtime value, translated to function
pub inline fn GLEW_OES_depth_texture_cube_map() @TypeOf(GLEW_GET_VAR(__GLEW_OES_depth_texture_cube_map)) {
    return GLEW_GET_VAR(__GLEW_OES_depth_texture_cube_map);
}
pub const GL_OES_draw_buffers_indexed = @as(c_int, 1);
// /usr/include/GL/glew.h:18855:9: warning: macro 'glBlendEquationSeparateiOES' contains a runtime value, translated to function
pub inline fn glBlendEquationSeparateiOES() @TypeOf(GLEW_GET_FUN(__glewBlendEquationSeparateiOES)) {
    return GLEW_GET_FUN(__glewBlendEquationSeparateiOES);
}
// /usr/include/GL/glew.h:18856:9: warning: macro 'glBlendEquationiOES' contains a runtime value, translated to function
pub inline fn glBlendEquationiOES() @TypeOf(GLEW_GET_FUN(__glewBlendEquationiOES)) {
    return GLEW_GET_FUN(__glewBlendEquationiOES);
}
// /usr/include/GL/glew.h:18857:9: warning: macro 'glBlendFuncSeparateiOES' contains a runtime value, translated to function
pub inline fn glBlendFuncSeparateiOES() @TypeOf(GLEW_GET_FUN(__glewBlendFuncSeparateiOES)) {
    return GLEW_GET_FUN(__glewBlendFuncSeparateiOES);
}
// /usr/include/GL/glew.h:18858:9: warning: macro 'glBlendFunciOES' contains a runtime value, translated to function
pub inline fn glBlendFunciOES() @TypeOf(GLEW_GET_FUN(__glewBlendFunciOES)) {
    return GLEW_GET_FUN(__glewBlendFunciOES);
}
// /usr/include/GL/glew.h:18859:9: warning: macro 'glColorMaskiOES' contains a runtime value, translated to function
pub inline fn glColorMaskiOES() @TypeOf(GLEW_GET_FUN(__glewColorMaskiOES)) {
    return GLEW_GET_FUN(__glewColorMaskiOES);
}
// /usr/include/GL/glew.h:18860:9: warning: macro 'glDisableiOES' contains a runtime value, translated to function
pub inline fn glDisableiOES() @TypeOf(GLEW_GET_FUN(__glewDisableiOES)) {
    return GLEW_GET_FUN(__glewDisableiOES);
}
// /usr/include/GL/glew.h:18861:9: warning: macro 'glEnableiOES' contains a runtime value, translated to function
pub inline fn glEnableiOES() @TypeOf(GLEW_GET_FUN(__glewEnableiOES)) {
    return GLEW_GET_FUN(__glewEnableiOES);
}
// /usr/include/GL/glew.h:18862:9: warning: macro 'glIsEnablediOES' contains a runtime value, translated to function
pub inline fn glIsEnablediOES() @TypeOf(GLEW_GET_FUN(__glewIsEnablediOES)) {
    return GLEW_GET_FUN(__glewIsEnablediOES);
}
// /usr/include/GL/glew.h:18864:9: warning: macro 'GLEW_OES_draw_buffers_indexed' contains a runtime value, translated to function
pub inline fn GLEW_OES_draw_buffers_indexed() @TypeOf(GLEW_GET_VAR(__GLEW_OES_draw_buffers_indexed)) {
    return GLEW_GET_VAR(__GLEW_OES_draw_buffers_indexed);
}
pub const GL_OES_draw_texture = @as(c_int, 1);
pub const GL_TEXTURE_CROP_RECT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9D, .hex);
// /usr/include/GL/glew.h:18875:9: warning: macro 'GLEW_OES_draw_texture' contains a runtime value, translated to function
pub inline fn GLEW_OES_draw_texture() @TypeOf(GLEW_GET_VAR(__GLEW_OES_draw_texture)) {
    return GLEW_GET_VAR(__GLEW_OES_draw_texture);
}
pub const GL_OES_element_index_uint = @as(c_int, 1);
// /usr/include/GL/glew.h:18886:9: warning: macro 'GLEW_OES_element_index_uint' contains a runtime value, translated to function
pub inline fn GLEW_OES_element_index_uint() @TypeOf(GLEW_GET_VAR(__GLEW_OES_element_index_uint)) {
    return GLEW_GET_VAR(__GLEW_OES_element_index_uint);
}
pub const GL_OES_extended_matrix_palette = @as(c_int, 1);
// /usr/include/GL/glew.h:18895:9: warning: macro 'GLEW_OES_extended_matrix_palette' contains a runtime value, translated to function
pub inline fn GLEW_OES_extended_matrix_palette() @TypeOf(GLEW_GET_VAR(__GLEW_OES_extended_matrix_palette)) {
    return GLEW_GET_VAR(__GLEW_OES_extended_matrix_palette);
}
pub const GL_OES_fbo_render_mipmap = @as(c_int, 1);
// /usr/include/GL/glew.h:18904:9: warning: macro 'GLEW_OES_fbo_render_mipmap' contains a runtime value, translated to function
pub inline fn GLEW_OES_fbo_render_mipmap() @TypeOf(GLEW_GET_VAR(__GLEW_OES_fbo_render_mipmap)) {
    return GLEW_GET_VAR(__GLEW_OES_fbo_render_mipmap);
}
pub const GL_OES_fragment_precision_high = @as(c_int, 1);
// /usr/include/GL/glew.h:18913:9: warning: macro 'GLEW_OES_fragment_precision_high' contains a runtime value, translated to function
pub inline fn GLEW_OES_fragment_precision_high() @TypeOf(GLEW_GET_VAR(__GLEW_OES_fragment_precision_high)) {
    return GLEW_GET_VAR(__GLEW_OES_fragment_precision_high);
}
pub const GL_OES_framebuffer_object = @as(c_int, 1);
pub const GL_NONE_OES = @as(c_int, 0);
pub const GL_INVALID_FRAMEBUFFER_OPERATION_OES = @as(c_int, 0x0506);
pub const GL_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hex);
pub const GL_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hex);
pub const GL_DEPTH_COMPONENT16_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hex);
pub const GL_MAX_RENDERBUFFER_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E8, .hex);
pub const GL_FRAMEBUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_RENDERBUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD0, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD1, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD2, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD3, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hex);
pub const GL_FRAMEBUFFER_COMPLETE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD5, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD6, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD7, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD9, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDA, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDB, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDC, .hex);
pub const GL_FRAMEBUFFER_UNSUPPORTED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDD, .hex);
pub const GL_COLOR_ATTACHMENT0_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hex);
pub const GL_DEPTH_ATTACHMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D00, .hex);
pub const GL_STENCIL_ATTACHMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D20, .hex);
pub const GL_FRAMEBUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D40, .hex);
pub const GL_RENDERBUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D41, .hex);
pub const GL_RENDERBUFFER_WIDTH_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D42, .hex);
pub const GL_RENDERBUFFER_HEIGHT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D43, .hex);
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D44, .hex);
pub const GL_STENCIL_INDEX1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D46, .hex);
pub const GL_STENCIL_INDEX4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D47, .hex);
pub const GL_STENCIL_INDEX8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hex);
pub const GL_RENDERBUFFER_RED_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D50, .hex);
pub const GL_RENDERBUFFER_GREEN_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D51, .hex);
pub const GL_RENDERBUFFER_BLUE_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D52, .hex);
pub const GL_RENDERBUFFER_ALPHA_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D53, .hex);
pub const GL_RENDERBUFFER_DEPTH_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D54, .hex);
pub const GL_RENDERBUFFER_STENCIL_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D55, .hex);
pub const GL_RGB565_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D62, .hex);
// /usr/include/GL/glew.h:18978:9: warning: macro 'glBindFramebufferOES' contains a runtime value, translated to function
pub inline fn glBindFramebufferOES() @TypeOf(GLEW_GET_FUN(__glewBindFramebufferOES)) {
    return GLEW_GET_FUN(__glewBindFramebufferOES);
}
// /usr/include/GL/glew.h:18979:9: warning: macro 'glBindRenderbufferOES' contains a runtime value, translated to function
pub inline fn glBindRenderbufferOES() @TypeOf(GLEW_GET_FUN(__glewBindRenderbufferOES)) {
    return GLEW_GET_FUN(__glewBindRenderbufferOES);
}
// /usr/include/GL/glew.h:18980:9: warning: macro 'glCheckFramebufferStatusOES' contains a runtime value, translated to function
pub inline fn glCheckFramebufferStatusOES() @TypeOf(GLEW_GET_FUN(__glewCheckFramebufferStatusOES)) {
    return GLEW_GET_FUN(__glewCheckFramebufferStatusOES);
}
// /usr/include/GL/glew.h:18981:9: warning: macro 'glDeleteFramebuffersOES' contains a runtime value, translated to function
pub inline fn glDeleteFramebuffersOES() @TypeOf(GLEW_GET_FUN(__glewDeleteFramebuffersOES)) {
    return GLEW_GET_FUN(__glewDeleteFramebuffersOES);
}
// /usr/include/GL/glew.h:18982:9: warning: macro 'glDeleteRenderbuffersOES' contains a runtime value, translated to function
pub inline fn glDeleteRenderbuffersOES() @TypeOf(GLEW_GET_FUN(__glewDeleteRenderbuffersOES)) {
    return GLEW_GET_FUN(__glewDeleteRenderbuffersOES);
}
// /usr/include/GL/glew.h:18983:9: warning: macro 'glFramebufferRenderbufferOES' contains a runtime value, translated to function
pub inline fn glFramebufferRenderbufferOES() @TypeOf(GLEW_GET_FUN(__glewFramebufferRenderbufferOES)) {
    return GLEW_GET_FUN(__glewFramebufferRenderbufferOES);
}
// /usr/include/GL/glew.h:18984:9: warning: macro 'glFramebufferTexture2DOES' contains a runtime value, translated to function
pub inline fn glFramebufferTexture2DOES() @TypeOf(GLEW_GET_FUN(__glewFramebufferTexture2DOES)) {
    return GLEW_GET_FUN(__glewFramebufferTexture2DOES);
}
// /usr/include/GL/glew.h:18985:9: warning: macro 'glGenFramebuffersOES' contains a runtime value, translated to function
pub inline fn glGenFramebuffersOES() @TypeOf(GLEW_GET_FUN(__glewGenFramebuffersOES)) {
    return GLEW_GET_FUN(__glewGenFramebuffersOES);
}
// /usr/include/GL/glew.h:18986:9: warning: macro 'glGenRenderbuffersOES' contains a runtime value, translated to function
pub inline fn glGenRenderbuffersOES() @TypeOf(GLEW_GET_FUN(__glewGenRenderbuffersOES)) {
    return GLEW_GET_FUN(__glewGenRenderbuffersOES);
}
// /usr/include/GL/glew.h:18987:9: warning: macro 'glGenerateMipmapOES' contains a runtime value, translated to function
pub inline fn glGenerateMipmapOES() @TypeOf(GLEW_GET_FUN(__glewGenerateMipmapOES)) {
    return GLEW_GET_FUN(__glewGenerateMipmapOES);
}
// /usr/include/GL/glew.h:18988:9: warning: macro 'glGetFramebufferAttachmentParameterivOES' contains a runtime value, translated to function
pub inline fn glGetFramebufferAttachmentParameterivOES() @TypeOf(GLEW_GET_FUN(__glewGetFramebufferAttachmentParameterivOES)) {
    return GLEW_GET_FUN(__glewGetFramebufferAttachmentParameterivOES);
}
// /usr/include/GL/glew.h:18989:9: warning: macro 'glGetRenderbufferParameterivOES' contains a runtime value, translated to function
pub inline fn glGetRenderbufferParameterivOES() @TypeOf(GLEW_GET_FUN(__glewGetRenderbufferParameterivOES)) {
    return GLEW_GET_FUN(__glewGetRenderbufferParameterivOES);
}
// /usr/include/GL/glew.h:18990:9: warning: macro 'glIsFramebufferOES' contains a runtime value, translated to function
pub inline fn glIsFramebufferOES() @TypeOf(GLEW_GET_FUN(__glewIsFramebufferOES)) {
    return GLEW_GET_FUN(__glewIsFramebufferOES);
}
// /usr/include/GL/glew.h:18991:9: warning: macro 'glIsRenderbufferOES' contains a runtime value, translated to function
pub inline fn glIsRenderbufferOES() @TypeOf(GLEW_GET_FUN(__glewIsRenderbufferOES)) {
    return GLEW_GET_FUN(__glewIsRenderbufferOES);
}
// /usr/include/GL/glew.h:18992:9: warning: macro 'glRenderbufferStorageOES' contains a runtime value, translated to function
pub inline fn glRenderbufferStorageOES() @TypeOf(GLEW_GET_FUN(__glewRenderbufferStorageOES)) {
    return GLEW_GET_FUN(__glewRenderbufferStorageOES);
}
// /usr/include/GL/glew.h:18994:9: warning: macro 'GLEW_OES_framebuffer_object' contains a runtime value, translated to function
pub inline fn GLEW_OES_framebuffer_object() @TypeOf(GLEW_GET_VAR(__GLEW_OES_framebuffer_object)) {
    return GLEW_GET_VAR(__GLEW_OES_framebuffer_object);
}
pub const GL_OES_geometry_point_size = @as(c_int, 1);
pub const GL_GEOMETRY_SHADER_BIT_OES = @as(c_int, 0x00000004);
pub const GL_LINES_ADJACENCY_OES = @as(c_int, 0xA);
pub const GL_LINE_STRIP_ADJACENCY_OES = @as(c_int, 0xB);
pub const GL_TRIANGLES_ADJACENCY_OES = @as(c_int, 0xC);
pub const GL_TRIANGLE_STRIP_ADJACENCY_OES = @as(c_int, 0xD);
pub const GL_LAYER_PROVOKING_VERTEX_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825E, .hex);
pub const GL_UNDEFINED_VERTEX_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8260, .hex);
pub const GL_GEOMETRY_SHADER_INVOCATIONS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887F, .hex);
pub const GL_GEOMETRY_LINKED_VERTICES_OUT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8916, .hex);
pub const GL_GEOMETRY_LINKED_INPUT_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8917, .hex);
pub const GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8918, .hex);
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2C, .hex);
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A32, .hex);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hex);
pub const GL_PRIMITIVES_GENERATED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hex);
pub const GL_GEOMETRY_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hex);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hex);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hex);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hex);
pub const GL_FIRST_VERTEX_CONVENTION_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hex);
pub const GL_LAST_VERTEX_CONVENTION_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hex);
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hex);
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CD, .hex);
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D7, .hex);
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9123, .hex);
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9124, .hex);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CF, .hex);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D5, .hex);
pub const GL_REFERENCED_BY_GEOMETRY_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9309, .hex);
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9312, .hex);
pub const GL_MAX_FRAMEBUFFER_LAYERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9317, .hex);
// /usr/include/GL/glew.h:19037:9: warning: macro 'GLEW_OES_geometry_point_size' contains a runtime value, translated to function
pub inline fn GLEW_OES_geometry_point_size() @TypeOf(GLEW_GET_VAR(__GLEW_OES_geometry_point_size)) {
    return GLEW_GET_VAR(__GLEW_OES_geometry_point_size);
}
pub const GL_OES_geometry_shader = @as(c_int, 1);
// /usr/include/GL/glew.h:19080:9: warning: macro 'GLEW_OES_geometry_shader' contains a runtime value, translated to function
pub inline fn GLEW_OES_geometry_shader() @TypeOf(GLEW_GET_VAR(__GLEW_OES_geometry_shader)) {
    return GLEW_GET_VAR(__GLEW_OES_geometry_shader);
}
pub const GL_OES_get_program_binary = @as(c_int, 1);
pub const GL_PROGRAM_BINARY_LENGTH_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8741, .hex);
pub const GL_NUM_PROGRAM_BINARY_FORMATS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FE, .hex);
pub const GL_PROGRAM_BINARY_FORMATS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FF, .hex);
// /usr/include/GL/glew.h:19096:9: warning: macro 'glGetProgramBinaryOES' contains a runtime value, translated to function
pub inline fn glGetProgramBinaryOES() @TypeOf(GLEW_GET_FUN(__glewGetProgramBinaryOES)) {
    return GLEW_GET_FUN(__glewGetProgramBinaryOES);
}
// /usr/include/GL/glew.h:19097:9: warning: macro 'glProgramBinaryOES' contains a runtime value, translated to function
pub inline fn glProgramBinaryOES() @TypeOf(GLEW_GET_FUN(__glewProgramBinaryOES)) {
    return GLEW_GET_FUN(__glewProgramBinaryOES);
}
// /usr/include/GL/glew.h:19099:9: warning: macro 'GLEW_OES_get_program_binary' contains a runtime value, translated to function
pub inline fn GLEW_OES_get_program_binary() @TypeOf(GLEW_GET_VAR(__GLEW_OES_get_program_binary)) {
    return GLEW_GET_VAR(__GLEW_OES_get_program_binary);
}
pub const GL_OES_gpu_shader5 = @as(c_int, 1);
// /usr/include/GL/glew.h:19108:9: warning: macro 'GLEW_OES_gpu_shader5' contains a runtime value, translated to function
pub inline fn GLEW_OES_gpu_shader5() @TypeOf(GLEW_GET_VAR(__GLEW_OES_gpu_shader5)) {
    return GLEW_GET_VAR(__GLEW_OES_gpu_shader5);
}
pub const GL_OES_mapbuffer = @as(c_int, 1);
pub const GL_WRITE_ONLY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hex);
pub const GL_BUFFER_ACCESS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hex);
pub const GL_BUFFER_MAPPED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hex);
pub const GL_BUFFER_MAP_POINTER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hex);
// /usr/include/GL/glew.h:19126:9: warning: macro 'glGetBufferPointervOES' contains a runtime value, translated to function
pub inline fn glGetBufferPointervOES() @TypeOf(GLEW_GET_FUN(__glewGetBufferPointervOES)) {
    return GLEW_GET_FUN(__glewGetBufferPointervOES);
}
// /usr/include/GL/glew.h:19127:9: warning: macro 'glMapBufferOES' contains a runtime value, translated to function
pub inline fn glMapBufferOES() @TypeOf(GLEW_GET_FUN(__glewMapBufferOES)) {
    return GLEW_GET_FUN(__glewMapBufferOES);
}
// /usr/include/GL/glew.h:19128:9: warning: macro 'glUnmapBufferOES' contains a runtime value, translated to function
pub inline fn glUnmapBufferOES() @TypeOf(GLEW_GET_FUN(__glewUnmapBufferOES)) {
    return GLEW_GET_FUN(__glewUnmapBufferOES);
}
// /usr/include/GL/glew.h:19130:9: warning: macro 'GLEW_OES_mapbuffer' contains a runtime value, translated to function
pub inline fn GLEW_OES_mapbuffer() @TypeOf(GLEW_GET_VAR(__GLEW_OES_mapbuffer)) {
    return GLEW_GET_VAR(__GLEW_OES_mapbuffer);
}
pub const GL_OES_matrix_get = @as(c_int, 1);
pub const GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898d, .hex);
pub const GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898e, .hex);
pub const GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898f, .hex);
// /usr/include/GL/glew.h:19143:9: warning: macro 'GLEW_OES_matrix_get' contains a runtime value, translated to function
pub inline fn GLEW_OES_matrix_get() @TypeOf(GLEW_GET_VAR(__GLEW_OES_matrix_get)) {
    return GLEW_GET_VAR(__GLEW_OES_matrix_get);
}
pub const GL_OES_matrix_palette = @as(c_int, 1);
pub const GL_MAX_VERTEX_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A4, .hex);
pub const GL_WEIGHT_ARRAY_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A9, .hex);
pub const GL_WEIGHT_ARRAY_STRIDE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AA, .hex);
pub const GL_WEIGHT_ARRAY_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AB, .hex);
pub const GL_WEIGHT_ARRAY_POINTER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AC, .hex);
pub const GL_WEIGHT_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AD, .hex);
pub const GL_MATRIX_PALETTE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8840, .hex);
pub const GL_MAX_PALETTE_MATRICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8842, .hex);
pub const GL_CURRENT_PALETTE_MATRIX_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8843, .hex);
pub const GL_MATRIX_INDEX_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8844, .hex);
pub const GL_MATRIX_INDEX_ARRAY_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8846, .hex);
pub const GL_MATRIX_INDEX_ARRAY_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8847, .hex);
pub const GL_MATRIX_INDEX_ARRAY_STRIDE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8848, .hex);
pub const GL_MATRIX_INDEX_ARRAY_POINTER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8849, .hex);
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889E, .hex);
pub const GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9E, .hex);
// /usr/include/GL/glew.h:19173:9: warning: macro 'glCurrentPaletteMatrixOES' contains a runtime value, translated to function
pub inline fn glCurrentPaletteMatrixOES() @TypeOf(GLEW_GET_FUN(__glewCurrentPaletteMatrixOES)) {
    return GLEW_GET_FUN(__glewCurrentPaletteMatrixOES);
}
// /usr/include/GL/glew.h:19174:9: warning: macro 'glMatrixIndexPointerOES' contains a runtime value, translated to function
pub inline fn glMatrixIndexPointerOES() @TypeOf(GLEW_GET_FUN(__glewMatrixIndexPointerOES)) {
    return GLEW_GET_FUN(__glewMatrixIndexPointerOES);
}
// /usr/include/GL/glew.h:19175:9: warning: macro 'glWeightPointerOES' contains a runtime value, translated to function
pub inline fn glWeightPointerOES() @TypeOf(GLEW_GET_FUN(__glewWeightPointerOES)) {
    return GLEW_GET_FUN(__glewWeightPointerOES);
}
// /usr/include/GL/glew.h:19177:9: warning: macro 'GLEW_OES_matrix_palette' contains a runtime value, translated to function
pub inline fn GLEW_OES_matrix_palette() @TypeOf(GLEW_GET_VAR(__GLEW_OES_matrix_palette)) {
    return GLEW_GET_VAR(__GLEW_OES_matrix_palette);
}
pub const GL_OES_packed_depth_stencil = @as(c_int, 1);
pub const GL_UNSIGNED_INT_24_8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hex);
// /usr/include/GL/glew.h:19190:9: warning: macro 'GLEW_OES_packed_depth_stencil' contains a runtime value, translated to function
pub inline fn GLEW_OES_packed_depth_stencil() @TypeOf(GLEW_GET_VAR(__GLEW_OES_packed_depth_stencil)) {
    return GLEW_GET_VAR(__GLEW_OES_packed_depth_stencil);
}
pub const GL_OES_point_size_array = @as(c_int, 1);
pub const GL_POINT_SIZE_ARRAY_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898A, .hex);
pub const GL_POINT_SIZE_ARRAY_STRIDE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898B, .hex);
pub const GL_POINT_SIZE_ARRAY_POINTER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898C, .hex);
pub const GL_POINT_SIZE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9C, .hex);
pub const GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9F, .hex);
// /usr/include/GL/glew.h:19205:9: warning: macro 'GLEW_OES_point_size_array' contains a runtime value, translated to function
pub inline fn GLEW_OES_point_size_array() @TypeOf(GLEW_GET_VAR(__GLEW_OES_point_size_array)) {
    return GLEW_GET_VAR(__GLEW_OES_point_size_array);
}
pub const GL_OES_point_sprite = @as(c_int, 1);
pub const GL_POINT_SPRITE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hex);
pub const GL_COORD_REPLACE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hex);
// /usr/include/GL/glew.h:19217:9: warning: macro 'GLEW_OES_point_sprite' contains a runtime value, translated to function
pub inline fn GLEW_OES_point_sprite() @TypeOf(GLEW_GET_VAR(__GLEW_OES_point_sprite)) {
    return GLEW_GET_VAR(__GLEW_OES_point_sprite);
}
pub const GL_OES_read_format = @as(c_int, 1);
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9A, .hex);
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9B, .hex);
// /usr/include/GL/glew.h:19229:9: warning: macro 'GLEW_OES_read_format' contains a runtime value, translated to function
pub inline fn GLEW_OES_read_format() @TypeOf(GLEW_GET_VAR(__GLEW_OES_read_format)) {
    return GLEW_GET_VAR(__GLEW_OES_read_format);
}
pub const GL_OES_required_internalformat = @as(c_int, 1);
pub const GL_ALPHA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hex);
pub const GL_LUMINANCE8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hex);
pub const GL_LUMINANCE4_ALPHA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8043, .hex);
pub const GL_LUMINANCE8_ALPHA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hex);
pub const GL_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hex);
// /usr/include/GL/glew.h:19254:9: warning: macro 'GLEW_OES_required_internalformat' contains a runtime value, translated to function
pub inline fn GLEW_OES_required_internalformat() @TypeOf(GLEW_GET_VAR(__GLEW_OES_required_internalformat)) {
    return GLEW_GET_VAR(__GLEW_OES_required_internalformat);
}
pub const GL_OES_rgb8_rgba8 = @as(c_int, 1);
// /usr/include/GL/glew.h:19266:9: warning: macro 'GLEW_OES_rgb8_rgba8' contains a runtime value, translated to function
pub inline fn GLEW_OES_rgb8_rgba8() @TypeOf(GLEW_GET_VAR(__GLEW_OES_rgb8_rgba8)) {
    return GLEW_GET_VAR(__GLEW_OES_rgb8_rgba8);
}
pub const GL_OES_sample_shading = @as(c_int, 1);
pub const GL_SAMPLE_SHADING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C36, .hex);
pub const GL_MIN_SAMPLE_SHADING_VALUE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C37, .hex);
// /usr/include/GL/glew.h:19280:9: warning: macro 'glMinSampleShadingOES' contains a runtime value, translated to function
pub inline fn glMinSampleShadingOES() @TypeOf(GLEW_GET_FUN(__glewMinSampleShadingOES)) {
    return GLEW_GET_FUN(__glewMinSampleShadingOES);
}
// /usr/include/GL/glew.h:19282:9: warning: macro 'GLEW_OES_sample_shading' contains a runtime value, translated to function
pub inline fn GLEW_OES_sample_shading() @TypeOf(GLEW_GET_VAR(__GLEW_OES_sample_shading)) {
    return GLEW_GET_VAR(__GLEW_OES_sample_shading);
}
pub const GL_OES_sample_variables = @as(c_int, 1);
// /usr/include/GL/glew.h:19291:9: warning: macro 'GLEW_OES_sample_variables' contains a runtime value, translated to function
pub inline fn GLEW_OES_sample_variables() @TypeOf(GLEW_GET_VAR(__GLEW_OES_sample_variables)) {
    return GLEW_GET_VAR(__GLEW_OES_sample_variables);
}
pub const GL_OES_shader_image_atomic = @as(c_int, 1);
// /usr/include/GL/glew.h:19300:9: warning: macro 'GLEW_OES_shader_image_atomic' contains a runtime value, translated to function
pub inline fn GLEW_OES_shader_image_atomic() @TypeOf(GLEW_GET_VAR(__GLEW_OES_shader_image_atomic)) {
    return GLEW_GET_VAR(__GLEW_OES_shader_image_atomic);
}
pub const GL_OES_shader_io_blocks = @as(c_int, 1);
// /usr/include/GL/glew.h:19309:9: warning: macro 'GLEW_OES_shader_io_blocks' contains a runtime value, translated to function
pub inline fn GLEW_OES_shader_io_blocks() @TypeOf(GLEW_GET_VAR(__GLEW_OES_shader_io_blocks)) {
    return GLEW_GET_VAR(__GLEW_OES_shader_io_blocks);
}
pub const GL_OES_shader_multisample_interpolation = @as(c_int, 1);
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5B, .hex);
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5C, .hex);
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5D, .hex);
// /usr/include/GL/glew.h:19322:9: warning: macro 'GLEW_OES_shader_multisample_interpolation' contains a runtime value, translated to function
pub inline fn GLEW_OES_shader_multisample_interpolation() @TypeOf(GLEW_GET_VAR(__GLEW_OES_shader_multisample_interpolation)) {
    return GLEW_GET_VAR(__GLEW_OES_shader_multisample_interpolation);
}
pub const GL_OES_single_precision = @as(c_int, 1);
// /usr/include/GL/glew.h:19338:9: warning: macro 'glClearDepthfOES' contains a runtime value, translated to function
pub inline fn glClearDepthfOES() @TypeOf(GLEW_GET_FUN(__glewClearDepthfOES)) {
    return GLEW_GET_FUN(__glewClearDepthfOES);
}
// /usr/include/GL/glew.h:19339:9: warning: macro 'glClipPlanefOES' contains a runtime value, translated to function
pub inline fn glClipPlanefOES() @TypeOf(GLEW_GET_FUN(__glewClipPlanefOES)) {
    return GLEW_GET_FUN(__glewClipPlanefOES);
}
// /usr/include/GL/glew.h:19340:9: warning: macro 'glDepthRangefOES' contains a runtime value, translated to function
pub inline fn glDepthRangefOES() @TypeOf(GLEW_GET_FUN(__glewDepthRangefOES)) {
    return GLEW_GET_FUN(__glewDepthRangefOES);
}
// /usr/include/GL/glew.h:19341:9: warning: macro 'glFrustumfOES' contains a runtime value, translated to function
pub inline fn glFrustumfOES() @TypeOf(GLEW_GET_FUN(__glewFrustumfOES)) {
    return GLEW_GET_FUN(__glewFrustumfOES);
}
// /usr/include/GL/glew.h:19342:9: warning: macro 'glGetClipPlanefOES' contains a runtime value, translated to function
pub inline fn glGetClipPlanefOES() @TypeOf(GLEW_GET_FUN(__glewGetClipPlanefOES)) {
    return GLEW_GET_FUN(__glewGetClipPlanefOES);
}
// /usr/include/GL/glew.h:19343:9: warning: macro 'glOrthofOES' contains a runtime value, translated to function
pub inline fn glOrthofOES() @TypeOf(GLEW_GET_FUN(__glewOrthofOES)) {
    return GLEW_GET_FUN(__glewOrthofOES);
}
// /usr/include/GL/glew.h:19345:9: warning: macro 'GLEW_OES_single_precision' contains a runtime value, translated to function
pub inline fn GLEW_OES_single_precision() @TypeOf(GLEW_GET_VAR(__GLEW_OES_single_precision)) {
    return GLEW_GET_VAR(__GLEW_OES_single_precision);
}
pub const GL_OES_standard_derivatives = @as(c_int, 1);
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hex);
// /usr/include/GL/glew.h:19356:9: warning: macro 'GLEW_OES_standard_derivatives' contains a runtime value, translated to function
pub inline fn GLEW_OES_standard_derivatives() @TypeOf(GLEW_GET_VAR(__GLEW_OES_standard_derivatives)) {
    return GLEW_GET_VAR(__GLEW_OES_standard_derivatives);
}
pub const GL_OES_stencil1 = @as(c_int, 1);
// /usr/include/GL/glew.h:19367:9: warning: macro 'GLEW_OES_stencil1' contains a runtime value, translated to function
pub inline fn GLEW_OES_stencil1() @TypeOf(GLEW_GET_VAR(__GLEW_OES_stencil1)) {
    return GLEW_GET_VAR(__GLEW_OES_stencil1);
}
pub const GL_OES_stencil4 = @as(c_int, 1);
// /usr/include/GL/glew.h:19378:9: warning: macro 'GLEW_OES_stencil4' contains a runtime value, translated to function
pub inline fn GLEW_OES_stencil4() @TypeOf(GLEW_GET_VAR(__GLEW_OES_stencil4)) {
    return GLEW_GET_VAR(__GLEW_OES_stencil4);
}
pub const GL_OES_stencil8 = @as(c_int, 1);
// /usr/include/GL/glew.h:19389:9: warning: macro 'GLEW_OES_stencil8' contains a runtime value, translated to function
pub inline fn GLEW_OES_stencil8() @TypeOf(GLEW_GET_VAR(__GLEW_OES_stencil8)) {
    return GLEW_GET_VAR(__GLEW_OES_stencil8);
}
pub const GL_OES_surfaceless_context = @as(c_int, 1);
pub const GL_FRAMEBUFFER_UNDEFINED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8219, .hex);
// /usr/include/GL/glew.h:19400:9: warning: macro 'GLEW_OES_surfaceless_context' contains a runtime value, translated to function
pub inline fn GLEW_OES_surfaceless_context() @TypeOf(GLEW_GET_VAR(__GLEW_OES_surfaceless_context)) {
    return GLEW_GET_VAR(__GLEW_OES_surfaceless_context);
}
pub const GL_OES_tessellation_point_size = @as(c_int, 1);
pub const GL_QUADS_OES = @as(c_int, 0x0007);
pub const GL_TESS_CONTROL_SHADER_BIT_OES = @as(c_int, 0x00000008);
pub const GL_PATCHES_OES = @as(c_int, 0xE);
pub const GL_TESS_EVALUATION_SHADER_BIT_OES = @as(c_int, 0x00000010);
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8221, .hex);
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886C, .hex);
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886D, .hex);
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1E, .hex);
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1F, .hex);
pub const GL_PATCH_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E72, .hex);
pub const GL_TESS_CONTROL_OUTPUT_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E75, .hex);
pub const GL_TESS_GEN_MODE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E76, .hex);
pub const GL_TESS_GEN_SPACING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E77, .hex);
pub const GL_TESS_GEN_VERTEX_ORDER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E78, .hex);
pub const GL_TESS_GEN_POINT_MODE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E79, .hex);
pub const GL_ISOLINES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7A, .hex);
pub const GL_FRACTIONAL_ODD_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7B, .hex);
pub const GL_FRACTIONAL_EVEN_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7C, .hex);
pub const GL_MAX_PATCH_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7D, .hex);
pub const GL_MAX_TESS_GEN_LEVEL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7E, .hex);
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7F, .hex);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E80, .hex);
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E81, .hex);
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E82, .hex);
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E83, .hex);
pub const GL_MAX_TESS_PATCH_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E84, .hex);
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E85, .hex);
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E86, .hex);
pub const GL_TESS_EVALUATION_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E87, .hex);
pub const GL_TESS_CONTROL_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E88, .hex);
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E89, .hex);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8A, .hex);
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CB, .hex);
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CC, .hex);
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D8, .hex);
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D9, .hex);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CD, .hex);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CE, .hex);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D3, .hex);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D4, .hex);
pub const GL_IS_PER_PATCH_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E7, .hex);
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9307, .hex);
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9308, .hex);
// /usr/include/GL/glew.h:19453:9: warning: macro 'GLEW_OES_tessellation_point_size' contains a runtime value, translated to function
pub inline fn GLEW_OES_tessellation_point_size() @TypeOf(GLEW_GET_VAR(__GLEW_OES_tessellation_point_size)) {
    return GLEW_GET_VAR(__GLEW_OES_tessellation_point_size);
}
pub const GL_OES_tessellation_shader = @as(c_int, 1);
// /usr/include/GL/glew.h:19506:9: warning: macro 'GLEW_OES_tessellation_shader' contains a runtime value, translated to function
pub inline fn GLEW_OES_tessellation_shader() @TypeOf(GLEW_GET_VAR(__GLEW_OES_tessellation_shader)) {
    return GLEW_GET_VAR(__GLEW_OES_tessellation_shader);
}
pub const GL_OES_texture_3D = @as(c_int, 1);
pub const GL_TEXTURE_BINDING_3D_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hex);
pub const GL_TEXTURE_3D_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hex);
pub const GL_TEXTURE_WRAP_R_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hex);
pub const GL_MAX_3D_TEXTURE_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hex);
// /usr/include/GL/glew.h:19527:9: warning: macro 'glCompressedTexImage3DOES' contains a runtime value, translated to function
pub inline fn glCompressedTexImage3DOES() @TypeOf(GLEW_GET_FUN(__glewCompressedTexImage3DOES)) {
    return GLEW_GET_FUN(__glewCompressedTexImage3DOES);
}
// /usr/include/GL/glew.h:19528:9: warning: macro 'glCompressedTexSubImage3DOES' contains a runtime value, translated to function
pub inline fn glCompressedTexSubImage3DOES() @TypeOf(GLEW_GET_FUN(__glewCompressedTexSubImage3DOES)) {
    return GLEW_GET_FUN(__glewCompressedTexSubImage3DOES);
}
// /usr/include/GL/glew.h:19529:9: warning: macro 'glCopyTexSubImage3DOES' contains a runtime value, translated to function
pub inline fn glCopyTexSubImage3DOES() @TypeOf(GLEW_GET_FUN(__glewCopyTexSubImage3DOES)) {
    return GLEW_GET_FUN(__glewCopyTexSubImage3DOES);
}
// /usr/include/GL/glew.h:19530:9: warning: macro 'glFramebufferTexture3DOES' contains a runtime value, translated to function
pub inline fn glFramebufferTexture3DOES() @TypeOf(GLEW_GET_FUN(__glewFramebufferTexture3DOES)) {
    return GLEW_GET_FUN(__glewFramebufferTexture3DOES);
}
// /usr/include/GL/glew.h:19531:9: warning: macro 'glTexImage3DOES' contains a runtime value, translated to function
pub inline fn glTexImage3DOES() @TypeOf(GLEW_GET_FUN(__glewTexImage3DOES)) {
    return GLEW_GET_FUN(__glewTexImage3DOES);
}
// /usr/include/GL/glew.h:19532:9: warning: macro 'glTexSubImage3DOES' contains a runtime value, translated to function
pub inline fn glTexSubImage3DOES() @TypeOf(GLEW_GET_FUN(__glewTexSubImage3DOES)) {
    return GLEW_GET_FUN(__glewTexSubImage3DOES);
}
// /usr/include/GL/glew.h:19534:9: warning: macro 'GLEW_OES_texture_3D' contains a runtime value, translated to function
pub inline fn GLEW_OES_texture_3D() @TypeOf(GLEW_GET_VAR(__GLEW_OES_texture_3D)) {
    return GLEW_GET_VAR(__GLEW_OES_texture_3D);
}
pub const GL_OES_texture_border_clamp = @as(c_int, 1);
pub const GL_TEXTURE_BORDER_COLOR_OES = @as(c_int, 0x1004);
pub const GL_CLAMP_TO_BORDER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hex);
// /usr/include/GL/glew.h:19555:9: warning: macro 'glGetSamplerParameterIivOES' contains a runtime value, translated to function
pub inline fn glGetSamplerParameterIivOES() @TypeOf(GLEW_GET_FUN(__glewGetSamplerParameterIivOES)) {
    return GLEW_GET_FUN(__glewGetSamplerParameterIivOES);
}
// /usr/include/GL/glew.h:19556:9: warning: macro 'glGetSamplerParameterIuivOES' contains a runtime value, translated to function
pub inline fn glGetSamplerParameterIuivOES() @TypeOf(GLEW_GET_FUN(__glewGetSamplerParameterIuivOES)) {
    return GLEW_GET_FUN(__glewGetSamplerParameterIuivOES);
}
// /usr/include/GL/glew.h:19557:9: warning: macro 'glGetTexParameterIivOES' contains a runtime value, translated to function
pub inline fn glGetTexParameterIivOES() @TypeOf(GLEW_GET_FUN(__glewGetTexParameterIivOES)) {
    return GLEW_GET_FUN(__glewGetTexParameterIivOES);
}
// /usr/include/GL/glew.h:19558:9: warning: macro 'glGetTexParameterIuivOES' contains a runtime value, translated to function
pub inline fn glGetTexParameterIuivOES() @TypeOf(GLEW_GET_FUN(__glewGetTexParameterIuivOES)) {
    return GLEW_GET_FUN(__glewGetTexParameterIuivOES);
}
// /usr/include/GL/glew.h:19559:9: warning: macro 'glSamplerParameterIivOES' contains a runtime value, translated to function
pub inline fn glSamplerParameterIivOES() @TypeOf(GLEW_GET_FUN(__glewSamplerParameterIivOES)) {
    return GLEW_GET_FUN(__glewSamplerParameterIivOES);
}
// /usr/include/GL/glew.h:19560:9: warning: macro 'glSamplerParameterIuivOES' contains a runtime value, translated to function
pub inline fn glSamplerParameterIuivOES() @TypeOf(GLEW_GET_FUN(__glewSamplerParameterIuivOES)) {
    return GLEW_GET_FUN(__glewSamplerParameterIuivOES);
}
// /usr/include/GL/glew.h:19561:9: warning: macro 'glTexParameterIivOES' contains a runtime value, translated to function
pub inline fn glTexParameterIivOES() @TypeOf(GLEW_GET_FUN(__glewTexParameterIivOES)) {
    return GLEW_GET_FUN(__glewTexParameterIivOES);
}
// /usr/include/GL/glew.h:19562:9: warning: macro 'glTexParameterIuivOES' contains a runtime value, translated to function
pub inline fn glTexParameterIuivOES() @TypeOf(GLEW_GET_FUN(__glewTexParameterIuivOES)) {
    return GLEW_GET_FUN(__glewTexParameterIuivOES);
}
// /usr/include/GL/glew.h:19564:9: warning: macro 'GLEW_OES_texture_border_clamp' contains a runtime value, translated to function
pub inline fn GLEW_OES_texture_border_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_OES_texture_border_clamp)) {
    return GLEW_GET_VAR(__GLEW_OES_texture_border_clamp);
}
pub const GL_OES_texture_buffer = @as(c_int, 1);
pub const GL_TEXTURE_BUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hex);
pub const GL_TEXTURE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hex);
pub const GL_MAX_TEXTURE_BUFFER_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hex);
pub const GL_TEXTURE_BINDING_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hex);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hex);
pub const GL_SAMPLER_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hex);
pub const GL_INT_SAMPLER_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hex);
pub const GL_IMAGE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hex);
pub const GL_INT_IMAGE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hex);
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hex);
pub const GL_TEXTURE_BUFFER_OFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919D, .hex);
pub const GL_TEXTURE_BUFFER_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919E, .hex);
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919F, .hex);
// /usr/include/GL/glew.h:19591:9: warning: macro 'glTexBufferOES' contains a runtime value, translated to function
pub inline fn glTexBufferOES() @TypeOf(GLEW_GET_FUN(__glewTexBufferOES)) {
    return GLEW_GET_FUN(__glewTexBufferOES);
}
// /usr/include/GL/glew.h:19592:9: warning: macro 'glTexBufferRangeOES' contains a runtime value, translated to function
pub inline fn glTexBufferRangeOES() @TypeOf(GLEW_GET_FUN(__glewTexBufferRangeOES)) {
    return GLEW_GET_FUN(__glewTexBufferRangeOES);
}
// /usr/include/GL/glew.h:19594:9: warning: macro 'GLEW_OES_texture_buffer' contains a runtime value, translated to function
pub inline fn GLEW_OES_texture_buffer() @TypeOf(GLEW_GET_VAR(__GLEW_OES_texture_buffer)) {
    return GLEW_GET_VAR(__GLEW_OES_texture_buffer);
}
pub const GL_OES_texture_compression_astc = @as(c_int, 1);
// /usr/include/GL/glew.h:19652:9: warning: macro 'GLEW_OES_texture_compression_astc' contains a runtime value, translated to function
pub inline fn GLEW_OES_texture_compression_astc() @TypeOf(GLEW_GET_VAR(__GLEW_OES_texture_compression_astc)) {
    return GLEW_GET_VAR(__GLEW_OES_texture_compression_astc);
}
pub const GL_OES_texture_cube_map = @as(c_int, 1);
pub const GL_TEXTURE_GEN_MODE_OES = @as(c_int, 0x2500);
pub const GL_NORMAL_MAP_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hex);
pub const GL_REFLECTION_MAP_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hex);
pub const GL_TEXTURE_CUBE_MAP_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hex);
pub const GL_TEXTURE_BINDING_CUBE_MAP_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hex);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hex);
pub const GL_TEXTURE_GEN_STR_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D60, .hex);
// /usr/include/GL/glew.h:19685:9: warning: macro 'glGetTexGenfvOES' contains a runtime value, translated to function
pub inline fn glGetTexGenfvOES() @TypeOf(GLEW_GET_FUN(__glewGetTexGenfvOES)) {
    return GLEW_GET_FUN(__glewGetTexGenfvOES);
}
// /usr/include/GL/glew.h:19686:9: warning: macro 'glGetTexGenivOES' contains a runtime value, translated to function
pub inline fn glGetTexGenivOES() @TypeOf(GLEW_GET_FUN(__glewGetTexGenivOES)) {
    return GLEW_GET_FUN(__glewGetTexGenivOES);
}
// /usr/include/GL/glew.h:19687:9: warning: macro 'glGetTexGenxvOES' contains a runtime value, translated to function
pub inline fn glGetTexGenxvOES() @TypeOf(GLEW_GET_FUN(__glewGetTexGenxvOES)) {
    return GLEW_GET_FUN(__glewGetTexGenxvOES);
}
// /usr/include/GL/glew.h:19688:9: warning: macro 'glTexGenfOES' contains a runtime value, translated to function
pub inline fn glTexGenfOES() @TypeOf(GLEW_GET_FUN(__glewTexGenfOES)) {
    return GLEW_GET_FUN(__glewTexGenfOES);
}
// /usr/include/GL/glew.h:19689:9: warning: macro 'glTexGenfvOES' contains a runtime value, translated to function
pub inline fn glTexGenfvOES() @TypeOf(GLEW_GET_FUN(__glewTexGenfvOES)) {
    return GLEW_GET_FUN(__glewTexGenfvOES);
}
// /usr/include/GL/glew.h:19690:9: warning: macro 'glTexGeniOES' contains a runtime value, translated to function
pub inline fn glTexGeniOES() @TypeOf(GLEW_GET_FUN(__glewTexGeniOES)) {
    return GLEW_GET_FUN(__glewTexGeniOES);
}
// /usr/include/GL/glew.h:19691:9: warning: macro 'glTexGenivOES' contains a runtime value, translated to function
pub inline fn glTexGenivOES() @TypeOf(GLEW_GET_FUN(__glewTexGenivOES)) {
    return GLEW_GET_FUN(__glewTexGenivOES);
}
// /usr/include/GL/glew.h:19692:9: warning: macro 'glTexGenxOES' contains a runtime value, translated to function
pub inline fn glTexGenxOES() @TypeOf(GLEW_GET_FUN(__glewTexGenxOES)) {
    return GLEW_GET_FUN(__glewTexGenxOES);
}
// /usr/include/GL/glew.h:19693:9: warning: macro 'glTexGenxvOES' contains a runtime value, translated to function
pub inline fn glTexGenxvOES() @TypeOf(GLEW_GET_FUN(__glewTexGenxvOES)) {
    return GLEW_GET_FUN(__glewTexGenxvOES);
}
// /usr/include/GL/glew.h:19695:9: warning: macro 'GLEW_OES_texture_cube_map' contains a runtime value, translated to function
pub inline fn GLEW_OES_texture_cube_map() @TypeOf(GLEW_GET_VAR(__GLEW_OES_texture_cube_map)) {
    return GLEW_GET_VAR(__GLEW_OES_texture_cube_map);
}
pub const GL_OES_texture_cube_map_array = @as(c_int, 1);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hex);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hex);
pub const GL_IMAGE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hex);
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hex);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hex);
// /usr/include/GL/glew.h:19714:9: warning: macro 'GLEW_OES_texture_cube_map_array' contains a runtime value, translated to function
pub inline fn GLEW_OES_texture_cube_map_array() @TypeOf(GLEW_GET_VAR(__GLEW_OES_texture_cube_map_array)) {
    return GLEW_GET_VAR(__GLEW_OES_texture_cube_map_array);
}
pub const GL_OES_texture_env_crossbar = @as(c_int, 1);
// /usr/include/GL/glew.h:19723:9: warning: macro 'GLEW_OES_texture_env_crossbar' contains a runtime value, translated to function
pub inline fn GLEW_OES_texture_env_crossbar() @TypeOf(GLEW_GET_VAR(__GLEW_OES_texture_env_crossbar)) {
    return GLEW_GET_VAR(__GLEW_OES_texture_env_crossbar);
}
pub const GL_OES_texture_mirrored_repeat = @as(c_int, 1);
// /usr/include/GL/glew.h:19734:9: warning: macro 'GLEW_OES_texture_mirrored_repeat' contains a runtime value, translated to function
pub inline fn GLEW_OES_texture_mirrored_repeat() @TypeOf(GLEW_GET_VAR(__GLEW_OES_texture_mirrored_repeat)) {
    return GLEW_GET_VAR(__GLEW_OES_texture_mirrored_repeat);
}
pub const GL_OES_texture_npot = @as(c_int, 1);
// /usr/include/GL/glew.h:19743:9: warning: macro 'GLEW_OES_texture_npot' contains a runtime value, translated to function
pub inline fn GLEW_OES_texture_npot() @TypeOf(GLEW_GET_VAR(__GLEW_OES_texture_npot)) {
    return GLEW_GET_VAR(__GLEW_OES_texture_npot);
}
pub const GL_OES_texture_stencil8 = @as(c_int, 1);
// /usr/include/GL/glew.h:19755:9: warning: macro 'GLEW_OES_texture_stencil8' contains a runtime value, translated to function
pub inline fn GLEW_OES_texture_stencil8() @TypeOf(GLEW_GET_VAR(__GLEW_OES_texture_stencil8)) {
    return GLEW_GET_VAR(__GLEW_OES_texture_stencil8);
}
pub const GL_OES_texture_storage_multisample_2d_array = @as(c_int, 1);
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9102, .hex);
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9105, .hex);
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910B, .hex);
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910C, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910D, .hex);
// /usr/include/GL/glew.h:19772:9: warning: macro 'glTexStorage3DMultisampleOES' contains a runtime value, translated to function
pub inline fn glTexStorage3DMultisampleOES() @TypeOf(GLEW_GET_FUN(__glewTexStorage3DMultisampleOES)) {
    return GLEW_GET_FUN(__glewTexStorage3DMultisampleOES);
}
// /usr/include/GL/glew.h:19774:9: warning: macro 'GLEW_OES_texture_storage_multisample_2d_array' contains a runtime value, translated to function
pub inline fn GLEW_OES_texture_storage_multisample_2d_array() @TypeOf(GLEW_GET_VAR(__GLEW_OES_texture_storage_multisample_2d_array)) {
    return GLEW_GET_VAR(__GLEW_OES_texture_storage_multisample_2d_array);
}
pub const GL_OES_texture_view = @as(c_int, 1);
pub const GL_TEXTURE_VIEW_MIN_LEVEL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DB, .hex);
pub const GL_TEXTURE_VIEW_NUM_LEVELS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DC, .hex);
pub const GL_TEXTURE_VIEW_MIN_LAYER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DD, .hex);
pub const GL_TEXTURE_VIEW_NUM_LAYERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DE, .hex);
// /usr/include/GL/glew.h:19791:9: warning: macro 'glTextureViewOES' contains a runtime value, translated to function
pub inline fn glTextureViewOES() @TypeOf(GLEW_GET_FUN(__glewTextureViewOES)) {
    return GLEW_GET_FUN(__glewTextureViewOES);
}
// /usr/include/GL/glew.h:19793:9: warning: macro 'GLEW_OES_texture_view' contains a runtime value, translated to function
pub inline fn GLEW_OES_texture_view() @TypeOf(GLEW_GET_VAR(__GLEW_OES_texture_view)) {
    return GLEW_GET_VAR(__GLEW_OES_texture_view);
}
pub const GL_OES_vertex_array_object = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B5, .hex);
// /usr/include/GL/glew.h:19809:9: warning: macro 'glBindVertexArrayOES' contains a runtime value, translated to function
pub inline fn glBindVertexArrayOES() @TypeOf(GLEW_GET_FUN(__glewBindVertexArrayOES)) {
    return GLEW_GET_FUN(__glewBindVertexArrayOES);
}
// /usr/include/GL/glew.h:19810:9: warning: macro 'glDeleteVertexArraysOES' contains a runtime value, translated to function
pub inline fn glDeleteVertexArraysOES() @TypeOf(GLEW_GET_FUN(__glewDeleteVertexArraysOES)) {
    return GLEW_GET_FUN(__glewDeleteVertexArraysOES);
}
// /usr/include/GL/glew.h:19811:9: warning: macro 'glGenVertexArraysOES' contains a runtime value, translated to function
pub inline fn glGenVertexArraysOES() @TypeOf(GLEW_GET_FUN(__glewGenVertexArraysOES)) {
    return GLEW_GET_FUN(__glewGenVertexArraysOES);
}
// /usr/include/GL/glew.h:19812:9: warning: macro 'glIsVertexArrayOES' contains a runtime value, translated to function
pub inline fn glIsVertexArrayOES() @TypeOf(GLEW_GET_FUN(__glewIsVertexArrayOES)) {
    return GLEW_GET_FUN(__glewIsVertexArrayOES);
}
// /usr/include/GL/glew.h:19814:9: warning: macro 'GLEW_OES_vertex_array_object' contains a runtime value, translated to function
pub inline fn GLEW_OES_vertex_array_object() @TypeOf(GLEW_GET_VAR(__GLEW_OES_vertex_array_object)) {
    return GLEW_GET_VAR(__GLEW_OES_vertex_array_object);
}
pub const GL_OES_vertex_half_float = @as(c_int, 1);
pub const GL_HALF_FLOAT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D61, .hex);
// /usr/include/GL/glew.h:19825:9: warning: macro 'GLEW_OES_vertex_half_float' contains a runtime value, translated to function
pub inline fn GLEW_OES_vertex_half_float() @TypeOf(GLEW_GET_VAR(__GLEW_OES_vertex_half_float)) {
    return GLEW_GET_VAR(__GLEW_OES_vertex_half_float);
}
pub const GL_OES_vertex_type_10_10_10_2 = @as(c_int, 1);
pub const GL_UNSIGNED_INT_10_10_10_2_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF6, .hex);
pub const GL_INT_10_10_10_2_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF7, .hex);
// /usr/include/GL/glew.h:19837:9: warning: macro 'GLEW_OES_vertex_type_10_10_10_2' contains a runtime value, translated to function
pub inline fn GLEW_OES_vertex_type_10_10_10_2() @TypeOf(GLEW_GET_VAR(__GLEW_OES_vertex_type_10_10_10_2)) {
    return GLEW_GET_VAR(__GLEW_OES_vertex_type_10_10_10_2);
}
pub const GL_OML_interlace = @as(c_int, 1);
pub const GL_INTERLACE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8980, .hex);
pub const GL_INTERLACE_READ_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8981, .hex);
// /usr/include/GL/glew.h:19849:9: warning: macro 'GLEW_OML_interlace' contains a runtime value, translated to function
pub inline fn GLEW_OML_interlace() @TypeOf(GLEW_GET_VAR(__GLEW_OML_interlace)) {
    return GLEW_GET_VAR(__GLEW_OML_interlace);
}
pub const GL_OML_resample = @as(c_int, 1);
pub const GL_PACK_RESAMPLE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8984, .hex);
pub const GL_UNPACK_RESAMPLE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8985, .hex);
pub const GL_RESAMPLE_REPLICATE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8986, .hex);
pub const GL_RESAMPLE_ZERO_FILL_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8987, .hex);
pub const GL_RESAMPLE_AVERAGE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8988, .hex);
pub const GL_RESAMPLE_DECIMATE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8989, .hex);
// /usr/include/GL/glew.h:19865:9: warning: macro 'GLEW_OML_resample' contains a runtime value, translated to function
pub inline fn GLEW_OML_resample() @TypeOf(GLEW_GET_VAR(__GLEW_OML_resample)) {
    return GLEW_GET_VAR(__GLEW_OML_resample);
}
pub const GL_OML_subsample = @as(c_int, 1);
pub const GL_FORMAT_SUBSAMPLE_24_24_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8982, .hex);
pub const GL_FORMAT_SUBSAMPLE_244_244_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8983, .hex);
// /usr/include/GL/glew.h:19877:9: warning: macro 'GLEW_OML_subsample' contains a runtime value, translated to function
pub inline fn GLEW_OML_subsample() @TypeOf(GLEW_GET_VAR(__GLEW_OML_subsample)) {
    return GLEW_GET_VAR(__GLEW_OML_subsample);
}
pub const GL_OVR_multiview = @as(c_int, 1);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9630, .hex);
pub const GL_MAX_VIEWS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9631, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9632, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9633, .hex);
// /usr/include/GL/glew.h:19894:9: warning: macro 'glFramebufferTextureMultiviewOVR' contains a runtime value, translated to function
pub inline fn glFramebufferTextureMultiviewOVR() @TypeOf(GLEW_GET_FUN(__glewFramebufferTextureMultiviewOVR)) {
    return GLEW_GET_FUN(__glewFramebufferTextureMultiviewOVR);
}
// /usr/include/GL/glew.h:19895:9: warning: macro 'glNamedFramebufferTextureMultiviewOVR' contains a runtime value, translated to function
pub inline fn glNamedFramebufferTextureMultiviewOVR() @TypeOf(GLEW_GET_FUN(__glewNamedFramebufferTextureMultiviewOVR)) {
    return GLEW_GET_FUN(__glewNamedFramebufferTextureMultiviewOVR);
}
// /usr/include/GL/glew.h:19897:9: warning: macro 'GLEW_OVR_multiview' contains a runtime value, translated to function
pub inline fn GLEW_OVR_multiview() @TypeOf(GLEW_GET_VAR(__GLEW_OVR_multiview)) {
    return GLEW_GET_VAR(__GLEW_OVR_multiview);
}
pub const GL_OVR_multiview2 = @as(c_int, 1);
// /usr/include/GL/glew.h:19906:9: warning: macro 'GLEW_OVR_multiview2' contains a runtime value, translated to function
pub inline fn GLEW_OVR_multiview2() @TypeOf(GLEW_GET_VAR(__GLEW_OVR_multiview2)) {
    return GLEW_GET_VAR(__GLEW_OVR_multiview2);
}
pub const GL_OVR_multiview_multisampled_render_to_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:19917:9: warning: macro 'glFramebufferTextureMultisampleMultiviewOVR' contains a runtime value, translated to function
pub inline fn glFramebufferTextureMultisampleMultiviewOVR() @TypeOf(GLEW_GET_FUN(__glewFramebufferTextureMultisampleMultiviewOVR)) {
    return GLEW_GET_FUN(__glewFramebufferTextureMultisampleMultiviewOVR);
}
// /usr/include/GL/glew.h:19919:9: warning: macro 'GLEW_OVR_multiview_multisampled_render_to_texture' contains a runtime value, translated to function
pub inline fn GLEW_OVR_multiview_multisampled_render_to_texture() @TypeOf(GLEW_GET_VAR(__GLEW_OVR_multiview_multisampled_render_to_texture)) {
    return GLEW_GET_VAR(__GLEW_OVR_multiview_multisampled_render_to_texture);
}
pub const GL_PGI_misc_hints = @as(c_int, 1);
pub const GL_PREFER_DOUBLEBUFFER_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107000, .decimal);
pub const GL_CONSERVE_MEMORY_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107005, .decimal);
pub const GL_RECLAIM_MEMORY_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107006, .decimal);
pub const GL_NATIVE_GRAPHICS_HANDLE_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107010, .decimal);
pub const GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107011, .decimal);
pub const GL_NATIVE_GRAPHICS_END_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107012, .decimal);
pub const GL_ALWAYS_FAST_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107020, .decimal);
pub const GL_ALWAYS_SOFT_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107021, .decimal);
pub const GL_ALLOW_DRAW_OBJ_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107022, .decimal);
pub const GL_ALLOW_DRAW_WIN_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107023, .decimal);
pub const GL_ALLOW_DRAW_FRG_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107024, .decimal);
pub const GL_ALLOW_DRAW_MEM_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107025, .decimal);
pub const GL_STRICT_DEPTHFUNC_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107030, .decimal);
pub const GL_STRICT_LIGHTING_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107031, .decimal);
pub const GL_STRICT_SCISSOR_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107032, .decimal);
pub const GL_FULL_STIPPLE_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107033, .decimal);
pub const GL_CLIP_NEAR_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107040, .decimal);
pub const GL_CLIP_FAR_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107041, .decimal);
pub const GL_WIDE_LINE_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107042, .decimal);
pub const GL_BACK_NORMALS_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107043, .decimal);
// /usr/include/GL/glew.h:19949:9: warning: macro 'GLEW_PGI_misc_hints' contains a runtime value, translated to function
pub inline fn GLEW_PGI_misc_hints() @TypeOf(GLEW_GET_VAR(__GLEW_PGI_misc_hints)) {
    return GLEW_GET_VAR(__GLEW_PGI_misc_hints);
}
pub const GL_PGI_vertex_hints = @as(c_int, 1);
pub const GL_VERTEX23_BIT_PGI = @as(c_int, 0x00000004);
pub const GL_VERTEX4_BIT_PGI = @as(c_int, 0x00000008);
pub const GL_COLOR3_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const GL_COLOR4_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex);
pub const GL_EDGEFLAG_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex);
pub const GL_INDEX_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex);
pub const GL_MAT_AMBIENT_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex);
pub const GL_VERTEX_DATA_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107050, .decimal);
pub const GL_VERTEX_CONSISTENT_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107051, .decimal);
pub const GL_MATERIAL_SIDE_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107052, .decimal);
pub const GL_MAX_VERTEX_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107053, .decimal);
pub const GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex);
pub const GL_MAT_DIFFUSE_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex);
pub const GL_MAT_EMISSION_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex);
pub const GL_MAT_COLOR_INDEXES_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex);
pub const GL_MAT_SHININESS_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex);
pub const GL_MAT_SPECULAR_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex);
pub const GL_NORMAL_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex);
pub const GL_TEXCOORD1_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex);
pub const GL_TEXCOORD2_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const GL_TEXCOORD3_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const GL_TEXCOORD4_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
// /usr/include/GL/glew.h:19981:9: warning: macro 'GLEW_PGI_vertex_hints' contains a runtime value, translated to function
pub inline fn GLEW_PGI_vertex_hints() @TypeOf(GLEW_GET_VAR(__GLEW_PGI_vertex_hints)) {
    return GLEW_GET_VAR(__GLEW_PGI_vertex_hints);
}
pub const GL_QCOM_YUV_texture_gather = @as(c_int, 1);
// /usr/include/GL/glew.h:19990:9: warning: macro 'GLEW_QCOM_YUV_texture_gather' contains a runtime value, translated to function
pub inline fn GLEW_QCOM_YUV_texture_gather() @TypeOf(GLEW_GET_VAR(__GLEW_QCOM_YUV_texture_gather)) {
    return GLEW_GET_VAR(__GLEW_QCOM_YUV_texture_gather);
}
pub const GL_QCOM_alpha_test = @as(c_int, 1);
pub const GL_ALPHA_TEST_QCOM = @as(c_int, 0x0BC0);
pub const GL_ALPHA_TEST_FUNC_QCOM = @as(c_int, 0x0BC1);
pub const GL_ALPHA_TEST_REF_QCOM = @as(c_int, 0x0BC2);
// /usr/include/GL/glew.h:20005:9: warning: macro 'glAlphaFuncQCOM' contains a runtime value, translated to function
pub inline fn glAlphaFuncQCOM() @TypeOf(GLEW_GET_FUN(__glewAlphaFuncQCOM)) {
    return GLEW_GET_FUN(__glewAlphaFuncQCOM);
}
// /usr/include/GL/glew.h:20007:9: warning: macro 'GLEW_QCOM_alpha_test' contains a runtime value, translated to function
pub inline fn GLEW_QCOM_alpha_test() @TypeOf(GLEW_GET_VAR(__GLEW_QCOM_alpha_test)) {
    return GLEW_GET_VAR(__GLEW_QCOM_alpha_test);
}
pub const GL_QCOM_binning_control = @as(c_int, 1);
pub const GL_BINNING_CONTROL_HINT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB0, .hex);
pub const GL_CPU_OPTIMIZED_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB1, .hex);
pub const GL_GPU_OPTIMIZED_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB2, .hex);
pub const GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB3, .hex);
// /usr/include/GL/glew.h:20022:9: warning: macro 'GLEW_QCOM_binning_control' contains a runtime value, translated to function
pub inline fn GLEW_QCOM_binning_control() @TypeOf(GLEW_GET_VAR(__GLEW_QCOM_binning_control)) {
    return GLEW_GET_VAR(__GLEW_QCOM_binning_control);
}
pub const GL_QCOM_driver_control = @as(c_int, 1);
// /usr/include/GL/glew.h:20036:9: warning: macro 'glDisableDriverControlQCOM' contains a runtime value, translated to function
pub inline fn glDisableDriverControlQCOM() @TypeOf(GLEW_GET_FUN(__glewDisableDriverControlQCOM)) {
    return GLEW_GET_FUN(__glewDisableDriverControlQCOM);
}
// /usr/include/GL/glew.h:20037:9: warning: macro 'glEnableDriverControlQCOM' contains a runtime value, translated to function
pub inline fn glEnableDriverControlQCOM() @TypeOf(GLEW_GET_FUN(__glewEnableDriverControlQCOM)) {
    return GLEW_GET_FUN(__glewEnableDriverControlQCOM);
}
// /usr/include/GL/glew.h:20038:9: warning: macro 'glGetDriverControlStringQCOM' contains a runtime value, translated to function
pub inline fn glGetDriverControlStringQCOM() @TypeOf(GLEW_GET_FUN(__glewGetDriverControlStringQCOM)) {
    return GLEW_GET_FUN(__glewGetDriverControlStringQCOM);
}
// /usr/include/GL/glew.h:20039:9: warning: macro 'glGetDriverControlsQCOM' contains a runtime value, translated to function
pub inline fn glGetDriverControlsQCOM() @TypeOf(GLEW_GET_FUN(__glewGetDriverControlsQCOM)) {
    return GLEW_GET_FUN(__glewGetDriverControlsQCOM);
}
// /usr/include/GL/glew.h:20041:9: warning: macro 'GLEW_QCOM_driver_control' contains a runtime value, translated to function
pub inline fn GLEW_QCOM_driver_control() @TypeOf(GLEW_GET_VAR(__GLEW_QCOM_driver_control)) {
    return GLEW_GET_VAR(__GLEW_QCOM_driver_control);
}
pub const GL_QCOM_extended_get = @as(c_int, 1);
pub const GL_TEXTURE_WIDTH_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD2, .hex);
pub const GL_TEXTURE_HEIGHT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD3, .hex);
pub const GL_TEXTURE_DEPTH_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD4, .hex);
pub const GL_TEXTURE_INTERNAL_FORMAT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD5, .hex);
pub const GL_TEXTURE_FORMAT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD6, .hex);
pub const GL_TEXTURE_TYPE_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD7, .hex);
pub const GL_TEXTURE_IMAGE_VALID_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD8, .hex);
pub const GL_TEXTURE_NUM_LEVELS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD9, .hex);
pub const GL_TEXTURE_TARGET_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BDA, .hex);
pub const GL_TEXTURE_OBJECT_VALID_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BDB, .hex);
pub const GL_STATE_RESTORE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BDC, .hex);
// /usr/include/GL/glew.h:20071:9: warning: macro 'glExtGetBufferPointervQCOM' contains a runtime value, translated to function
pub inline fn glExtGetBufferPointervQCOM() @TypeOf(GLEW_GET_FUN(__glewExtGetBufferPointervQCOM)) {
    return GLEW_GET_FUN(__glewExtGetBufferPointervQCOM);
}
// /usr/include/GL/glew.h:20072:9: warning: macro 'glExtGetBuffersQCOM' contains a runtime value, translated to function
pub inline fn glExtGetBuffersQCOM() @TypeOf(GLEW_GET_FUN(__glewExtGetBuffersQCOM)) {
    return GLEW_GET_FUN(__glewExtGetBuffersQCOM);
}
// /usr/include/GL/glew.h:20073:9: warning: macro 'glExtGetFramebuffersQCOM' contains a runtime value, translated to function
pub inline fn glExtGetFramebuffersQCOM() @TypeOf(GLEW_GET_FUN(__glewExtGetFramebuffersQCOM)) {
    return GLEW_GET_FUN(__glewExtGetFramebuffersQCOM);
}
// /usr/include/GL/glew.h:20074:9: warning: macro 'glExtGetRenderbuffersQCOM' contains a runtime value, translated to function
pub inline fn glExtGetRenderbuffersQCOM() @TypeOf(GLEW_GET_FUN(__glewExtGetRenderbuffersQCOM)) {
    return GLEW_GET_FUN(__glewExtGetRenderbuffersQCOM);
}
// /usr/include/GL/glew.h:20075:9: warning: macro 'glExtGetTexLevelParameterivQCOM' contains a runtime value, translated to function
pub inline fn glExtGetTexLevelParameterivQCOM() @TypeOf(GLEW_GET_FUN(__glewExtGetTexLevelParameterivQCOM)) {
    return GLEW_GET_FUN(__glewExtGetTexLevelParameterivQCOM);
}
// /usr/include/GL/glew.h:20076:9: warning: macro 'glExtGetTexSubImageQCOM' contains a runtime value, translated to function
pub inline fn glExtGetTexSubImageQCOM() @TypeOf(GLEW_GET_FUN(__glewExtGetTexSubImageQCOM)) {
    return GLEW_GET_FUN(__glewExtGetTexSubImageQCOM);
}
// /usr/include/GL/glew.h:20077:9: warning: macro 'glExtGetTexturesQCOM' contains a runtime value, translated to function
pub inline fn glExtGetTexturesQCOM() @TypeOf(GLEW_GET_FUN(__glewExtGetTexturesQCOM)) {
    return GLEW_GET_FUN(__glewExtGetTexturesQCOM);
}
// /usr/include/GL/glew.h:20078:9: warning: macro 'glExtTexObjectStateOverrideiQCOM' contains a runtime value, translated to function
pub inline fn glExtTexObjectStateOverrideiQCOM() @TypeOf(GLEW_GET_FUN(__glewExtTexObjectStateOverrideiQCOM)) {
    return GLEW_GET_FUN(__glewExtTexObjectStateOverrideiQCOM);
}
// /usr/include/GL/glew.h:20080:9: warning: macro 'GLEW_QCOM_extended_get' contains a runtime value, translated to function
pub inline fn GLEW_QCOM_extended_get() @TypeOf(GLEW_GET_VAR(__GLEW_QCOM_extended_get)) {
    return GLEW_GET_VAR(__GLEW_QCOM_extended_get);
}
pub const GL_QCOM_extended_get2 = @as(c_int, 1);
// /usr/include/GL/glew.h:20094:9: warning: macro 'glExtGetProgramBinarySourceQCOM' contains a runtime value, translated to function
pub inline fn glExtGetProgramBinarySourceQCOM() @TypeOf(GLEW_GET_FUN(__glewExtGetProgramBinarySourceQCOM)) {
    return GLEW_GET_FUN(__glewExtGetProgramBinarySourceQCOM);
}
// /usr/include/GL/glew.h:20095:9: warning: macro 'glExtGetProgramsQCOM' contains a runtime value, translated to function
pub inline fn glExtGetProgramsQCOM() @TypeOf(GLEW_GET_FUN(__glewExtGetProgramsQCOM)) {
    return GLEW_GET_FUN(__glewExtGetProgramsQCOM);
}
// /usr/include/GL/glew.h:20096:9: warning: macro 'glExtGetShadersQCOM' contains a runtime value, translated to function
pub inline fn glExtGetShadersQCOM() @TypeOf(GLEW_GET_FUN(__glewExtGetShadersQCOM)) {
    return GLEW_GET_FUN(__glewExtGetShadersQCOM);
}
// /usr/include/GL/glew.h:20097:9: warning: macro 'glExtIsProgramBinaryQCOM' contains a runtime value, translated to function
pub inline fn glExtIsProgramBinaryQCOM() @TypeOf(GLEW_GET_FUN(__glewExtIsProgramBinaryQCOM)) {
    return GLEW_GET_FUN(__glewExtIsProgramBinaryQCOM);
}
// /usr/include/GL/glew.h:20099:9: warning: macro 'GLEW_QCOM_extended_get2' contains a runtime value, translated to function
pub inline fn GLEW_QCOM_extended_get2() @TypeOf(GLEW_GET_VAR(__GLEW_QCOM_extended_get2)) {
    return GLEW_GET_VAR(__GLEW_QCOM_extended_get2);
}
pub const GL_QCOM_framebuffer_foveated = @as(c_int, 1);
pub const GL_FOVEATION_ENABLE_BIT_QCOM = @as(c_int, 0x1);
pub const GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = @as(c_int, 0x2);
// /usr/include/GL/glew.h:20114:9: warning: macro 'glFramebufferFoveationConfigQCOM' contains a runtime value, translated to function
pub inline fn glFramebufferFoveationConfigQCOM() @TypeOf(GLEW_GET_FUN(__glewFramebufferFoveationConfigQCOM)) {
    return GLEW_GET_FUN(__glewFramebufferFoveationConfigQCOM);
}
// /usr/include/GL/glew.h:20115:9: warning: macro 'glFramebufferFoveationParametersQCOM' contains a runtime value, translated to function
pub inline fn glFramebufferFoveationParametersQCOM() @TypeOf(GLEW_GET_FUN(__glewFramebufferFoveationParametersQCOM)) {
    return GLEW_GET_FUN(__glewFramebufferFoveationParametersQCOM);
}
// /usr/include/GL/glew.h:20117:9: warning: macro 'GLEW_QCOM_framebuffer_foveated' contains a runtime value, translated to function
pub inline fn GLEW_QCOM_framebuffer_foveated() @TypeOf(GLEW_GET_VAR(__GLEW_QCOM_framebuffer_foveated)) {
    return GLEW_GET_VAR(__GLEW_QCOM_framebuffer_foveated);
}
pub const GL_QCOM_perfmon_global_mode = @as(c_int, 1);
pub const GL_PERFMON_GLOBAL_MODE_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FA0, .hex);
// /usr/include/GL/glew.h:20128:9: warning: macro 'GLEW_QCOM_perfmon_global_mode' contains a runtime value, translated to function
pub inline fn GLEW_QCOM_perfmon_global_mode() @TypeOf(GLEW_GET_VAR(__GLEW_QCOM_perfmon_global_mode)) {
    return GLEW_GET_VAR(__GLEW_QCOM_perfmon_global_mode);
}
pub const GL_QCOM_shader_framebuffer_fetch_noncoherent = @as(c_int, 1);
pub const GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A2, .hex);
// /usr/include/GL/glew.h:20141:9: warning: macro 'glFramebufferFetchBarrierQCOM' contains a runtime value, translated to function
pub inline fn glFramebufferFetchBarrierQCOM() @TypeOf(GLEW_GET_FUN(__glewFramebufferFetchBarrierQCOM)) {
    return GLEW_GET_FUN(__glewFramebufferFetchBarrierQCOM);
}
// /usr/include/GL/glew.h:20143:9: warning: macro 'GLEW_QCOM_shader_framebuffer_fetch_noncoherent' contains a runtime value, translated to function
pub inline fn GLEW_QCOM_shader_framebuffer_fetch_noncoherent() @TypeOf(GLEW_GET_VAR(__GLEW_QCOM_shader_framebuffer_fetch_noncoherent)) {
    return GLEW_GET_VAR(__GLEW_QCOM_shader_framebuffer_fetch_noncoherent);
}
pub const GL_QCOM_shader_framebuffer_fetch_rate = @as(c_int, 1);
// /usr/include/GL/glew.h:20152:9: warning: macro 'GLEW_QCOM_shader_framebuffer_fetch_rate' contains a runtime value, translated to function
pub inline fn GLEW_QCOM_shader_framebuffer_fetch_rate() @TypeOf(GLEW_GET_VAR(__GLEW_QCOM_shader_framebuffer_fetch_rate)) {
    return GLEW_GET_VAR(__GLEW_QCOM_shader_framebuffer_fetch_rate);
}
pub const GL_QCOM_texture_foveated = @as(c_int, 1);
pub const GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFB, .hex);
pub const GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFC, .hex);
pub const GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFD, .hex);
pub const GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFE, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFF, .hex);
// /usr/include/GL/glew.h:20171:9: warning: macro 'glTextureFoveationParametersQCOM' contains a runtime value, translated to function
pub inline fn glTextureFoveationParametersQCOM() @TypeOf(GLEW_GET_FUN(__glewTextureFoveationParametersQCOM)) {
    return GLEW_GET_FUN(__glewTextureFoveationParametersQCOM);
}
// /usr/include/GL/glew.h:20173:9: warning: macro 'GLEW_QCOM_texture_foveated' contains a runtime value, translated to function
pub inline fn GLEW_QCOM_texture_foveated() @TypeOf(GLEW_GET_VAR(__GLEW_QCOM_texture_foveated)) {
    return GLEW_GET_VAR(__GLEW_QCOM_texture_foveated);
}
pub const GL_QCOM_texture_foveated_subsampled_layout = @as(c_int, 1);
pub const GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM = @as(c_int, 0x4);
pub const GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FA1, .hex);
// /usr/include/GL/glew.h:20185:9: warning: macro 'GLEW_QCOM_texture_foveated_subsampled_layout' contains a runtime value, translated to function
pub inline fn GLEW_QCOM_texture_foveated_subsampled_layout() @TypeOf(GLEW_GET_VAR(__GLEW_QCOM_texture_foveated_subsampled_layout)) {
    return GLEW_GET_VAR(__GLEW_QCOM_texture_foveated_subsampled_layout);
}
pub const GL_QCOM_tiled_rendering = @as(c_int, 1);
pub const GL_COLOR_BUFFER_BIT0_QCOM = @as(c_int, 0x00000001);
pub const GL_COLOR_BUFFER_BIT1_QCOM = @as(c_int, 0x00000002);
pub const GL_COLOR_BUFFER_BIT2_QCOM = @as(c_int, 0x00000004);
pub const GL_COLOR_BUFFER_BIT3_QCOM = @as(c_int, 0x00000008);
pub const GL_COLOR_BUFFER_BIT4_QCOM = @as(c_int, 0x00000010);
pub const GL_COLOR_BUFFER_BIT5_QCOM = @as(c_int, 0x00000020);
pub const GL_COLOR_BUFFER_BIT6_QCOM = @as(c_int, 0x00000040);
pub const GL_COLOR_BUFFER_BIT7_QCOM = @as(c_int, 0x00000080);
pub const GL_DEPTH_BUFFER_BIT0_QCOM = @as(c_int, 0x00000100);
pub const GL_DEPTH_BUFFER_BIT1_QCOM = @as(c_int, 0x00000200);
pub const GL_DEPTH_BUFFER_BIT2_QCOM = @as(c_int, 0x00000400);
pub const GL_DEPTH_BUFFER_BIT3_QCOM = @as(c_int, 0x00000800);
pub const GL_DEPTH_BUFFER_BIT4_QCOM = @as(c_int, 0x00001000);
pub const GL_DEPTH_BUFFER_BIT5_QCOM = @as(c_int, 0x00002000);
pub const GL_DEPTH_BUFFER_BIT6_QCOM = @as(c_int, 0x00004000);
pub const GL_DEPTH_BUFFER_BIT7_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex);
pub const GL_STENCIL_BUFFER_BIT0_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const GL_STENCIL_BUFFER_BIT1_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex);
pub const GL_STENCIL_BUFFER_BIT2_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex);
pub const GL_STENCIL_BUFFER_BIT3_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex);
pub const GL_STENCIL_BUFFER_BIT4_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex);
pub const GL_STENCIL_BUFFER_BIT5_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex);
pub const GL_STENCIL_BUFFER_BIT6_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex);
pub const GL_STENCIL_BUFFER_BIT7_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT0_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT1_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT2_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT3_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT4_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT5_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT6_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT7_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
// /usr/include/GL/glew.h:20230:9: warning: macro 'glEndTilingQCOM' contains a runtime value, translated to function
pub inline fn glEndTilingQCOM() @TypeOf(GLEW_GET_FUN(__glewEndTilingQCOM)) {
    return GLEW_GET_FUN(__glewEndTilingQCOM);
}
// /usr/include/GL/glew.h:20231:9: warning: macro 'glStartTilingQCOM' contains a runtime value, translated to function
pub inline fn glStartTilingQCOM() @TypeOf(GLEW_GET_FUN(__glewStartTilingQCOM)) {
    return GLEW_GET_FUN(__glewStartTilingQCOM);
}
// /usr/include/GL/glew.h:20233:9: warning: macro 'GLEW_QCOM_tiled_rendering' contains a runtime value, translated to function
pub inline fn GLEW_QCOM_tiled_rendering() @TypeOf(GLEW_GET_VAR(__GLEW_QCOM_tiled_rendering)) {
    return GLEW_GET_VAR(__GLEW_QCOM_tiled_rendering);
}
pub const GL_QCOM_writeonly_rendering = @as(c_int, 1);
pub const GL_WRITEONLY_RENDERING_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8823, .hex);
// /usr/include/GL/glew.h:20244:9: warning: macro 'GLEW_QCOM_writeonly_rendering' contains a runtime value, translated to function
pub inline fn GLEW_QCOM_writeonly_rendering() @TypeOf(GLEW_GET_VAR(__GLEW_QCOM_writeonly_rendering)) {
    return GLEW_GET_VAR(__GLEW_QCOM_writeonly_rendering);
}
pub const GL_REGAL_ES1_0_compatibility = @as(c_int, 1);
// /usr/include/GL/glew.h:20287:9: warning: macro 'glAlphaFuncx' contains a runtime value, translated to function
pub inline fn glAlphaFuncx() @TypeOf(GLEW_GET_FUN(__glewAlphaFuncx)) {
    return GLEW_GET_FUN(__glewAlphaFuncx);
}
// /usr/include/GL/glew.h:20288:9: warning: macro 'glClearColorx' contains a runtime value, translated to function
pub inline fn glClearColorx() @TypeOf(GLEW_GET_FUN(__glewClearColorx)) {
    return GLEW_GET_FUN(__glewClearColorx);
}
// /usr/include/GL/glew.h:20289:9: warning: macro 'glClearDepthx' contains a runtime value, translated to function
pub inline fn glClearDepthx() @TypeOf(GLEW_GET_FUN(__glewClearDepthx)) {
    return GLEW_GET_FUN(__glewClearDepthx);
}
// /usr/include/GL/glew.h:20290:9: warning: macro 'glColor4x' contains a runtime value, translated to function
pub inline fn glColor4x() @TypeOf(GLEW_GET_FUN(__glewColor4x)) {
    return GLEW_GET_FUN(__glewColor4x);
}
// /usr/include/GL/glew.h:20291:9: warning: macro 'glDepthRangex' contains a runtime value, translated to function
pub inline fn glDepthRangex() @TypeOf(GLEW_GET_FUN(__glewDepthRangex)) {
    return GLEW_GET_FUN(__glewDepthRangex);
}
// /usr/include/GL/glew.h:20292:9: warning: macro 'glFogx' contains a runtime value, translated to function
pub inline fn glFogx() @TypeOf(GLEW_GET_FUN(__glewFogx)) {
    return GLEW_GET_FUN(__glewFogx);
}
// /usr/include/GL/glew.h:20293:9: warning: macro 'glFogxv' contains a runtime value, translated to function
pub inline fn glFogxv() @TypeOf(GLEW_GET_FUN(__glewFogxv)) {
    return GLEW_GET_FUN(__glewFogxv);
}
// /usr/include/GL/glew.h:20294:9: warning: macro 'glFrustumf' contains a runtime value, translated to function
pub inline fn glFrustumf() @TypeOf(GLEW_GET_FUN(__glewFrustumf)) {
    return GLEW_GET_FUN(__glewFrustumf);
}
// /usr/include/GL/glew.h:20295:9: warning: macro 'glFrustumx' contains a runtime value, translated to function
pub inline fn glFrustumx() @TypeOf(GLEW_GET_FUN(__glewFrustumx)) {
    return GLEW_GET_FUN(__glewFrustumx);
}
// /usr/include/GL/glew.h:20296:9: warning: macro 'glLightModelx' contains a runtime value, translated to function
pub inline fn glLightModelx() @TypeOf(GLEW_GET_FUN(__glewLightModelx)) {
    return GLEW_GET_FUN(__glewLightModelx);
}
// /usr/include/GL/glew.h:20297:9: warning: macro 'glLightModelxv' contains a runtime value, translated to function
pub inline fn glLightModelxv() @TypeOf(GLEW_GET_FUN(__glewLightModelxv)) {
    return GLEW_GET_FUN(__glewLightModelxv);
}
// /usr/include/GL/glew.h:20298:9: warning: macro 'glLightx' contains a runtime value, translated to function
pub inline fn glLightx() @TypeOf(GLEW_GET_FUN(__glewLightx)) {
    return GLEW_GET_FUN(__glewLightx);
}
// /usr/include/GL/glew.h:20299:9: warning: macro 'glLightxv' contains a runtime value, translated to function
pub inline fn glLightxv() @TypeOf(GLEW_GET_FUN(__glewLightxv)) {
    return GLEW_GET_FUN(__glewLightxv);
}
// /usr/include/GL/glew.h:20300:9: warning: macro 'glLineWidthx' contains a runtime value, translated to function
pub inline fn glLineWidthx() @TypeOf(GLEW_GET_FUN(__glewLineWidthx)) {
    return GLEW_GET_FUN(__glewLineWidthx);
}
// /usr/include/GL/glew.h:20301:9: warning: macro 'glLoadMatrixx' contains a runtime value, translated to function
pub inline fn glLoadMatrixx() @TypeOf(GLEW_GET_FUN(__glewLoadMatrixx)) {
    return GLEW_GET_FUN(__glewLoadMatrixx);
}
// /usr/include/GL/glew.h:20302:9: warning: macro 'glMaterialx' contains a runtime value, translated to function
pub inline fn glMaterialx() @TypeOf(GLEW_GET_FUN(__glewMaterialx)) {
    return GLEW_GET_FUN(__glewMaterialx);
}
// /usr/include/GL/glew.h:20303:9: warning: macro 'glMaterialxv' contains a runtime value, translated to function
pub inline fn glMaterialxv() @TypeOf(GLEW_GET_FUN(__glewMaterialxv)) {
    return GLEW_GET_FUN(__glewMaterialxv);
}
// /usr/include/GL/glew.h:20304:9: warning: macro 'glMultMatrixx' contains a runtime value, translated to function
pub inline fn glMultMatrixx() @TypeOf(GLEW_GET_FUN(__glewMultMatrixx)) {
    return GLEW_GET_FUN(__glewMultMatrixx);
}
// /usr/include/GL/glew.h:20305:9: warning: macro 'glMultiTexCoord4x' contains a runtime value, translated to function
pub inline fn glMultiTexCoord4x() @TypeOf(GLEW_GET_FUN(__glewMultiTexCoord4x)) {
    return GLEW_GET_FUN(__glewMultiTexCoord4x);
}
// /usr/include/GL/glew.h:20306:9: warning: macro 'glNormal3x' contains a runtime value, translated to function
pub inline fn glNormal3x() @TypeOf(GLEW_GET_FUN(__glewNormal3x)) {
    return GLEW_GET_FUN(__glewNormal3x);
}
// /usr/include/GL/glew.h:20307:9: warning: macro 'glOrthof' contains a runtime value, translated to function
pub inline fn glOrthof() @TypeOf(GLEW_GET_FUN(__glewOrthof)) {
    return GLEW_GET_FUN(__glewOrthof);
}
// /usr/include/GL/glew.h:20308:9: warning: macro 'glOrthox' contains a runtime value, translated to function
pub inline fn glOrthox() @TypeOf(GLEW_GET_FUN(__glewOrthox)) {
    return GLEW_GET_FUN(__glewOrthox);
}
// /usr/include/GL/glew.h:20309:9: warning: macro 'glPointSizex' contains a runtime value, translated to function
pub inline fn glPointSizex() @TypeOf(GLEW_GET_FUN(__glewPointSizex)) {
    return GLEW_GET_FUN(__glewPointSizex);
}
// /usr/include/GL/glew.h:20310:9: warning: macro 'glPolygonOffsetx' contains a runtime value, translated to function
pub inline fn glPolygonOffsetx() @TypeOf(GLEW_GET_FUN(__glewPolygonOffsetx)) {
    return GLEW_GET_FUN(__glewPolygonOffsetx);
}
// /usr/include/GL/glew.h:20311:9: warning: macro 'glRotatex' contains a runtime value, translated to function
pub inline fn glRotatex() @TypeOf(GLEW_GET_FUN(__glewRotatex)) {
    return GLEW_GET_FUN(__glewRotatex);
}
// /usr/include/GL/glew.h:20312:9: warning: macro 'glSampleCoveragex' contains a runtime value, translated to function
pub inline fn glSampleCoveragex() @TypeOf(GLEW_GET_FUN(__glewSampleCoveragex)) {
    return GLEW_GET_FUN(__glewSampleCoveragex);
}
// /usr/include/GL/glew.h:20313:9: warning: macro 'glScalex' contains a runtime value, translated to function
pub inline fn glScalex() @TypeOf(GLEW_GET_FUN(__glewScalex)) {
    return GLEW_GET_FUN(__glewScalex);
}
// /usr/include/GL/glew.h:20314:9: warning: macro 'glTexEnvx' contains a runtime value, translated to function
pub inline fn glTexEnvx() @TypeOf(GLEW_GET_FUN(__glewTexEnvx)) {
    return GLEW_GET_FUN(__glewTexEnvx);
}
// /usr/include/GL/glew.h:20315:9: warning: macro 'glTexEnvxv' contains a runtime value, translated to function
pub inline fn glTexEnvxv() @TypeOf(GLEW_GET_FUN(__glewTexEnvxv)) {
    return GLEW_GET_FUN(__glewTexEnvxv);
}
// /usr/include/GL/glew.h:20316:9: warning: macro 'glTexParameterx' contains a runtime value, translated to function
pub inline fn glTexParameterx() @TypeOf(GLEW_GET_FUN(__glewTexParameterx)) {
    return GLEW_GET_FUN(__glewTexParameterx);
}
// /usr/include/GL/glew.h:20317:9: warning: macro 'glTranslatex' contains a runtime value, translated to function
pub inline fn glTranslatex() @TypeOf(GLEW_GET_FUN(__glewTranslatex)) {
    return GLEW_GET_FUN(__glewTranslatex);
}
// /usr/include/GL/glew.h:20319:9: warning: macro 'GLEW_REGAL_ES1_0_compatibility' contains a runtime value, translated to function
pub inline fn GLEW_REGAL_ES1_0_compatibility() @TypeOf(GLEW_GET_VAR(__GLEW_REGAL_ES1_0_compatibility)) {
    return GLEW_GET_VAR(__GLEW_REGAL_ES1_0_compatibility);
}
pub const GL_REGAL_ES1_1_compatibility = @as(c_int, 1);
// /usr/include/GL/glew.h:20342:9: warning: macro 'glClipPlanef' contains a runtime value, translated to function
pub inline fn glClipPlanef() @TypeOf(GLEW_GET_FUN(__glewClipPlanef)) {
    return GLEW_GET_FUN(__glewClipPlanef);
}
// /usr/include/GL/glew.h:20343:9: warning: macro 'glClipPlanex' contains a runtime value, translated to function
pub inline fn glClipPlanex() @TypeOf(GLEW_GET_FUN(__glewClipPlanex)) {
    return GLEW_GET_FUN(__glewClipPlanex);
}
// /usr/include/GL/glew.h:20344:9: warning: macro 'glGetClipPlanef' contains a runtime value, translated to function
pub inline fn glGetClipPlanef() @TypeOf(GLEW_GET_FUN(__glewGetClipPlanef)) {
    return GLEW_GET_FUN(__glewGetClipPlanef);
}
// /usr/include/GL/glew.h:20345:9: warning: macro 'glGetClipPlanex' contains a runtime value, translated to function
pub inline fn glGetClipPlanex() @TypeOf(GLEW_GET_FUN(__glewGetClipPlanex)) {
    return GLEW_GET_FUN(__glewGetClipPlanex);
}
// /usr/include/GL/glew.h:20346:9: warning: macro 'glGetFixedv' contains a runtime value, translated to function
pub inline fn glGetFixedv() @TypeOf(GLEW_GET_FUN(__glewGetFixedv)) {
    return GLEW_GET_FUN(__glewGetFixedv);
}
// /usr/include/GL/glew.h:20347:9: warning: macro 'glGetLightxv' contains a runtime value, translated to function
pub inline fn glGetLightxv() @TypeOf(GLEW_GET_FUN(__glewGetLightxv)) {
    return GLEW_GET_FUN(__glewGetLightxv);
}
// /usr/include/GL/glew.h:20348:9: warning: macro 'glGetMaterialxv' contains a runtime value, translated to function
pub inline fn glGetMaterialxv() @TypeOf(GLEW_GET_FUN(__glewGetMaterialxv)) {
    return GLEW_GET_FUN(__glewGetMaterialxv);
}
// /usr/include/GL/glew.h:20349:9: warning: macro 'glGetTexEnvxv' contains a runtime value, translated to function
pub inline fn glGetTexEnvxv() @TypeOf(GLEW_GET_FUN(__glewGetTexEnvxv)) {
    return GLEW_GET_FUN(__glewGetTexEnvxv);
}
// /usr/include/GL/glew.h:20350:9: warning: macro 'glGetTexParameterxv' contains a runtime value, translated to function
pub inline fn glGetTexParameterxv() @TypeOf(GLEW_GET_FUN(__glewGetTexParameterxv)) {
    return GLEW_GET_FUN(__glewGetTexParameterxv);
}
// /usr/include/GL/glew.h:20351:9: warning: macro 'glPointParameterx' contains a runtime value, translated to function
pub inline fn glPointParameterx() @TypeOf(GLEW_GET_FUN(__glewPointParameterx)) {
    return GLEW_GET_FUN(__glewPointParameterx);
}
// /usr/include/GL/glew.h:20352:9: warning: macro 'glPointParameterxv' contains a runtime value, translated to function
pub inline fn glPointParameterxv() @TypeOf(GLEW_GET_FUN(__glewPointParameterxv)) {
    return GLEW_GET_FUN(__glewPointParameterxv);
}
// /usr/include/GL/glew.h:20353:9: warning: macro 'glPointSizePointerOES' contains a runtime value, translated to function
pub inline fn glPointSizePointerOES() @TypeOf(GLEW_GET_FUN(__glewPointSizePointerOES)) {
    return GLEW_GET_FUN(__glewPointSizePointerOES);
}
// /usr/include/GL/glew.h:20354:9: warning: macro 'glTexParameterxv' contains a runtime value, translated to function
pub inline fn glTexParameterxv() @TypeOf(GLEW_GET_FUN(__glewTexParameterxv)) {
    return GLEW_GET_FUN(__glewTexParameterxv);
}
// /usr/include/GL/glew.h:20356:9: warning: macro 'GLEW_REGAL_ES1_1_compatibility' contains a runtime value, translated to function
pub inline fn GLEW_REGAL_ES1_1_compatibility() @TypeOf(GLEW_GET_VAR(__GLEW_REGAL_ES1_1_compatibility)) {
    return GLEW_GET_VAR(__GLEW_REGAL_ES1_1_compatibility);
}
pub const GL_REGAL_enable = @as(c_int, 1);
pub const GL_ERROR_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9322, .hex);
pub const GL_DEBUG_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9323, .hex);
pub const GL_LOG_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9324, .hex);
pub const GL_EMULATION_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9325, .hex);
pub const GL_DRIVER_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9326, .hex);
pub const GL_MISSING_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9360, .hex);
pub const GL_TRACE_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9361, .hex);
pub const GL_CACHE_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9362, .hex);
pub const GL_CODE_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9363, .hex);
pub const GL_STATISTICS_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9364, .hex);
// /usr/include/GL/glew.h:20376:9: warning: macro 'GLEW_REGAL_enable' contains a runtime value, translated to function
pub inline fn GLEW_REGAL_enable() @TypeOf(GLEW_GET_VAR(__GLEW_REGAL_enable)) {
    return GLEW_GET_VAR(__GLEW_REGAL_enable);
}
pub const GL_REGAL_error_string = @as(c_int, 1);
// /usr/include/GL/glew.h:20387:9: warning: macro 'glErrorStringREGAL' contains a runtime value, translated to function
pub inline fn glErrorStringREGAL() @TypeOf(GLEW_GET_FUN(__glewErrorStringREGAL)) {
    return GLEW_GET_FUN(__glewErrorStringREGAL);
}
// /usr/include/GL/glew.h:20389:9: warning: macro 'GLEW_REGAL_error_string' contains a runtime value, translated to function
pub inline fn GLEW_REGAL_error_string() @TypeOf(GLEW_GET_VAR(__GLEW_REGAL_error_string)) {
    return GLEW_GET_VAR(__GLEW_REGAL_error_string);
}
pub const GL_REGAL_extension_query = @as(c_int, 1);
// /usr/include/GL/glew.h:20401:9: warning: macro 'glGetExtensionREGAL' contains a runtime value, translated to function
pub inline fn glGetExtensionREGAL() @TypeOf(GLEW_GET_FUN(__glewGetExtensionREGAL)) {
    return GLEW_GET_FUN(__glewGetExtensionREGAL);
}
// /usr/include/GL/glew.h:20402:9: warning: macro 'glIsSupportedREGAL' contains a runtime value, translated to function
pub inline fn glIsSupportedREGAL() @TypeOf(GLEW_GET_FUN(__glewIsSupportedREGAL)) {
    return GLEW_GET_FUN(__glewIsSupportedREGAL);
}
// /usr/include/GL/glew.h:20404:9: warning: macro 'GLEW_REGAL_extension_query' contains a runtime value, translated to function
pub inline fn GLEW_REGAL_extension_query() @TypeOf(GLEW_GET_VAR(__GLEW_REGAL_extension_query)) {
    return GLEW_GET_VAR(__GLEW_REGAL_extension_query);
}
pub const GL_REGAL_log = @as(c_int, 1);
pub const GL_LOG_ERROR_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9319, .hex);
pub const GL_LOG_WARNING_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x931A, .hex);
pub const GL_LOG_INFO_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x931B, .hex);
pub const GL_LOG_APP_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x931C, .hex);
pub const GL_LOG_DRIVER_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x931D, .hex);
pub const GL_LOG_INTERNAL_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x931E, .hex);
pub const GL_LOG_DEBUG_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x931F, .hex);
pub const GL_LOG_STATUS_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9320, .hex);
pub const GL_LOG_HTTP_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9321, .hex);
// /usr/include/GL/glew.h:20427:9: warning: macro 'glLogMessageCallbackREGAL' contains a runtime value, translated to function
pub inline fn glLogMessageCallbackREGAL() @TypeOf(GLEW_GET_FUN(__glewLogMessageCallbackREGAL)) {
    return GLEW_GET_FUN(__glewLogMessageCallbackREGAL);
}
// /usr/include/GL/glew.h:20429:9: warning: macro 'GLEW_REGAL_log' contains a runtime value, translated to function
pub inline fn GLEW_REGAL_log() @TypeOf(GLEW_GET_VAR(__GLEW_REGAL_log)) {
    return GLEW_GET_VAR(__GLEW_REGAL_log);
}
pub const GL_REGAL_proc_address = @as(c_int, 1);
// /usr/include/GL/glew.h:20440:9: warning: macro 'glGetProcAddressREGAL' contains a runtime value, translated to function
pub inline fn glGetProcAddressREGAL() @TypeOf(GLEW_GET_FUN(__glewGetProcAddressREGAL)) {
    return GLEW_GET_FUN(__glewGetProcAddressREGAL);
}
// /usr/include/GL/glew.h:20442:9: warning: macro 'GLEW_REGAL_proc_address' contains a runtime value, translated to function
pub inline fn GLEW_REGAL_proc_address() @TypeOf(GLEW_GET_VAR(__GLEW_REGAL_proc_address)) {
    return GLEW_GET_VAR(__GLEW_REGAL_proc_address);
}
pub const GL_REND_screen_coordinates = @as(c_int, 1);
pub const GL_SCREEN_COORDINATES_REND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8490, .hex);
pub const GL_INVERTED_SCREEN_W_REND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8491, .hex);
// /usr/include/GL/glew.h:20454:9: warning: macro 'GLEW_REND_screen_coordinates' contains a runtime value, translated to function
pub inline fn GLEW_REND_screen_coordinates() @TypeOf(GLEW_GET_VAR(__GLEW_REND_screen_coordinates)) {
    return GLEW_GET_VAR(__GLEW_REND_screen_coordinates);
}
pub const GL_S3_s3tc = @as(c_int, 1);
pub const GL_RGB_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A0, .hex);
pub const GL_RGB4_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A1, .hex);
pub const GL_RGBA_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A2, .hex);
pub const GL_RGBA4_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A3, .hex);
pub const GL_RGBA_DXT5_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A4, .hex);
pub const GL_RGBA4_DXT5_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A5, .hex);
// /usr/include/GL/glew.h:20470:9: warning: macro 'GLEW_S3_s3tc' contains a runtime value, translated to function
pub inline fn GLEW_S3_s3tc() @TypeOf(GLEW_GET_VAR(__GLEW_S3_s3tc)) {
    return GLEW_GET_VAR(__GLEW_S3_s3tc);
}
pub const GL_SGIS_clip_band_hint = @as(c_int, 1);
// /usr/include/GL/glew.h:20479:9: warning: macro 'GLEW_SGIS_clip_band_hint' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_clip_band_hint() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_clip_band_hint)) {
    return GLEW_GET_VAR(__GLEW_SGIS_clip_band_hint);
}
pub const GL_SGIS_color_range = @as(c_int, 1);
pub const GL_EXTENDED_RANGE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A5, .hex);
pub const GL_MIN_RED_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A6, .hex);
pub const GL_MAX_RED_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A7, .hex);
pub const GL_MIN_GREEN_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A8, .hex);
pub const GL_MAX_GREEN_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A9, .hex);
pub const GL_MIN_BLUE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AA, .hex);
pub const GL_MAX_BLUE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AB, .hex);
pub const GL_MIN_ALPHA_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AC, .hex);
pub const GL_MAX_ALPHA_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AD, .hex);
// /usr/include/GL/glew.h:20498:9: warning: macro 'GLEW_SGIS_color_range' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_color_range() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_color_range)) {
    return GLEW_GET_VAR(__GLEW_SGIS_color_range);
}
pub const GL_SGIS_detail_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:20510:9: warning: macro 'glDetailTexFuncSGIS' contains a runtime value, translated to function
pub inline fn glDetailTexFuncSGIS() @TypeOf(GLEW_GET_FUN(__glewDetailTexFuncSGIS)) {
    return GLEW_GET_FUN(__glewDetailTexFuncSGIS);
}
// /usr/include/GL/glew.h:20511:9: warning: macro 'glGetDetailTexFuncSGIS' contains a runtime value, translated to function
pub inline fn glGetDetailTexFuncSGIS() @TypeOf(GLEW_GET_FUN(__glewGetDetailTexFuncSGIS)) {
    return GLEW_GET_FUN(__glewGetDetailTexFuncSGIS);
}
// /usr/include/GL/glew.h:20513:9: warning: macro 'GLEW_SGIS_detail_texture' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_detail_texture() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_detail_texture)) {
    return GLEW_GET_VAR(__GLEW_SGIS_detail_texture);
}
pub const GL_SGIS_fog_function = @as(c_int, 1);
// /usr/include/GL/glew.h:20525:9: warning: macro 'glFogFuncSGIS' contains a runtime value, translated to function
pub inline fn glFogFuncSGIS() @TypeOf(GLEW_GET_FUN(__glewFogFuncSGIS)) {
    return GLEW_GET_FUN(__glewFogFuncSGIS);
}
// /usr/include/GL/glew.h:20526:9: warning: macro 'glGetFogFuncSGIS' contains a runtime value, translated to function
pub inline fn glGetFogFuncSGIS() @TypeOf(GLEW_GET_FUN(__glewGetFogFuncSGIS)) {
    return GLEW_GET_FUN(__glewGetFogFuncSGIS);
}
// /usr/include/GL/glew.h:20528:9: warning: macro 'GLEW_SGIS_fog_function' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_fog_function() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_fog_function)) {
    return GLEW_GET_VAR(__GLEW_SGIS_fog_function);
}
pub const GL_SGIS_generate_mipmap = @as(c_int, 1);
pub const GL_GENERATE_MIPMAP_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8191, .hex);
pub const GL_GENERATE_MIPMAP_HINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8192, .hex);
// /usr/include/GL/glew.h:20540:9: warning: macro 'GLEW_SGIS_generate_mipmap' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_generate_mipmap() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_generate_mipmap)) {
    return GLEW_GET_VAR(__GLEW_SGIS_generate_mipmap);
}
pub const GL_SGIS_line_texgen = @as(c_int, 1);
// /usr/include/GL/glew.h:20549:9: warning: macro 'GLEW_SGIS_line_texgen' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_line_texgen() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_line_texgen)) {
    return GLEW_GET_VAR(__GLEW_SGIS_line_texgen);
}
pub const GL_SGIS_multisample = @as(c_int, 1);
pub const GL_MULTISAMPLE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hex);
pub const GL_SAMPLE_ALPHA_TO_MASK_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hex);
pub const GL_SAMPLE_ALPHA_TO_ONE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hex);
pub const GL_SAMPLE_MASK_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hex);
pub const GL_1PASS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A1, .hex);
pub const GL_2PASS_0_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A2, .hex);
pub const GL_2PASS_1_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A3, .hex);
pub const GL_4PASS_0_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A4, .hex);
pub const GL_4PASS_1_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A5, .hex);
pub const GL_4PASS_2_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A6, .hex);
pub const GL_4PASS_3_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A7, .hex);
pub const GL_SAMPLE_BUFFERS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hex);
pub const GL_SAMPLES_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hex);
pub const GL_SAMPLE_MASK_VALUE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hex);
pub const GL_SAMPLE_MASK_INVERT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hex);
pub const GL_SAMPLE_PATTERN_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AC, .hex);
// /usr/include/GL/glew.h:20578:9: warning: macro 'glSampleMaskSGIS' contains a runtime value, translated to function
pub inline fn glSampleMaskSGIS() @TypeOf(GLEW_GET_FUN(__glewSampleMaskSGIS)) {
    return GLEW_GET_FUN(__glewSampleMaskSGIS);
}
// /usr/include/GL/glew.h:20579:9: warning: macro 'glSamplePatternSGIS' contains a runtime value, translated to function
pub inline fn glSamplePatternSGIS() @TypeOf(GLEW_GET_FUN(__glewSamplePatternSGIS)) {
    return GLEW_GET_FUN(__glewSamplePatternSGIS);
}
// /usr/include/GL/glew.h:20581:9: warning: macro 'GLEW_SGIS_multisample' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_multisample() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_multisample)) {
    return GLEW_GET_VAR(__GLEW_SGIS_multisample);
}
pub const GL_SGIS_multitexture = @as(c_int, 1);
pub const GL_SELECTED_TEXTURE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C0, .hex);
pub const GL_SELECTED_TEXTURE_COORD_SET_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C1, .hex);
pub const GL_SELECTED_TEXTURE_TRANSFORM_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C2, .hex);
pub const GL_MAX_TEXTURES_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C3, .hex);
pub const GL_MAX_TEXTURE_COORD_SETS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C4, .hex);
pub const GL_TEXTURE_COORD_SET_INTERLEAVE_FACTOR_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C5, .hex);
pub const GL_TEXTURE_ENV_COORD_SET_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C6, .hex);
pub const GL_TEXTURE0_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C7, .hex);
pub const GL_TEXTURE1_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C8, .hex);
pub const GL_TEXTURE2_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C9, .hex);
pub const GL_TEXTURE3_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83CA, .hex);
// /usr/include/GL/glew.h:20607:9: warning: macro 'glInterleavedTextureCoordSetsSGIS' contains a runtime value, translated to function
pub inline fn glInterleavedTextureCoordSetsSGIS() @TypeOf(GLEW_GET_FUN(__glewInterleavedTextureCoordSetsSGIS)) {
    return GLEW_GET_FUN(__glewInterleavedTextureCoordSetsSGIS);
}
// /usr/include/GL/glew.h:20608:9: warning: macro 'glSelectTextureCoordSetSGIS' contains a runtime value, translated to function
pub inline fn glSelectTextureCoordSetSGIS() @TypeOf(GLEW_GET_FUN(__glewSelectTextureCoordSetSGIS)) {
    return GLEW_GET_FUN(__glewSelectTextureCoordSetSGIS);
}
// /usr/include/GL/glew.h:20609:9: warning: macro 'glSelectTextureSGIS' contains a runtime value, translated to function
pub inline fn glSelectTextureSGIS() @TypeOf(GLEW_GET_FUN(__glewSelectTextureSGIS)) {
    return GLEW_GET_FUN(__glewSelectTextureSGIS);
}
// /usr/include/GL/glew.h:20610:9: warning: macro 'glSelectTextureTransformSGIS' contains a runtime value, translated to function
pub inline fn glSelectTextureTransformSGIS() @TypeOf(GLEW_GET_FUN(__glewSelectTextureTransformSGIS)) {
    return GLEW_GET_FUN(__glewSelectTextureTransformSGIS);
}
// /usr/include/GL/glew.h:20612:9: warning: macro 'GLEW_SGIS_multitexture' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_multitexture() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_multitexture)) {
    return GLEW_GET_VAR(__GLEW_SGIS_multitexture);
}
pub const GL_SGIS_pixel_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:20621:9: warning: macro 'GLEW_SGIS_pixel_texture' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_pixel_texture() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_pixel_texture)) {
    return GLEW_GET_VAR(__GLEW_SGIS_pixel_texture);
}
pub const GL_SGIS_point_line_texgen = @as(c_int, 1);
pub const GL_EYE_DISTANCE_TO_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F0, .hex);
pub const GL_OBJECT_DISTANCE_TO_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F1, .hex);
pub const GL_EYE_DISTANCE_TO_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F2, .hex);
pub const GL_OBJECT_DISTANCE_TO_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F3, .hex);
pub const GL_EYE_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F4, .hex);
pub const GL_OBJECT_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F5, .hex);
pub const GL_EYE_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F6, .hex);
pub const GL_OBJECT_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F7, .hex);
// /usr/include/GL/glew.h:20639:9: warning: macro 'GLEW_SGIS_point_line_texgen' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_point_line_texgen() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_point_line_texgen)) {
    return GLEW_GET_VAR(__GLEW_SGIS_point_line_texgen);
}
pub const GL_SGIS_shared_multisample = @as(c_int, 1);
// /usr/include/GL/glew.h:20650:9: warning: macro 'glMultisampleSubRectPosSGIS' contains a runtime value, translated to function
pub inline fn glMultisampleSubRectPosSGIS() @TypeOf(GLEW_GET_FUN(__glewMultisampleSubRectPosSGIS)) {
    return GLEW_GET_FUN(__glewMultisampleSubRectPosSGIS);
}
// /usr/include/GL/glew.h:20652:9: warning: macro 'GLEW_SGIS_shared_multisample' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_shared_multisample() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_shared_multisample)) {
    return GLEW_GET_VAR(__GLEW_SGIS_shared_multisample);
}
pub const GL_SGIS_sharpen_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:20664:9: warning: macro 'glGetSharpenTexFuncSGIS' contains a runtime value, translated to function
pub inline fn glGetSharpenTexFuncSGIS() @TypeOf(GLEW_GET_FUN(__glewGetSharpenTexFuncSGIS)) {
    return GLEW_GET_FUN(__glewGetSharpenTexFuncSGIS);
}
// /usr/include/GL/glew.h:20665:9: warning: macro 'glSharpenTexFuncSGIS' contains a runtime value, translated to function
pub inline fn glSharpenTexFuncSGIS() @TypeOf(GLEW_GET_FUN(__glewSharpenTexFuncSGIS)) {
    return GLEW_GET_FUN(__glewSharpenTexFuncSGIS);
}
// /usr/include/GL/glew.h:20667:9: warning: macro 'GLEW_SGIS_sharpen_texture' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_sharpen_texture() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_sharpen_texture)) {
    return GLEW_GET_VAR(__GLEW_SGIS_sharpen_texture);
}
pub const GL_SGIS_texture4D = @as(c_int, 1);
// /usr/include/GL/glew.h:20679:9: warning: macro 'glTexImage4DSGIS' contains a runtime value, translated to function
pub inline fn glTexImage4DSGIS() @TypeOf(GLEW_GET_FUN(__glewTexImage4DSGIS)) {
    return GLEW_GET_FUN(__glewTexImage4DSGIS);
}
// /usr/include/GL/glew.h:20680:9: warning: macro 'glTexSubImage4DSGIS' contains a runtime value, translated to function
pub inline fn glTexSubImage4DSGIS() @TypeOf(GLEW_GET_FUN(__glewTexSubImage4DSGIS)) {
    return GLEW_GET_FUN(__glewTexSubImage4DSGIS);
}
// /usr/include/GL/glew.h:20682:9: warning: macro 'GLEW_SGIS_texture4D' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_texture4D() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_texture4D)) {
    return GLEW_GET_VAR(__GLEW_SGIS_texture4D);
}
pub const GL_SGIS_texture_border_clamp = @as(c_int, 1);
pub const GL_CLAMP_TO_BORDER_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hex);
// /usr/include/GL/glew.h:20693:9: warning: macro 'GLEW_SGIS_texture_border_clamp' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_texture_border_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_texture_border_clamp)) {
    return GLEW_GET_VAR(__GLEW_SGIS_texture_border_clamp);
}
pub const GL_SGIS_texture_edge_clamp = @as(c_int, 1);
pub const GL_CLAMP_TO_EDGE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812F, .hex);
// /usr/include/GL/glew.h:20704:9: warning: macro 'GLEW_SGIS_texture_edge_clamp' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_texture_edge_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_texture_edge_clamp)) {
    return GLEW_GET_VAR(__GLEW_SGIS_texture_edge_clamp);
}
pub const GL_SGIS_texture_filter4 = @as(c_int, 1);
// /usr/include/GL/glew.h:20716:9: warning: macro 'glGetTexFilterFuncSGIS' contains a runtime value, translated to function
pub inline fn glGetTexFilterFuncSGIS() @TypeOf(GLEW_GET_FUN(__glewGetTexFilterFuncSGIS)) {
    return GLEW_GET_FUN(__glewGetTexFilterFuncSGIS);
}
// /usr/include/GL/glew.h:20717:9: warning: macro 'glTexFilterFuncSGIS' contains a runtime value, translated to function
pub inline fn glTexFilterFuncSGIS() @TypeOf(GLEW_GET_FUN(__glewTexFilterFuncSGIS)) {
    return GLEW_GET_FUN(__glewTexFilterFuncSGIS);
}
// /usr/include/GL/glew.h:20719:9: warning: macro 'GLEW_SGIS_texture_filter4' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_texture_filter4() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_texture_filter4)) {
    return GLEW_GET_VAR(__GLEW_SGIS_texture_filter4);
}
pub const GL_SGIS_texture_lod = @as(c_int, 1);
pub const GL_TEXTURE_MIN_LOD_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813A, .hex);
pub const GL_TEXTURE_MAX_LOD_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813B, .hex);
pub const GL_TEXTURE_BASE_LEVEL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813C, .hex);
pub const GL_TEXTURE_MAX_LEVEL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hex);
// /usr/include/GL/glew.h:20733:9: warning: macro 'GLEW_SGIS_texture_lod' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_texture_lod() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_texture_lod)) {
    return GLEW_GET_VAR(__GLEW_SGIS_texture_lod);
}
pub const GL_SGIS_texture_select = @as(c_int, 1);
// /usr/include/GL/glew.h:20742:9: warning: macro 'GLEW_SGIS_texture_select' contains a runtime value, translated to function
pub inline fn GLEW_SGIS_texture_select() @TypeOf(GLEW_GET_VAR(__GLEW_SGIS_texture_select)) {
    return GLEW_GET_VAR(__GLEW_SGIS_texture_select);
}
pub const GL_SGIX_async = @as(c_int, 1);
pub const GL_ASYNC_MARKER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8329, .hex);
// /usr/include/GL/glew.h:20760:9: warning: macro 'glAsyncMarkerSGIX' contains a runtime value, translated to function
pub inline fn glAsyncMarkerSGIX() @TypeOf(GLEW_GET_FUN(__glewAsyncMarkerSGIX)) {
    return GLEW_GET_FUN(__glewAsyncMarkerSGIX);
}
// /usr/include/GL/glew.h:20761:9: warning: macro 'glDeleteAsyncMarkersSGIX' contains a runtime value, translated to function
pub inline fn glDeleteAsyncMarkersSGIX() @TypeOf(GLEW_GET_FUN(__glewDeleteAsyncMarkersSGIX)) {
    return GLEW_GET_FUN(__glewDeleteAsyncMarkersSGIX);
}
// /usr/include/GL/glew.h:20762:9: warning: macro 'glFinishAsyncSGIX' contains a runtime value, translated to function
pub inline fn glFinishAsyncSGIX() @TypeOf(GLEW_GET_FUN(__glewFinishAsyncSGIX)) {
    return GLEW_GET_FUN(__glewFinishAsyncSGIX);
}
// /usr/include/GL/glew.h:20763:9: warning: macro 'glGenAsyncMarkersSGIX' contains a runtime value, translated to function
pub inline fn glGenAsyncMarkersSGIX() @TypeOf(GLEW_GET_FUN(__glewGenAsyncMarkersSGIX)) {
    return GLEW_GET_FUN(__glewGenAsyncMarkersSGIX);
}
// /usr/include/GL/glew.h:20764:9: warning: macro 'glIsAsyncMarkerSGIX' contains a runtime value, translated to function
pub inline fn glIsAsyncMarkerSGIX() @TypeOf(GLEW_GET_FUN(__glewIsAsyncMarkerSGIX)) {
    return GLEW_GET_FUN(__glewIsAsyncMarkerSGIX);
}
// /usr/include/GL/glew.h:20765:9: warning: macro 'glPollAsyncSGIX' contains a runtime value, translated to function
pub inline fn glPollAsyncSGIX() @TypeOf(GLEW_GET_FUN(__glewPollAsyncSGIX)) {
    return GLEW_GET_FUN(__glewPollAsyncSGIX);
}
// /usr/include/GL/glew.h:20767:9: warning: macro 'GLEW_SGIX_async' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_async() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_async)) {
    return GLEW_GET_VAR(__GLEW_SGIX_async);
}
pub const GL_SGIX_async_histogram = @as(c_int, 1);
pub const GL_ASYNC_HISTOGRAM_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832C, .hex);
pub const GL_MAX_ASYNC_HISTOGRAM_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832D, .hex);
// /usr/include/GL/glew.h:20779:9: warning: macro 'GLEW_SGIX_async_histogram' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_async_histogram() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_async_histogram)) {
    return GLEW_GET_VAR(__GLEW_SGIX_async_histogram);
}
pub const GL_SGIX_async_pixel = @as(c_int, 1);
pub const GL_ASYNC_TEX_IMAGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835C, .hex);
pub const GL_ASYNC_DRAW_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835D, .hex);
pub const GL_ASYNC_READ_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835E, .hex);
pub const GL_MAX_ASYNC_TEX_IMAGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835F, .hex);
pub const GL_MAX_ASYNC_DRAW_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8360, .hex);
pub const GL_MAX_ASYNC_READ_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8361, .hex);
// /usr/include/GL/glew.h:20795:9: warning: macro 'GLEW_SGIX_async_pixel' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_async_pixel() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_async_pixel)) {
    return GLEW_GET_VAR(__GLEW_SGIX_async_pixel);
}
pub const GL_SGIX_bali_g_instruments = @as(c_int, 1);
pub const GL_BALI_NUM_TRIS_CULLED_INSTRUMENT = @as(c_int, 0x6080);
pub const GL_BALI_NUM_PRIMS_CLIPPED_INSTRUMENT = @as(c_int, 0x6081);
pub const GL_BALI_NUM_PRIMS_REJECT_INSTRUMENT = @as(c_int, 0x6082);
pub const GL_BALI_NUM_PRIMS_CLIP_RESULT_INSTRUMENT = @as(c_int, 0x6083);
// /usr/include/GL/glew.h:20809:9: warning: macro 'GLEW_SGIX_bali_g_instruments' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_bali_g_instruments() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_bali_g_instruments)) {
    return GLEW_GET_VAR(__GLEW_SGIX_bali_g_instruments);
}
pub const GL_SGIX_bali_r_instruments = @as(c_int, 1);
pub const GL_BALI_FRAGMENTS_GENERATED_INSTRUMENT = @as(c_int, 0x6090);
pub const GL_BALI_DEPTH_PASS_INSTRUMENT = @as(c_int, 0x6091);
pub const GL_BALI_R_CHIP_COUNT = @as(c_int, 0x6092);
// /usr/include/GL/glew.h:20822:9: warning: macro 'GLEW_SGIX_bali_r_instruments' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_bali_r_instruments() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_bali_r_instruments)) {
    return GLEW_GET_VAR(__GLEW_SGIX_bali_r_instruments);
}
pub const GL_SGIX_bali_timer_instruments = @as(c_int, 1);
// /usr/include/GL/glew.h:20831:9: warning: macro 'GLEW_SGIX_bali_timer_instruments' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_bali_timer_instruments() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_bali_timer_instruments)) {
    return GLEW_GET_VAR(__GLEW_SGIX_bali_timer_instruments);
}
pub const GL_SGIX_blend_alpha_minmax = @as(c_int, 1);
pub const GL_ALPHA_MIN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8320, .hex);
pub const GL_ALPHA_MAX_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8321, .hex);
// /usr/include/GL/glew.h:20843:9: warning: macro 'GLEW_SGIX_blend_alpha_minmax' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_blend_alpha_minmax() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_blend_alpha_minmax)) {
    return GLEW_GET_VAR(__GLEW_SGIX_blend_alpha_minmax);
}
pub const GL_SGIX_blend_cadd = @as(c_int, 1);
pub const GL_FUNC_COMPLEX_ADD_EXT = @as(c_int, 0x601C);
// /usr/include/GL/glew.h:20854:9: warning: macro 'GLEW_SGIX_blend_cadd' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_blend_cadd() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_blend_cadd)) {
    return GLEW_GET_VAR(__GLEW_SGIX_blend_cadd);
}
pub const GL_SGIX_blend_cmultiply = @as(c_int, 1);
pub const GL_FUNC_COMPLEX_MULTIPLY_EXT = @as(c_int, 0x601B);
// /usr/include/GL/glew.h:20865:9: warning: macro 'GLEW_SGIX_blend_cmultiply' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_blend_cmultiply() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_blend_cmultiply)) {
    return GLEW_GET_VAR(__GLEW_SGIX_blend_cmultiply);
}
pub const GL_SGIX_calligraphic_fragment = @as(c_int, 1);
// /usr/include/GL/glew.h:20874:9: warning: macro 'GLEW_SGIX_calligraphic_fragment' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_calligraphic_fragment() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_calligraphic_fragment)) {
    return GLEW_GET_VAR(__GLEW_SGIX_calligraphic_fragment);
}
pub const GL_SGIX_clipmap = @as(c_int, 1);
// /usr/include/GL/glew.h:20883:9: warning: macro 'GLEW_SGIX_clipmap' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_clipmap() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_clipmap)) {
    return GLEW_GET_VAR(__GLEW_SGIX_clipmap);
}
pub const GL_SGIX_color_matrix_accuracy = @as(c_int, 1);
pub const GL_COLOR_MATRIX_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8317, .hex);
// /usr/include/GL/glew.h:20894:9: warning: macro 'GLEW_SGIX_color_matrix_accuracy' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_color_matrix_accuracy() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_color_matrix_accuracy)) {
    return GLEW_GET_VAR(__GLEW_SGIX_color_matrix_accuracy);
}
pub const GL_SGIX_color_table_index_mode = @as(c_int, 1);
// /usr/include/GL/glew.h:20903:9: warning: macro 'GLEW_SGIX_color_table_index_mode' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_color_table_index_mode() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_color_table_index_mode)) {
    return GLEW_GET_VAR(__GLEW_SGIX_color_table_index_mode);
}
pub const GL_SGIX_complex_polar = @as(c_int, 1);
// /usr/include/GL/glew.h:20912:9: warning: macro 'GLEW_SGIX_complex_polar' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_complex_polar() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_complex_polar)) {
    return GLEW_GET_VAR(__GLEW_SGIX_complex_polar);
}
pub const GL_SGIX_convolution_accuracy = @as(c_int, 1);
pub const GL_CONVOLUTION_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8316, .hex);
// /usr/include/GL/glew.h:20923:9: warning: macro 'GLEW_SGIX_convolution_accuracy' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_convolution_accuracy() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_convolution_accuracy)) {
    return GLEW_GET_VAR(__GLEW_SGIX_convolution_accuracy);
}
pub const GL_SGIX_cube_map = @as(c_int, 1);
pub const GL_ENV_MAP_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8340, .hex);
pub const GL_CUBE_MAP_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8341, .hex);
pub const GL_CUBE_MAP_ZP_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8342, .hex);
pub const GL_CUBE_MAP_ZN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8343, .hex);
pub const GL_CUBE_MAP_XN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8344, .hex);
pub const GL_CUBE_MAP_XP_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8345, .hex);
pub const GL_CUBE_MAP_YN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8346, .hex);
pub const GL_CUBE_MAP_YP_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8347, .hex);
pub const GL_CUBE_MAP_BINDING_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8348, .hex);
// /usr/include/GL/glew.h:20942:9: warning: macro 'GLEW_SGIX_cube_map' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_cube_map() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_cube_map)) {
    return GLEW_GET_VAR(__GLEW_SGIX_cube_map);
}
pub const GL_SGIX_cylinder_texgen = @as(c_int, 1);
// /usr/include/GL/glew.h:20951:9: warning: macro 'GLEW_SGIX_cylinder_texgen' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_cylinder_texgen() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_cylinder_texgen)) {
    return GLEW_GET_VAR(__GLEW_SGIX_cylinder_texgen);
}
pub const GL_SGIX_datapipe = @as(c_int, 1);
pub const GL_GEOMETRY_BIT = @as(c_int, 0x1);
pub const GL_IMAGE_BIT = @as(c_int, 0x2);
// /usr/include/GL/glew.h:20966:9: warning: macro 'glAddressSpace' contains a runtime value, translated to function
pub inline fn glAddressSpace() @TypeOf(GLEW_GET_FUN(__glewAddressSpace)) {
    return GLEW_GET_FUN(__glewAddressSpace);
}
// /usr/include/GL/glew.h:20967:9: warning: macro 'glDataPipe' contains a runtime value, translated to function
pub inline fn glDataPipe() @TypeOf(GLEW_GET_FUN(__glewDataPipe)) {
    return GLEW_GET_FUN(__glewDataPipe);
}
// /usr/include/GL/glew.h:20969:9: warning: macro 'GLEW_SGIX_datapipe' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_datapipe() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_datapipe)) {
    return GLEW_GET_VAR(__GLEW_SGIX_datapipe);
}
pub const GL_SGIX_decimation = @as(c_int, 1);
// /usr/include/GL/glew.h:20978:9: warning: macro 'GLEW_SGIX_decimation' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_decimation() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_decimation)) {
    return GLEW_GET_VAR(__GLEW_SGIX_decimation);
}
pub const GL_SGIX_depth_pass_instrument = @as(c_int, 1);
pub const GL_DEPTH_PASS_INSTRUMENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8310, .hex);
pub const GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8311, .hex);
pub const GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8312, .hex);
// /usr/include/GL/glew.h:20991:9: warning: macro 'GLEW_SGIX_depth_pass_instrument' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_depth_pass_instrument() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_depth_pass_instrument)) {
    return GLEW_GET_VAR(__GLEW_SGIX_depth_pass_instrument);
}
pub const GL_SGIX_depth_texture = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT16_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hex);
pub const GL_DEPTH_COMPONENT24_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hex);
pub const GL_DEPTH_COMPONENT32_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hex);
// /usr/include/GL/glew.h:21004:9: warning: macro 'GLEW_SGIX_depth_texture' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_depth_texture() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_depth_texture)) {
    return GLEW_GET_VAR(__GLEW_SGIX_depth_texture);
}
pub const GL_SGIX_dvc = @as(c_int, 1);
// /usr/include/GL/glew.h:21013:9: warning: macro 'GLEW_SGIX_dvc' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_dvc() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_dvc)) {
    return GLEW_GET_VAR(__GLEW_SGIX_dvc);
}
pub const GL_SGIX_flush_raster = @as(c_int, 1);
// /usr/include/GL/glew.h:21024:9: warning: macro 'glFlushRasterSGIX' contains a runtime value, translated to function
pub inline fn glFlushRasterSGIX() @TypeOf(GLEW_GET_FUN(__glewFlushRasterSGIX)) {
    return GLEW_GET_FUN(__glewFlushRasterSGIX);
}
// /usr/include/GL/glew.h:21026:9: warning: macro 'GLEW_SGIX_flush_raster' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_flush_raster() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_flush_raster)) {
    return GLEW_GET_VAR(__GLEW_SGIX_flush_raster);
}
pub const GL_SGIX_fog_blend = @as(c_int, 1);
pub const GL_FOG_BLEND_ALPHA_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FE, .hex);
pub const GL_FOG_BLEND_COLOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FF, .hex);
// /usr/include/GL/glew.h:21038:9: warning: macro 'GLEW_SGIX_fog_blend' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_fog_blend() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_fog_blend)) {
    return GLEW_GET_VAR(__GLEW_SGIX_fog_blend);
}
pub const GL_SGIX_fog_factor_to_alpha = @as(c_int, 1);
// /usr/include/GL/glew.h:21047:9: warning: macro 'GLEW_SGIX_fog_factor_to_alpha' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_fog_factor_to_alpha() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_fog_factor_to_alpha)) {
    return GLEW_GET_VAR(__GLEW_SGIX_fog_factor_to_alpha);
}
pub const GL_SGIX_fog_layers = @as(c_int, 1);
pub const GL_FOG_TYPE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8323, .hex);
pub const GL_UNIFORM_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8324, .hex);
pub const GL_LAYERED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8325, .hex);
pub const GL_FOG_GROUND_PLANE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8326, .hex);
pub const GL_FOG_LAYERS_POINTS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8327, .hex);
pub const GL_MAX_FOG_LAYERS_POINTS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8328, .hex);
// /usr/include/GL/glew.h:21066:9: warning: macro 'glFogLayersSGIX' contains a runtime value, translated to function
pub inline fn glFogLayersSGIX() @TypeOf(GLEW_GET_FUN(__glewFogLayersSGIX)) {
    return GLEW_GET_FUN(__glewFogLayersSGIX);
}
// /usr/include/GL/glew.h:21067:9: warning: macro 'glGetFogLayersSGIX' contains a runtime value, translated to function
pub inline fn glGetFogLayersSGIX() @TypeOf(GLEW_GET_FUN(__glewGetFogLayersSGIX)) {
    return GLEW_GET_FUN(__glewGetFogLayersSGIX);
}
// /usr/include/GL/glew.h:21069:9: warning: macro 'GLEW_SGIX_fog_layers' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_fog_layers() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_fog_layers)) {
    return GLEW_GET_VAR(__GLEW_SGIX_fog_layers);
}
pub const GL_SGIX_fog_offset = @as(c_int, 1);
pub const GL_FOG_OFFSET_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8198, .hex);
pub const GL_FOG_OFFSET_VALUE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8199, .hex);
// /usr/include/GL/glew.h:21081:9: warning: macro 'GLEW_SGIX_fog_offset' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_fog_offset() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_fog_offset)) {
    return GLEW_GET_VAR(__GLEW_SGIX_fog_offset);
}
pub const GL_SGIX_fog_patchy = @as(c_int, 1);
// /usr/include/GL/glew.h:21090:9: warning: macro 'GLEW_SGIX_fog_patchy' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_fog_patchy() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_fog_patchy)) {
    return GLEW_GET_VAR(__GLEW_SGIX_fog_patchy);
}
pub const GL_SGIX_fog_scale = @as(c_int, 1);
pub const GL_FOG_SCALE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FC, .hex);
pub const GL_FOG_SCALE_VALUE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FD, .hex);
// /usr/include/GL/glew.h:21102:9: warning: macro 'GLEW_SGIX_fog_scale' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_fog_scale() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_fog_scale)) {
    return GLEW_GET_VAR(__GLEW_SGIX_fog_scale);
}
pub const GL_SGIX_fog_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:21113:9: warning: macro 'glTextureFogSGIX' contains a runtime value, translated to function
pub inline fn glTextureFogSGIX() @TypeOf(GLEW_GET_FUN(__glewTextureFogSGIX)) {
    return GLEW_GET_FUN(__glewTextureFogSGIX);
}
// /usr/include/GL/glew.h:21115:9: warning: macro 'GLEW_SGIX_fog_texture' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_fog_texture() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_fog_texture)) {
    return GLEW_GET_VAR(__GLEW_SGIX_fog_texture);
}
pub const GL_SGIX_fragment_lighting_space = @as(c_int, 1);
pub const GL_EYE_SPACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8436, .hex);
pub const GL_TANGENT_SPACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8437, .hex);
pub const GL_OBJECT_SPACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8438, .hex);
pub const GL_FRAGMENT_LIGHT_SPACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843D, .hex);
// /usr/include/GL/glew.h:21129:9: warning: macro 'GLEW_SGIX_fragment_lighting_space' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_fragment_lighting_space() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_fragment_lighting_space)) {
    return GLEW_GET_VAR(__GLEW_SGIX_fragment_lighting_space);
}
pub const GL_SGIX_fragment_specular_lighting = @as(c_int, 1);
// /usr/include/GL/glew.h:21156:9: warning: macro 'glFragmentColorMaterialSGIX' contains a runtime value, translated to function
pub inline fn glFragmentColorMaterialSGIX() @TypeOf(GLEW_GET_FUN(__glewFragmentColorMaterialSGIX)) {
    return GLEW_GET_FUN(__glewFragmentColorMaterialSGIX);
}
// /usr/include/GL/glew.h:21157:9: warning: macro 'glFragmentLightModelfSGIX' contains a runtime value, translated to function
pub inline fn glFragmentLightModelfSGIX() @TypeOf(GLEW_GET_FUN(__glewFragmentLightModelfSGIX)) {
    return GLEW_GET_FUN(__glewFragmentLightModelfSGIX);
}
// /usr/include/GL/glew.h:21158:9: warning: macro 'glFragmentLightModelfvSGIX' contains a runtime value, translated to function
pub inline fn glFragmentLightModelfvSGIX() @TypeOf(GLEW_GET_FUN(__glewFragmentLightModelfvSGIX)) {
    return GLEW_GET_FUN(__glewFragmentLightModelfvSGIX);
}
// /usr/include/GL/glew.h:21159:9: warning: macro 'glFragmentLightModeliSGIX' contains a runtime value, translated to function
pub inline fn glFragmentLightModeliSGIX() @TypeOf(GLEW_GET_FUN(__glewFragmentLightModeliSGIX)) {
    return GLEW_GET_FUN(__glewFragmentLightModeliSGIX);
}
// /usr/include/GL/glew.h:21160:9: warning: macro 'glFragmentLightModelivSGIX' contains a runtime value, translated to function
pub inline fn glFragmentLightModelivSGIX() @TypeOf(GLEW_GET_FUN(__glewFragmentLightModelivSGIX)) {
    return GLEW_GET_FUN(__glewFragmentLightModelivSGIX);
}
// /usr/include/GL/glew.h:21161:9: warning: macro 'glFragmentLightfSGIX' contains a runtime value, translated to function
pub inline fn glFragmentLightfSGIX() @TypeOf(GLEW_GET_FUN(__glewFragmentLightfSGIX)) {
    return GLEW_GET_FUN(__glewFragmentLightfSGIX);
}
// /usr/include/GL/glew.h:21162:9: warning: macro 'glFragmentLightfvSGIX' contains a runtime value, translated to function
pub inline fn glFragmentLightfvSGIX() @TypeOf(GLEW_GET_FUN(__glewFragmentLightfvSGIX)) {
    return GLEW_GET_FUN(__glewFragmentLightfvSGIX);
}
// /usr/include/GL/glew.h:21163:9: warning: macro 'glFragmentLightiSGIX' contains a runtime value, translated to function
pub inline fn glFragmentLightiSGIX() @TypeOf(GLEW_GET_FUN(__glewFragmentLightiSGIX)) {
    return GLEW_GET_FUN(__glewFragmentLightiSGIX);
}
// /usr/include/GL/glew.h:21164:9: warning: macro 'glFragmentLightivSGIX' contains a runtime value, translated to function
pub inline fn glFragmentLightivSGIX() @TypeOf(GLEW_GET_FUN(__glewFragmentLightivSGIX)) {
    return GLEW_GET_FUN(__glewFragmentLightivSGIX);
}
// /usr/include/GL/glew.h:21165:9: warning: macro 'glFragmentMaterialfSGIX' contains a runtime value, translated to function
pub inline fn glFragmentMaterialfSGIX() @TypeOf(GLEW_GET_FUN(__glewFragmentMaterialfSGIX)) {
    return GLEW_GET_FUN(__glewFragmentMaterialfSGIX);
}
// /usr/include/GL/glew.h:21166:9: warning: macro 'glFragmentMaterialfvSGIX' contains a runtime value, translated to function
pub inline fn glFragmentMaterialfvSGIX() @TypeOf(GLEW_GET_FUN(__glewFragmentMaterialfvSGIX)) {
    return GLEW_GET_FUN(__glewFragmentMaterialfvSGIX);
}
// /usr/include/GL/glew.h:21167:9: warning: macro 'glFragmentMaterialiSGIX' contains a runtime value, translated to function
pub inline fn glFragmentMaterialiSGIX() @TypeOf(GLEW_GET_FUN(__glewFragmentMaterialiSGIX)) {
    return GLEW_GET_FUN(__glewFragmentMaterialiSGIX);
}
// /usr/include/GL/glew.h:21168:9: warning: macro 'glFragmentMaterialivSGIX' contains a runtime value, translated to function
pub inline fn glFragmentMaterialivSGIX() @TypeOf(GLEW_GET_FUN(__glewFragmentMaterialivSGIX)) {
    return GLEW_GET_FUN(__glewFragmentMaterialivSGIX);
}
// /usr/include/GL/glew.h:21169:9: warning: macro 'glGetFragmentLightfvSGIX' contains a runtime value, translated to function
pub inline fn glGetFragmentLightfvSGIX() @TypeOf(GLEW_GET_FUN(__glewGetFragmentLightfvSGIX)) {
    return GLEW_GET_FUN(__glewGetFragmentLightfvSGIX);
}
// /usr/include/GL/glew.h:21170:9: warning: macro 'glGetFragmentLightivSGIX' contains a runtime value, translated to function
pub inline fn glGetFragmentLightivSGIX() @TypeOf(GLEW_GET_FUN(__glewGetFragmentLightivSGIX)) {
    return GLEW_GET_FUN(__glewGetFragmentLightivSGIX);
}
// /usr/include/GL/glew.h:21171:9: warning: macro 'glGetFragmentMaterialfvSGIX' contains a runtime value, translated to function
pub inline fn glGetFragmentMaterialfvSGIX() @TypeOf(GLEW_GET_FUN(__glewGetFragmentMaterialfvSGIX)) {
    return GLEW_GET_FUN(__glewGetFragmentMaterialfvSGIX);
}
// /usr/include/GL/glew.h:21172:9: warning: macro 'glGetFragmentMaterialivSGIX' contains a runtime value, translated to function
pub inline fn glGetFragmentMaterialivSGIX() @TypeOf(GLEW_GET_FUN(__glewGetFragmentMaterialivSGIX)) {
    return GLEW_GET_FUN(__glewGetFragmentMaterialivSGIX);
}
// /usr/include/GL/glew.h:21174:9: warning: macro 'GLEW_SGIX_fragment_specular_lighting' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_fragment_specular_lighting() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_fragment_specular_lighting)) {
    return GLEW_GET_VAR(__GLEW_SGIX_fragment_specular_lighting);
}
pub const GL_SGIX_fragments_instrument = @as(c_int, 1);
pub const GL_FRAGMENTS_INSTRUMENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8313, .hex);
pub const GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8314, .hex);
pub const GL_FRAGMENTS_INSTRUMENT_MAX_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8315, .hex);
// /usr/include/GL/glew.h:21187:9: warning: macro 'GLEW_SGIX_fragments_instrument' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_fragments_instrument() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_fragments_instrument)) {
    return GLEW_GET_VAR(__GLEW_SGIX_fragments_instrument);
}
pub const GL_SGIX_framezoom = @as(c_int, 1);
// /usr/include/GL/glew.h:21198:9: warning: macro 'glFrameZoomSGIX' contains a runtime value, translated to function
pub inline fn glFrameZoomSGIX() @TypeOf(GLEW_GET_FUN(__glewFrameZoomSGIX)) {
    return GLEW_GET_FUN(__glewFrameZoomSGIX);
}
// /usr/include/GL/glew.h:21200:9: warning: macro 'GLEW_SGIX_framezoom' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_framezoom() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_framezoom)) {
    return GLEW_GET_VAR(__GLEW_SGIX_framezoom);
}
pub const GL_SGIX_icc_texture = @as(c_int, 1);
pub const GL_RGB_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8460, .hex);
pub const GL_RGBA_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8461, .hex);
pub const GL_ALPHA_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8462, .hex);
pub const GL_LUMINANCE_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8463, .hex);
pub const GL_INTENSITY_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8464, .hex);
pub const GL_LUMINANCE_ALPHA_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8465, .hex);
pub const GL_R5_G6_B5_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8466, .hex);
pub const GL_R5_G6_B5_A8_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8467, .hex);
pub const GL_ALPHA16_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8468, .hex);
pub const GL_LUMINANCE16_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8469, .hex);
pub const GL_INTENSITY16_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846A, .hex);
pub const GL_LUMINANCE16_ALPHA8_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846B, .hex);
// /usr/include/GL/glew.h:21222:9: warning: macro 'GLEW_SGIX_icc_texture' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_icc_texture() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_icc_texture)) {
    return GLEW_GET_VAR(__GLEW_SGIX_icc_texture);
}
pub const GL_SGIX_igloo_interface = @as(c_int, 1);
pub const GL_IGLOO_FULLSCREEN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819E, .hex);
pub const GL_IGLOO_VIEWPORT_OFFSET_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819F, .hex);
pub const GL_IGLOO_SWAPTMESH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A0, .hex);
pub const GL_IGLOO_COLORNORMAL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A1, .hex);
pub const GL_IGLOO_IRISGL_MODE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A2, .hex);
pub const GL_IGLOO_LMC_COLOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A3, .hex);
pub const GL_IGLOO_TMESHMODE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A4, .hex);
pub const GL_LIGHT31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xBEAD, .hex);
// /usr/include/GL/glew.h:21242:9: warning: macro 'glIglooInterfaceSGIX' contains a runtime value, translated to function
pub inline fn glIglooInterfaceSGIX() @TypeOf(GLEW_GET_FUN(__glewIglooInterfaceSGIX)) {
    return GLEW_GET_FUN(__glewIglooInterfaceSGIX);
}
// /usr/include/GL/glew.h:21244:9: warning: macro 'GLEW_SGIX_igloo_interface' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_igloo_interface() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_igloo_interface)) {
    return GLEW_GET_VAR(__GLEW_SGIX_igloo_interface);
}
pub const GL_SGIX_image_compression = @as(c_int, 1);
// /usr/include/GL/glew.h:21253:9: warning: macro 'GLEW_SGIX_image_compression' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_image_compression() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_image_compression)) {
    return GLEW_GET_VAR(__GLEW_SGIX_image_compression);
}
pub const GL_SGIX_impact_pixel_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:21262:9: warning: macro 'GLEW_SGIX_impact_pixel_texture' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_impact_pixel_texture() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_impact_pixel_texture)) {
    return GLEW_GET_VAR(__GLEW_SGIX_impact_pixel_texture);
}
pub const GL_SGIX_instrument_error = @as(c_int, 1);
// /usr/include/GL/glew.h:21271:9: warning: macro 'GLEW_SGIX_instrument_error' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_instrument_error() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_instrument_error)) {
    return GLEW_GET_VAR(__GLEW_SGIX_instrument_error);
}
pub const GL_SGIX_interlace = @as(c_int, 1);
pub const GL_INTERLACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8094, .hex);
// /usr/include/GL/glew.h:21282:9: warning: macro 'GLEW_SGIX_interlace' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_interlace() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_interlace)) {
    return GLEW_GET_VAR(__GLEW_SGIX_interlace);
}
pub const GL_SGIX_ir_instrument1 = @as(c_int, 1);
// /usr/include/GL/glew.h:21291:9: warning: macro 'GLEW_SGIX_ir_instrument1' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_ir_instrument1() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_ir_instrument1)) {
    return GLEW_GET_VAR(__GLEW_SGIX_ir_instrument1);
}
pub const GL_SGIX_line_quality_hint = @as(c_int, 1);
pub const GL_LINE_QUALITY_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835B, .hex);
// /usr/include/GL/glew.h:21302:9: warning: macro 'GLEW_SGIX_line_quality_hint' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_line_quality_hint() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_line_quality_hint)) {
    return GLEW_GET_VAR(__GLEW_SGIX_line_quality_hint);
}
pub const GL_SGIX_list_priority = @as(c_int, 1);
// /usr/include/GL/glew.h:21311:9: warning: macro 'GLEW_SGIX_list_priority' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_list_priority() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_list_priority)) {
    return GLEW_GET_VAR(__GLEW_SGIX_list_priority);
}
pub const GL_SGIX_mpeg1 = @as(c_int, 1);
// /usr/include/GL/glew.h:21332:9: warning: macro 'glAllocMPEGPredictorsSGIX' contains a runtime value, translated to function
pub inline fn glAllocMPEGPredictorsSGIX() @TypeOf(GLEW_GET_FUN(__glewAllocMPEGPredictorsSGIX)) {
    return GLEW_GET_FUN(__glewAllocMPEGPredictorsSGIX);
}
// /usr/include/GL/glew.h:21333:9: warning: macro 'glDeleteMPEGPredictorsSGIX' contains a runtime value, translated to function
pub inline fn glDeleteMPEGPredictorsSGIX() @TypeOf(GLEW_GET_FUN(__glewDeleteMPEGPredictorsSGIX)) {
    return GLEW_GET_FUN(__glewDeleteMPEGPredictorsSGIX);
}
// /usr/include/GL/glew.h:21334:9: warning: macro 'glGenMPEGPredictorsSGIX' contains a runtime value, translated to function
pub inline fn glGenMPEGPredictorsSGIX() @TypeOf(GLEW_GET_FUN(__glewGenMPEGPredictorsSGIX)) {
    return GLEW_GET_FUN(__glewGenMPEGPredictorsSGIX);
}
// /usr/include/GL/glew.h:21335:9: warning: macro 'glGetMPEGParameterfvSGIX' contains a runtime value, translated to function
pub inline fn glGetMPEGParameterfvSGIX() @TypeOf(GLEW_GET_FUN(__glewGetMPEGParameterfvSGIX)) {
    return GLEW_GET_FUN(__glewGetMPEGParameterfvSGIX);
}
// /usr/include/GL/glew.h:21336:9: warning: macro 'glGetMPEGParameterivSGIX' contains a runtime value, translated to function
pub inline fn glGetMPEGParameterivSGIX() @TypeOf(GLEW_GET_FUN(__glewGetMPEGParameterivSGIX)) {
    return GLEW_GET_FUN(__glewGetMPEGParameterivSGIX);
}
// /usr/include/GL/glew.h:21337:9: warning: macro 'glGetMPEGPredictorSGIX' contains a runtime value, translated to function
pub inline fn glGetMPEGPredictorSGIX() @TypeOf(GLEW_GET_FUN(__glewGetMPEGPredictorSGIX)) {
    return GLEW_GET_FUN(__glewGetMPEGPredictorSGIX);
}
// /usr/include/GL/glew.h:21338:9: warning: macro 'glGetMPEGQuantTableubv' contains a runtime value, translated to function
pub inline fn glGetMPEGQuantTableubv() @TypeOf(GLEW_GET_FUN(__glewGetMPEGQuantTableubv)) {
    return GLEW_GET_FUN(__glewGetMPEGQuantTableubv);
}
// /usr/include/GL/glew.h:21339:9: warning: macro 'glIsMPEGPredictorSGIX' contains a runtime value, translated to function
pub inline fn glIsMPEGPredictorSGIX() @TypeOf(GLEW_GET_FUN(__glewIsMPEGPredictorSGIX)) {
    return GLEW_GET_FUN(__glewIsMPEGPredictorSGIX);
}
// /usr/include/GL/glew.h:21340:9: warning: macro 'glMPEGPredictorSGIX' contains a runtime value, translated to function
pub inline fn glMPEGPredictorSGIX() @TypeOf(GLEW_GET_FUN(__glewMPEGPredictorSGIX)) {
    return GLEW_GET_FUN(__glewMPEGPredictorSGIX);
}
// /usr/include/GL/glew.h:21341:9: warning: macro 'glMPEGQuantTableubv' contains a runtime value, translated to function
pub inline fn glMPEGQuantTableubv() @TypeOf(GLEW_GET_FUN(__glewMPEGQuantTableubv)) {
    return GLEW_GET_FUN(__glewMPEGQuantTableubv);
}
// /usr/include/GL/glew.h:21342:9: warning: macro 'glSwapMPEGPredictorsSGIX' contains a runtime value, translated to function
pub inline fn glSwapMPEGPredictorsSGIX() @TypeOf(GLEW_GET_FUN(__glewSwapMPEGPredictorsSGIX)) {
    return GLEW_GET_FUN(__glewSwapMPEGPredictorsSGIX);
}
// /usr/include/GL/glew.h:21344:9: warning: macro 'GLEW_SGIX_mpeg1' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_mpeg1() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_mpeg1)) {
    return GLEW_GET_VAR(__GLEW_SGIX_mpeg1);
}
pub const GL_SGIX_mpeg2 = @as(c_int, 1);
// /usr/include/GL/glew.h:21353:9: warning: macro 'GLEW_SGIX_mpeg2' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_mpeg2() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_mpeg2)) {
    return GLEW_GET_VAR(__GLEW_SGIX_mpeg2);
}
pub const GL_SGIX_nonlinear_lighting_pervertex = @as(c_int, 1);
// /usr/include/GL/glew.h:21367:9: warning: macro 'glGetNonlinLightfvSGIX' contains a runtime value, translated to function
pub inline fn glGetNonlinLightfvSGIX() @TypeOf(GLEW_GET_FUN(__glewGetNonlinLightfvSGIX)) {
    return GLEW_GET_FUN(__glewGetNonlinLightfvSGIX);
}
// /usr/include/GL/glew.h:21368:9: warning: macro 'glGetNonlinMaterialfvSGIX' contains a runtime value, translated to function
pub inline fn glGetNonlinMaterialfvSGIX() @TypeOf(GLEW_GET_FUN(__glewGetNonlinMaterialfvSGIX)) {
    return GLEW_GET_FUN(__glewGetNonlinMaterialfvSGIX);
}
// /usr/include/GL/glew.h:21369:9: warning: macro 'glNonlinLightfvSGIX' contains a runtime value, translated to function
pub inline fn glNonlinLightfvSGIX() @TypeOf(GLEW_GET_FUN(__glewNonlinLightfvSGIX)) {
    return GLEW_GET_FUN(__glewNonlinLightfvSGIX);
}
// /usr/include/GL/glew.h:21370:9: warning: macro 'glNonlinMaterialfvSGIX' contains a runtime value, translated to function
pub inline fn glNonlinMaterialfvSGIX() @TypeOf(GLEW_GET_FUN(__glewNonlinMaterialfvSGIX)) {
    return GLEW_GET_FUN(__glewNonlinMaterialfvSGIX);
}
// /usr/include/GL/glew.h:21372:9: warning: macro 'GLEW_SGIX_nonlinear_lighting_pervertex' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_nonlinear_lighting_pervertex() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_nonlinear_lighting_pervertex)) {
    return GLEW_GET_VAR(__GLEW_SGIX_nonlinear_lighting_pervertex);
}
pub const GL_SGIX_nurbs_eval = @as(c_int, 1);
pub const GL_MAP1_VERTEX_3_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81CB, .hex);
pub const GL_MAP1_VERTEX_4_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81CC, .hex);
pub const GL_MAP1_INDEX_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81CD, .hex);
pub const GL_MAP1_COLOR_4_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81CE, .hex);
pub const GL_MAP1_NORMAL_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81CF, .hex);
pub const GL_MAP1_TEXTURE_COORD_1_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E0, .hex);
pub const GL_MAP1_TEXTURE_COORD_2_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E1, .hex);
pub const GL_MAP1_TEXTURE_COORD_3_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E2, .hex);
pub const GL_MAP1_TEXTURE_COORD_4_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E3, .hex);
pub const GL_MAP2_VERTEX_3_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E4, .hex);
pub const GL_MAP2_VERTEX_4_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E5, .hex);
pub const GL_MAP2_INDEX_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E6, .hex);
pub const GL_MAP2_COLOR_4_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E7, .hex);
pub const GL_MAP2_NORMAL_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E8, .hex);
pub const GL_MAP2_TEXTURE_COORD_1_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E9, .hex);
pub const GL_MAP2_TEXTURE_COORD_2_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81EA, .hex);
pub const GL_MAP2_TEXTURE_COORD_3_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81EB, .hex);
pub const GL_MAP2_TEXTURE_COORD_4_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81EC, .hex);
pub const GL_NURBS_KNOT_COUNT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81ED, .hex);
pub const GL_NURBS_KNOT_VECTOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81EE, .hex);
// /usr/include/GL/glew.h:21402:9: warning: macro 'GLEW_SGIX_nurbs_eval' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_nurbs_eval() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_nurbs_eval)) {
    return GLEW_GET_VAR(__GLEW_SGIX_nurbs_eval);
}
pub const GL_SGIX_occlusion_instrument = @as(c_int, 1);
pub const GL_OCCLUSION_INSTRUMENT_SGIX = @as(c_int, 0x6060);
// /usr/include/GL/glew.h:21413:9: warning: macro 'GLEW_SGIX_occlusion_instrument' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_occlusion_instrument() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_occlusion_instrument)) {
    return GLEW_GET_VAR(__GLEW_SGIX_occlusion_instrument);
}
pub const GL_SGIX_packed_6bytes = @as(c_int, 1);
// /usr/include/GL/glew.h:21422:9: warning: macro 'GLEW_SGIX_packed_6bytes' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_packed_6bytes() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_packed_6bytes)) {
    return GLEW_GET_VAR(__GLEW_SGIX_packed_6bytes);
}
pub const GL_SGIX_pixel_texture = @as(c_int, 1);
// /usr/include/GL/glew.h:21433:9: warning: macro 'glPixelTexGenSGIX' contains a runtime value, translated to function
pub inline fn glPixelTexGenSGIX() @TypeOf(GLEW_GET_FUN(__glewPixelTexGenSGIX)) {
    return GLEW_GET_FUN(__glewPixelTexGenSGIX);
}
// /usr/include/GL/glew.h:21435:9: warning: macro 'GLEW_SGIX_pixel_texture' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_pixel_texture() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_pixel_texture)) {
    return GLEW_GET_VAR(__GLEW_SGIX_pixel_texture);
}
pub const GL_SGIX_pixel_texture_bits = @as(c_int, 1);
// /usr/include/GL/glew.h:21444:9: warning: macro 'GLEW_SGIX_pixel_texture_bits' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_pixel_texture_bits() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_pixel_texture_bits)) {
    return GLEW_GET_VAR(__GLEW_SGIX_pixel_texture_bits);
}
pub const GL_SGIX_pixel_texture_lod = @as(c_int, 1);
// /usr/include/GL/glew.h:21453:9: warning: macro 'GLEW_SGIX_pixel_texture_lod' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_pixel_texture_lod() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_pixel_texture_lod)) {
    return GLEW_GET_VAR(__GLEW_SGIX_pixel_texture_lod);
}
pub const GL_SGIX_pixel_tiles = @as(c_int, 1);
// /usr/include/GL/glew.h:21462:9: warning: macro 'GLEW_SGIX_pixel_tiles' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_pixel_tiles() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_pixel_tiles)) {
    return GLEW_GET_VAR(__GLEW_SGIX_pixel_tiles);
}
pub const GL_SGIX_polynomial_ffd = @as(c_int, 1);
pub const GL_TEXTURE_DEFORMATION_BIT_SGIX = @as(c_int, 0x1);
pub const GL_GEOMETRY_DEFORMATION_BIT_SGIX = @as(c_int, 0x2);
// /usr/include/GL/glew.h:21477:9: warning: macro 'glDeformSGIX' contains a runtime value, translated to function
pub inline fn glDeformSGIX() @TypeOf(GLEW_GET_FUN(__glewDeformSGIX)) {
    return GLEW_GET_FUN(__glewDeformSGIX);
}
// /usr/include/GL/glew.h:21478:9: warning: macro 'glLoadIdentityDeformationMapSGIX' contains a runtime value, translated to function
pub inline fn glLoadIdentityDeformationMapSGIX() @TypeOf(GLEW_GET_FUN(__glewLoadIdentityDeformationMapSGIX)) {
    return GLEW_GET_FUN(__glewLoadIdentityDeformationMapSGIX);
}
// /usr/include/GL/glew.h:21480:9: warning: macro 'GLEW_SGIX_polynomial_ffd' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_polynomial_ffd() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_polynomial_ffd)) {
    return GLEW_GET_VAR(__GLEW_SGIX_polynomial_ffd);
}
pub const GL_SGIX_quad_mesh = @as(c_int, 1);
// /usr/include/GL/glew.h:21492:9: warning: macro 'glMeshBreadthSGIX' contains a runtime value, translated to function
pub inline fn glMeshBreadthSGIX() @TypeOf(GLEW_GET_FUN(__glewMeshBreadthSGIX)) {
    return GLEW_GET_FUN(__glewMeshBreadthSGIX);
}
// /usr/include/GL/glew.h:21493:9: warning: macro 'glMeshStrideSGIX' contains a runtime value, translated to function
pub inline fn glMeshStrideSGIX() @TypeOf(GLEW_GET_FUN(__glewMeshStrideSGIX)) {
    return GLEW_GET_FUN(__glewMeshStrideSGIX);
}
// /usr/include/GL/glew.h:21495:9: warning: macro 'GLEW_SGIX_quad_mesh' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_quad_mesh() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_quad_mesh)) {
    return GLEW_GET_VAR(__GLEW_SGIX_quad_mesh);
}
pub const GL_SGIX_reference_plane = @as(c_int, 1);
// /usr/include/GL/glew.h:21506:9: warning: macro 'glReferencePlaneSGIX' contains a runtime value, translated to function
pub inline fn glReferencePlaneSGIX() @TypeOf(GLEW_GET_FUN(__glewReferencePlaneSGIX)) {
    return GLEW_GET_FUN(__glewReferencePlaneSGIX);
}
// /usr/include/GL/glew.h:21508:9: warning: macro 'GLEW_SGIX_reference_plane' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_reference_plane() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_reference_plane)) {
    return GLEW_GET_VAR(__GLEW_SGIX_reference_plane);
}
pub const GL_SGIX_resample = @as(c_int, 1);
pub const GL_PACK_RESAMPLE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x842E, .hex);
pub const GL_UNPACK_RESAMPLE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x842F, .hex);
pub const GL_RESAMPLE_DECIMATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8430, .hex);
pub const GL_RESAMPLE_REPLICATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8433, .hex);
pub const GL_RESAMPLE_ZERO_FILL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8434, .hex);
// /usr/include/GL/glew.h:21523:9: warning: macro 'GLEW_SGIX_resample' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_resample() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_resample)) {
    return GLEW_GET_VAR(__GLEW_SGIX_resample);
}
pub const GL_SGIX_scalebias_hint = @as(c_int, 1);
pub const GL_SCALEBIAS_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8322, .hex);
// /usr/include/GL/glew.h:21534:9: warning: macro 'GLEW_SGIX_scalebias_hint' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_scalebias_hint() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_scalebias_hint)) {
    return GLEW_GET_VAR(__GLEW_SGIX_scalebias_hint);
}
pub const GL_SGIX_shadow = @as(c_int, 1);
pub const GL_TEXTURE_COMPARE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819A, .hex);
pub const GL_TEXTURE_COMPARE_OPERATOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819B, .hex);
pub const GL_TEXTURE_LEQUAL_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819C, .hex);
pub const GL_TEXTURE_GEQUAL_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819D, .hex);
// /usr/include/GL/glew.h:21548:9: warning: macro 'GLEW_SGIX_shadow' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_shadow() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_shadow)) {
    return GLEW_GET_VAR(__GLEW_SGIX_shadow);
}
pub const GL_SGIX_shadow_ambient = @as(c_int, 1);
pub const GL_SHADOW_AMBIENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BF, .hex);
// /usr/include/GL/glew.h:21559:9: warning: macro 'GLEW_SGIX_shadow_ambient' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_shadow_ambient() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_shadow_ambient)) {
    return GLEW_GET_VAR(__GLEW_SGIX_shadow_ambient);
}
pub const GL_SGIX_slim = @as(c_int, 1);
pub const GL_PACK_MAX_COMPRESSED_SIZE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x831B, .hex);
pub const GL_SLIM8U_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x831D, .hex);
pub const GL_SLIM10U_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x831E, .hex);
pub const GL_SLIM12S_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x831F, .hex);
// /usr/include/GL/glew.h:21573:9: warning: macro 'GLEW_SGIX_slim' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_slim() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_slim)) {
    return GLEW_GET_VAR(__GLEW_SGIX_slim);
}
pub const GL_SGIX_spotlight_cutoff = @as(c_int, 1);
pub const GL_SPOT_CUTOFF_DELTA_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8193, .hex);
// /usr/include/GL/glew.h:21584:9: warning: macro 'GLEW_SGIX_spotlight_cutoff' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_spotlight_cutoff() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_spotlight_cutoff)) {
    return GLEW_GET_VAR(__GLEW_SGIX_spotlight_cutoff);
}
pub const GL_SGIX_sprite = @as(c_int, 1);
// /usr/include/GL/glew.h:21598:9: warning: macro 'glSpriteParameterfSGIX' contains a runtime value, translated to function
pub inline fn glSpriteParameterfSGIX() @TypeOf(GLEW_GET_FUN(__glewSpriteParameterfSGIX)) {
    return GLEW_GET_FUN(__glewSpriteParameterfSGIX);
}
// /usr/include/GL/glew.h:21599:9: warning: macro 'glSpriteParameterfvSGIX' contains a runtime value, translated to function
pub inline fn glSpriteParameterfvSGIX() @TypeOf(GLEW_GET_FUN(__glewSpriteParameterfvSGIX)) {
    return GLEW_GET_FUN(__glewSpriteParameterfvSGIX);
}
// /usr/include/GL/glew.h:21600:9: warning: macro 'glSpriteParameteriSGIX' contains a runtime value, translated to function
pub inline fn glSpriteParameteriSGIX() @TypeOf(GLEW_GET_FUN(__glewSpriteParameteriSGIX)) {
    return GLEW_GET_FUN(__glewSpriteParameteriSGIX);
}
// /usr/include/GL/glew.h:21601:9: warning: macro 'glSpriteParameterivSGIX' contains a runtime value, translated to function
pub inline fn glSpriteParameterivSGIX() @TypeOf(GLEW_GET_FUN(__glewSpriteParameterivSGIX)) {
    return GLEW_GET_FUN(__glewSpriteParameterivSGIX);
}
// /usr/include/GL/glew.h:21603:9: warning: macro 'GLEW_SGIX_sprite' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_sprite() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_sprite)) {
    return GLEW_GET_VAR(__GLEW_SGIX_sprite);
}
pub const GL_SGIX_subdiv_patch = @as(c_int, 1);
// /usr/include/GL/glew.h:21612:9: warning: macro 'GLEW_SGIX_subdiv_patch' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_subdiv_patch() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_subdiv_patch)) {
    return GLEW_GET_VAR(__GLEW_SGIX_subdiv_patch);
}
pub const GL_SGIX_subsample = @as(c_int, 1);
pub const GL_PACK_SUBSAMPLE_RATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A0, .hex);
pub const GL_UNPACK_SUBSAMPLE_RATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A1, .hex);
pub const GL_PIXEL_SUBSAMPLE_4444_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A2, .hex);
pub const GL_PIXEL_SUBSAMPLE_2424_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A3, .hex);
pub const GL_PIXEL_SUBSAMPLE_4242_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A4, .hex);
// /usr/include/GL/glew.h:21627:9: warning: macro 'GLEW_SGIX_subsample' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_subsample() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_subsample)) {
    return GLEW_GET_VAR(__GLEW_SGIX_subsample);
}
pub const GL_SGIX_tag_sample_buffer = @as(c_int, 1);
// /usr/include/GL/glew.h:21638:9: warning: macro 'glTagSampleBufferSGIX' contains a runtime value, translated to function
pub inline fn glTagSampleBufferSGIX() @TypeOf(GLEW_GET_FUN(__glewTagSampleBufferSGIX)) {
    return GLEW_GET_FUN(__glewTagSampleBufferSGIX);
}
// /usr/include/GL/glew.h:21640:9: warning: macro 'GLEW_SGIX_tag_sample_buffer' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_tag_sample_buffer() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_tag_sample_buffer)) {
    return GLEW_GET_VAR(__GLEW_SGIX_tag_sample_buffer);
}
pub const GL_SGIX_texture_add_env = @as(c_int, 1);
// /usr/include/GL/glew.h:21649:9: warning: macro 'GLEW_SGIX_texture_add_env' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_texture_add_env() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_texture_add_env)) {
    return GLEW_GET_VAR(__GLEW_SGIX_texture_add_env);
}
pub const GL_SGIX_texture_coordinate_clamp = @as(c_int, 1);
pub const GL_TEXTURE_MAX_CLAMP_S_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8369, .hex);
pub const GL_TEXTURE_MAX_CLAMP_T_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x836A, .hex);
pub const GL_TEXTURE_MAX_CLAMP_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x836B, .hex);
// /usr/include/GL/glew.h:21662:9: warning: macro 'GLEW_SGIX_texture_coordinate_clamp' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_texture_coordinate_clamp() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_texture_coordinate_clamp)) {
    return GLEW_GET_VAR(__GLEW_SGIX_texture_coordinate_clamp);
}
pub const GL_SGIX_texture_lod_bias = @as(c_int, 1);
// /usr/include/GL/glew.h:21671:9: warning: macro 'GLEW_SGIX_texture_lod_bias' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_texture_lod_bias() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_texture_lod_bias)) {
    return GLEW_GET_VAR(__GLEW_SGIX_texture_lod_bias);
}
pub const GL_SGIX_texture_mipmap_anisotropic = @as(c_int, 1);
pub const GL_TEXTURE_MIPMAP_ANISOTROPY_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832E, .hex);
pub const GL_MAX_MIPMAP_ANISOTROPY_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832F, .hex);
// /usr/include/GL/glew.h:21683:9: warning: macro 'GLEW_SGIX_texture_mipmap_anisotropic' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_texture_mipmap_anisotropic() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_texture_mipmap_anisotropic)) {
    return GLEW_GET_VAR(__GLEW_SGIX_texture_mipmap_anisotropic);
}
pub const GL_SGIX_texture_multi_buffer = @as(c_int, 1);
pub const GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812E, .hex);
// /usr/include/GL/glew.h:21694:9: warning: macro 'GLEW_SGIX_texture_multi_buffer' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_texture_multi_buffer() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_texture_multi_buffer)) {
    return GLEW_GET_VAR(__GLEW_SGIX_texture_multi_buffer);
}
pub const GL_SGIX_texture_phase = @as(c_int, 1);
pub const GL_PHASE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832A, .hex);
// /usr/include/GL/glew.h:21705:9: warning: macro 'GLEW_SGIX_texture_phase' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_texture_phase() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_texture_phase)) {
    return GLEW_GET_VAR(__GLEW_SGIX_texture_phase);
}
pub const GL_SGIX_texture_range = @as(c_int, 1);
pub const GL_RGB_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E0, .hex);
pub const GL_RGBA_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E1, .hex);
pub const GL_ALPHA_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E2, .hex);
pub const GL_LUMINANCE_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E3, .hex);
pub const GL_INTENSITY_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E4, .hex);
pub const GL_LUMINANCE_ALPHA_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E5, .hex);
pub const GL_RGB16_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E6, .hex);
pub const GL_RGBA16_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E7, .hex);
pub const GL_ALPHA16_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E8, .hex);
pub const GL_LUMINANCE16_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E9, .hex);
pub const GL_INTENSITY16_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85EA, .hex);
pub const GL_LUMINANCE16_ALPHA16_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85EB, .hex);
pub const GL_RGB_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85EC, .hex);
pub const GL_RGBA_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85ED, .hex);
pub const GL_ALPHA_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85EE, .hex);
pub const GL_LUMINANCE_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85EF, .hex);
pub const GL_INTENSITY_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F0, .hex);
pub const GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F1, .hex);
pub const GL_RGB16_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F2, .hex);
pub const GL_RGBA16_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F3, .hex);
pub const GL_ALPHA16_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F4, .hex);
pub const GL_LUMINANCE16_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F5, .hex);
pub const GL_INTENSITY16_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F6, .hex);
pub const GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F7, .hex);
pub const GL_MIN_LUMINANCE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F8, .hex);
pub const GL_MAX_LUMINANCE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F9, .hex);
pub const GL_MIN_INTENSITY_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85FA, .hex);
pub const GL_MAX_INTENSITY_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85FB, .hex);
// /usr/include/GL/glew.h:21743:9: warning: macro 'GLEW_SGIX_texture_range' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_texture_range() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_texture_range)) {
    return GLEW_GET_VAR(__GLEW_SGIX_texture_range);
}
pub const GL_SGIX_texture_scale_bias = @as(c_int, 1);
pub const GL_POST_TEXTURE_FILTER_BIAS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8179, .hex);
pub const GL_POST_TEXTURE_FILTER_SCALE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817A, .hex);
pub const GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817B, .hex);
pub const GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817C, .hex);
// /usr/include/GL/glew.h:21757:9: warning: macro 'GLEW_SGIX_texture_scale_bias' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_texture_scale_bias() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_texture_scale_bias)) {
    return GLEW_GET_VAR(__GLEW_SGIX_texture_scale_bias);
}
pub const GL_SGIX_texture_supersample = @as(c_int, 1);
// /usr/include/GL/glew.h:21766:9: warning: macro 'GLEW_SGIX_texture_supersample' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_texture_supersample() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_texture_supersample)) {
    return GLEW_GET_VAR(__GLEW_SGIX_texture_supersample);
}
pub const GL_SGIX_vector_ops = @as(c_int, 1);
// /usr/include/GL/glew.h:21778:9: warning: macro 'glGetVectorOperationSGIX' contains a runtime value, translated to function
pub inline fn glGetVectorOperationSGIX() @TypeOf(GLEW_GET_FUN(__glewGetVectorOperationSGIX)) {
    return GLEW_GET_FUN(__glewGetVectorOperationSGIX);
}
// /usr/include/GL/glew.h:21779:9: warning: macro 'glVectorOperationSGIX' contains a runtime value, translated to function
pub inline fn glVectorOperationSGIX() @TypeOf(GLEW_GET_FUN(__glewVectorOperationSGIX)) {
    return GLEW_GET_FUN(__glewVectorOperationSGIX);
}
// /usr/include/GL/glew.h:21781:9: warning: macro 'GLEW_SGIX_vector_ops' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_vector_ops() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_vector_ops)) {
    return GLEW_GET_VAR(__GLEW_SGIX_vector_ops);
}
pub const GL_SGIX_vertex_array_object = @as(c_int, 1);
// /usr/include/GL/glew.h:21797:9: warning: macro 'glAreVertexArraysResidentSGIX' contains a runtime value, translated to function
pub inline fn glAreVertexArraysResidentSGIX() @TypeOf(GLEW_GET_FUN(__glewAreVertexArraysResidentSGIX)) {
    return GLEW_GET_FUN(__glewAreVertexArraysResidentSGIX);
}
// /usr/include/GL/glew.h:21798:9: warning: macro 'glBindVertexArraySGIX' contains a runtime value, translated to function
pub inline fn glBindVertexArraySGIX() @TypeOf(GLEW_GET_FUN(__glewBindVertexArraySGIX)) {
    return GLEW_GET_FUN(__glewBindVertexArraySGIX);
}
// /usr/include/GL/glew.h:21799:9: warning: macro 'glDeleteVertexArraysSGIX' contains a runtime value, translated to function
pub inline fn glDeleteVertexArraysSGIX() @TypeOf(GLEW_GET_FUN(__glewDeleteVertexArraysSGIX)) {
    return GLEW_GET_FUN(__glewDeleteVertexArraysSGIX);
}
// /usr/include/GL/glew.h:21800:9: warning: macro 'glGenVertexArraysSGIX' contains a runtime value, translated to function
pub inline fn glGenVertexArraysSGIX() @TypeOf(GLEW_GET_FUN(__glewGenVertexArraysSGIX)) {
    return GLEW_GET_FUN(__glewGenVertexArraysSGIX);
}
// /usr/include/GL/glew.h:21801:9: warning: macro 'glIsVertexArraySGIX' contains a runtime value, translated to function
pub inline fn glIsVertexArraySGIX() @TypeOf(GLEW_GET_FUN(__glewIsVertexArraySGIX)) {
    return GLEW_GET_FUN(__glewIsVertexArraySGIX);
}
// /usr/include/GL/glew.h:21802:9: warning: macro 'glPrioritizeVertexArraysSGIX' contains a runtime value, translated to function
pub inline fn glPrioritizeVertexArraysSGIX() @TypeOf(GLEW_GET_FUN(__glewPrioritizeVertexArraysSGIX)) {
    return GLEW_GET_FUN(__glewPrioritizeVertexArraysSGIX);
}
// /usr/include/GL/glew.h:21804:9: warning: macro 'GLEW_SGIX_vertex_array_object' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_vertex_array_object() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_vertex_array_object)) {
    return GLEW_GET_VAR(__GLEW_SGIX_vertex_array_object);
}
pub const GL_SGIX_vertex_preclip = @as(c_int, 1);
pub const GL_VERTEX_PRECLIP_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83EE, .hex);
pub const GL_VERTEX_PRECLIP_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83EF, .hex);
// /usr/include/GL/glew.h:21816:9: warning: macro 'GLEW_SGIX_vertex_preclip' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_vertex_preclip() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_vertex_preclip)) {
    return GLEW_GET_VAR(__GLEW_SGIX_vertex_preclip);
}
pub const GL_SGIX_vertex_preclip_hint = @as(c_int, 1);
// /usr/include/GL/glew.h:21828:9: warning: macro 'GLEW_SGIX_vertex_preclip_hint' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_vertex_preclip_hint() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_vertex_preclip_hint)) {
    return GLEW_GET_VAR(__GLEW_SGIX_vertex_preclip_hint);
}
pub const GL_SGIX_ycrcb = @as(c_int, 1);
// /usr/include/GL/glew.h:21837:9: warning: macro 'GLEW_SGIX_ycrcb' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_ycrcb() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_ycrcb)) {
    return GLEW_GET_VAR(__GLEW_SGIX_ycrcb);
}
pub const GL_SGIX_ycrcb_subsample = @as(c_int, 1);
// /usr/include/GL/glew.h:21846:9: warning: macro 'GLEW_SGIX_ycrcb_subsample' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_ycrcb_subsample() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_ycrcb_subsample)) {
    return GLEW_GET_VAR(__GLEW_SGIX_ycrcb_subsample);
}
pub const GL_SGIX_ycrcba = @as(c_int, 1);
pub const GL_YCRCB_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8318, .hex);
pub const GL_YCRCBA_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8319, .hex);
// /usr/include/GL/glew.h:21858:9: warning: macro 'GLEW_SGIX_ycrcba' contains a runtime value, translated to function
pub inline fn GLEW_SGIX_ycrcba() @TypeOf(GLEW_GET_VAR(__GLEW_SGIX_ycrcba)) {
    return GLEW_GET_VAR(__GLEW_SGIX_ycrcba);
}
pub const GL_SGI_color_matrix = @as(c_int, 1);
pub const GL_COLOR_MATRIX_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B1, .hex);
pub const GL_COLOR_MATRIX_STACK_DEPTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B2, .hex);
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B3, .hex);
pub const GL_POST_COLOR_MATRIX_RED_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B4, .hex);
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B5, .hex);
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B6, .hex);
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B7, .hex);
pub const GL_POST_COLOR_MATRIX_RED_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B8, .hex);
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B9, .hex);
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BA, .hex);
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BB, .hex);
// /usr/include/GL/glew.h:21879:9: warning: macro 'GLEW_SGI_color_matrix' contains a runtime value, translated to function
pub inline fn GLEW_SGI_color_matrix() @TypeOf(GLEW_GET_VAR(__GLEW_SGI_color_matrix)) {
    return GLEW_GET_VAR(__GLEW_SGI_color_matrix);
}
pub const GL_SGI_color_table = @as(c_int, 1);
pub const GL_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D0, .hex);
pub const GL_POST_CONVOLUTION_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D1, .hex);
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D2, .hex);
pub const GL_PROXY_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D3, .hex);
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D4, .hex);
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D5, .hex);
pub const GL_COLOR_TABLE_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D6, .hex);
pub const GL_COLOR_TABLE_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D7, .hex);
pub const GL_COLOR_TABLE_FORMAT_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D8, .hex);
pub const GL_COLOR_TABLE_WIDTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D9, .hex);
pub const GL_COLOR_TABLE_RED_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DA, .hex);
pub const GL_COLOR_TABLE_GREEN_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DB, .hex);
pub const GL_COLOR_TABLE_BLUE_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DC, .hex);
pub const GL_COLOR_TABLE_ALPHA_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DD, .hex);
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DE, .hex);
pub const GL_COLOR_TABLE_INTENSITY_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DF, .hex);
// /usr/include/GL/glew.h:21913:9: warning: macro 'glColorTableParameterfvSGI' contains a runtime value, translated to function
pub inline fn glColorTableParameterfvSGI() @TypeOf(GLEW_GET_FUN(__glewColorTableParameterfvSGI)) {
    return GLEW_GET_FUN(__glewColorTableParameterfvSGI);
}
// /usr/include/GL/glew.h:21914:9: warning: macro 'glColorTableParameterivSGI' contains a runtime value, translated to function
pub inline fn glColorTableParameterivSGI() @TypeOf(GLEW_GET_FUN(__glewColorTableParameterivSGI)) {
    return GLEW_GET_FUN(__glewColorTableParameterivSGI);
}
// /usr/include/GL/glew.h:21915:9: warning: macro 'glColorTableSGI' contains a runtime value, translated to function
pub inline fn glColorTableSGI() @TypeOf(GLEW_GET_FUN(__glewColorTableSGI)) {
    return GLEW_GET_FUN(__glewColorTableSGI);
}
// /usr/include/GL/glew.h:21916:9: warning: macro 'glCopyColorTableSGI' contains a runtime value, translated to function
pub inline fn glCopyColorTableSGI() @TypeOf(GLEW_GET_FUN(__glewCopyColorTableSGI)) {
    return GLEW_GET_FUN(__glewCopyColorTableSGI);
}
// /usr/include/GL/glew.h:21917:9: warning: macro 'glGetColorTableParameterfvSGI' contains a runtime value, translated to function
pub inline fn glGetColorTableParameterfvSGI() @TypeOf(GLEW_GET_FUN(__glewGetColorTableParameterfvSGI)) {
    return GLEW_GET_FUN(__glewGetColorTableParameterfvSGI);
}
// /usr/include/GL/glew.h:21918:9: warning: macro 'glGetColorTableParameterivSGI' contains a runtime value, translated to function
pub inline fn glGetColorTableParameterivSGI() @TypeOf(GLEW_GET_FUN(__glewGetColorTableParameterivSGI)) {
    return GLEW_GET_FUN(__glewGetColorTableParameterivSGI);
}
// /usr/include/GL/glew.h:21919:9: warning: macro 'glGetColorTableSGI' contains a runtime value, translated to function
pub inline fn glGetColorTableSGI() @TypeOf(GLEW_GET_FUN(__glewGetColorTableSGI)) {
    return GLEW_GET_FUN(__glewGetColorTableSGI);
}
// /usr/include/GL/glew.h:21921:9: warning: macro 'GLEW_SGI_color_table' contains a runtime value, translated to function
pub inline fn GLEW_SGI_color_table() @TypeOf(GLEW_GET_VAR(__GLEW_SGI_color_table)) {
    return GLEW_GET_VAR(__GLEW_SGI_color_table);
}
pub const GL_SGI_complex = @as(c_int, 1);
// /usr/include/GL/glew.h:21930:9: warning: macro 'GLEW_SGI_complex' contains a runtime value, translated to function
pub inline fn GLEW_SGI_complex() @TypeOf(GLEW_GET_VAR(__GLEW_SGI_complex)) {
    return GLEW_GET_VAR(__GLEW_SGI_complex);
}
pub const GL_SGI_complex_type = @as(c_int, 1);
pub const GL_COMPLEX_UNSIGNED_BYTE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81BD, .hex);
pub const GL_COMPLEX_BYTE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81BE, .hex);
pub const GL_COMPLEX_UNSIGNED_SHORT_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81BF, .hex);
pub const GL_COMPLEX_SHORT_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C0, .hex);
pub const GL_COMPLEX_UNSIGNED_INT_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C1, .hex);
pub const GL_COMPLEX_INT_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C2, .hex);
pub const GL_COMPLEX_FLOAT_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C3, .hex);
// /usr/include/GL/glew.h:21947:9: warning: macro 'GLEW_SGI_complex_type' contains a runtime value, translated to function
pub inline fn GLEW_SGI_complex_type() @TypeOf(GLEW_GET_VAR(__GLEW_SGI_complex_type)) {
    return GLEW_GET_VAR(__GLEW_SGI_complex_type);
}
pub const GL_SGI_fft = @as(c_int, 1);
pub const GL_PIXEL_TRANSFORM_OPERATOR_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C4, .hex);
pub const GL_CONVOLUTION_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C5, .hex);
pub const GL_FFT_1D_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C6, .hex);
pub const GL_PIXEL_TRANSFORM_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C7, .hex);
pub const GL_MAX_FFT_WIDTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C8, .hex);
// /usr/include/GL/glew.h:21970:9: warning: macro 'glGetPixelTransformParameterfvSGI' contains a runtime value, translated to function
pub inline fn glGetPixelTransformParameterfvSGI() @TypeOf(GLEW_GET_FUN(__glewGetPixelTransformParameterfvSGI)) {
    return GLEW_GET_FUN(__glewGetPixelTransformParameterfvSGI);
}
// /usr/include/GL/glew.h:21971:9: warning: macro 'glGetPixelTransformParameterivSGI' contains a runtime value, translated to function
pub inline fn glGetPixelTransformParameterivSGI() @TypeOf(GLEW_GET_FUN(__glewGetPixelTransformParameterivSGI)) {
    return GLEW_GET_FUN(__glewGetPixelTransformParameterivSGI);
}
// /usr/include/GL/glew.h:21972:9: warning: macro 'glPixelTransformParameterfSGI' contains a runtime value, translated to function
pub inline fn glPixelTransformParameterfSGI() @TypeOf(GLEW_GET_FUN(__glewPixelTransformParameterfSGI)) {
    return GLEW_GET_FUN(__glewPixelTransformParameterfSGI);
}
// /usr/include/GL/glew.h:21973:9: warning: macro 'glPixelTransformParameterfvSGI' contains a runtime value, translated to function
pub inline fn glPixelTransformParameterfvSGI() @TypeOf(GLEW_GET_FUN(__glewPixelTransformParameterfvSGI)) {
    return GLEW_GET_FUN(__glewPixelTransformParameterfvSGI);
}
// /usr/include/GL/glew.h:21974:9: warning: macro 'glPixelTransformParameteriSGI' contains a runtime value, translated to function
pub inline fn glPixelTransformParameteriSGI() @TypeOf(GLEW_GET_FUN(__glewPixelTransformParameteriSGI)) {
    return GLEW_GET_FUN(__glewPixelTransformParameteriSGI);
}
// /usr/include/GL/glew.h:21975:9: warning: macro 'glPixelTransformParameterivSGI' contains a runtime value, translated to function
pub inline fn glPixelTransformParameterivSGI() @TypeOf(GLEW_GET_FUN(__glewPixelTransformParameterivSGI)) {
    return GLEW_GET_FUN(__glewPixelTransformParameterivSGI);
}
// /usr/include/GL/glew.h:21976:9: warning: macro 'glPixelTransformSGI' contains a runtime value, translated to function
pub inline fn glPixelTransformSGI() @TypeOf(GLEW_GET_FUN(__glewPixelTransformSGI)) {
    return GLEW_GET_FUN(__glewPixelTransformSGI);
}
// /usr/include/GL/glew.h:21978:9: warning: macro 'GLEW_SGI_fft' contains a runtime value, translated to function
pub inline fn GLEW_SGI_fft() @TypeOf(GLEW_GET_VAR(__GLEW_SGI_fft)) {
    return GLEW_GET_VAR(__GLEW_SGI_fft);
}
pub const GL_SGI_texture_color_table = @as(c_int, 1);
pub const GL_TEXTURE_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BC, .hex);
pub const GL_PROXY_TEXTURE_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BD, .hex);
// /usr/include/GL/glew.h:21990:9: warning: macro 'GLEW_SGI_texture_color_table' contains a runtime value, translated to function
pub inline fn GLEW_SGI_texture_color_table() @TypeOf(GLEW_GET_VAR(__GLEW_SGI_texture_color_table)) {
    return GLEW_GET_VAR(__GLEW_SGI_texture_color_table);
}
pub const GL_SUNX_constant_data = @as(c_int, 1);
pub const GL_UNPACK_CONSTANT_DATA_SUNX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D5, .hex);
pub const GL_TEXTURE_CONSTANT_DATA_SUNX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D6, .hex);
// /usr/include/GL/glew.h:22004:9: warning: macro 'glFinishTextureSUNX' contains a runtime value, translated to function
pub inline fn glFinishTextureSUNX() @TypeOf(GLEW_GET_FUN(__glewFinishTextureSUNX)) {
    return GLEW_GET_FUN(__glewFinishTextureSUNX);
}
// /usr/include/GL/glew.h:22006:9: warning: macro 'GLEW_SUNX_constant_data' contains a runtime value, translated to function
pub inline fn GLEW_SUNX_constant_data() @TypeOf(GLEW_GET_VAR(__GLEW_SUNX_constant_data)) {
    return GLEW_GET_VAR(__GLEW_SUNX_constant_data);
}
pub const GL_SUN_convolution_border_modes = @as(c_int, 1);
pub const GL_WRAP_BORDER_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D4, .hex);
// /usr/include/GL/glew.h:22017:9: warning: macro 'GLEW_SUN_convolution_border_modes' contains a runtime value, translated to function
pub inline fn GLEW_SUN_convolution_border_modes() @TypeOf(GLEW_GET_VAR(__GLEW_SUN_convolution_border_modes)) {
    return GLEW_GET_VAR(__GLEW_SUN_convolution_border_modes);
}
pub const GL_SUN_global_alpha = @as(c_int, 1);
pub const GL_GLOBAL_ALPHA_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D9, .hex);
pub const GL_GLOBAL_ALPHA_FACTOR_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81DA, .hex);
// /usr/include/GL/glew.h:22038:9: warning: macro 'glGlobalAlphaFactorbSUN' contains a runtime value, translated to function
pub inline fn glGlobalAlphaFactorbSUN() @TypeOf(GLEW_GET_FUN(__glewGlobalAlphaFactorbSUN)) {
    return GLEW_GET_FUN(__glewGlobalAlphaFactorbSUN);
}
// /usr/include/GL/glew.h:22039:9: warning: macro 'glGlobalAlphaFactordSUN' contains a runtime value, translated to function
pub inline fn glGlobalAlphaFactordSUN() @TypeOf(GLEW_GET_FUN(__glewGlobalAlphaFactordSUN)) {
    return GLEW_GET_FUN(__glewGlobalAlphaFactordSUN);
}
// /usr/include/GL/glew.h:22040:9: warning: macro 'glGlobalAlphaFactorfSUN' contains a runtime value, translated to function
pub inline fn glGlobalAlphaFactorfSUN() @TypeOf(GLEW_GET_FUN(__glewGlobalAlphaFactorfSUN)) {
    return GLEW_GET_FUN(__glewGlobalAlphaFactorfSUN);
}
// /usr/include/GL/glew.h:22041:9: warning: macro 'glGlobalAlphaFactoriSUN' contains a runtime value, translated to function
pub inline fn glGlobalAlphaFactoriSUN() @TypeOf(GLEW_GET_FUN(__glewGlobalAlphaFactoriSUN)) {
    return GLEW_GET_FUN(__glewGlobalAlphaFactoriSUN);
}
// /usr/include/GL/glew.h:22042:9: warning: macro 'glGlobalAlphaFactorsSUN' contains a runtime value, translated to function
pub inline fn glGlobalAlphaFactorsSUN() @TypeOf(GLEW_GET_FUN(__glewGlobalAlphaFactorsSUN)) {
    return GLEW_GET_FUN(__glewGlobalAlphaFactorsSUN);
}
// /usr/include/GL/glew.h:22043:9: warning: macro 'glGlobalAlphaFactorubSUN' contains a runtime value, translated to function
pub inline fn glGlobalAlphaFactorubSUN() @TypeOf(GLEW_GET_FUN(__glewGlobalAlphaFactorubSUN)) {
    return GLEW_GET_FUN(__glewGlobalAlphaFactorubSUN);
}
// /usr/include/GL/glew.h:22044:9: warning: macro 'glGlobalAlphaFactoruiSUN' contains a runtime value, translated to function
pub inline fn glGlobalAlphaFactoruiSUN() @TypeOf(GLEW_GET_FUN(__glewGlobalAlphaFactoruiSUN)) {
    return GLEW_GET_FUN(__glewGlobalAlphaFactoruiSUN);
}
// /usr/include/GL/glew.h:22045:9: warning: macro 'glGlobalAlphaFactorusSUN' contains a runtime value, translated to function
pub inline fn glGlobalAlphaFactorusSUN() @TypeOf(GLEW_GET_FUN(__glewGlobalAlphaFactorusSUN)) {
    return GLEW_GET_FUN(__glewGlobalAlphaFactorusSUN);
}
// /usr/include/GL/glew.h:22047:9: warning: macro 'GLEW_SUN_global_alpha' contains a runtime value, translated to function
pub inline fn GLEW_SUN_global_alpha() @TypeOf(GLEW_GET_VAR(__GLEW_SUN_global_alpha)) {
    return GLEW_GET_VAR(__GLEW_SUN_global_alpha);
}
pub const GL_SUN_mesh_array = @as(c_int, 1);
pub const GL_QUAD_MESH_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8614, .hex);
pub const GL_TRIANGLE_MESH_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8615, .hex);
// /usr/include/GL/glew.h:22059:9: warning: macro 'GLEW_SUN_mesh_array' contains a runtime value, translated to function
pub inline fn GLEW_SUN_mesh_array() @TypeOf(GLEW_GET_VAR(__GLEW_SUN_mesh_array)) {
    return GLEW_GET_VAR(__GLEW_SUN_mesh_array);
}
pub const GL_SUN_read_video_pixels = @as(c_int, 1);
// /usr/include/GL/glew.h:22070:9: warning: macro 'glReadVideoPixelsSUN' contains a runtime value, translated to function
pub inline fn glReadVideoPixelsSUN() @TypeOf(GLEW_GET_FUN(__glewReadVideoPixelsSUN)) {
    return GLEW_GET_FUN(__glewReadVideoPixelsSUN);
}
// /usr/include/GL/glew.h:22072:9: warning: macro 'GLEW_SUN_read_video_pixels' contains a runtime value, translated to function
pub inline fn GLEW_SUN_read_video_pixels() @TypeOf(GLEW_GET_VAR(__GLEW_SUN_read_video_pixels)) {
    return GLEW_GET_VAR(__GLEW_SUN_read_video_pixels);
}
pub const GL_SUN_slice_accum = @as(c_int, 1);
pub const GL_SLICE_ACCUM_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85CC, .hex);
// /usr/include/GL/glew.h:22083:9: warning: macro 'GLEW_SUN_slice_accum' contains a runtime value, translated to function
pub inline fn GLEW_SUN_slice_accum() @TypeOf(GLEW_GET_VAR(__GLEW_SUN_slice_accum)) {
    return GLEW_GET_VAR(__GLEW_SUN_slice_accum);
}
pub const GL_SUN_triangle_list = @as(c_int, 1);
pub const GL_RESTART_SUN = @as(c_int, 0x01);
pub const GL_REPLACE_MIDDLE_SUN = @as(c_int, 0x02);
pub const GL_REPLACE_OLDEST_SUN = @as(c_int, 0x03);
pub const GL_TRIANGLE_LIST_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D7, .hex);
pub const GL_REPLACEMENT_CODE_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D8, .hex);
pub const GL_REPLACEMENT_CODE_ARRAY_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C0, .hex);
pub const GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C1, .hex);
pub const GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C2, .hex);
pub const GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C3, .hex);
pub const GL_R1UI_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C4, .hex);
pub const GL_R1UI_C4UB_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C5, .hex);
pub const GL_R1UI_C3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C6, .hex);
pub const GL_R1UI_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C7, .hex);
pub const GL_R1UI_C4F_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C8, .hex);
pub const GL_R1UI_T2F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C9, .hex);
pub const GL_R1UI_T2F_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85CA, .hex);
pub const GL_R1UI_T2F_C4F_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85CB, .hex);
// /usr/include/GL/glew.h:22118:9: warning: macro 'glReplacementCodePointerSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodePointerSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodePointerSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodePointerSUN);
}
// /usr/include/GL/glew.h:22119:9: warning: macro 'glReplacementCodeubSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeubSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeubSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeubSUN);
}
// /usr/include/GL/glew.h:22120:9: warning: macro 'glReplacementCodeubvSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeubvSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeubvSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeubvSUN);
}
// /usr/include/GL/glew.h:22121:9: warning: macro 'glReplacementCodeuiSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiSUN);
}
// /usr/include/GL/glew.h:22122:9: warning: macro 'glReplacementCodeuivSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuivSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuivSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuivSUN);
}
// /usr/include/GL/glew.h:22123:9: warning: macro 'glReplacementCodeusSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeusSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeusSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeusSUN);
}
// /usr/include/GL/glew.h:22124:9: warning: macro 'glReplacementCodeusvSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeusvSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeusvSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeusvSUN);
}
// /usr/include/GL/glew.h:22126:9: warning: macro 'GLEW_SUN_triangle_list' contains a runtime value, translated to function
pub inline fn GLEW_SUN_triangle_list() @TypeOf(GLEW_GET_VAR(__GLEW_SUN_triangle_list)) {
    return GLEW_GET_VAR(__GLEW_SUN_triangle_list);
}
pub const GL_SUN_vertex = @as(c_int, 1);
// /usr/include/GL/glew.h:22176:9: warning: macro 'glColor3fVertex3fSUN' contains a runtime value, translated to function
pub inline fn glColor3fVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewColor3fVertex3fSUN)) {
    return GLEW_GET_FUN(__glewColor3fVertex3fSUN);
}
// /usr/include/GL/glew.h:22177:9: warning: macro 'glColor3fVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glColor3fVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewColor3fVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewColor3fVertex3fvSUN);
}
// /usr/include/GL/glew.h:22178:9: warning: macro 'glColor4fNormal3fVertex3fSUN' contains a runtime value, translated to function
pub inline fn glColor4fNormal3fVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewColor4fNormal3fVertex3fSUN)) {
    return GLEW_GET_FUN(__glewColor4fNormal3fVertex3fSUN);
}
// /usr/include/GL/glew.h:22179:9: warning: macro 'glColor4fNormal3fVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glColor4fNormal3fVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewColor4fNormal3fVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewColor4fNormal3fVertex3fvSUN);
}
// /usr/include/GL/glew.h:22180:9: warning: macro 'glColor4ubVertex2fSUN' contains a runtime value, translated to function
pub inline fn glColor4ubVertex2fSUN() @TypeOf(GLEW_GET_FUN(__glewColor4ubVertex2fSUN)) {
    return GLEW_GET_FUN(__glewColor4ubVertex2fSUN);
}
// /usr/include/GL/glew.h:22181:9: warning: macro 'glColor4ubVertex2fvSUN' contains a runtime value, translated to function
pub inline fn glColor4ubVertex2fvSUN() @TypeOf(GLEW_GET_FUN(__glewColor4ubVertex2fvSUN)) {
    return GLEW_GET_FUN(__glewColor4ubVertex2fvSUN);
}
// /usr/include/GL/glew.h:22182:9: warning: macro 'glColor4ubVertex3fSUN' contains a runtime value, translated to function
pub inline fn glColor4ubVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewColor4ubVertex3fSUN)) {
    return GLEW_GET_FUN(__glewColor4ubVertex3fSUN);
}
// /usr/include/GL/glew.h:22183:9: warning: macro 'glColor4ubVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glColor4ubVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewColor4ubVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewColor4ubVertex3fvSUN);
}
// /usr/include/GL/glew.h:22184:9: warning: macro 'glNormal3fVertex3fSUN' contains a runtime value, translated to function
pub inline fn glNormal3fVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewNormal3fVertex3fSUN)) {
    return GLEW_GET_FUN(__glewNormal3fVertex3fSUN);
}
// /usr/include/GL/glew.h:22185:9: warning: macro 'glNormal3fVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glNormal3fVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewNormal3fVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewNormal3fVertex3fvSUN);
}
// /usr/include/GL/glew.h:22186:9: warning: macro 'glReplacementCodeuiColor3fVertex3fSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiColor3fVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiColor3fVertex3fSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiColor3fVertex3fSUN);
}
// /usr/include/GL/glew.h:22187:9: warning: macro 'glReplacementCodeuiColor3fVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiColor3fVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiColor3fVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiColor3fVertex3fvSUN);
}
// /usr/include/GL/glew.h:22188:9: warning: macro 'glReplacementCodeuiColor4fNormal3fVertex3fSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiColor4fNormal3fVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiColor4fNormal3fVertex3fSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiColor4fNormal3fVertex3fSUN);
}
// /usr/include/GL/glew.h:22189:9: warning: macro 'glReplacementCodeuiColor4fNormal3fVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiColor4fNormal3fVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiColor4fNormal3fVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiColor4fNormal3fVertex3fvSUN);
}
// /usr/include/GL/glew.h:22190:9: warning: macro 'glReplacementCodeuiColor4ubVertex3fSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiColor4ubVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiColor4ubVertex3fSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiColor4ubVertex3fSUN);
}
// /usr/include/GL/glew.h:22191:9: warning: macro 'glReplacementCodeuiColor4ubVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiColor4ubVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiColor4ubVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiColor4ubVertex3fvSUN);
}
// /usr/include/GL/glew.h:22192:9: warning: macro 'glReplacementCodeuiNormal3fVertex3fSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiNormal3fVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiNormal3fVertex3fSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiNormal3fVertex3fSUN);
}
// /usr/include/GL/glew.h:22193:9: warning: macro 'glReplacementCodeuiNormal3fVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiNormal3fVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiNormal3fVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiNormal3fVertex3fvSUN);
}
// /usr/include/GL/glew.h:22194:9: warning: macro 'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN);
}
// /usr/include/GL/glew.h:22195:9: warning: macro 'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN);
}
// /usr/include/GL/glew.h:22196:9: warning: macro 'glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN);
}
// /usr/include/GL/glew.h:22197:9: warning: macro 'glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN);
}
// /usr/include/GL/glew.h:22198:9: warning: macro 'glReplacementCodeuiTexCoord2fVertex3fSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiTexCoord2fVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fVertex3fSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fVertex3fSUN);
}
// /usr/include/GL/glew.h:22199:9: warning: macro 'glReplacementCodeuiTexCoord2fVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiTexCoord2fVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fVertex3fvSUN);
}
// /usr/include/GL/glew.h:22200:9: warning: macro 'glReplacementCodeuiVertex3fSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiVertex3fSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiVertex3fSUN);
}
// /usr/include/GL/glew.h:22201:9: warning: macro 'glReplacementCodeuiVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glReplacementCodeuiVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewReplacementCodeuiVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewReplacementCodeuiVertex3fvSUN);
}
// /usr/include/GL/glew.h:22202:9: warning: macro 'glTexCoord2fColor3fVertex3fSUN' contains a runtime value, translated to function
pub inline fn glTexCoord2fColor3fVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewTexCoord2fColor3fVertex3fSUN)) {
    return GLEW_GET_FUN(__glewTexCoord2fColor3fVertex3fSUN);
}
// /usr/include/GL/glew.h:22203:9: warning: macro 'glTexCoord2fColor3fVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glTexCoord2fColor3fVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewTexCoord2fColor3fVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewTexCoord2fColor3fVertex3fvSUN);
}
// /usr/include/GL/glew.h:22204:9: warning: macro 'glTexCoord2fColor4fNormal3fVertex3fSUN' contains a runtime value, translated to function
pub inline fn glTexCoord2fColor4fNormal3fVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewTexCoord2fColor4fNormal3fVertex3fSUN)) {
    return GLEW_GET_FUN(__glewTexCoord2fColor4fNormal3fVertex3fSUN);
}
// /usr/include/GL/glew.h:22205:9: warning: macro 'glTexCoord2fColor4fNormal3fVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glTexCoord2fColor4fNormal3fVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewTexCoord2fColor4fNormal3fVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewTexCoord2fColor4fNormal3fVertex3fvSUN);
}
// /usr/include/GL/glew.h:22206:9: warning: macro 'glTexCoord2fColor4ubVertex3fSUN' contains a runtime value, translated to function
pub inline fn glTexCoord2fColor4ubVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewTexCoord2fColor4ubVertex3fSUN)) {
    return GLEW_GET_FUN(__glewTexCoord2fColor4ubVertex3fSUN);
}
// /usr/include/GL/glew.h:22207:9: warning: macro 'glTexCoord2fColor4ubVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glTexCoord2fColor4ubVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewTexCoord2fColor4ubVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewTexCoord2fColor4ubVertex3fvSUN);
}
// /usr/include/GL/glew.h:22208:9: warning: macro 'glTexCoord2fNormal3fVertex3fSUN' contains a runtime value, translated to function
pub inline fn glTexCoord2fNormal3fVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewTexCoord2fNormal3fVertex3fSUN)) {
    return GLEW_GET_FUN(__glewTexCoord2fNormal3fVertex3fSUN);
}
// /usr/include/GL/glew.h:22209:9: warning: macro 'glTexCoord2fNormal3fVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glTexCoord2fNormal3fVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewTexCoord2fNormal3fVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewTexCoord2fNormal3fVertex3fvSUN);
}
// /usr/include/GL/glew.h:22210:9: warning: macro 'glTexCoord2fVertex3fSUN' contains a runtime value, translated to function
pub inline fn glTexCoord2fVertex3fSUN() @TypeOf(GLEW_GET_FUN(__glewTexCoord2fVertex3fSUN)) {
    return GLEW_GET_FUN(__glewTexCoord2fVertex3fSUN);
}
// /usr/include/GL/glew.h:22211:9: warning: macro 'glTexCoord2fVertex3fvSUN' contains a runtime value, translated to function
pub inline fn glTexCoord2fVertex3fvSUN() @TypeOf(GLEW_GET_FUN(__glewTexCoord2fVertex3fvSUN)) {
    return GLEW_GET_FUN(__glewTexCoord2fVertex3fvSUN);
}
// /usr/include/GL/glew.h:22212:9: warning: macro 'glTexCoord4fColor4fNormal3fVertex4fSUN' contains a runtime value, translated to function
pub inline fn glTexCoord4fColor4fNormal3fVertex4fSUN() @TypeOf(GLEW_GET_FUN(__glewTexCoord4fColor4fNormal3fVertex4fSUN)) {
    return GLEW_GET_FUN(__glewTexCoord4fColor4fNormal3fVertex4fSUN);
}
// /usr/include/GL/glew.h:22213:9: warning: macro 'glTexCoord4fColor4fNormal3fVertex4fvSUN' contains a runtime value, translated to function
pub inline fn glTexCoord4fColor4fNormal3fVertex4fvSUN() @TypeOf(GLEW_GET_FUN(__glewTexCoord4fColor4fNormal3fVertex4fvSUN)) {
    return GLEW_GET_FUN(__glewTexCoord4fColor4fNormal3fVertex4fvSUN);
}
// /usr/include/GL/glew.h:22214:9: warning: macro 'glTexCoord4fVertex4fSUN' contains a runtime value, translated to function
pub inline fn glTexCoord4fVertex4fSUN() @TypeOf(GLEW_GET_FUN(__glewTexCoord4fVertex4fSUN)) {
    return GLEW_GET_FUN(__glewTexCoord4fVertex4fSUN);
}
// /usr/include/GL/glew.h:22215:9: warning: macro 'glTexCoord4fVertex4fvSUN' contains a runtime value, translated to function
pub inline fn glTexCoord4fVertex4fvSUN() @TypeOf(GLEW_GET_FUN(__glewTexCoord4fVertex4fvSUN)) {
    return GLEW_GET_FUN(__glewTexCoord4fVertex4fvSUN);
}
// /usr/include/GL/glew.h:22217:9: warning: macro 'GLEW_SUN_vertex' contains a runtime value, translated to function
pub inline fn GLEW_SUN_vertex() @TypeOf(GLEW_GET_VAR(__GLEW_SUN_vertex)) {
    return GLEW_GET_VAR(__GLEW_SUN_vertex);
}
pub const GL_VIV_shader_binary = @as(c_int, 1);
pub const GL_SHADER_BINARY_VIV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FC4, .hex);
// /usr/include/GL/glew.h:22228:9: warning: macro 'GLEW_VIV_shader_binary' contains a runtime value, translated to function
pub inline fn GLEW_VIV_shader_binary() @TypeOf(GLEW_GET_VAR(__GLEW_VIV_shader_binary)) {
    return GLEW_GET_VAR(__GLEW_VIV_shader_binary);
}
pub const GL_WIN_phong_shading = @as(c_int, 1);
pub const GL_PHONG_WIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EA, .hex);
pub const GL_PHONG_HINT_WIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EB, .hex);
// /usr/include/GL/glew.h:22240:9: warning: macro 'GLEW_WIN_phong_shading' contains a runtime value, translated to function
pub inline fn GLEW_WIN_phong_shading() @TypeOf(GLEW_GET_VAR(__GLEW_WIN_phong_shading)) {
    return GLEW_GET_VAR(__GLEW_WIN_phong_shading);
}
pub const GL_WIN_scene_markerXXX = @as(c_int, 1);
// /usr/include/GL/glew.h:22249:9: warning: macro 'GLEW_WIN_scene_markerXXX' contains a runtime value, translated to function
pub inline fn GLEW_WIN_scene_markerXXX() @TypeOf(GLEW_GET_VAR(__GLEW_WIN_scene_markerXXX)) {
    return GLEW_GET_VAR(__GLEW_WIN_scene_markerXXX);
}
pub const GL_WIN_specular_fog = @as(c_int, 1);
pub const GL_FOG_SPECULAR_TEXTURE_WIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EC, .hex);
// /usr/include/GL/glew.h:22260:9: warning: macro 'GLEW_WIN_specular_fog' contains a runtime value, translated to function
pub inline fn GLEW_WIN_specular_fog() @TypeOf(GLEW_GET_VAR(__GLEW_WIN_specular_fog)) {
    return GLEW_GET_VAR(__GLEW_WIN_specular_fog);
}
pub const GL_WIN_swap_hint = @as(c_int, 1);
// /usr/include/GL/glew.h:22271:9: warning: macro 'glAddSwapHintRectWIN' contains a runtime value, translated to function
pub inline fn glAddSwapHintRectWIN() @TypeOf(GLEW_GET_FUN(__glewAddSwapHintRectWIN)) {
    return GLEW_GET_FUN(__glewAddSwapHintRectWIN);
}
// /usr/include/GL/glew.h:22273:9: warning: macro 'GLEW_WIN_swap_hint' contains a runtime value, translated to function
pub inline fn GLEW_WIN_swap_hint() @TypeOf(GLEW_GET_VAR(__GLEW_WIN_swap_hint)) {
    return GLEW_GET_VAR(__GLEW_WIN_swap_hint);
}
pub const GLEW_OK = @as(c_int, 0);
pub const GLEW_NO_ERROR = @as(c_int, 0);
pub const GLEW_ERROR_NO_GL_VERSION = @as(c_int, 1);
pub const GLEW_ERROR_GL_VERSION_10_ONLY = @as(c_int, 2);
pub const GLEW_ERROR_GLX_VERSION_11_ONLY = @as(c_int, 3);
pub const GLEW_ERROR_NO_GLX_DISPLAY = @as(c_int, 4);
pub const GLEW_VERSION = @as(c_int, 1);
pub const GLEW_VERSION_MAJOR = @as(c_int, 2);
pub const GLEW_VERSION_MINOR = @as(c_int, 3);
pub const GLEW_VERSION_MICRO = @as(c_int, 4);
pub inline fn glewIsExtensionSupported(x: anytype) @TypeOf(glewIsSupported(x)) {
    _ = &x;
    return glewIsSupported(x);
}
pub const GLEW_GET_VAR = @compileError("unable to translate C expr: unexpected token 'const'");
// /usr/include/GL/glew.h:26393:9
pub inline fn GLEW_GET_FUN(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub const _glfw3_h_ = "";
pub const GLFW_APIENTRY_DEFINED = "";
pub const GLFWAPI = "";
pub const GLFW_VERSION_MAJOR = @as(c_int, 3);
pub const GLFW_VERSION_MINOR = @as(c_int, 3);
pub const GLFW_VERSION_REVISION = @as(c_int, 6);
pub const GLFW_TRUE = @as(c_int, 1);
pub const GLFW_FALSE = @as(c_int, 0);
pub const GLFW_RELEASE = @as(c_int, 0);
pub const GLFW_PRESS = @as(c_int, 1);
pub const GLFW_REPEAT = @as(c_int, 2);
pub const GLFW_HAT_CENTERED = @as(c_int, 0);
pub const GLFW_HAT_UP = @as(c_int, 1);
pub const GLFW_HAT_RIGHT = @as(c_int, 2);
pub const GLFW_HAT_DOWN = @as(c_int, 4);
pub const GLFW_HAT_LEFT = @as(c_int, 8);
pub const GLFW_HAT_RIGHT_UP = GLFW_HAT_RIGHT | GLFW_HAT_UP;
pub const GLFW_HAT_RIGHT_DOWN = GLFW_HAT_RIGHT | GLFW_HAT_DOWN;
pub const GLFW_HAT_LEFT_UP = GLFW_HAT_LEFT | GLFW_HAT_UP;
pub const GLFW_HAT_LEFT_DOWN = GLFW_HAT_LEFT | GLFW_HAT_DOWN;
pub const GLFW_KEY_UNKNOWN = -@as(c_int, 1);
pub const GLFW_KEY_SPACE = @as(c_int, 32);
pub const GLFW_KEY_APOSTROPHE = @as(c_int, 39);
pub const GLFW_KEY_COMMA = @as(c_int, 44);
pub const GLFW_KEY_MINUS = @as(c_int, 45);
pub const GLFW_KEY_PERIOD = @as(c_int, 46);
pub const GLFW_KEY_SLASH = @as(c_int, 47);
pub const GLFW_KEY_0 = @as(c_int, 48);
pub const GLFW_KEY_1 = @as(c_int, 49);
pub const GLFW_KEY_2 = @as(c_int, 50);
pub const GLFW_KEY_3 = @as(c_int, 51);
pub const GLFW_KEY_4 = @as(c_int, 52);
pub const GLFW_KEY_5 = @as(c_int, 53);
pub const GLFW_KEY_6 = @as(c_int, 54);
pub const GLFW_KEY_7 = @as(c_int, 55);
pub const GLFW_KEY_8 = @as(c_int, 56);
pub const GLFW_KEY_9 = @as(c_int, 57);
pub const GLFW_KEY_SEMICOLON = @as(c_int, 59);
pub const GLFW_KEY_EQUAL = @as(c_int, 61);
pub const GLFW_KEY_A = @as(c_int, 65);
pub const GLFW_KEY_B = @as(c_int, 66);
pub const GLFW_KEY_C = @as(c_int, 67);
pub const GLFW_KEY_D = @as(c_int, 68);
pub const GLFW_KEY_E = @as(c_int, 69);
pub const GLFW_KEY_F = @as(c_int, 70);
pub const GLFW_KEY_G = @as(c_int, 71);
pub const GLFW_KEY_H = @as(c_int, 72);
pub const GLFW_KEY_I = @as(c_int, 73);
pub const GLFW_KEY_J = @as(c_int, 74);
pub const GLFW_KEY_K = @as(c_int, 75);
pub const GLFW_KEY_L = @as(c_int, 76);
pub const GLFW_KEY_M = @as(c_int, 77);
pub const GLFW_KEY_N = @as(c_int, 78);
pub const GLFW_KEY_O = @as(c_int, 79);
pub const GLFW_KEY_P = @as(c_int, 80);
pub const GLFW_KEY_Q = @as(c_int, 81);
pub const GLFW_KEY_R = @as(c_int, 82);
pub const GLFW_KEY_S = @as(c_int, 83);
pub const GLFW_KEY_T = @as(c_int, 84);
pub const GLFW_KEY_U = @as(c_int, 85);
pub const GLFW_KEY_V = @as(c_int, 86);
pub const GLFW_KEY_W = @as(c_int, 87);
pub const GLFW_KEY_X = @as(c_int, 88);
pub const GLFW_KEY_Y = @as(c_int, 89);
pub const GLFW_KEY_Z = @as(c_int, 90);
pub const GLFW_KEY_LEFT_BRACKET = @as(c_int, 91);
pub const GLFW_KEY_BACKSLASH = @as(c_int, 92);
pub const GLFW_KEY_RIGHT_BRACKET = @as(c_int, 93);
pub const GLFW_KEY_GRAVE_ACCENT = @as(c_int, 96);
pub const GLFW_KEY_WORLD_1 = @as(c_int, 161);
pub const GLFW_KEY_WORLD_2 = @as(c_int, 162);
pub const GLFW_KEY_ESCAPE = @as(c_int, 256);
pub const GLFW_KEY_ENTER = @as(c_int, 257);
pub const GLFW_KEY_TAB = @as(c_int, 258);
pub const GLFW_KEY_BACKSPACE = @as(c_int, 259);
pub const GLFW_KEY_INSERT = @as(c_int, 260);
pub const GLFW_KEY_DELETE = @as(c_int, 261);
pub const GLFW_KEY_RIGHT = @as(c_int, 262);
pub const GLFW_KEY_LEFT = @as(c_int, 263);
pub const GLFW_KEY_DOWN = @as(c_int, 264);
pub const GLFW_KEY_UP = @as(c_int, 265);
pub const GLFW_KEY_PAGE_UP = @as(c_int, 266);
pub const GLFW_KEY_PAGE_DOWN = @as(c_int, 267);
pub const GLFW_KEY_HOME = @as(c_int, 268);
pub const GLFW_KEY_END = @as(c_int, 269);
pub const GLFW_KEY_CAPS_LOCK = @as(c_int, 280);
pub const GLFW_KEY_SCROLL_LOCK = @as(c_int, 281);
pub const GLFW_KEY_NUM_LOCK = @as(c_int, 282);
pub const GLFW_KEY_PRINT_SCREEN = @as(c_int, 283);
pub const GLFW_KEY_PAUSE = @as(c_int, 284);
pub const GLFW_KEY_F1 = @as(c_int, 290);
pub const GLFW_KEY_F2 = @as(c_int, 291);
pub const GLFW_KEY_F3 = @as(c_int, 292);
pub const GLFW_KEY_F4 = @as(c_int, 293);
pub const GLFW_KEY_F5 = @as(c_int, 294);
pub const GLFW_KEY_F6 = @as(c_int, 295);
pub const GLFW_KEY_F7 = @as(c_int, 296);
pub const GLFW_KEY_F8 = @as(c_int, 297);
pub const GLFW_KEY_F9 = @as(c_int, 298);
pub const GLFW_KEY_F10 = @as(c_int, 299);
pub const GLFW_KEY_F11 = @as(c_int, 300);
pub const GLFW_KEY_F12 = @as(c_int, 301);
pub const GLFW_KEY_F13 = @as(c_int, 302);
pub const GLFW_KEY_F14 = @as(c_int, 303);
pub const GLFW_KEY_F15 = @as(c_int, 304);
pub const GLFW_KEY_F16 = @as(c_int, 305);
pub const GLFW_KEY_F17 = @as(c_int, 306);
pub const GLFW_KEY_F18 = @as(c_int, 307);
pub const GLFW_KEY_F19 = @as(c_int, 308);
pub const GLFW_KEY_F20 = @as(c_int, 309);
pub const GLFW_KEY_F21 = @as(c_int, 310);
pub const GLFW_KEY_F22 = @as(c_int, 311);
pub const GLFW_KEY_F23 = @as(c_int, 312);
pub const GLFW_KEY_F24 = @as(c_int, 313);
pub const GLFW_KEY_F25 = @as(c_int, 314);
pub const GLFW_KEY_KP_0 = @as(c_int, 320);
pub const GLFW_KEY_KP_1 = @as(c_int, 321);
pub const GLFW_KEY_KP_2 = @as(c_int, 322);
pub const GLFW_KEY_KP_3 = @as(c_int, 323);
pub const GLFW_KEY_KP_4 = @as(c_int, 324);
pub const GLFW_KEY_KP_5 = @as(c_int, 325);
pub const GLFW_KEY_KP_6 = @as(c_int, 326);
pub const GLFW_KEY_KP_7 = @as(c_int, 327);
pub const GLFW_KEY_KP_8 = @as(c_int, 328);
pub const GLFW_KEY_KP_9 = @as(c_int, 329);
pub const GLFW_KEY_KP_DECIMAL = @as(c_int, 330);
pub const GLFW_KEY_KP_DIVIDE = @as(c_int, 331);
pub const GLFW_KEY_KP_MULTIPLY = @as(c_int, 332);
pub const GLFW_KEY_KP_SUBTRACT = @as(c_int, 333);
pub const GLFW_KEY_KP_ADD = @as(c_int, 334);
pub const GLFW_KEY_KP_ENTER = @as(c_int, 335);
pub const GLFW_KEY_KP_EQUAL = @as(c_int, 336);
pub const GLFW_KEY_LEFT_SHIFT = @as(c_int, 340);
pub const GLFW_KEY_LEFT_CONTROL = @as(c_int, 341);
pub const GLFW_KEY_LEFT_ALT = @as(c_int, 342);
pub const GLFW_KEY_LEFT_SUPER = @as(c_int, 343);
pub const GLFW_KEY_RIGHT_SHIFT = @as(c_int, 344);
pub const GLFW_KEY_RIGHT_CONTROL = @as(c_int, 345);
pub const GLFW_KEY_RIGHT_ALT = @as(c_int, 346);
pub const GLFW_KEY_RIGHT_SUPER = @as(c_int, 347);
pub const GLFW_KEY_MENU = @as(c_int, 348);
pub const GLFW_KEY_LAST = GLFW_KEY_MENU;
pub const GLFW_MOD_SHIFT = @as(c_int, 0x0001);
pub const GLFW_MOD_CONTROL = @as(c_int, 0x0002);
pub const GLFW_MOD_ALT = @as(c_int, 0x0004);
pub const GLFW_MOD_SUPER = @as(c_int, 0x0008);
pub const GLFW_MOD_CAPS_LOCK = @as(c_int, 0x0010);
pub const GLFW_MOD_NUM_LOCK = @as(c_int, 0x0020);
pub const GLFW_MOUSE_BUTTON_1 = @as(c_int, 0);
pub const GLFW_MOUSE_BUTTON_2 = @as(c_int, 1);
pub const GLFW_MOUSE_BUTTON_3 = @as(c_int, 2);
pub const GLFW_MOUSE_BUTTON_4 = @as(c_int, 3);
pub const GLFW_MOUSE_BUTTON_5 = @as(c_int, 4);
pub const GLFW_MOUSE_BUTTON_6 = @as(c_int, 5);
pub const GLFW_MOUSE_BUTTON_7 = @as(c_int, 6);
pub const GLFW_MOUSE_BUTTON_8 = @as(c_int, 7);
pub const GLFW_MOUSE_BUTTON_LAST = GLFW_MOUSE_BUTTON_8;
pub const GLFW_MOUSE_BUTTON_LEFT = GLFW_MOUSE_BUTTON_1;
pub const GLFW_MOUSE_BUTTON_RIGHT = GLFW_MOUSE_BUTTON_2;
pub const GLFW_MOUSE_BUTTON_MIDDLE = GLFW_MOUSE_BUTTON_3;
pub const GLFW_JOYSTICK_1 = @as(c_int, 0);
pub const GLFW_JOYSTICK_2 = @as(c_int, 1);
pub const GLFW_JOYSTICK_3 = @as(c_int, 2);
pub const GLFW_JOYSTICK_4 = @as(c_int, 3);
pub const GLFW_JOYSTICK_5 = @as(c_int, 4);
pub const GLFW_JOYSTICK_6 = @as(c_int, 5);
pub const GLFW_JOYSTICK_7 = @as(c_int, 6);
pub const GLFW_JOYSTICK_8 = @as(c_int, 7);
pub const GLFW_JOYSTICK_9 = @as(c_int, 8);
pub const GLFW_JOYSTICK_10 = @as(c_int, 9);
pub const GLFW_JOYSTICK_11 = @as(c_int, 10);
pub const GLFW_JOYSTICK_12 = @as(c_int, 11);
pub const GLFW_JOYSTICK_13 = @as(c_int, 12);
pub const GLFW_JOYSTICK_14 = @as(c_int, 13);
pub const GLFW_JOYSTICK_15 = @as(c_int, 14);
pub const GLFW_JOYSTICK_16 = @as(c_int, 15);
pub const GLFW_JOYSTICK_LAST = GLFW_JOYSTICK_16;
pub const GLFW_GAMEPAD_BUTTON_A = @as(c_int, 0);
pub const GLFW_GAMEPAD_BUTTON_B = @as(c_int, 1);
pub const GLFW_GAMEPAD_BUTTON_X = @as(c_int, 2);
pub const GLFW_GAMEPAD_BUTTON_Y = @as(c_int, 3);
pub const GLFW_GAMEPAD_BUTTON_LEFT_BUMPER = @as(c_int, 4);
pub const GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER = @as(c_int, 5);
pub const GLFW_GAMEPAD_BUTTON_BACK = @as(c_int, 6);
pub const GLFW_GAMEPAD_BUTTON_START = @as(c_int, 7);
pub const GLFW_GAMEPAD_BUTTON_GUIDE = @as(c_int, 8);
pub const GLFW_GAMEPAD_BUTTON_LEFT_THUMB = @as(c_int, 9);
pub const GLFW_GAMEPAD_BUTTON_RIGHT_THUMB = @as(c_int, 10);
pub const GLFW_GAMEPAD_BUTTON_DPAD_UP = @as(c_int, 11);
pub const GLFW_GAMEPAD_BUTTON_DPAD_RIGHT = @as(c_int, 12);
pub const GLFW_GAMEPAD_BUTTON_DPAD_DOWN = @as(c_int, 13);
pub const GLFW_GAMEPAD_BUTTON_DPAD_LEFT = @as(c_int, 14);
pub const GLFW_GAMEPAD_BUTTON_LAST = GLFW_GAMEPAD_BUTTON_DPAD_LEFT;
pub const GLFW_GAMEPAD_BUTTON_CROSS = GLFW_GAMEPAD_BUTTON_A;
pub const GLFW_GAMEPAD_BUTTON_CIRCLE = GLFW_GAMEPAD_BUTTON_B;
pub const GLFW_GAMEPAD_BUTTON_SQUARE = GLFW_GAMEPAD_BUTTON_X;
pub const GLFW_GAMEPAD_BUTTON_TRIANGLE = GLFW_GAMEPAD_BUTTON_Y;
pub const GLFW_GAMEPAD_AXIS_LEFT_X = @as(c_int, 0);
pub const GLFW_GAMEPAD_AXIS_LEFT_Y = @as(c_int, 1);
pub const GLFW_GAMEPAD_AXIS_RIGHT_X = @as(c_int, 2);
pub const GLFW_GAMEPAD_AXIS_RIGHT_Y = @as(c_int, 3);
pub const GLFW_GAMEPAD_AXIS_LEFT_TRIGGER = @as(c_int, 4);
pub const GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER = @as(c_int, 5);
pub const GLFW_GAMEPAD_AXIS_LAST = GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER;
pub const GLFW_NO_ERROR = @as(c_int, 0);
pub const GLFW_NOT_INITIALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010001, .hex);
pub const GLFW_NO_CURRENT_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010002, .hex);
pub const GLFW_INVALID_ENUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010003, .hex);
pub const GLFW_INVALID_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010004, .hex);
pub const GLFW_OUT_OF_MEMORY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010005, .hex);
pub const GLFW_API_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010006, .hex);
pub const GLFW_VERSION_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010007, .hex);
pub const GLFW_PLATFORM_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010008, .hex);
pub const GLFW_FORMAT_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010009, .hex);
pub const GLFW_NO_WINDOW_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001000A, .hex);
pub const GLFW_FOCUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020001, .hex);
pub const GLFW_ICONIFIED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020002, .hex);
pub const GLFW_RESIZABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020003, .hex);
pub const GLFW_VISIBLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020004, .hex);
pub const GLFW_DECORATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020005, .hex);
pub const GLFW_AUTO_ICONIFY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020006, .hex);
pub const GLFW_FLOATING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020007, .hex);
pub const GLFW_MAXIMIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020008, .hex);
pub const GLFW_CENTER_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020009, .hex);
pub const GLFW_TRANSPARENT_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000A, .hex);
pub const GLFW_HOVERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000B, .hex);
pub const GLFW_FOCUS_ON_SHOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000C, .hex);
pub const GLFW_RED_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021001, .hex);
pub const GLFW_GREEN_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021002, .hex);
pub const GLFW_BLUE_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021003, .hex);
pub const GLFW_ALPHA_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021004, .hex);
pub const GLFW_DEPTH_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021005, .hex);
pub const GLFW_STENCIL_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021006, .hex);
pub const GLFW_ACCUM_RED_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021007, .hex);
pub const GLFW_ACCUM_GREEN_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021008, .hex);
pub const GLFW_ACCUM_BLUE_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021009, .hex);
pub const GLFW_ACCUM_ALPHA_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100A, .hex);
pub const GLFW_AUX_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100B, .hex);
pub const GLFW_STEREO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100C, .hex);
pub const GLFW_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100D, .hex);
pub const GLFW_SRGB_CAPABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100E, .hex);
pub const GLFW_REFRESH_RATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100F, .hex);
pub const GLFW_DOUBLEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021010, .hex);
pub const GLFW_CLIENT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022001, .hex);
pub const GLFW_CONTEXT_VERSION_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022002, .hex);
pub const GLFW_CONTEXT_VERSION_MINOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022003, .hex);
pub const GLFW_CONTEXT_REVISION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022004, .hex);
pub const GLFW_CONTEXT_ROBUSTNESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022005, .hex);
pub const GLFW_OPENGL_FORWARD_COMPAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022006, .hex);
pub const GLFW_OPENGL_DEBUG_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022007, .hex);
pub const GLFW_OPENGL_PROFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022008, .hex);
pub const GLFW_CONTEXT_RELEASE_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022009, .hex);
pub const GLFW_CONTEXT_NO_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200A, .hex);
pub const GLFW_CONTEXT_CREATION_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200B, .hex);
pub const GLFW_SCALE_TO_MONITOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200C, .hex);
pub const GLFW_COCOA_RETINA_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00023001, .hex);
pub const GLFW_COCOA_FRAME_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00023002, .hex);
pub const GLFW_COCOA_GRAPHICS_SWITCHING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00023003, .hex);
pub const GLFW_X11_CLASS_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00024001, .hex);
pub const GLFW_X11_INSTANCE_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00024002, .hex);
pub const GLFW_NO_API = @as(c_int, 0);
pub const GLFW_OPENGL_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030001, .hex);
pub const GLFW_OPENGL_ES_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030002, .hex);
pub const GLFW_NO_ROBUSTNESS = @as(c_int, 0);
pub const GLFW_NO_RESET_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00031001, .hex);
pub const GLFW_LOSE_CONTEXT_ON_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00031002, .hex);
pub const GLFW_OPENGL_ANY_PROFILE = @as(c_int, 0);
pub const GLFW_OPENGL_CORE_PROFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00032001, .hex);
pub const GLFW_OPENGL_COMPAT_PROFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00032002, .hex);
pub const GLFW_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033001, .hex);
pub const GLFW_STICKY_KEYS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033002, .hex);
pub const GLFW_STICKY_MOUSE_BUTTONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033003, .hex);
pub const GLFW_LOCK_KEY_MODS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033004, .hex);
pub const GLFW_RAW_MOUSE_MOTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033005, .hex);
pub const GLFW_CURSOR_NORMAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034001, .hex);
pub const GLFW_CURSOR_HIDDEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034002, .hex);
pub const GLFW_CURSOR_DISABLED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034003, .hex);
pub const GLFW_ANY_RELEASE_BEHAVIOR = @as(c_int, 0);
pub const GLFW_RELEASE_BEHAVIOR_FLUSH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00035001, .hex);
pub const GLFW_RELEASE_BEHAVIOR_NONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00035002, .hex);
pub const GLFW_NATIVE_CONTEXT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036001, .hex);
pub const GLFW_EGL_CONTEXT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036002, .hex);
pub const GLFW_OSMESA_CONTEXT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036003, .hex);
pub const GLFW_ARROW_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036001, .hex);
pub const GLFW_IBEAM_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036002, .hex);
pub const GLFW_CROSSHAIR_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036003, .hex);
pub const GLFW_HAND_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036004, .hex);
pub const GLFW_HRESIZE_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036005, .hex);
pub const GLFW_VRESIZE_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036006, .hex);
pub const GLFW_CONNECTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040001, .hex);
pub const GLFW_DISCONNECTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040002, .hex);
pub const GLFW_JOYSTICK_HAT_BUTTONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00050001, .hex);
pub const GLFW_COCOA_CHDIR_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00051001, .hex);
pub const GLFW_COCOA_MENUBAR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00051002, .hex);
pub const GLFW_DONT_CARE = -@as(c_int, 1);
pub const __GLsync = struct___GLsync;
pub const _cl_context = struct__cl_context;
pub const _cl_event = struct__cl_event;
